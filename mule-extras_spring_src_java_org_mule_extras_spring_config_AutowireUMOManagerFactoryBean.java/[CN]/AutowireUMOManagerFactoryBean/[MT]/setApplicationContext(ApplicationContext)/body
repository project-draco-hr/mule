{
  context=(AbstractApplicationContext)applicationContext;
  try {
    Map temp=context.getBeansOfType(MuleConfiguration.class,true,true);
    if (temp.size() > 0)     MuleManager.setConfiguration((MuleConfiguration)temp.values().iterator().next());
    setProperties((Map)getBean(MULE_ENVIRONMENT_PROPERTIES_BEAN_NAME,Map.class));
    Map connectors=context.getBeansOfType(UMOConnector.class,true,true);
    setConnectors(connectors.values());
    setMessageEndpoints((Map)getBean(MULE_ENDPOINT_IDENTIFIERS_BEAN_NAME,Map.class));
    temp=context.getBeansOfType(UMOTransactionManagerFactory.class,true,true);
    if (temp.size() > 0)     manager.setTransactionManager(((UMOTransactionManagerFactory)temp.values().iterator().next()).create());
    temp=context.getBeansOfType(UMOSecurityManager.class,true,true);
    if (temp.size() > 0)     manager.setSecurityManager((UMOSecurityManager)temp.values().iterator().next());
    Map endpoints=context.getBeansOfType(UMOEndpoint.class,true,true);
    setProviders(endpoints.values());
    Map agents=context.getBeansOfType(UMOAgent.class,true,true);
    setAgents(agents.values());
    Map containers=context.getBeansOfType(UMOContainerContext.class,true,true);
    setContainerContext(containers);
    Map transformers=context.getBeansOfType(UMOTransformer.class,true,true);
    setTransformers(transformers.values());
    Map interceptors=(Map)getBean(MULE_INTERCEPTOR_STACK_BEAN_NAME,Map.class);
    setInterceptorStacks(interceptors);
    createModel();
    Map components=context.getBeansOfType(UMODescriptor.class,true,true);
    setComponents(components.values());
  }
 catch (  Exception e) {
    throw new BeanInitializationException("Failed to wrie MuleManager together: " + e.getMessage(),e);
  }
}
