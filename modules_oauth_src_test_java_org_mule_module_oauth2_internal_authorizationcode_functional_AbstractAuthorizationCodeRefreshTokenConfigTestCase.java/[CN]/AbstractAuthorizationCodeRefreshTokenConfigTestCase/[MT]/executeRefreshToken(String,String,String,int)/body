{
  configureWireMockToExpectTokenPathRequestForAuthorizationCodeGrantType(REFRESHED_ACCESS_TOKEN);
  wireMockRule.stubFor(post(urlEqualTo(RESOURCE_PATH)).withHeader(HttpHeaders.Names.AUTHORIZATION,containing(REFRESHED_ACCESS_TOKEN)).willReturn(aResponse().withStatus(200).withBody(RESOURCE_RESULT)));
  wireMockRule.stubFor(post(urlEqualTo(RESOURCE_PATH)).withHeader(HttpHeaders.Names.AUTHORIZATION,containing(ACCESS_TOKEN)).willReturn(aResponse().withStatus(failureStatusCode).withBody("")));
  final ConfigOAuthContext configOAuthContext=muleContext.getRegistry().<TokenManagerConfig>lookupObject(oauthConfigName).getConfigOAuthContext();
  final ResourceOwnerOAuthContext resourceOwnerOauthContext=configOAuthContext.getContextForResourceOwner(userId);
  resourceOwnerOauthContext.setAccessToken(ACCESS_TOKEN);
  resourceOwnerOauthContext.setRefreshToken(REFRESH_TOKEN);
  configOAuthContext.updateResourceOwnerOAuthContext(resourceOwnerOauthContext);
  Flow flow=(Flow)getFlowConstruct(flowName);
  final MuleEvent testEvent=getTestEvent("message");
  testEvent.setFlowVariable("userId",userId);
  final MuleEvent result=flow.process(testEvent);
  assertThat(result.getMessage().getPayloadAsString(),is(RESOURCE_RESULT));
  wireMockRule.verify(postRequestedFor(urlEqualTo(TOKEN_PATH)).withRequestBody(containing(OAuthConstants.CLIENT_ID_PARAMETER + "=" + URLEncoder.encode(clientId.getValue(),StandardCharsets.UTF_8.name()))).withRequestBody(containing(OAuthConstants.REFRESH_TOKEN_PARAMETER + "=" + URLEncoder.encode(REFRESH_TOKEN,StandardCharsets.UTF_8.name()))).withRequestBody(containing(OAuthConstants.CLIENT_SECRET_PARAMETER + "=" + URLEncoder.encode(clientSecret.getValue(),StandardCharsets.UTF_8.name()))).withRequestBody(containing(OAuthConstants.GRANT_TYPE_PARAMETER + "=" + URLEncoder.encode(OAuthConstants.GRANT_TYPE_REFRESH_TOKEN,StandardCharsets.UTF_8.name()))));
}
