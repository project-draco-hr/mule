{
  Map<String,String> packages=new HashMap<>();
  Set<String> modules=new HashSet<>();
  Set<String> resources=new HashSet<>();
  resources.add("/META-INF/services");
  try {
    for (    Properties muleModule : discoverProperties(MODULE_PROPERTIES)) {
      final String moduleName=(String)muleModule.get("module.name");
      if (isEmpty(moduleName)) {
        throw new IllegalStateException("Mule-module.properties must contain module.name property");
      }
      if (modules.contains(moduleName)) {
        throw new IllegalStateException(String.format("Module '%s' was already defined",moduleName));
      }
      modules.add(moduleName);
      final String exportedPackagesProperty=(String)muleModule.get(EXPORTED_CLASS_PACKAGES_PROPERTY);
      if (!isEmpty(exportedPackagesProperty)) {
        for (        String packageName : exportedPackagesProperty.split(",")) {
          packageName=packageName.trim();
          if (!isEmpty(packageName)) {
            packages.put(packageName,moduleName);
          }
        }
      }
      final String exportedResourcesProperty=(String)muleModule.get(EXPORTED_RESOURCE_PACKAGES_PROPERTY);
      if (!isEmpty(exportedResourcesProperty)) {
        for (        String resource : exportedResourcesProperty.split(",")) {
          if (!isEmpty(resource.trim())) {
            if (resource.startsWith("/")) {
              resource=resource.substring(1);
            }
            resources.add(resource);
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException("Cannot discover mule modules",e);
  }
  final ArtifactClassLoaderFilter artifactClassLoaderFilter=new ArtifactClassLoaderFilter(packages.keySet(),resources);
  return new ContainerClassLoaderFilter(artifactClassLoaderFilter,bootPackages);
}
