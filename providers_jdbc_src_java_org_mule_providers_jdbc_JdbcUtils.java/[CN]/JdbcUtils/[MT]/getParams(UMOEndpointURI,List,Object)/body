{
  Object[] params=new Object[paramNames.size()];
  for (int i=0; i < paramNames.size(); i++) {
    String param=(String)paramNames.get(i);
    String name=param.substring(2,param.length() - 1);
    Object value=null;
    if ("NOW".equalsIgnoreCase(name)) {
      value=new Timestamp(Calendar.getInstance().getTimeInMillis());
    }
 else     if (root instanceof org.w3c.dom.Document) {
      org.w3c.dom.Document x3cDoc=(org.w3c.dom.Document)root;
      org.dom4j.Document dom4jDoc=new DOMReader().read(x3cDoc);
      try {
        Node node=dom4jDoc.selectSingleNode(name);
        if (node != null) {
          value=node.getText();
        }
      }
 catch (      Exception ignored) {
        value=null;
      }
    }
 else     if (root instanceof org.dom4j.Document) {
      org.dom4j.Document dom4jDoc=(org.dom4j.Document)root;
      try {
        Node node=dom4jDoc.selectSingleNode(name);
        if (node != null) {
          value=node.getText();
        }
      }
 catch (      Exception ignored) {
        value=null;
      }
    }
 else {
      try {
        value=BeanUtils.getProperty(root,name);
      }
 catch (      Exception ignored) {
        value=null;
      }
    }
    if (value == null) {
      value=uri.getParams().getProperty(name);
    }
    if (name.equals("payload")) {
      value=root;
    }
    if (value == null) {
      throw new IllegalArgumentException("Can not retrieve argument " + name);
    }
    params[i]=value;
  }
  return params;
}
