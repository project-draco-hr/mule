{
  final MessageProcessor listenerMessageProcessor=new MessageProcessor(){
    @Override public MuleEvent process(    MuleEvent muleEvent) throws MuleException {
      final String onCompleteRedirectToValue=((Map<String,String>)muleEvent.getMessage().getInboundProperty("http.query.params")).get("onCompleteRedirectTo");
      final String resourceOwnerId=getOauthConfig().getLocalAuthorizationUrlResourceOwnerIdEvaluator().resolveStringValue(muleEvent);
      muleEvent.setFlowVariable(OAUTH_STATE_ID_FLOW_VAR_NAME,resourceOwnerId);
      final String stateValue=stateEvaluator.resolveStringValue(muleEvent);
      String currentState=stateValue;
      if (resourceOwnerId != null) {
        currentState=StateEncoder.encodeResourceOwnerIdInState(stateValue,resourceOwnerId);
      }
      if (onCompleteRedirectToValue != null) {
        currentState=StateEncoder.encodeOnCompleteRedirectToInState(currentState,onCompleteRedirectToValue);
      }
      final String authorizationUrlWithParams=new AuthorizationRequestUrlBuilder().setAuthorizationUrl(authorizationUrl).setClientId(oauthConfig.getClientId()).setClientSecret(oauthConfig.getClientSecret()).setCustomParameters(customParameters).setRedirectUrl(oauthConfig.getRedirectionUrl()).setState(currentState).setScope(scopes).buildUrl();
      muleEvent.getMessage().setOutboundProperty(HttpHeaders.Names.LOCATION,authorizationUrlWithParams);
      return muleEvent;
    }
  }
;
  return Arrays.asList(listenerMessageProcessor);
}
