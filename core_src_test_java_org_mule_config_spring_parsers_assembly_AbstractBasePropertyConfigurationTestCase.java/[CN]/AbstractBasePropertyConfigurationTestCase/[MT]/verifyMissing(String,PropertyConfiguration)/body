{
  assertEquals(prefix + ALIAS,config.getAttributeMapping(prefix + ALIAS));
  assertEquals(prefix + ALIAS,config.translateName(prefix + ALIAS));
  assertEquals(prefix + UNUSED,config.getAttributeMapping(prefix + UNUSED));
  assertEquals(false,config.isCollection(prefix + COLLECTION));
  assertEquals(false,config.isCollection(prefix + UNUSED));
  assertEquals(false,config.isIgnored(prefix + IGNORED));
  assertEquals(false,config.isIgnored(prefix + UNUSED));
  assertEquals("a",config.translateValue(prefix + MAP_CAPS,"a"));
  assertEquals("a",config.translateValue(prefix + UNUSED,"a"));
  assertEquals("z",config.translateValue(prefix + MAP_CAPS,"z"));
  assertEquals("z",config.translateValue(prefix + UNUSED,"z"));
  assertEquals("1",config.translateValue(prefix + MAP_CAPS,"1"));
  assertEquals("one",config.translateValue(prefix + MAP_DIGITS,"one"));
  assertEquals("two",config.translateValue(prefix + MAP_DIGITS,"two"));
  assertEquals("three",config.translateValue(prefix + MAP_DIGITS,"three"));
  assertEquals("four",config.translateValue(prefix + MAP_DIGITS,"four"));
  assertEquals("one",config.translateValue(prefix + UNUSED,"one"));
}
