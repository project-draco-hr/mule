{
  setRegistry(parserContext.getRegistry());
  parserContext.getContainingBeanDefinition();
  this.parserContext=parserContext;
  Class beanClass=getBeanClass(element);
  Assert.state(beanClass != null,"Class returned from getBeanClass(Element) must not be null, element is: " + element.getNodeName());
  BeanDefinitionBuilder builder=createBeanDefinitionBuilder(element,beanClass);
  builder.setSource(parserContext.extractSource(element));
  if (parserContext.isNested()) {
    builder.setSingleton(parserContext.getContainingBeanDefinition().isSingleton());
  }
  doParse(element,parserContext,builder);
  MutablePropertyValues parentProperties=getParentBeanDefinition(element).getPropertyValues();
  for (int i=0; i < builder.getBeanDefinition().getPropertyValues().getPropertyValues().length; i++) {
    PropertyValue newPropertyValue=builder.getBeanDefinition().getPropertyValues().getPropertyValues()[i];
    String name=newPropertyValue.getName();
    Object value=newPropertyValue.getValue();
    if (!propertyToolkit.isIgnored(name)) {
      if (propertyToolkit.isCollection(name)) {
        Collection values=new HashSet();
        if (parentProperties.contains(name)) {
          values=(Collection)parentProperties.getPropertyValue(name).getValue();
          parentProperties.removePropertyValue(name);
        }
        values.add(value);
        parentProperties.addPropertyValue(name,values);
      }
 else {
        parentProperties.addPropertyValue(name,value);
      }
    }
  }
  AbstractBeanDefinition bd=(AbstractBeanDefinition)parserContext.getContainingBeanDefinition();
  bd.setAttribute(COMPOUND_ELEMENT,Boolean.TRUE);
  return bd;
}
