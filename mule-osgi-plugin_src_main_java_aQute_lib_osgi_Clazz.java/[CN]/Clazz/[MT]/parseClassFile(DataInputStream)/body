{
  xref=new HashSet<String>();
  classes=new HashSet<Integer>();
  descriptors=new HashSet<Integer>();
  boolean crawl=false;
  int magic=in.readInt();
  if (magic != 0xCAFEBABE)   throw new IOException("Not a valid class file (no CAFEBABE header)");
  minor=in.readUnsignedShort();
  major=in.readUnsignedShort();
  int count=in.readUnsignedShort();
  pool=new Object[count];
  intPool=new int[count];
  process:   for (int poolIndex=1; poolIndex < count; poolIndex++) {
    byte tag=in.readByte();
switch (tag) {
case 0:
      break process;
case 1:
    constantUtf8(in,poolIndex);
  break;
case 5:
constantLong(in,poolIndex);
poolIndex++;
break;
case 6:
constantDouble(in,poolIndex);
poolIndex++;
break;
case 7:
constantClass(in,poolIndex);
break;
case 8:
constantString(in,poolIndex);
break;
case 10:
methodRef(in,poolIndex);
break;
case 12:
nameAndType(in,poolIndex,tag);
break;
default :
if (tag == 2) throw new IOException("Invalid tag " + tag);
in.skipBytes(SkipTable[tag]);
break;
}
}
pool(pool,intPool);
in.readUnsignedShort();
int this_class=in.readUnsignedShort();
int super_class=in.readUnsignedShort();
zuper=(String)pool[intPool[super_class]];
if (zuper != null) {
addReference(zuper);
}
className=(String)pool[intPool[this_class]];
int interfacesCount=in.readUnsignedShort();
if (interfacesCount > 0) {
interfaces=new String[interfacesCount];
for (int i=0; i < interfacesCount; i++) interfaces[i]=(String)pool[intPool[in.readUnsignedShort()]];
}
int fieldsCount=in.readUnsignedShort();
for (int i=0; i < fieldsCount; i++) {
in.readUnsignedShort();
int name_index=in.readUnsignedShort();
int descriptor_index=in.readUnsignedShort();
String name=pool[name_index].toString();
if (name.startsWith("class$")) {
crawl=true;
}
descriptors.add(new Integer(descriptor_index));
doAttributes(in,false);
}
if (crawl) {
forName=findMethod("java/lang/Class","forName","(Ljava/lang/String;)Ljava/lang/Class;");
class$=findMethod(className,"class$","(Ljava/lang/String;)Ljava/lang/Class;");
}
int methodCount=in.readUnsignedShort();
for (int i=0; i < methodCount; i++) {
in.readUnsignedShort();
in.readUnsignedShort();
int descriptor_index=in.readUnsignedShort();
descriptors.add(new Integer(descriptor_index));
doAttributes(in,crawl);
}
doAttributes(in,false);
for (Iterator<Integer> e=classes.iterator(); e.hasNext(); ) {
int class_index=e.next().shortValue();
doClassReference((String)pool[class_index]);
}
for (Iterator<Integer> e=descriptors.iterator(); e.hasNext(); ) {
Integer index=e.next();
String prototype=(String)pool[index.intValue()];
if (prototype != null) parseDescriptor(prototype);
 else System.err.println("Unrecognized descriptor: " + index);
}
Set<String> xref=this.xref;
reset();
return xref;
}
