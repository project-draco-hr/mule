{
  StringBuilder expected=new StringBuilder();
  Flow flow=getFlow("dynamicFlow");
  LifecycleMessageProcessor lifecycleMessageProcessor=new LifecycleMessageProcessor();
  String pipelineId=flow.dynamicPipeline(null).injectBefore(lifecycleMessageProcessor).resetAndUpdate();
  MuleEvent muleEvent=runFlow("dynamicFlow","source->");
  MuleMessage result=muleEvent.getMessage();
  assertEquals("source->(pre)(static)",getPayloadAsString(result));
  assertEquals(expected.append("ISP").toString(),lifecycleMessageProcessor.getSteps());
  muleEvent=runFlow("dynamicFlow","source->");
  result=muleEvent.getMessage();
  assertEquals("source->(pre)(static)",getPayloadAsString(result));
  assertEquals(expected.append("P").toString(),lifecycleMessageProcessor.getSteps());
  flow.dynamicPipeline(pipelineId).reset();
  assertEquals(expected.append("TD").toString(),lifecycleMessageProcessor.getSteps());
  muleEvent=runFlow("dynamicFlow","source->");
  result=muleEvent.getMessage();
  assertEquals("source->(static)",getPayloadAsString(result));
  assertEquals(expected.toString(),lifecycleMessageProcessor.getSteps());
}
