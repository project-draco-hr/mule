{
  try {
    setRequestLine(message);
    Header[] headers=HttpParser.parseHeaders(message);
    for (int i=0; i < headers.length; i++) {
      setProperty(headers[i].getName(),headers[i].getValue());
    }
    if (method.equals(HttpConstants.METHOD_GET)) {
      this.message=request;
    }
 else {
      boolean contentLengthNotSet=getProperty(HttpConstants.HEADER_CONTENT_LENGTH,null) == null;
      int contentLength=Integer.parseInt((String)getProperty(HttpConstants.HEADER_CONTENT_LENGTH,String.valueOf(1024 * 32)));
      byte[] buffer=new byte[contentLength];
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      int len=0;
      int bytesWritten=0;
      while (bytesWritten != contentLength) {
        len=message.read(buffer);
        if (len != -1) {
          baos.write(buffer,0,len);
          bytesWritten+=len;
          if (contentLengthNotSet) {
            contentLength=bytesWritten;
          }
        }
      }
      if (isText((String)getProperty(HttpConstants.HEADER_CONTENT_TYPE))) {
        this.message=new String(baos.toByteArray());
      }
 else {
        this.message=baos.toString();
      }
      baos.close();
    }
  }
 catch (  Exception e) {
    throw new MessageException("Failed to parse Http Headers: " + e,e);
  }
}
