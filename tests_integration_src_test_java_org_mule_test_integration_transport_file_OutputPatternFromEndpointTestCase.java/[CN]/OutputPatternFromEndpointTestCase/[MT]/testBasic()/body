{
  String myFirstDirName="FirstWrite";
  String mySecondDirName="SecondWrite";
  final String myFileName1="export.txt";
  final String myFileName2="export.txt.OK";
  final File myDir=FileUtils.newFile(myFirstDirName);
  if (myDir.isDirectory()) {
    File[] files=myDir.listFiles();
    for (int i=0; i < files.length; i++) {
      assertTrue(files[i].delete());
    }
    assertTrue(myDir.delete());
  }
  final File myDir2=FileUtils.newFile(mySecondDirName);
  if (myDir2.isDirectory()) {
    File[] files=myDir2.listFiles();
    for (int i=0; i < files.length; i++) {
      assertTrue(files[i].delete());
    }
    assertTrue(myDir2.delete());
  }
  try {
    assertFalse(FileUtils.newFile(myDir,myFileName1).exists());
    assertFalse(FileUtils.newFile(myDir2,myFileName2).exists());
    MuleClient client=new MuleClient(muleContext);
    client.send("vm://filesend","Hello",null);
    assertTrue(fileReceiveLatch.await(30,TimeUnit.SECONDS));
    Prober prober=new PollingProber(2000,50);
    prober.check(new Probe(){
      @Override public boolean isSatisfied(){
        return FileUtils.newFile(myDir,myFileName1).exists() && FileUtils.newFile(myDir2,myFileName2).exists();
      }
      @Override public String describeFailure(){
        return "Failed to create the expected files";
      }
    }
);
  }
 catch (  AssertionFailedError e1) {
    e1.printStackTrace();
  }
 finally {
    FileUtils.newFile(myDir,myFileName1).delete();
    FileUtils.newFile(myDir2,myFileName2).delete();
    myDir.delete();
    myDir2.delete();
  }
}
