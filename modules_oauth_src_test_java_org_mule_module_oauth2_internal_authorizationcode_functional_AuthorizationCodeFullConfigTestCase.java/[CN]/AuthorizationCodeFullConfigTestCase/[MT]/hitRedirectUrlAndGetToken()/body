{
  final ImmutableMap<Object,Object> tokenUrlResponseParameters=ImmutableMap.builder().put(OAuthConstants.ACCESS_TOKEN_PARAMETER,ACCESS_TOKEN).put(OAuthConstants.EXPIRES_IN_PARAMETER,EXPIRES_IN).put(OAuthConstants.REFRESH_TOKEN_PARAMETER,REFRESH_TOKEN).put(customTokenResponseParameter1Name.getValue(),CUSTOM_RESPONSE_PARAMETER1_VALUE).put(customTokenResponseParameter2Name.getValue(),CUSTOM_RESPONSE_PARAMETER2_VALUE).build();
  wireMockRule.stubFor(post(urlEqualTo(TOKEN_PATH)).willReturn(aResponse().withHeader(HttpHeaders.Names.CONTENT_TYPE,HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED).withBody(HttpParser.encodeString("UTF-8",tokenUrlResponseParameters))));
  final ImmutableMap<Object,Object> redirectUrlQueryParams=ImmutableMap.builder().put(OAuthConstants.CODE_PARAMETER,AUTHENTICATION_CODE).put(OAuthConstants.STATE_PARAMETER,state.getValue()).build();
  TlsContextFactory defaultTlsContextFactory=new TlsContextFactoryBuilder(muleContext).buildDefault();
  muleContext.getClient().send(redirectUrl.getValue() + "?" + HttpParser.encodeQueryString(redirectUrlQueryParams),new DefaultMuleMessage(NullPayload.getInstance(),muleContext),newOptions().tlsContextFactory(defaultTlsContextFactory).build());
  verifyRequestDoneToTokenUrlForAuthorizationCode();
  OAuthContextFunctionAsserter.createFrom(muleContext.getExpressionLanguage(),"tokenManagerConfig").assertAccessTokenIs(ACCESS_TOKEN).assertExpiresInIs(EXPIRES_IN).assertRefreshTokenIs(REFRESH_TOKEN).assertState(state.getValue()).assertContainsCustomTokenResponseParam(customTokenResponseParameter1Name.getValue(),CUSTOM_RESPONSE_PARAMETER1_VALUE).assertContainsCustomTokenResponseParam(customTokenResponseParameter2Name.getValue(),CUSTOM_RESPONSE_PARAMETER2_VALUE);
}
