{
  try {
    final MessageImpl m=new MessageImpl();
    final MuleMessage muleReqMsg=ctx.getMessage();
    String method=muleReqMsg.getInboundProperty(HttpConnector.HTTP_METHOD_PROPERTY);
    String ct=muleReqMsg.getInboundProperty(HttpConstants.HEADER_CONTENT_TYPE);
    if (ct != null) {
      m.put(Message.CONTENT_TYPE,ct);
    }
    String path=muleReqMsg.getInboundProperty(HttpConnector.HTTP_REQUEST_PATH_PROPERTY);
    if (path == null) {
      path="";
    }
    if (method != null) {
      m.put(Message.HTTP_REQUEST_METHOD,method);
      m.put(Message.PATH_INFO,path);
      Object basePath=muleReqMsg.getInboundProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY);
      m.put(Message.BASE_PATH,basePath);
      method=method.toUpperCase();
    }
    if (!"GET".equals(method)) {
      Object payload=ctx.getMessage().getPayload();
      setPayload(ctx,m,payload);
    }
    String soapAction=getSoapAction(ctx.getMessage());
    m.put(org.mule.transport.soap.SoapConstants.SOAP_ACTION_PROPERTY_CAPS,soapAction);
    Server server=receiver.getServer();
    org.apache.cxf.transport.Destination d=server.getDestination();
    m.put(LocalConduit.DIRECT_DISPATCH,Boolean.TRUE);
    m.put(MuleProperties.MULE_EVENT_PROPERTY,RequestContext.getEvent());
    m.setDestination(d);
    OutputHandler outputHandler=new OutputHandler(){
      public void write(      MuleEvent event,      OutputStream out) throws IOException {
        Message outFaultMessage=m.getExchange().getOutFaultMessage();
        Message outMessage=m.getExchange().getOutMessage();
        Message contentMsg=null;
        if (outFaultMessage != null && outFaultMessage.getContent(OutputStream.class) != null) {
          contentMsg=outFaultMessage;
        }
 else         if (outMessage != null) {
          contentMsg=outMessage;
        }
        if (contentMsg == null) {
          return;
        }
        DelegatingOutputStream delegate=contentMsg.getContent(DelegatingOutputStream.class);
        out.write(((ByteArrayOutputStream)delegate.getOutputStream()).toByteArray());
        delegate.setOutputStream(out);
        out.flush();
        contentMsg.getInterceptorChain().resume();
      }
    }
;
    DefaultMuleMessage muleResMsg=new DefaultMuleMessage(outputHandler,muleReqMsg,ctx.getMuleContext());
    Object p=muleReqMsg.getOutboundProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY);
    if (p != null) {
      muleResMsg.setOutboundProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY,p);
    }
    p=muleReqMsg.getOutboundProperty(MuleProperties.MULE_CORRELATION_GROUP_SIZE_PROPERTY);
    if (p != null) {
      muleResMsg.setOutboundProperty(MuleProperties.MULE_CORRELATION_GROUP_SIZE_PROPERTY,p);
    }
    p=muleReqMsg.getOutboundProperty(MuleProperties.MULE_CORRELATION_SEQUENCE_PROPERTY);
    if (p != null) {
      muleResMsg.setOutboundProperty(MuleProperties.MULE_CORRELATION_SEQUENCE_PROPERTY,p);
    }
    boolean protocolReplyTo=false;
    InboundEndpoint endpoint=receiver.getEndpoint();
    if (endpoint.getExchangePattern().hasResponse() && endpoint.getEndpointURI().getScheme().equals("jms")) {
      protocolReplyTo=true;
      muleReqMsg.setProperty(MuleProperties.MULE_REPLY_TO_STOP_PROPERTY,"true",PropertyScope.INVOCATION);
    }
    ExchangeImpl exchange=new ExchangeImpl();
    exchange.setInMessage(m);
    m.put(CxfConstants.MULE_MESSAGE,muleReqMsg);
    exchange.put(CxfConstants.MULE_MESSAGE,muleResMsg);
    d.getMessageObserver().onMessage(m);
    Message faultMsg=m.getExchange().getOutFaultMessage();
    if (faultMsg != null) {
      Exception ex=faultMsg.getContent(Exception.class);
      if (ex != null) {
        ExceptionPayload exceptionPayload=new DefaultExceptionPayload(new Exception(""));
        ctx.getMessage().setExceptionPayload(exceptionPayload);
        muleResMsg.setProperty(HttpConnector.HTTP_STATUS_PROPERTY,500);
      }
    }
    if (protocolReplyTo) {
      muleResMsg.removeProperty(MuleProperties.MULE_REPLY_TO_STOP_PROPERTY);
    }
 else {
      muleResMsg.setProperty(MuleProperties.MULE_REPLY_TO_STOP_PROPERTY,"true",PropertyScope.INVOCATION);
    }
    return muleResMsg;
  }
 catch (  MuleException e) {
    logger.warn("Could not dispatch message to CXF!",e);
    throw e;
  }
}
