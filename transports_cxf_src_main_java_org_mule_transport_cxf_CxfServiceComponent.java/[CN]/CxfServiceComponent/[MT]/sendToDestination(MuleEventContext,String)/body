{
  try {
    MessageImpl m=new MessageImpl();
    Object payload=ctx.transformMessage();
    if (payload instanceof InputStream) {
      m.put(Message.ENCODING,ctx.getEncoding());
      m.setContent(InputStream.class,payload);
    }
 else     if (payload instanceof Reader) {
      m.setContent(XMLStreamReader.class,StaxUtils.createXMLStreamReader((Reader)payload));
    }
 else     if (payload instanceof byte[]) {
      m.setContent(InputStream.class,new ByteArrayInputStream((byte[])payload));
    }
 else {
      InputStream is=(InputStream)ctx.transformMessage(InputStream.class);
      m.put(Message.ENCODING,ctx.getEncoding());
      m.setContent(InputStream.class,is);
    }
    String soapAction=getSoapAction(ctx.getMessage());
    m.put(org.mule.transport.soap.SoapConstants.SOAP_ACTION_PROPERTY_CAPS,soapAction);
    EndpointInfo ei=receiver.getServer().getEndpoint().getEndpointInfo();
    MuleUniversalDestination d=(MuleUniversalDestination)universalTransport.getDestination(ei);
    if (d.getMessageObserver() == null) {
      throw new EndpointNotFoundException(uri);
    }
    ResponseListener obs=new ResponseListener();
    m.put(MuleUniversalDestination.RESPONSE_OBSERVER,obs);
    m.put(LocalConduit.DIRECT_DISPATCH,Boolean.TRUE);
    m.setDestination(d);
    d.getMessageObserver().onMessage(m);
    Object result=obs.getCachedStream().getOut().toString();
    Message resMsg=obs.getMessage();
    Exception ex=resMsg.getContent(Exception.class);
    if (ex != null) {
      ExceptionPayload exceptionPayload=new DefaultExceptionPayload(new Exception(result.toString()));
      ctx.getMessage().setExceptionPayload(exceptionPayload);
    }
    return result;
  }
 catch (  MuleException e) {
    logger.warn("Could not dispatch message to XFire!",e);
    throw e;
  }
}
