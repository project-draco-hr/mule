{
  HttpResponseTransformer httpResponsetransformer=createHttpResponseTransformer();
  CacheControlHeader cacheControl=new CacheControlHeader();
  cacheControl.setMaxAge("3600");
  httpResponsetransformer.setCacheControl(cacheControl);
  Map<String,String> headers=new HashMap<String,String>();
  headers.put(HttpConstants.HEADER_CACHE_CONTROL,"public");
  headers.put(HttpConstants.HEADER_AGE,"12");
  httpResponsetransformer.setHeaders(headers);
  Map<String,Object> outboundProperties=new HashMap<String,Object>();
  outboundProperties.put(HttpConstants.HEADER_CACHE_CONTROL,"no-cache");
  outboundProperties.put(HttpConstants.HEADER_AGE,"20");
  outboundProperties.put(HttpConstants.HEADER_LOCATION,"http://localhost:9090");
  Set<String> outboundHeaderNames=outboundProperties.keySet();
  when(mockMuleMessage.getOutboundPropertyNames()).thenReturn(outboundHeaderNames);
  for (  String outboundHeaderName : outboundHeaderNames) {
    when(mockMuleMessage.getOutboundProperty(outboundHeaderName)).thenReturn(outboundProperties.get(outboundHeaderName));
  }
  HttpResponse httpResponse=(HttpResponse)httpResponsetransformer.transformMessage(mockMuleMessage,"UTF-8");
  Header[] resultHeaders=httpResponse.getHeaders();
  validateHeader(resultHeaders,HttpConstants.HEADER_CACHE_CONTROL,"max-age=3600,public");
  validateHeader(resultHeaders,HttpConstants.HEADER_AGE,"12");
  validateHeader(resultHeaders,HttpConstants.HEADER_LOCATION,"http://localhost:9090");
}
