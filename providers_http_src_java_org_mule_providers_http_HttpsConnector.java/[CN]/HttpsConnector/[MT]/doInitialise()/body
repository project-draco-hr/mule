{
  if (getProvider() == null)   throw new NullPointerException("The security provider cannot be null");
  if (getKeyStore() == null)   throw new NullPointerException("The KeyStore location cannot be null");
  if (getKeyPassword() == null)   throw new NullPointerException("The Key password cannot be null");
  if (getStorePassword() == null)   throw new NullPointerException("The KeyStore password cannot be null");
  if (getKeyManagerAlgorithm() == null)   throw new NullPointerException("The Key Manager Algorithm cannot be null");
  try {
    Security.addProvider(getProvider());
    KeyStore keystore=KeyStore.getInstance(keystoreType);
    InputStream is=Utility.loadResource(getKeyStore(),getClass());
    if (is == null) {
      throw new FileNotFoundException("Failed to load keystore from classpath or local file: " + getKeyStore());
    }
    keystore.load(is,getKeyPassword().toCharArray());
    keyManagerFactory=KeyManagerFactory.getInstance(getKeyManagerAlgorithm());
    keyManagerFactory.init(keystore,getStorePassword().toCharArray());
  }
 catch (  Exception e) {
    throw new InitialisationException("Failed to load the KeyStore and manager: " + e.getMessage(),e);
  }
  super.doInitialise();
  if (protocolHandler != null) {
    System.setProperty("java.protocol.handler.pkgs",protocolHandler);
  }
  if (clientKeyStore != null) {
    try {
      String clientPath=Utility.getResourcePath(clientKeyStore,getClass());
      if (clientPath == null) {
        throw new InitialisationException("Failed to find client key store: " + clientKeyStore);
      }
      System.setProperty("javax.net.ssl.keyStore",clientPath);
      System.setProperty("javax.net.ssl.keyStorePassword",clientKeyStorePassword);
      logger.info("Set Client Key store: javax.net.ssl.keyStore=" + clientPath);
    }
 catch (    IOException e) {
      throw new InitialisationException("Failed to locate Client keystore with: " + clientKeyStore + ". Error is: "+ e.getMessage(),e);
    }
  }
  if (trustStore != null) {
    System.setProperty("javax.net.ssl.trustStore",getTrustStore());
    System.setProperty("javax.net.ssl.trustStorePassword",getTrustStorePassword());
    logger.debug("Set Trust store: javax.net.ssl.trustStore=" + getTrustStore());
  }
 else   if (!isExplicitTrustStoreOnly()) {
    logger.info("Defaulting trust store to client Key Store");
    trustStore=getClientKeyStore();
    trustStorePassword=getClientKeyStorePassword();
    System.setProperty("javax.net.ssl.trustStore",getTrustStore());
    System.setProperty("javax.net.ssl.trustStorePassword",getTrustStorePassword());
    logger.debug("Set Trust store: javax.net.ssl.trustStore=" + getTrustStore());
  }
}
