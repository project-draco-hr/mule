{
  JarFile jarFile=connection.getJarFile();
  JarEntry jarResource=connection.getJarEntry();
  Enumeration entries=jarFile.entries();
  InputStream inputStream=null;
  OutputStream outputStream=null;
  int jarResourceNameLenght=jarResource.getName().length();
  for (; entries.hasMoreElements(); ) {
    JarEntry entry=(JarEntry)entries.nextElement();
    if (entry.getName().startsWith(jarResource.getName())) {
      String path=outputDir.getPath() + File.separator + entry.getName();
      if (!keepParentDirectory) {
        if (entry.isDirectory()) {
          if (entry.getName().equals(jarResource.getName())) {
            continue;
          }
          path=outputDir.getPath() + File.separator + entry.getName().substring(jarResourceNameLenght,entry.getName().length());
        }
 else {
          if (entry.getName().length() > jarResourceNameLenght) {
            path=outputDir.getPath() + File.separator + entry.getName().substring(jarResourceNameLenght,entry.getName().length());
          }
 else {
            path=outputDir.getPath() + File.separator + entry.getName().substring(entry.getName().lastIndexOf("/"),entry.getName().length());
          }
        }
      }
      File file=FileUtils.newFile(path);
      if (!file.getParentFile().exists()) {
        if (!file.getParentFile().mkdirs()) {
          throw new IOException("Could not create directory: " + file.getParentFile());
        }
      }
      if (entry.isDirectory()) {
        if (!file.exists() && !file.mkdirs()) {
          throw new IOException("Could not create directory: " + file);
        }
      }
 else {
        try {
          inputStream=jarFile.getInputStream(entry);
          outputStream=new BufferedOutputStream(new FileOutputStream(file));
          IOUtils.copy(inputStream,outputStream);
        }
  finally {
          IOUtils.closeQuietly(inputStream);
          IOUtils.closeQuietly(outputStream);
        }
      }
    }
  }
}
