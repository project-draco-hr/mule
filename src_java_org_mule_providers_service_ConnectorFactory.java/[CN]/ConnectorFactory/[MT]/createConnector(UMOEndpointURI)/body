{
  String scheme=url.getSchemeMetaInfo();
  UMOConnector connector=null;
  ConnectorServiceDescriptor csd=getServiceDescriptor(scheme);
  if (csd.getServiceError() != null) {
    throw new ConnectorServiceException(Message.createStaticMessage(csd.getServiceError()));
  }
  if (csd.getServiceFinder() != null) {
    csd=csd.createServiceFinder().findService(scheme,csd);
  }
  try {
    if (csd.getConnectorFactory() != null) {
      ObjectFactory factory=(ObjectFactory)ClassHelper.loadClass(csd.getConnectorFactory(),ConnectorFactory.class).newInstance();
      connector=(UMOConnector)factory.create();
    }
 else {
      if (csd.getConnector() != null) {
        connector=(UMOConnector)ClassHelper.loadClass(csd.getConnector(),ConnectorFactory.class).newInstance();
        if (connector instanceof AbstractServiceEnabledConnector) {
          ((AbstractServiceEnabledConnector)connector).initialiseFromUrl(url);
        }
      }
 else {
        throw new ConnectorFactoryException(new Message(Messages.X_NOT_SET_IN_SERVICE_X,"Connector",scheme));
      }
    }
  }
 catch (  ConnectorFactoryException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConnectorFactoryException(new Message(Messages.FAILED_TO_CREATE_X_WITH_X,"Endpoint",url),e);
  }
  if (connector.getName() == null) {
    connector.setName("_" + scheme + "Connector#"+ connector.hashCode());
  }
  Map props=PropertiesHelper.getPropertiesWithPrefix(MuleManager.getInstance().getProperties(),connector.getProtocol().toLowerCase());
  if (props.size() > 0) {
    props=PropertiesHelper.removeNamspaces(props);
    org.mule.util.BeanUtils.populateWithoutFail(connector,props,true);
  }
  return connector;
}
