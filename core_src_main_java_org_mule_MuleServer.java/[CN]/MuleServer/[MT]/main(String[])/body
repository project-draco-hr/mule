{
  MuleServer server=new MuleServer();
  Map options=null;
  try {
    options=SystemUtils.getCommandLineOptions(args,CLI_OPTIONS);
  }
 catch (  MuleException me) {
    System.err.println(me.toString());
    System.exit(1);
  }
  String config=(String)options.get("config");
  if (config == null) {
    logger.warn("A configuration file was not set, using default: " + DEFAULT_CONFIGURATION);
    URL configUrl=IOUtils.getResourceAsUrl(DEFAULT_CONFIGURATION,MuleServer.class,true);
    if (configUrl != null) {
      config=configUrl.toExternalForm();
    }
  }
  if (config != null) {
    server.setConfigurationResources(config);
  }
 else {
    Message message=new Message(Messages.CONFIG_NOT_FOUND_USAGE);
    System.err.println(message.toString());
    System.exit(1);
  }
  String cfgBuilderClassName=(String)options.get("builder");
  if (cfgBuilderClassName != null) {
    try {
      if (cfgBuilderClassName.equalsIgnoreCase("spring")) {
        cfgBuilderClassName=CLASSNAME_SPRING_CONFIG_BUILDER;
      }
      setConfigBuilderClassName(cfgBuilderClassName);
    }
 catch (    Exception e) {
      logger.fatal(e);
      final Message message=new Message(Messages.FAILED_LOAD_X,"Builder: " + cfgBuilderClassName);
      System.err.println(StringMessageUtils.getBoilerPlate("FATAL: " + message.toString()));
      System.exit(1);
    }
  }
  String propertiesFile=(String)options.get("props");
  if (propertiesFile != null) {
    setStartupPropertiesFile(propertiesFile);
  }
  server.start(false);
}
