{
  for (  TransformerBootstrapProperty bootstrapProperty : props) {
    final Class<? extends Transformer> transformerClass=getClass(bootstrapProperty.getClassName());
    try {
      Class<?> returnClass=null;
      String returnClassString=bootstrapProperty.getReturnClassName();
      if (returnClassString != null) {
        if (returnClassString.equals("byte[]")) {
          returnClass=byte[].class;
        }
 else {
          returnClass=bootstrapProperty.getService().forName(returnClassString);
        }
      }
      doRegisterTransformer(bootstrapProperty,returnClass,transformerClass);
    }
 catch (    InvocationTargetException e) {
      Throwable cause=ExceptionUtils.getCause(e);
      throwExceptionIfNotOptional(cause instanceof NoClassDefFoundError && bootstrapProperty.getOptional(),cause,bootstrapProperty);
    }
catch (    NoClassDefFoundError|ClassNotFoundException e) {
      throwExceptionIfNotOptional(bootstrapProperty.getOptional(),e,bootstrapProperty);
    }
  }
}
