{
  MuleOrphanDefinitionParser configParser=new MuleOrphanDefinitionParser(CxfConfiguration.class,true){
    @Override protected String resolveId(    Element element,    AbstractBeanDefinition definition,    ParserContext parserContext) throws BeanDefinitionStoreException {
      return CxfConstants.DEFAULT_CXF_CONFIGURATION;
    }
  }
;
  configParser.addIgnored("name");
  registerMuleBeanDefinitionParser("configuration",configParser);
  MessageProcessorDefinitionParser jsParser=new MessageProcessorDefinitionParser(WebServiceFactoryBean.class);
  jsParser.registerPreProcessor(new AddAttribute("frontend",CxfConstants.JAX_WS_FRONTEND));
  registerBeanDefinitionParser("jaxws-service",jsParser);
  MessageProcessorDefinitionParser ssParser=new MessageProcessorDefinitionParser(WebServiceFactoryBean.class);
  ssParser.registerPreProcessor(new AddAttribute("frontend",CxfConstants.SIMPLE_FRONTEND));
  registerBeanDefinitionParser("simple-service",ssParser);
  registerBeanDefinitionParser("proxy-service",new MessageProcessorDefinitionParser(ProxyServiceFactoryBean.class));
  registerBeanDefinitionParser("simple-client",new MessageProcessorDefinitionParser(SimpleClientFactoryBean.class));
  registerBeanDefinitionParser("jaxws-client",new MessageProcessorDefinitionParser(JaxWsClientFactoryBean.class));
  registerBeanDefinitionParser("proxy-client",new MessageProcessorDefinitionParser(ProxyClientFactoryBean.class));
  registerBeanDefinitionParser(CxfConstants.FEATURES,new ChildListDefinitionParser(CxfConstants.FEATURES));
  registerBeanDefinitionParser("schemaLocations",new ChildListDefinitionParser("schemaLocations"));
  registerBeanDefinitionParser("schemaLocation",new StringBeanDefinitionParser());
  registerBeanDefinitionParser("jaxb-databinding",new ChildDefinitionParser(CxfConstants.DATA_BINDING,JAXBDataBinding.class));
  registerBeanDefinitionParser("stax-databinding",new ChildDefinitionParser(CxfConstants.DATA_BINDING,StaxDataBinding.class));
  registerBeanDefinitionParser("source-databinding",new ChildDefinitionParser(CxfConstants.DATA_BINDING,SourceDataBinding.class));
  registerBeanDefinitionParser("aegis-databinding",new ChildDefinitionParser(CxfConstants.DATA_BINDING,AegisDatabinding.class));
  registerBeanDefinitionParser("custom-databinding",new ChildDefinitionParser(CxfConstants.DATA_BINDING));
  registerBeanDefinitionParser(CxfConstants.IN_INTERCEPTORS,new ChildListDefinitionParser(CxfConstants.IN_INTERCEPTORS));
  registerBeanDefinitionParser(CxfConstants.IN_FAULT_INTERCEPTORS,new ChildListDefinitionParser(CxfConstants.IN_FAULT_INTERCEPTORS));
  registerBeanDefinitionParser(CxfConstants.OUT_INTERCEPTORS,new ChildListDefinitionParser(CxfConstants.OUT_INTERCEPTORS));
  registerBeanDefinitionParser(CxfConstants.OUT_FAULT_INTERCEPTORS,new ChildListDefinitionParser(CxfConstants.OUT_FAULT_INTERCEPTORS));
  registerBeanDefinitionParser("stax",new SimpleBeanDefinitionParser(StaxFeature.class));
  registerBeanDefinitionParser("wrapper-component",new ComponentDefinitionParser(WebServiceWrapperComponent.class));
  OrphanDefinitionParser parser=new OrphanDefinitionParser(MuleSecurityManagerCallbackHandler.class,true);
  parser.registerPreProcessor(new AddAttribute("securityManager-ref","_muleSecurityManager"));
  registerBeanDefinitionParser("security-manager-callback",parser);
}
