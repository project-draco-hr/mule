{
  if (deleteProperties != null && deleteProperties.size() > 0) {
    for (Iterator iterator=deleteProperties.iterator(); iterator.hasNext(); ) {
      message.removeProperty(iterator.next().toString());
    }
  }
  if (addProperties != null && addProperties.size() > 0) {
    final Set propertyNames=message.getPropertyNames();
    for (Iterator iterator=addProperties.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      if (entry.getKey() == null) {
        logger.error("Setting Null property keys is not supported, this entry is being ignored");
      }
 else {
        final String key=entry.getKey().toString();
        final Object value=entry.getValue();
        if (overwrite) {
          if (logger.isDebugEnabled()) {
            if (!propertyNames.contains(key)) {
              logger.debug("Overwriting message property " + key);
            }
          }
          message.setProperty(key,value);
        }
 else {
          if (propertyNames.contains(key)) {
            if (logger.isDebugEnabled()) {
              logger.debug(MessageFormat.format("Message already contains the property and overwrite is false, skipping: key={0}, value={1}",new Object[]{key,value}));
            }
          }
        }
      }
    }
  }
  if (this.renameProperties != null && this.renameProperties.size() > 0) {
    final Set propertyNames=message.getPropertyNames();
    for (Iterator iterator=this.renameProperties.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      if (entry.getKey() == null) {
        logger.error("Setting Null property keys is not supported, this entry is being ignored");
      }
 else {
        final String key=entry.getKey().toString();
        final String value=(String)entry.getValue();
        if (value == null) {
          logger.error("Setting Null property values for renameProperties is not supported, this entry is being ignored");
        }
 else {
          if (logger.isDebugEnabled() && !propertyNames.contains(key)) {
            logger.debug("renaming message property " + key + " to "+ value);
          }
          Object propValue=message.getProperty(key);
          message.removeProperty(key);
          message.setProperty(value,propValue);
        }
      }
    }
  }
  return message;
}
