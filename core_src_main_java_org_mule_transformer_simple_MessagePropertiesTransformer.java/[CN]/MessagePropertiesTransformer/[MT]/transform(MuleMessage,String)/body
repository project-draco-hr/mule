{
  if (deleteProperties != null && deleteProperties.size() > 0) {
    for (Iterator iterator=deleteProperties.iterator(); iterator.hasNext(); ) {
      message.removeProperty(iterator.next().toString(),scope);
    }
  }
  if (addProperties != null && addProperties.size() > 0) {
    for (Iterator iterator=addProperties.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      if (entry.getKey() == null) {
        logger.error("Setting Null property keys is not supported, this entry is being ignored");
      }
 else {
        final String key=entry.getKey().toString();
        Object value=entry.getValue();
        Object realValue=value;
        if (muleContext.getExpressionManager().isValidExpression(value.toString())) {
          realValue=muleContext.getExpressionManager().evaluate(value.toString(),message);
        }
        if (realValue != null) {
          if (message.getProperty(key,scope) != null) {
            if (overwrite) {
              logger.debug("Overwriting message property " + key);
              message.setProperty(key,realValue,scope);
            }
 else             if (logger.isDebugEnabled()) {
              logger.debug(MessageFormat.format("Message already contains the property and overwrite is false, skipping: key={0}, value={1}, scope={2}",key,realValue,scope));
            }
          }
 else {
            message.setProperty(key,realValue,scope);
          }
        }
 else         if (logger.isInfoEnabled()) {
          logger.info(MessageFormat.format("Property with key '{0}', not found on message using '{1}'. Since the value was marked optional, nothing was set on the message for this property",key,value));
        }
      }
    }
  }
  if (this.renameProperties != null && this.renameProperties.size() > 0) {
    for (    Map.Entry<String,String> entry : this.renameProperties.entrySet()) {
      if (entry.getKey() == null) {
        logger.error("Setting Null property keys is not supported, this entry is being ignored");
      }
 else {
        final String key=entry.getKey();
        String value=entry.getValue();
        if (value == null) {
          logger.error("Setting Null property values for renameProperties is not supported, this entry is being ignored");
        }
 else {
          if (muleContext.getExpressionManager().isValidExpression(value)) {
            Object temp=muleContext.getExpressionManager().evaluate(value,message);
            if (temp != null) {
              value=temp.toString();
            }
          }
          if (logger.isDebugEnabled() && message.getProperty(key,scope) == null) {
            logger.debug("renaming message property " + key + " to "+ value);
          }
          if (scope == null) {
            if (message.getPropertyNames(PropertyScope.INVOCATION).contains(key)) {
              renameInScope(key,value,PropertyScope.INVOCATION,message);
            }
 else             if (message.getPropertyNames(PropertyScope.OUTBOUND).contains(key)) {
              renameInScope(key,value,PropertyScope.OUTBOUND,message);
            }
 else             if (message.getPropertyNames(PropertyScope.INBOUND).contains(key)) {
              throw new TransformerException(CoreMessages.cannotRenameInboundScopeProperty(key,value));
            }
          }
 else {
            renameInScope(key,value,scope,message);
          }
        }
      }
    }
  }
  if (getProperty != null) {
    Object prop=message.getProperty(getProperty,scope);
    if (prop != null) {
      message=new DefaultMuleMessage(prop,muleContext);
    }
 else {
      message=new DefaultMuleMessage(NullPayload.getInstance(),muleContext);
    }
  }
  return message;
}
