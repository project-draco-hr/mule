{
  super.validateConstruct();
  boolean userConfiguredProcessingStrategy=!(processingStrategy instanceof DefaultFlowProcessingStrategy);
  boolean userConfiguredAsyncProcessingStrategy=processingStrategy instanceof AsynchronousProcessingStrategy && userConfiguredProcessingStrategy;
  boolean redeliveryHandlerConfigured=isRedeliveryPolicyConfigured();
  boolean isCompatibleWithAsync=sourceCompatibleWithAsync.evaluate(messageSource);
  if (userConfiguredAsyncProcessingStrategy && (!(messageSource == null || isCompatibleWithAsync) || redeliveryHandlerConfigured)) {
    throw new FlowConstructInvalidException(CoreMessages.createStaticMessage("One of the message sources configured on this Flow is not " + "compatible with an asynchronous processing strategy.  Either " + "because it is request-response, has a transaction defined, or "+ "messaging redelivered is configured."),this);
  }
  if (processingStrategy instanceof NonBlockingProcessingStrategy && messageSource != null && !(messageSource instanceof NonBlockingMessageSource)) {
    throw new FlowConstructInvalidException(CoreMessages.createStaticMessage("The non-blocking processing strategy currently only supports " + "non-blocking messages sources"),this);
  }
  if (!userConfiguredProcessingStrategy && redeliveryHandlerConfigured) {
    setProcessingStrategy(new SynchronousProcessingStrategy());
    if (LOGGER.isWarnEnabled()) {
      LOGGER.warn("Using message redelivery and rollback-exception-strategy requires synchronous processing strategy. Processing strategy re-configured to synchronous");
    }
  }
}
