{
  muleContext.setTransactionManager(tm);
  assertNull("There should be no current transaction associated.",tm.getTransaction());
  tm.setTransactionTimeout(TRANSACTION_TIMEOUT_SECONDS);
  TransactionConfig config=new MuleTransactionConfig(TransactionConfig.ACTION_ALWAYS_BEGIN);
  config.setFactory(new XaTransactionFactory());
  TransactionTemplate template=new TransactionTemplate(config,muleContext);
  final TransactionConfig nestedConfig=new MuleTransactionConfig(TransactionConfig.ACTION_ALWAYS_BEGIN);
  nestedConfig.setFactory(new XaTransactionFactory());
  template.execute(new TransactionCallback<Void>(){
    public Void doInTransaction() throws Exception {
      TransactionTemplate<Void> nestedTemplate=new TransactionTemplate<Void>(nestedConfig,muleContext);
      final Transaction firstTx=tm.getTransaction();
      assertNotNull(firstTx);
      assertEquals(firstTx.getStatus(),Status.STATUS_ACTIVE);
      return nestedTemplate.execute(new TransactionCallback<Void>(){
        public Void doInTransaction() throws Exception {
          Transaction secondTx=tm.getTransaction();
          assertNotNull(secondTx);
          assertEquals(firstTx.getStatus(),Status.STATUS_ACTIVE);
          assertEquals(secondTx.getStatus(),Status.STATUS_ACTIVE);
          try {
            tm.resume(firstTx);
            fail("Second transaction must be active");
          }
 catch (          java.lang.IllegalStateException e) {
          }
          try {
            Transaction currentTx=tm.suspend();
            assertTrue(currentTx.equals(secondTx));
            tm.resume(firstTx);
            assertEquals(firstTx,tm.getTransaction());
            assertEquals(firstTx.getStatus(),Status.STATUS_ACTIVE);
            assertEquals(secondTx.getStatus(),Status.STATUS_ACTIVE);
            Transaction a=tm.suspend();
            assertTrue(a.equals(firstTx));
            tm.resume(secondTx);
          }
 catch (          Exception e) {
            fail("Error: " + e);
          }
          return null;
        }
      }
);
    }
  }
);
  assertNull("Committing via TX Manager should have disassociated TX from the current thread.",tm.getTransaction());
}
