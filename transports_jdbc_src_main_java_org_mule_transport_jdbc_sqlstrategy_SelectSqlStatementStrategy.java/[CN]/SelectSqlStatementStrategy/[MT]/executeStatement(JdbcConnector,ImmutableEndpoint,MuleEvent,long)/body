{
  logger.debug("Trying to receive a message with a timeout of " + timeout);
  String[] stmts=connector.getReadAndAckStatements(endpoint);
  String readStmt=stmts[0];
  String ackStmt=stmts[1];
  List readParams=new ArrayList();
  List ackParams=new ArrayList();
  readStmt=connector.parseStatement(readStmt,readParams);
  ackStmt=connector.parseStatement(ackStmt,ackParams);
  Connection con=null;
  long t0=System.currentTimeMillis();
  Transaction tx=TransactionCoordination.getInstance().getTransaction();
  try {
    con=connector.getConnection();
    if (timeout < 0) {
      timeout=Long.MAX_VALUE;
    }
    Object result;
    do {
      Object[] params=connector.getParams(endpoint,readParams,event != null ? event.getMessage() : null,endpoint.getEndpointURI().getAddress());
      if (logger.isDebugEnabled()) {
        logger.debug("SQL QUERY: " + readStmt + ", params = "+ ArrayUtils.toString(params));
      }
      result=connector.getQueryRunner().query(con,readStmt,params,connector.getResultSetHandler());
      if (result != null) {
        if (logger.isDebugEnabled()) {
          logger.debug("Received: " + result);
        }
        break;
      }
      long sleep=Math.min(connector.getPollingFrequency(),timeout - (System.currentTimeMillis() - t0));
      if (sleep > 0) {
        if (logger.isDebugEnabled()) {
          logger.debug("No results, sleeping for " + sleep);
        }
        Thread.sleep(sleep);
      }
 else {
        logger.debug("Timeout");
        JdbcUtils.rollbackAndClose(con);
        return null;
      }
    }
 while (true);
    if (ackStmt != null) {
      Object[] params=connector.getParams(endpoint,ackParams,new DefaultMuleMessage(result,(Map)null),ackStmt);
      if (logger.isDebugEnabled()) {
        logger.debug("SQL UPDATE: " + ackStmt + ", params = "+ ArrayUtils.toString(params));
      }
      int nbRows=connector.getQueryRunner().update(con,ackStmt,params);
      if (nbRows != 1) {
        logger.warn("Row count for ack should be 1 and not " + nbRows);
      }
    }
    MessageAdapter msgAdapter=connector.getMessageAdapter(result);
    MuleMessage message=new DefaultMuleMessage(msgAdapter);
    if (tx == null) {
      JdbcUtils.commitAndClose(con);
    }
    return message;
  }
 catch (  Exception e) {
    if (tx == null) {
      JdbcUtils.rollbackAndClose(con);
    }
    throw e;
  }
}
