{
  final HttpRequest request=requestContext.getRequest();
  final Collection<String> headerNames=request.getHeaderNames();
  Map<String,Object> inboundProperties=new HashMap<>();
  Map<String,Object> outboundProperties=new HashMap<>();
  for (  String headerName : headerNames) {
    final Collection<String> values=request.getHeaderValues(headerName);
    if (values.size() == 1) {
      inboundProperties.put(headerName,values.iterator().next());
    }
 else {
      inboundProperties.put(headerName,values);
    }
  }
  new HttpMessagePropertiesResolver().setMethod(request.getMethod()).setProtocol(request.getProtocol().asString()).setUri(request.getUri()).setListenerPath(listenerPath).setRemoteHostAddress(requestContext.getRemoteHostAddress().toString()).setScheme(requestContext.getScheme()).addPropertiesTo(inboundProperties);
  final Map<String,DataHandler> inboundAttachments=new HashMap<>();
  Object payload=NullPayload.getInstance();
  if (parseRequest) {
    final HttpEntity entity=request.getEntity();
    if (entity != null) {
      if (entity instanceof MultipartHttpEntity) {
        inboundAttachments.putAll(HttpPartDataSource.createDataHandlerFrom(((MultipartHttpEntity)entity).getParts()));
      }
 else {
        final String contentTypeValue=request.getHeaderValue(HttpHeaders.Names.CONTENT_TYPE);
        if (contentTypeValue != null) {
          final MediaType mediaType=MediaType.parse(contentTypeValue);
          String encoding=mediaType.charset().isPresent() ? mediaType.charset().get().name() : Charset.defaultCharset().name();
          outboundProperties.put(MuleProperties.MULE_ENCODING_PROPERTY,encoding);
          if ((mediaType.type() + "/" + mediaType.subtype()).equals(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED)) {
            payload=HttpParser.decodeUrlEncodedBody(IOUtils.toString(((InputStreamHttpEntity)entity).getInputStream()),encoding);
          }
 else           if (entity instanceof InputStreamHttpEntity) {
            payload=((InputStreamHttpEntity)entity).getInputStream();
          }
        }
 else         if (entity instanceof InputStreamHttpEntity) {
          payload=((InputStreamHttpEntity)entity).getInputStream();
        }
      }
    }
  }
 else {
    final InputStreamHttpEntity inputStreamEntity=request.getInputStreamEntity();
    if (inputStreamEntity != null) {
      payload=inputStreamEntity.getInputStream();
    }
  }
  final DefaultMuleMessage defaultMuleMessage=new DefaultMuleMessage(payload,inboundProperties,outboundProperties,inboundAttachments,muleContext);
  return new DefaultMuleEvent(defaultMuleMessage,MessageExchangePattern.REQUEST_RESPONSE,flowConstruct);
}
