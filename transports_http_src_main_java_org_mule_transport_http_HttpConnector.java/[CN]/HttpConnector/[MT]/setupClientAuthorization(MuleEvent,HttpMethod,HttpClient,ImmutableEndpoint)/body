{
  httpMethod.setDoAuthentication(true);
  client.getParams().setAuthenticationPreemptive(true);
  if (event != null && event.getCredentials() != null) {
    MuleMessage msg=event.getMessage();
    String authScopeHost=msg.getStringProperty(HTTP_PREFIX + "auth.scope.host",event.getEndpoint().getEndpointURI().getHost());
    int authScopePort=msg.getIntProperty(HTTP_PREFIX + "auth.scope.port",event.getEndpoint().getEndpointURI().getPort());
    String authScopeRealm=msg.getStringProperty(HTTP_PREFIX + "auth.scope.realm",AuthScope.ANY_REALM);
    String authScopeScheme=msg.getStringProperty(HTTP_PREFIX + "auth.scope.scheme",AuthScope.ANY_SCHEME);
    client.getState().setCredentials(new AuthScope(authScopeHost,authScopePort,authScopeRealm,authScopeScheme),new UsernamePasswordCredentials(event.getCredentials().getUsername(),new String(event.getCredentials().getPassword())));
  }
 else   if (endpoint.getEndpointURI().getUserInfo() != null && endpoint.getProperty(HttpConstants.HEADER_AUTHORIZATION) == null) {
    StringBuffer header=new StringBuffer(128);
    header.append("Basic ");
    header.append(new String(Base64.encodeBase64(endpoint.getEndpointURI().getUserInfo().getBytes(endpoint.getEncoding()))));
    httpMethod.addRequestHeader(HttpConstants.HEADER_AUTHORIZATION,header.toString());
  }
 else   if (event != null && event.getMessage().getOutboundProperty(HttpConstants.HEADER_AUTHORIZATION) != null && httpMethod.getRequestHeader(HttpConstants.HEADER_AUTHORIZATION) == null) {
    httpMethod.addRequestHeader(HttpConstants.HEADER_AUTHORIZATION,event.getMessage().getOutboundProperty(HttpConstants.HEADER_AUTHORIZATION).toString());
  }
 else {
    client.getParams().setAuthenticationPreemptive(false);
  }
}
