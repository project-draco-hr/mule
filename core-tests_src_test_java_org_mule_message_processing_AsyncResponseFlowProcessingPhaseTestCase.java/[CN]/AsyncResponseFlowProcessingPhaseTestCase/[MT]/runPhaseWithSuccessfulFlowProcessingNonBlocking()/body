{
  final SensingNullMessageProcessor sensingMessageProcessor=new SensingNullMessageProcessor();
  when(mockMuleEvent.isAllowNonBlocking()).thenReturn(true);
  when(mockTemplate.routeEvent(any(MuleEvent.class))).thenAnswer(new Answer<MuleEvent>(){
    @Override public MuleEvent answer(    InvocationOnMock invocation) throws Throwable {
      return sensingMessageProcessor.process((MuleEvent)invocation.getArguments()[0]);
    }
  }
);
  phase.runPhase(mockTemplate,mockContext,mockNotifier);
  sensingMessageProcessor.latch.await(LATCH_TIMEOUT,TimeUnit.MILLISECONDS);
  verify(mockTemplate).sendResponseToClient(any(MuleEvent.class),any(ResponseCompletionCallback.class));
  verifyOnlySuccessfulWasCalled();
}
