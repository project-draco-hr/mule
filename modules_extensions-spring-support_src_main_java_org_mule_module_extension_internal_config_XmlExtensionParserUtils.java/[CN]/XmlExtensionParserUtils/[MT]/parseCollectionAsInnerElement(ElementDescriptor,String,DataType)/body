{
  final DataType itemsType=ArrayUtils.isEmpty(collectionType.getGenericTypes()) ? DataType.of(Object.class) : collectionType.getGenericTypes()[0];
  final List<ValueResolver<Object>> resolvers=new LinkedList<>();
  for (  final ElementDescriptor item : collectionElement.getChildsByName(childElementName)) {
    DataQualifierVisitor visitor=new AbstractDataQualifierVisitor(){
      @Override public void onPojo(){
        resolvers.add(new ObjectBuilderValueResolver(recursePojoProperties(itemsType.getRawType(),item)));
      }
      @Override protected void defaultOperation(){
        resolvers.add(getResolverFromValue(item.getAttribute(ATTRIBUTE_NAME_VALUE),itemsType));
      }
    }
;
    itemsType.getQualifier().accept(visitor);
  }
  return CollectionValueResolver.of((Class<Collection>)collectionType.getRawType(),resolvers);
}
