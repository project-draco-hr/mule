{
  final String hyphenizedFieldName=hyphenize(fieldName);
  final String singularName=singularize(hyphenizedFieldName);
  final ValueHolder<ValueResolver> resolverReference=new ValueHolder<>();
  DataQualifierVisitor visitor=new AbstractDataQualifierVisitor(){
    /** 
 * An attribute of a generic type
 */
    @Override public void defaultOperation(){
      resolverReference.set(getResolverFromValue(getAttributeValue(element,fieldName,defaultValue),dataType));
    }
    /** 
 * A collection type. Might be defined in an inner element or referenced
 * from an attribute
 */
    @Override public void onList(){
      resolverReference.set(parseCollection(element,fieldName,hyphenizedFieldName,singularName,defaultValue,dataType));
    }
    @Override public void onPojo(){
      resolverReference.set(parsePojo(element,fieldName,hyphenizedFieldName,dataType,defaultValue));
    }
    @Override public void onDateTime(){
      if (Calendar.class.isAssignableFrom(dataType.getRawType())) {
        resolverReference.set(parseCalendar(element,fieldName,dataType,defaultValue));
      }
 else {
        resolverReference.set(parseDate(element,fieldName,dataType,defaultValue));
      }
    }
  }
;
  dataType.getQualifier().accept(visitor);
  return resolverReference.get();
}
