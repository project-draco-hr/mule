{
  String inboundEndpoint=event.getEndpoint().getEndpointURI().getEndpointName();
  if (StringUtils.isBlank(inboundEndpoint)) {
    inboundEndpoint=event.getEndpoint().getName();
  }
  if (StringUtils.isBlank(inboundEndpoint)) {
    inboundEndpoint=event.getEndpoint().getEndpointURI().getUri().toString();
  }
  event.getMessage().setProperty(MuleProperties.MULE_ORIGINATING_ENDPOINT_PROPERTY,inboundEndpoint);
  if (endpoints.size() > 0 && routers.size() == 0) {
    addRouter(new InboundPassThroughRouter());
  }
  String componentName=event.getSession().getService().getName();
  Map<String,MuleEvent> eventsToRoute=new LinkedHashMap<String,MuleEvent>(2);
  boolean noRoute=true;
  boolean match=false;
  InboundRouter inboundRouter;
  MuleEvent lastEvent=null;
  for (Iterator iterator=getRouters().iterator(); iterator.hasNext(); ) {
    inboundRouter=(InboundRouter)iterator.next();
    if (inboundRouter.isMatch(event)) {
      match=true;
      MuleEvent[] events=inboundRouter.process(event);
      if (events != null) {
        for (        MuleEvent event1 : events) {
          lastEvent=event1;
          eventsToRoute.put(lastEvent.getId(),lastEvent);
        }
      }
      noRoute=(events == null);
      if (!isMatchAll()) {
        break;
      }
    }
  }
  if (!event.isStopFurtherProcessing()) {
    if (noRoute) {
      if (getStatistics().isEnabled()) {
        getStatistics().incrementNoRoutedMessage();
      }
      if (!match) {
        if (getCatchAllStrategy() != null) {
          if (logger.isDebugEnabled()) {
            logger.debug("Message did not match any routers on: " + componentName + " - invoking catch all strategy");
          }
          if (getStatistics().isEnabled()) {
            getStatistics().incrementCaughtMessage();
          }
          return getCatchAllStrategy().catchMessage(event.getMessage(),event.getSession());
        }
 else {
          logger.warn("Message did not match any routers on: " + componentName + " and there is no catch all strategy configured on this router.  Disposing message: "+ event);
          if (logger.isDebugEnabled()) {
            try {
              logger.warn("Message fragment is: " + StringMessageUtils.truncate(event.getMessageAsString(),100,true));
            }
 catch (            MuleException e) {
            }
          }
        }
      }
    }
 else {
      try {
        MuleMessage messageResult=null;
        for (Iterator iterator=eventsToRoute.values().iterator(); iterator.hasNext(); ) {
          MuleEvent eventToRoute=(MuleEvent)iterator.next();
          if (event.getMessage().getProperty(MuleProperties.MULE_ORIGINATING_ENDPOINT_PROPERTY) == null) {
            event.getMessage().setProperty(MuleProperties.MULE_ORIGINATING_ENDPOINT_PROPERTY,inboundEndpoint);
          }
          if (event.isSynchronous()) {
            messageResult=send(eventToRoute);
          }
 else {
            dispatch(eventToRoute);
          }
          if (getStatistics().isEnabled()) {
            getStatistics().incrementRoutedMessage(eventToRoute.getEndpoint());
          }
        }
        return messageResult;
      }
 catch (      MuleException e) {
        throw new RoutingException(event.getMessage(),event.getEndpoint(),e);
      }
    }
  }
  if (event.isSynchronous()) {
    return (lastEvent == null ? null : lastEvent.getMessage());
  }
 else {
    return null;
  }
}
