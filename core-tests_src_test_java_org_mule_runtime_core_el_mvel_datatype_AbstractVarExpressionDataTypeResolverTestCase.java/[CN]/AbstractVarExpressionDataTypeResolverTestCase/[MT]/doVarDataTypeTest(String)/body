{
  DataType expectedDataType=DataType.builder().type(String.class).mediaType(JSON).charset(CUSTOM_ENCODING).build();
  MuleEvent testEvent=getTestEvent(TEST_MESSAGE);
  testEvent=setVariable(testEvent,EXPRESSION_VALUE,expectedDataType);
  final ParserConfiguration parserConfiguration=MVELExpressionLanguage.createParserConfiguration(Collections.EMPTY_MAP);
  final MVELExpressionLanguageContext context=createMvelExpressionLanguageContext(testEvent,parserConfiguration);
  CompiledExpression compiledExpression=(CompiledExpression)compileExpression(expression,new ParserContext(parserConfiguration));
  MVEL.executeExpression(compiledExpression,context);
  assertThat(expressionDataTypeResolver.resolve(testEvent,compiledExpression),like(String.class,JSON,CUSTOM_ENCODING));
}
