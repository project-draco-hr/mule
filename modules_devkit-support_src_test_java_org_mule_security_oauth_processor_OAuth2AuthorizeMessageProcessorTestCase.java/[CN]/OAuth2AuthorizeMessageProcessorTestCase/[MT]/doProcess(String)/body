{
  final String authorizeUrl="authorizeUrl";
  final String customField="customField";
  final String anotherCustomField="anotherCustomField";
  this.processor.setState(state);
  this.processor.setCustomField(customField);
  this.processor.setAnotherCustomField(anotherCustomField);
  Mockito.when(this.manager.getDefaultUnauthorizedConnector().getAuthorizationParameters()).thenReturn(this.getAuthorizePropertiesWithoutDefaults());
  Mockito.when(this.manager.buildAuthorizeUrl(Mockito.anyMap(),Mockito.anyString(),Mockito.anyString())).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      Map<String,String> parameters=(Map<String,String>)invocation.getArguments()[0];
      String expectedState=String.format(OAuthProperties.EVENT_STATE_TEMPLATE,eventId) + state;
      Assert.assertEquals(expectedState,URLDecoder.decode(parameters.get("state"),"UTF-8"));
      Assert.assertEquals(customField.toLowerCase(),parameters.get("customField"));
      Assert.assertEquals(anotherCustomField.toLowerCase(),parameters.get("anotherCustomField"));
      return authorizeUrl;
    }
  }
);
  this.processor.process(event);
  Mockito.verify(this.manager).storeAuthorizationEvent(this.event);
  Mockito.verify(this.event.getMessage()).setOutboundProperty(OAuthProperties.HTTP_STATUS,"302");
  Mockito.verify(this.event.getMessage()).setOutboundProperty(OAuthProperties.CALLBACK_LOCATION,authorizeUrl);
  Mockito.verify(this.muleContext).fireNotification(Mockito.argThat(new OAuthNotificationMatcher(OAuthAuthorizeNotification.OAUTH_AUTHORIZATION_BEGIN,this.event)));
}
