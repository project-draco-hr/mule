{
  org.mule.api.client.LocalMuleClient client=muleContext.getClient();
  final org.mule.util.concurrent.Latch flowExecutedLatch=new org.mule.util.concurrent.Latch();
  FunctionalTestComponent ftc=getFunctionalTestComponent("replierService");
  ftc.setEventCallback(new EventCallback(){
    @Override public void eventReceived(    org.mule.api.MuleEventContext context,    Object component) throws Exception {
      flowExecutedLatch.release();
    }
  }
);
  org.mule.api.MuleMessage muleMessage=new org.mule.DefaultMuleMessage(TEST_PAYLOAD,muleContext);
  muleMessage.setOutboundProperty(org.mule.api.config.MuleProperties.MULE_REPLY_TO_PROPERTY,"jms://response");
  client.dispatch("jms://jmsIn1",muleMessage);
  flowExecutedLatch.await(TIMEOUT,TimeUnit.MILLISECONDS);
  org.mule.api.MuleMessage response=client.request("jms://response",TIMEOUT);
  assertThat(response,IsNull.<Object>notNullValue());
  assertThat(getPayloadAsString(response),Is.is(EXPECTED_PAYLOAD));
}
