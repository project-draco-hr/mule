{
  final ApplicationDescriptor descriptor=new ApplicationDescriptor();
  descriptor.setName(APP_NAME);
  descriptor.setDomain(DOMAIN_NAME);
  final File[] resourceFiles=new File[0];
  descriptor.setConfigResourcesFile(resourceFiles);
  when(applicationDescriptorFactory.create(any())).thenReturn(descriptor);
  final ArtifactPluginDescriptor coreArtifactPluginDescriptor=mock(ArtifactPluginDescriptor.class);
  List<ArtifactPluginDescriptor> containerArtifactPluginDescriptors=new LinkedList<>();
  containerArtifactPluginDescriptors.add(coreArtifactPluginDescriptor);
  when(applicationPluginRepository.getContainerArtifactPluginDescriptors()).thenReturn(containerArtifactPluginDescriptors);
  final ArtifactPlugin appPlugin=mock(ArtifactPlugin.class);
  final ArtifactClassLoader artifactClassLoader=mock(ArtifactClassLoader.class);
  when(appPlugin.getArtifactClassLoader()).thenReturn(artifactClassLoader);
  when(artifactClassLoader.getArtifactName()).thenReturn(FAKE_ARTIFACT_PLUGIN);
  final ArtifactClassLoaderFilter classLoaderFilter=mock(DefaultArtifactClassLoaderFilter.class);
  when(coreArtifactPluginDescriptor.getClassLoaderFilter()).thenReturn(classLoaderFilter);
  when(coreArtifactPluginDescriptor.getName()).thenReturn(FAKE_ARTIFACT_PLUGIN);
  when(appPlugin.getDescriptor()).thenReturn(coreArtifactPluginDescriptor);
  when(artifactPluginFactory.create(same(coreArtifactPluginDescriptor),any())).thenReturn(appPlugin);
  final Domain domain=createDomain(DOMAIN_NAME);
  final ClassLoaderLookupPolicy sharedLibLookupPolicy=mock(ClassLoaderLookupPolicy.class);
  when(domain.getArtifactClassLoader().getClassLoaderLookupPolicy().extend(anyMap())).thenReturn(sharedLibLookupPolicy);
  final MuleApplicationClassLoader applicationArtifactClassLoader=mock(MuleApplicationClassLoader.class);
  ApplicationClassLoaderBuilder applicationClassLoaderBuilderMock=mock(ApplicationClassLoaderBuilder.class);
  when(applicationClassLoaderBuilderMock.setDomain(any())).thenReturn(applicationClassLoaderBuilderMock);
  when(applicationClassLoaderBuilderMock.setArtifactDescriptor(any())).thenReturn(applicationClassLoaderBuilderMock);
  when(applicationClassLoaderBuilderMock.setArtifactId(any())).thenReturn(applicationClassLoaderBuilderMock);
  when(applicationClassLoaderBuilderMock.addArtifactPluginDescriptors(descriptor.getPlugins().toArray(new ArtifactPluginDescriptor[0]))).thenReturn(applicationClassLoaderBuilderMock);
  when(applicationClassLoaderBuilderMock.build()).thenReturn(applicationArtifactClassLoader);
  when(applicationClassLoaderBuilderFactory.createArtifactClassLoaderBuilder()).thenReturn(applicationClassLoaderBuilderMock);
  List<ArtifactClassLoader> pluginClassLoaders=new ArrayList<>();
  pluginClassLoaders.add(artifactClassLoader);
  when(applicationArtifactClassLoader.getArtifactPluginClassLoaders()).thenReturn(pluginClassLoaders);
  final Application application=applicationFactory.createArtifact(APP_NAME);
  assertThat(application.getDomain(),is(domain));
  assertThat(application.getArtifactClassLoader(),is(applicationArtifactClassLoader));
  assertThat(application.getDescriptor(),is(descriptor));
  assertThat(application.getArtifactName(),is(APP_NAME));
  assertThat(application.getResourceFiles(),is(resourceFiles));
  verify(domainRepository,times(2)).getDomain(DOMAIN_NAME);
  verify(applicationClassLoaderBuilderMock).setDomain(domain);
  verify(applicationClassLoaderBuilderMock).addArtifactPluginDescriptors(descriptor.getPlugins().toArray(new ArtifactPluginDescriptor[0]));
  verify(applicationClassLoaderBuilderMock).setArtifactDescriptor(descriptor);
  verify(applicationClassLoaderBuilderMock).setArtifactId(APP_NAME);
}
