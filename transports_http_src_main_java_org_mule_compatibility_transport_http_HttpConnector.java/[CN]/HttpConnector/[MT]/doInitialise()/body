{
  super.doInitialise();
  if (clientConnectionManager == null) {
    clientConnectionManager=new MultiThreadedHttpConnectionManager();
    String prop=System.getProperty("mule.http.disableCleanupThread");
    disableCleanupThread=prop != null && prop.equals("true");
    if (!disableCleanupThread) {
      connectionCleaner=new IdleConnectionTimeoutThread();
      connectionCleaner.setName("HttpClient-connection-cleaner-" + getName());
      connectionCleaner.addConnectionManager(clientConnectionManager);
      connectionCleaner.start();
    }
    HttpConnectionManagerParams params=new HttpConnectionManagerParams();
    if (getSendBufferSize() != INT_VALUE_NOT_SET) {
      params.setSendBufferSize(getSendBufferSize());
    }
    if (getReceiveBufferSize() != INT_VALUE_NOT_SET) {
      params.setReceiveBufferSize(getReceiveBufferSize());
    }
    if (getClientSoTimeout() != INT_VALUE_NOT_SET) {
      params.setSoTimeout(getClientSoTimeout());
    }
    if (getSocketSoLinger() != INT_VALUE_NOT_SET) {
      params.setLinger(getSocketSoLinger());
    }
    params.setTcpNoDelay(isSendTcpNoDelay());
    params.setMaxTotalConnections(dispatchers.getMaxTotal());
    params.setDefaultMaxConnectionsPerHost(dispatchers.getMaxTotal());
    params.setStaleCheckingEnabled(!BooleanUtils.toBoolean(System.getProperty(DISABLE_STALE_CONNECTION_CHECK_SYSTEM_PROPERTY)));
    if (getConnectionTimeout() != INT_VALUE_NOT_SET) {
      params.setConnectionTimeout(getConnectionTimeout());
    }
 else {
      params.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
    }
    clientConnectionManager.setParams(params);
  }
  if (connectionManager == null) {
    connectionManager=new org.mule.compatibility.transport.http.HttpConnectionManager(this,getReceiverWorkManager());
  }
}
