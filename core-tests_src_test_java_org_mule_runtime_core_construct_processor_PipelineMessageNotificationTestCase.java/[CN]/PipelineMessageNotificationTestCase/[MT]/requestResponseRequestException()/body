{
  TriggerableMessageSource source=new TriggerableMessageSource();
  pipeline.setMessageSource(source);
  pipeline.setExceptionListener(new DefaultMessagingExceptionStrategy());
  List<Processor> processors=new ArrayList<>();
  processors.add(new ExceptionThrowingMessageProcessor());
  pipeline.setMessageProcessors(processors);
  pipeline.initialise();
  event=Event.builder(context).message(InternalMessage.builder().payload("request").build()).exchangePattern(REQUEST_RESPONSE).flow(pipeline).build();
  try {
    source.trigger(event);
  }
 catch (  Exception e) {
  }
  verify(notificationManager,times(1)).fireNotification(argThat(new PipelineMessageNotificiationArgumentMatcher(PROCESS_START,false,event)));
  verify(notificationManager,times(1)).fireNotification(argThat(new PipelineMessageNotificiationArgumentMatcher(PROCESS_COMPLETE,true,event)));
  verify(notificationManager,times(2)).fireNotification(any(PipelineMessageNotification.class));
}
