{
  logger.trace("MuleProxy: async onEvent for Mule UMO " + descriptor.getName());
  try {
    if (event.getEndpoint().canReceive()) {
      RequestContext.setEvent(event);
      long startTime=0;
      if (stat.isEnabled()) {
        startTime=System.currentTimeMillis();
      }
      UMOMessage result=invokeUmo(RequestContext.getEventContext());
      if (stat.isEnabled()) {
        stat.addExecutionTime(System.currentTimeMillis() - startTime);
      }
      event=(MuleEvent)RequestContext.getEvent();
      if (result != null && !event.isStopFurtherProcessing()) {
        descriptor.getOutboundRouter().route(result,event.getSession(),event.isSynchronous());
      }
    }
 else {
      UMOMessageDispatcher dispatcher=event.getEndpoint().getConnector().getDispatcher(event.getEndpoint().getEndpointURI().getAddress());
      dispatcher.dispatch(event);
    }
    if (stat.isEnabled()) {
      stat.incSentEventASync();
    }
  }
 catch (  Exception e) {
    event.getSession().setValid(false);
    if (e instanceof UMOException) {
      handleException(e);
    }
 else {
      handleException(new MessagingException(new Message(Messages.EVENT_PROCESSING_FAILED_FOR_X,descriptor.getName()),event.getMessage(),e));
    }
  }
 finally {
    try {
      proxyPool.returnObject(this);
    }
 catch (    Exception e2) {
      logger.error("Failed to return proxy: " + e2.getMessage(),e2);
    }
    getStatistics().setComponentPoolSize(proxyPool.getSize());
  }
}
