{
  when(artifactClassificationTypeResolver.resolveArtifactClassificationType(rootArtifact)).thenReturn(APPLICATION);
  when(context.getSharedPluginLibCoordinates()).thenReturn(newArrayList(derbyDriverDep.getArtifact().getGroupId() + ":" + derbyDriverDep.getArtifact().getArtifactId()));
  File rootArtifactFile=temporaryFolder.newFile();
  Artifact jarRootArtifact=rootArtifact.setFile(rootArtifactFile);
  ArtifactResult rootArtifactResult=mock(ArtifactResult.class);
  when(rootArtifactResult.getArtifact()).thenReturn(jarRootArtifact);
  when(dependencyResolver.resolveArtifact(argThat(new ArtifactMatcher(rootArtifact.getGroupId(),rootArtifact.getArtifactId())))).thenReturn(rootArtifactResult);
  File derbyDriverFile=temporaryFolder.newFile();
  ArtifactResult artifactResult=mock(ArtifactResult.class);
  Artifact derbyDriverFatArtifact=derbyDriverDep.getArtifact().setFile(derbyDriverFile);
  when(artifactResult.getArtifact()).thenReturn(derbyDriverFatArtifact);
  when(dependencyResolver.resolveArtifact(argThat(equalTo(derbyDriverDep.getArtifact())))).thenReturn(artifactResult);
  ArtifactDescriptorResult defaultArtifactDescriptorResult=noManagedDependencies();
  ArtifactsUrlClassification classification=classifier.classify(context);
  assertThat(classification.getApplicationUrls(),hasSize(1));
  assertThat(classification.getApplicationUrls(),hasItem(rootArtifactFile.toURI().toURL()));
  assertThat(classification.getPluginUrlClassifications(),is(empty()));
  assertThat(classification.getPluginSharedLibUrls(),hasSize(1));
  assertThat(classification.getPluginSharedLibUrls(),hasItem(derbyDriverFile.toURI().toURL()));
  assertThat(classification.getContainerUrls(),is(empty()));
  verify(defaultArtifactDescriptorResult,atLeastOnce()).getManagedDependencies();
  verify(dependencyResolver,atLeastOnce()).readArtifactDescriptor(any(Artifact.class));
  verify(dependencyResolver).resolveArtifact(argThat(equalTo(derbyDriverDep.getArtifact())));
  verify(artifactClassificationTypeResolver).resolveArtifactClassificationType(rootArtifact);
}
