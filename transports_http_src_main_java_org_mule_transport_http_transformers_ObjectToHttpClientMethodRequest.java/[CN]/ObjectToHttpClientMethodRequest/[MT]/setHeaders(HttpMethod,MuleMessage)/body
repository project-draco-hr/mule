{
  String headerValue;
  String headerName;
  for (Iterator iterator=msg.getPropertyNames().iterator(); iterator.hasNext(); ) {
    headerName=(String)iterator.next();
    if (headerName.equalsIgnoreCase(HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY)) {
      Map customHeaders=(Map)msg.getProperty(HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY);
      if (customHeaders != null) {
        for (Iterator headerItr=customHeaders.entrySet().iterator(); headerItr.hasNext(); ) {
          Map.Entry entry=(Map.Entry)headerItr.next();
          if (entry.getValue() != null) {
            httpMethod.addRequestHeader(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (HttpConstants.REQUEST_HEADER_NAMES.get(headerName) == null) {
      headerValue=msg.getStringProperty(headerName,null);
      if (headerName.startsWith(MuleProperties.PROPERTY_PREFIX)) {
        headerName=new StringBuffer(30).append("X-").append(headerName).toString();
      }
      httpMethod.addRequestHeader(headerName,headerValue);
    }
  }
  Set attNams=msg.getAttachmentNames();
  if (msg.getPayload() instanceof InputStream && attNams != null && attNams.size() > 0) {
    httpMethod.addRequestHeader(HttpConstants.HEADER_CONTENT_TYPE,"multipart/related");
  }
}
