{
  String method=detectHttpMethod(msg);
  try {
    final URI uri=getURI(msg);
    HttpMethod httpMethod;
    if (HttpConstants.METHOD_GET.equals(method)) {
      httpMethod=createGetMethod(msg,outputEncoding);
    }
 else     if (HttpConstants.METHOD_POST.equalsIgnoreCase(method)) {
      httpMethod=createPostMethod(msg,outputEncoding);
    }
 else     if (HttpConstants.METHOD_PUT.equalsIgnoreCase(method)) {
      final PutMethod putMethod=new PutMethod(uri.toString());
      Object payload=msg.getPayload();
      setupEntityMethod(payload,outputEncoding,msg,putMethod);
      httpMethod=putMethod;
    }
 else     if (HttpConstants.METHOD_DELETE.equalsIgnoreCase(method)) {
      httpMethod=new DeleteMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_HEAD.equalsIgnoreCase(method)) {
      httpMethod=new HeadMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_OPTIONS.equalsIgnoreCase(method)) {
      httpMethod=new OptionsMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_TRACE.equalsIgnoreCase(method)) {
      httpMethod=new TraceMethod(uri.toString());
    }
 else {
      throw new TransformerException(HttpMessages.unsupportedMethod(method));
    }
    final HttpMethodParams params=(HttpMethodParams)msg.removeProperty(HttpConnector.HTTP_PARAMS_PROPERTY,PropertyScope.OUTBOUND);
    if (params != null) {
      httpMethod.setParams(params);
    }
 else {
      final String httpVersion=msg.getOutboundProperty(HttpConnector.HTTP_VERSION_PROPERTY,HttpConstants.HTTP11);
      if (HttpConstants.HTTP10.equals(httpVersion)) {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_0);
      }
 else {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_1);
      }
    }
    setHeaders(httpMethod,msg);
    return httpMethod;
  }
 catch (  final Exception e) {
    throw new TransformerException(this,e);
  }
}
