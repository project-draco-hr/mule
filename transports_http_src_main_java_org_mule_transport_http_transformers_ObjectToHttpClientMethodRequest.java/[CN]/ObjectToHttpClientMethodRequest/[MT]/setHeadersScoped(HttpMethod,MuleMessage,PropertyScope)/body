{
  String headerName;
  String headerValue;
  for (Iterator iterator=msg.getPropertyNames(scope).iterator(); iterator.hasNext(); ) {
    headerName=(String)iterator.next();
    if (headerName.equalsIgnoreCase(HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY)) {
      if (logger.isInfoEnabled()) {
        logger.warn("Deprecation warning:  There is no need to set custom headers using: " + HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY + " you can now add the properties directly to the outbound endpoint or use the OUTBOUND property scope on the message.");
      }
      Map customHeaders=msg.getProperty(HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY,scope);
      if (customHeaders != null) {
        for (Iterator headerItr=customHeaders.entrySet().iterator(); headerItr.hasNext(); ) {
          Map.Entry entry=(Map.Entry)headerItr.next();
          if (entry.getValue() != null) {
            httpMethod.addRequestHeader(entry.getKey().toString(),entry.getValue().toString());
          }
        }
      }
    }
 else     if (HttpConstants.REQUEST_HEADER_NAMES.get(headerName) == null && !HttpConnector.HTTP_INBOUND_PROPERTIES.contains(headerName)) {
      headerValue=msg.getProperty(headerName,scope).toString();
      if (headerName.startsWith(MuleProperties.PROPERTY_PREFIX)) {
        headerName=new StringBuffer(30).append("X-").append(headerName).toString();
      }
      httpMethod.addRequestHeader(headerName,headerValue);
    }
  }
}
