{
  if (collectionExpression != null) {
    expressionConfig.setExpression(collectionExpression);
    splitter=new ExpressionSplitter(expressionConfig){
      @Override protected void propagateFlowVars(      Event previousResult,      final Builder builder){
        for (        String flowVarName : resolvePropagatedFlowVars(previousResult)) {
          builder.addVariable(flowVarName,previousResult.getVariable(flowVarName).getValue(),previousResult.getVariable(flowVarName).getDataType());
        }
      }
      @Override protected Set<String> resolvePropagatedFlowVars(      Event previousResult){
        return previousResult != null ? previousResult.getVariableNames() : emptySet();
      }
    }
;
    if (isXPathExpression(expressionConfig.getExpression())) {
      xpathCollection=true;
    }
  }
 else {
    splitter=new CollectionMapSplitter();
  }
  splitter.setBatchSize(batchSize);
  splitter.setCounterVariableName(counterVariableName);
  splitter.setMuleContext(muleContext);
  try {
    List<Processor> chainProcessors=new ArrayList<>();
    chainProcessors.add(splitter);
    chainProcessors.add(DefaultMessageProcessorChain.from(muleContext,messageProcessors));
    ownedMessageProcessor=new DefaultMessageProcessorChainBuilder(muleContext).chain(chainProcessors).build();
  }
 catch (  MuleException e) {
    throw new InitialisationException(e,this);
  }
  super.initialise();
}
