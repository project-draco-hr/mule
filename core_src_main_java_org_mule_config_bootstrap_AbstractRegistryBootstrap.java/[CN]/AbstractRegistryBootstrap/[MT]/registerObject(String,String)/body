{
  ArtifactType artifactTypeParameterValue=ArtifactType.APP;
  boolean optional=false;
  String className=null;
  try {
    int x=value.indexOf(",");
    if (x > -1) {
      Properties p=PropertiesUtils.getPropertiesFromString(value.substring(x + 1),',');
      if (p.containsKey(ArtifactType.APPLY_TO_ARTIFACT_TYPE_PARAMETER_KEY)) {
        artifactTypeParameterValue=ArtifactType.createFromString((String)p.get(ArtifactType.APPLY_TO_ARTIFACT_TYPE_PARAMETER_KEY));
      }
      optional=p.containsKey("optional");
      className=value.substring(0,x);
    }
 else {
      className=value;
    }
    if (!artifactTypeParameterValue.equals(ArtifactType.ALL) && !artifactTypeParameterValue.equals(supportedArtifactType)) {
      return;
    }
    doRegisterObject(key,className,optional);
  }
 catch (  InvocationTargetException itex) {
    Throwable cause=ExceptionUtils.getCause(itex);
    throwExceptionIfNotOptional(cause instanceof NoClassDefFoundError && optional,cause,"Ignoring optional object: " + className);
  }
catch (  NoClassDefFoundError ncdfe) {
    throwExceptionIfNotOptional(optional,ncdfe,"Ignoring optional object: " + className);
  }
catch (  ClassNotFoundException cnfe) {
    throwExceptionIfNotOptional(optional,cnfe,"Ignoring optional object: " + className);
  }
catch (  NoSuchMethodException nsme) {
    throwExceptionIfNotOptional(optional,nsme,"Ignoring optional object: " + className);
  }
}
