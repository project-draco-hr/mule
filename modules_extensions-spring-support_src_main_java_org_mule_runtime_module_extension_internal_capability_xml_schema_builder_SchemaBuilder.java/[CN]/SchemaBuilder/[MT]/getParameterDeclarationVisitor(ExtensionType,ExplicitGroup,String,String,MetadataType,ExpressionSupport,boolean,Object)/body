{
  return new MetadataTypeVisitor(){
    private boolean forceOptional=false;
    @Override public void visitArrayType(    ArrayType arrayType){
      MetadataType genericType=arrayType.getType();
      final boolean supportsChildElement=shouldGenerateDataTypeChildElements(genericType,expressionSupport);
      forceOptional=!getType(genericType).equals(Object.class) && (supportsChildElement || shouldForceOptional(genericType));
      defaultVisit(arrayType);
      if (supportsChildElement) {
        generateCollectionElement(all,name,description,arrayType,isRequired(true,required));
      }
    }
    @Override public void visitDictionary(    DictionaryType dictionaryType){
      MetadataType keyType=dictionaryType.getKeyType();
      forceOptional=shouldForceOptional(keyType);
      defaultVisit(dictionaryType);
      if (shouldGenerateDataTypeChildElements(keyType,expressionSupport)) {
        generateMapElement(all,name,description,dictionaryType,isRequired(true,required));
      }
    }
    @Override public void visitObject(    ObjectType objectType){
      final Class<?> clazz=getType(objectType);
      forceOptional=shouldForceOptional(objectType);
      if (TlsContextFactory.class.isAssignableFrom(clazz)) {
        addTlsSupport(extensionType,all);
        return;
      }
      if (ThreadingProfile.class.isAssignableFrom(clazz)) {
        addAttributeAndElement(extensionType,all,THREADING_PROFILE_ATTRIBUTE_NAME,MULE_ABSTRACT_THREADING_PROFILE);
        return;
      }
      defaultVisit(objectType);
      if (ExpressionSupport.REQUIRED != expressionSupport) {
        if (importedTypes.get(objectType) != null) {
          addImportedTypeRef(getType(importedTypes.get(objectType)),name,description,objectType,all);
        }
 else {
          registerPojoType(objectType,description);
          addAbstractTypeRef(name,description,objectType,all);
        }
        List<MetadataType> subTypes=subTypesMapping.getSubTypes(objectType);
        if (!subTypes.isEmpty()) {
          registerPojoSubtypes(objectType,subTypes);
        }
      }
 else {
        registerPojoType(objectType,description);
      }
    }
    @Override protected void defaultVisit(    MetadataType metadataType){
      extensionType.getAttributeOrAttributeGroup().add(createAttribute(name,description,metadataType,defaultValue,isRequired(forceOptional,required),expressionSupport));
    }
    private boolean shouldForceOptional(    MetadataType type){
      return !required || !subTypesMapping.getSubTypes(type).isEmpty() || (isInstantiable(getType(type)) && ExpressionSupport.REQUIRED != expressionSupport);
    }
    private boolean isRequired(    boolean forceOptional,    boolean required){
      return !forceOptional && required;
    }
  }
;
}
