{
  String abstractElementName=getTopLevelAbstractTypeName(metadataType);
  TopLevelElement abstractElement=new TopLevelElement();
  abstractElement.setName(abstractElementName);
  XmlModelProperty baseTypeXml=getTypeXmlProperties(baseType);
  abstractElement.setSubstitutionGroup(baseType == null ? MULE_ABSTRACT_EXTENSION : new QName(baseTypeXml.getNamespaceUri(),getTopLevelAbstractTypeName(baseType),baseTypeXml.getNamespace()));
  abstractElement.setAbstract(true);
  schema.getSimpleTypeOrComplexTypeOrGroup().add(abstractElement);
  QName typeQName=new QName(schema.getTargetNamespace(),registerPojoType(metadataType,description),xmlProperties.getNamespace());
  if (!isInstantiableWithParameters(getType(metadataType))) {
    abstractElement.setType(typeQName);
  }
 else {
    TopLevelElement objectElement=new TopLevelElement();
    objectElement.setName(getTopLevelTypeName(metadataType));
    objectElement.setSubstitutionGroup(new QName(xmlProperties.getNamespaceUri(),abstractElementName,xmlProperties.getNamespace()));
    objectElement.setAnnotation(createDocAnnotation(description));
    objectElement.setComplexType(createLocalComplexTypeExtension(typeQName));
    objectElement.getComplexType().getComplexContent().getExtension().getAttributeOrAttributeGroup().add(createNameAttribute(false));
    schema.getSimpleTypeOrComplexTypeOrGroup().add(objectElement);
  }
}
