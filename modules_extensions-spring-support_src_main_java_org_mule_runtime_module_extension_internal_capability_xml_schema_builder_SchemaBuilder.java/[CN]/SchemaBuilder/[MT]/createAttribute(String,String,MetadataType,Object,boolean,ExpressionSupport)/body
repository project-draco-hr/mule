{
  final Attribute attribute=new Attribute();
  attribute.setUse(required ? SchemaConstants.USE_REQUIRED : SchemaConstants.USE_OPTIONAL);
  attribute.setAnnotation(createDocAnnotation(description));
  if (defaultValue instanceof String && StringUtils.isNotBlank(defaultValue.toString())) {
    attribute.setDefault(defaultValue.toString());
  }
  type.accept(new MetadataTypeVisitor(){
    @Override public void visitString(    StringType stringType){
      Optional<EnumAnnotation> enumAnnotation=stringType.getAnnotation(EnumAnnotation.class);
      if (enumAnnotation.isPresent()) {
        visitEnum(stringType);
      }
 else {
        defaultVisit(stringType);
      }
    }
    private void visitEnum(    StringType enumType){
      attribute.setName(name);
      String typeName=getId(enumType);
      if (OperationTransactionalAction.class.getName().equals(typeName)) {
        attribute.setType(MULE_EXTENSION_OPERATION_TRANSACTIONAL_ACTION_TYPE);
      }
 else {
        attribute.setType(new QName(schema.getTargetNamespace(),sanitizeName(typeName) + SchemaConstants.ENUM_TYPE_SUFFIX));
        registeredEnums.add(enumType);
      }
    }
    @Override protected void defaultVisit(    MetadataType metadataType){
      attribute.setName(name);
      attribute.setType(SchemaTypeConversion.convertType(type,expressionSupport));
    }
  }
);
  return attribute;
}
