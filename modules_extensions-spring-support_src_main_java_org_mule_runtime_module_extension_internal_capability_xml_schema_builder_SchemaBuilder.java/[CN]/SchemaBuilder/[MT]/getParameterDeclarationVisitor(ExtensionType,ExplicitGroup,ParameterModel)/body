{
  return new MetadataTypeVisitor(){
    private boolean forceOptional=false;
    @Override public void visitArrayType(    ArrayType arrayType){
      MetadataType genericType=arrayType.getType();
      forceOptional=shouldForceOptional(getType(genericType));
      defaultVisit(arrayType);
      if (shouldGenerateDataTypeChildElements(genericType,parameterModel)) {
        generateCollectionElement(all,parameterModel,true);
      }
    }
    @Override public void visitDictionary(    DictionaryType dictionaryType){
      MetadataType keyType=dictionaryType.getKeyType();
      forceOptional=shouldForceOptional(getType(keyType));
      defaultVisit(dictionaryType);
      if (shouldGenerateDataTypeChildElements(keyType,parameterModel)) {
        generateMapElement(all,parameterModel,true);
      }
    }
    @Override public void visitObject(    ObjectType objectType){
      final Class<?> clazz=getType(objectType);
      forceOptional=shouldForceOptional(clazz);
      if (TlsContextFactory.class.isAssignableFrom(clazz)) {
        addTlsSupport(extensionType,all);
        return;
      }
      if (ThreadingProfile.class.isAssignableFrom(clazz)) {
        addAttributeAndElement(extensionType,all,THREADING_PROFILE_ATTRIBUTE_NAME,MULE_ABSTRACT_THREADING_PROFILE);
        return;
      }
      defaultVisit(objectType);
      if (importedTypes.get(objectType) != null) {
        addImportedTypeRef(getType(importedTypes.get(objectType)),parameterModel,all);
        return;
      }
      if (ExpressionSupport.REQUIRED != parameterModel.getExpressionSupport()) {
        if (shouldGeneratePojoChildElements(clazz)) {
          registerComplexTypeChildElement(all,parameterModel.getName(),parameterModel.getDescription(),objectType,false);
        }
 else {
          List<MetadataType> subTypes=subTypesMapping.getSubTypes(parameterModel.getType());
          if (!subTypes.isEmpty()) {
            registerPojoSubtypes(subTypes,all);
          }
        }
      }
 else {
        registerPojoType(objectType,parameterModel.getDescription());
      }
    }
    @Override protected void defaultVisit(    MetadataType metadataType){
      extensionType.getAttributeOrAttributeGroup().add(createAttribute(parameterModel,isRequired(parameterModel,forceOptional)));
    }
    private boolean shouldGenerateDataTypeChildElements(    MetadataType metadataType,    ParameterModel parameterModel){
      if (metadataType == null) {
        return false;
      }
      boolean isExpressionRequired=ExpressionSupport.REQUIRED == parameterModel.getExpressionSupport();
      boolean isPojo=metadataType instanceof ObjectType;
      Class<?> clazz=getType(metadataType);
      boolean isPrimitive=clazz.isPrimitive() || ClassUtils.isPrimitiveWrapper(clazz);
      return !isExpressionRequired && (isPrimitive || (isPojo && shouldGeneratePojoChildElements(clazz)) || (!isPojo && isInstantiable(clazz)));
    }
    private boolean shouldGeneratePojoChildElements(    Class<?> type){
      return IntrospectionUtils.isInstantiable(type) && !getExposedFields(type).isEmpty();
    }
    private boolean shouldForceOptional(    Class<?> type){
      return !parameterModel.isRequired() || !subTypesMapping.getSubTypes(parameterModel.getType()).isEmpty() || (IntrospectionUtils.isInstantiable(type) && ExpressionSupport.REQUIRED != parameterModel.getExpressionSupport());
    }
  }
;
}
