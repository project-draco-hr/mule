{
  this.httpListenerRegistry=httpListenerRegistry;
  requestHandlerFilter=new GrizzlyRequestDispatcherFilter(httpListenerRegistry);
  sslFilterDelegate=new GrizzlyAddressDelegateFilter<>();
  httpServerFilterDelegate=new GrizzlyAddressDelegateFilter<>();
  FilterChainBuilder serverFilterChainBuilder=FilterChainBuilder.stateless();
  serverFilterChainBuilder.add(new TransportFilter());
  serverFilterChainBuilder.add(sslFilterDelegate);
  serverFilterChainBuilder.add(httpServerFilterDelegate);
  serverFilterChainBuilder.add(requestHandlerFilter);
  executorProvider=new WorkManagerSourceExecutorProvider();
  TCPNIOTransportBuilder transportBuilder=TCPNIOTransportBuilder.newInstance().setOptimizedForMultiplexing(true).setIOStrategy(new ExecutorPerServerAddressIOStrategy(executorProvider));
  configureServerSocketProperties(transportBuilder,serverSocketProperties);
  transport=transportBuilder.build();
  transport.setNIOChannelDistributor(new RoundRobinConnectionDistributor(transport,true,true));
  transport.getWorkerThreadPoolConfig().setPoolName(threadNamePrefix + LISTENER_WORKER_THREAD_NAME_SUFFIX);
  transport.setKernelThreadPoolConfig(ThreadPoolConfig.defaultConfig().setCorePoolSize(transport.getSelectorRunnersCount()).setMaxPoolSize(transport.getSelectorRunnersCount()).setPoolName(threadNamePrefix));
  transport.setProcessor(serverFilterChainBuilder.build());
  idleTimeoutExecutorService=Executors.newCachedThreadPool(new NamedThreadFactory(threadNamePrefix + IDLE_TIMEOUT_THREADS_PREFIX_NAME));
  idleTimeoutDelayedExecutor=new DelayedExecutor(idleTimeoutExecutorService);
}
