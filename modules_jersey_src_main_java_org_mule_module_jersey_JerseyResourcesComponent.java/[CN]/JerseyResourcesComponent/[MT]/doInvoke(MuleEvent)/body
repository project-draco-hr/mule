{
  MuleMessage message=event.getMessage();
  String path=message.getInboundProperty(HttpConnector.HTTP_REQUEST_PROPERTY);
  String contextPath=message.getInboundProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY);
  String query=null;
  int queryIdx=path.indexOf('?');
  if (queryIdx != -1) {
    query=path.substring(queryIdx + 1);
    path=path.substring(0,queryIdx);
  }
  URI endpointUri=event.getMessageSourceURI();
  String host=message.getInboundProperty("Host",endpointUri.getHost());
  String method=message.getInboundProperty(HttpConnector.HTTP_METHOD_PROPERTY);
  InBoundHeaders headers=new InBoundHeaders();
  for (  Object prop : message.getInboundPropertyNames()) {
    if (prop.equals(HttpConnector.HTTP_COOKIES_PROPERTY)) {
      org.apache.commons.httpclient.Cookie[] apacheCookies=message.getInboundProperty(HttpConnector.HTTP_COOKIES_PROPERTY);
      for (      org.apache.commons.httpclient.Cookie apacheCookie : apacheCookies) {
        Cookie cookie=new Cookie(apacheCookie.getName(),apacheCookie.getValue());
        headers.addObject(HttpConstants.HEADER_COOKIE,cookie);
      }
    }
 else {
      Object property=message.getInboundProperty(prop.toString());
      if (property != null) {
        headers.add(prop.toString(),property.toString());
      }
    }
  }
  String scheme;
  if ("servlet".equals(endpointUri.getScheme())) {
    scheme="http";
  }
 else {
    scheme=endpointUri.getScheme();
  }
  URI baseUri=getBaseUri(endpointUri,scheme,host,contextPath);
  URI completeUri=getCompleteUri(endpointUri,scheme,host,path,query);
  ContainerRequest req=new ContainerRequest(application,method,baseUri,completeUri,headers,getInputStream(message));
  if (logger.isDebugEnabled()) {
    logger.debug("Base URI: " + baseUri);
    logger.debug("Complete URI: " + completeUri);
  }
  MuleResponseWriter writer=new MuleResponseWriter(message);
  ContainerResponse res=new ContainerResponse(application,req,writer);
  application.handleRequest(req,res);
  return writer.getResponse();
}
