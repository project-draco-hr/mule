{
  String endpointAddress=endpoint.getEndpointURI().getAddress();
  SmtpConnector connector=(SmtpConnector)endpoint.getConnector();
  String to=lookupProperty(message,MailProperties.TO_ADDRESSES_PROPERTY,endpointAddress);
  String cc=lookupProperty(message,MailProperties.CC_ADDRESSES_PROPERTY,connector.getCcAddresses());
  String bcc=lookupProperty(message,MailProperties.BCC_ADDRESSES_PROPERTY,connector.getBccAddresses());
  String from=lookupProperty(message,MailProperties.FROM_ADDRESS_PROPERTY,connector.getFromAddress());
  String replyTo=lookupProperty(message,MailProperties.REPLY_TO_ADDRESSES_PROPERTY,connector.getReplyToAddresses());
  String subject=lookupProperty(message,MailProperties.SUBJECT_PROPERTY,connector.getSubject());
  String contentType=lookupProperty(message,MailProperties.CONTENT_TYPE_PROPERTY,connector.getContentType());
  Properties headers=new Properties();
  Properties customHeaders=connector.getCustomHeaders();
  if (customHeaders != null && !customHeaders.isEmpty()) {
    headers.putAll(customHeaders);
  }
  Properties otherHeaders=message.getOutboundProperty(MailProperties.CUSTOM_HEADERS_MAP_PROPERTY);
  if (otherHeaders != null && !otherHeaders.isEmpty()) {
    headers.putAll(templateParser.parse(new TemplateParser.TemplateCallback(){
      public Object match(      String token){
        return muleContext.getRegistry().lookupObject(token);
      }
    }
,otherHeaders));
  }
  if (logger.isDebugEnabled()) {
    StringBuffer buf=new StringBuffer();
    buf.append("Constructing email using:\n");
    buf.append("To: ").append(to);
    buf.append(", From: ").append(from);
    buf.append(", CC: ").append(cc);
    buf.append(", BCC: ").append(bcc);
    buf.append(", Subject: ").append(subject);
    buf.append(", ReplyTo: ").append(replyTo);
    buf.append(", Content type: ").append(contentType);
    buf.append(", Payload type: ").append(message.getPayload().getClass().getName());
    buf.append(", Custom Headers: ").append(MapUtils.toString(headers,false));
    logger.debug(buf.toString());
  }
  try {
    MimeMessage email=new MimeMessage(((SmtpConnector)endpoint.getConnector()).getSessionDetails(endpoint).getSession());
    email.setRecipients(Message.RecipientType.TO,MailUtils.stringToInternetAddresses(to));
    email.setSentDate(Calendar.getInstance().getTime());
    if (StringUtils.isNotBlank(from)) {
      email.setFrom(MailUtils.stringToInternetAddresses(from)[0]);
    }
    if (StringUtils.isNotBlank(cc)) {
      email.setRecipients(Message.RecipientType.CC,MailUtils.stringToInternetAddresses(cc));
    }
    if (StringUtils.isNotBlank(bcc)) {
      email.setRecipients(Message.RecipientType.BCC,MailUtils.stringToInternetAddresses(bcc));
    }
    if (StringUtils.isNotBlank(replyTo)) {
      email.setReplyTo(MailUtils.stringToInternetAddresses(replyTo));
    }
    email.setSubject(subject,outputEncoding);
    for (Iterator iterator=headers.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      email.setHeader(entry.getKey().toString(),entry.getValue().toString());
    }
    setContent(message.getPayload(),email,contentType,message);
    return email;
  }
 catch (  Exception e) {
    throw new TransformerException(this,e);
  }
}
