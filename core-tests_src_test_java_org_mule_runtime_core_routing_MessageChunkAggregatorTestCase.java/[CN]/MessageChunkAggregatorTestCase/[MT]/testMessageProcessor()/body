{
  MuleSession session=getTestSession(null,muleContext);
  Flow flow=getTestFlow("test",Apple.class);
  assertNotNull(flow);
  MessageChunkAggregator router=new MessageChunkAggregator();
  router.setMuleContext(muleContext);
  router.setFlowConstruct(flow);
  router.initialise();
  DefaultMuleMessage message1=new DefaultMuleMessage("test event A");
  DefaultMuleMessage message2=new DefaultMuleMessage("test event B");
  DefaultMuleMessage message3=new DefaultMuleMessage("test event C");
  message1.setCorrelationId(message1.getUniqueId());
  message2.setCorrelationId(message1.getUniqueId());
  message3.setCorrelationId(message1.getUniqueId());
  message1.setCorrelationGroupSize(3);
  MuleEvent event1=new DefaultMuleEvent(message1,getTestFlow(),session);
  MuleEvent event2=new DefaultMuleEvent(message2,getTestFlow(),session);
  MuleEvent event3=new DefaultMuleEvent(message3,getTestFlow(),session);
  assertNull(router.process(event1));
  assertNull(router.process(event2));
  MuleEvent resultEvent=router.process(event3);
  assertNotNull(resultEvent);
  MuleMessage resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  String payload=getPayloadAsString(resultMessage);
  assertTrue(payload.contains("test event A"));
  assertTrue(payload.contains("test event B"));
  assertTrue(payload.contains("test event C"));
  assertTrue(payload.matches("test event [A,B,C]test event [A,B,C]test event [A,B,C]"));
}
