{
  MuleSession session=new DefaultMuleSession();
  Flow flow=getTestFlowWithComponent("test",Apple.class);
  assertNotNull(flow);
  MessageChunkAggregator router=new MessageChunkAggregator();
  router.setMuleContext(muleContext);
  router.setFlowConstruct(flow);
  router.initialise();
  InternalMessage message1=InternalMessage.of("test event A");
  InternalMessage message2=InternalMessage.of("test event B");
  InternalMessage message3=InternalMessage.of("test event C");
  EventContext context=DefaultEventContext.create(flow,TEST_CONNECTOR,"foo");
  Event event1=Event.builder(context).message(message1).groupCorrelation(new GroupCorrelation(3,null)).flow(flow).session(session).build();
  Event event2=Event.builder(context).message(message2).flow(flow).session(session).build();
  Event event3=Event.builder(context).message(message3).flow(flow).session(session).build();
  assertNull(router.process(event1));
  assertNull(router.process(event2));
  Event resultEvent=router.process(event3);
  assertNotNull(resultEvent);
  InternalMessage resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  String payload=getPayloadAsString(resultMessage);
  assertTrue(payload.contains("test event A"));
  assertTrue(payload.contains("test event B"));
  assertTrue(payload.contains("test event C"));
  assertTrue(payload.matches("test event [A,B,C]test event [A,B,C]test event [A,B,C]"));
}
