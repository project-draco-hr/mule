{
  MuleSession session=getTestSession(null,muleContext);
  Flow flow=getTestFlow("test",Apple.class);
  assertNotNull(flow);
  MessageChunkAggregator router=new MessageChunkAggregator();
  router.setMuleContext(muleContext);
  router.setFlowConstruct(flow);
  router.initialise();
  MuleMessage message1=MuleMessage.of("test event A");
  MuleMessage message2=MuleMessage.of("test event B");
  MuleMessage message3=MuleMessage.of("test event C");
  MessageContext context=DefaultMessageContext.create(flow,TEST_CONNECTOR,"foo");
  DefaultMuleEvent event1=(DefaultMuleEvent)MuleEvent.builder(context).message(message1).flow(getTestFlow()).session(session).build();
  MuleEvent event2=MuleEvent.builder(context).message(message2).flow(getTestFlow()).session(session).build();
  MuleEvent event3=MuleEvent.builder(context).message(message3).flow(getTestFlow()).session(session).build();
  event1.setCorrelation(new Correlation(3,null));
  assertNull(router.process(event1));
  assertNull(router.process(event2));
  MuleEvent resultEvent=router.process(event3);
  assertNotNull(resultEvent);
  MuleMessage resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  String payload=getPayloadAsString(resultMessage);
  assertTrue(payload.contains("test event A"));
  assertTrue(payload.contains("test event B"));
  assertTrue(payload.contains("test event C"));
  assertTrue(payload.matches("test event [A,B,C]test event [A,B,C]test event [A,B,C]"));
}
