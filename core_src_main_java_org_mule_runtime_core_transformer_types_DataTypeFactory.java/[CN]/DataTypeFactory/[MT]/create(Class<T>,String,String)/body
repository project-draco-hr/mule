{
  if (Collection.class.isAssignableFrom(type)) {
    Class<? extends Collection<?>> collectionType=(Class<? extends Collection<?>>)type;
    Class<?> itemType=GenericsUtils.getCollectionType(collectionType);
    if (itemType == null) {
      return new CollectionDataType(collectionType,Object.class,mimeType,encoding);
    }
 else {
      return new CollectionDataType(collectionType,itemType,mimeType,encoding);
    }
  }
  if (isProxyClass(type)) {
    return new SimpleDataType<>((Class<T>)type.getInterfaces()[0],mimeType,encoding);
  }
  return new SimpleDataType<>(type,mimeType,encoding);
}
