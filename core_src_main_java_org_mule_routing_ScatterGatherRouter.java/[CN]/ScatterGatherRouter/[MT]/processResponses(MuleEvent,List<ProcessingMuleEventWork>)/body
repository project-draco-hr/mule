{
  List<MuleEvent> responses=new ArrayList<MuleEvent>(works.size());
  int routeIndex=0;
  for (  ProcessingMuleEventWork work : works) {
    MuleEvent response=null;
    Exception exception=null;
    MessageProcessor route=this.routes.get(routeIndex++);
    try {
      response=work.getResult(this.timeout,TimeUnit.MILLISECONDS);
    }
 catch (    ResponseTimeoutException e) {
      exception=e;
    }
catch (    InterruptedException e) {
      exception=e;
    }
catch (    Exception e) {
      exception=new DispatchException(MessageFactory.createStaticMessage(String.format("route number %d failed to be executed",routeIndex)),event,route,exception);
    }
    if (exception != null) {
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("route %d generated exception for MuleEvent %s",routeIndex,event.getId()),exception);
      }
      response=DefaultMuleEvent.copy(event);
      ExceptionPayload ep=new DefaultExceptionPayload(exception);
      ep.getInfo().put(MuleProperties.MULE_CORRELATION_SEQUENCE_PROPERTY,routeIndex);
      response.getMessage().setExceptionPayload(ep);
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("route %d executed successfuly for event %s",routeIndex,event.getId()));
      }
    }
    responses.add(response);
  }
  return this.aggregationStrategy.aggregate(new AggregationContext(event,responses));
}
