{
  final DomainClassLoaderRepository domainClassLoaderRepository=mock(DomainClassLoaderRepository.class);
  when(domainClassLoaderRepository.getDomainClassLoader(DOMAIN_NAME)).thenReturn(domainCL);
  final NativeLibraryFinderFactory nativeLibraryFinderFactory=mock(NativeLibraryFinderFactory.class);
  MuleApplicationClassLoaderFactory classLoaderFactory=new MuleApplicationClassLoaderFactory(domainClassLoaderRepository,nativeLibraryFinderFactory);
  final ApplicationDescriptor descriptor=new ApplicationDescriptor();
  descriptor.setName(APP_NAME);
  descriptor.setDomain(DOMAIN_NAME);
  final Set<ApplicationPluginDescriptor> plugins=new HashSet<>();
  final ApplicationPluginDescriptor pluginDescriptor=new ApplicationPluginDescriptor();
  pluginDescriptor.setName("plugin1");
  plugins.add(pluginDescriptor);
  descriptor.setPlugins(plugins);
  final MuleApplicationClassLoader artifactClassLoader=(MuleApplicationClassLoader)classLoaderFactory.create(descriptor);
  assertThat(artifactClassLoader.getURLs(),is(equalTo(artifactClassLoader.getURLs())));
  assertThat(artifactClassLoader.getParent(),is(instanceOf(CompositeClassLoader.class)));
  assertThat(artifactClassLoader.getParent().getParent(),is(domainCL));
}
