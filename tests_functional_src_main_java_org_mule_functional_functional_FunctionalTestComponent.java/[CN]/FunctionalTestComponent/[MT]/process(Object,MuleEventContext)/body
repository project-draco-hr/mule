{
  if (enableMessageHistory) {
    messageHistory.add(data);
  }
  if (logger.isInfoEnabled()) {
    String msg=StringMessageUtils.getBoilerPlate("Message Received in service: " + context.getFlowConstruct().getName() + ". Content is: "+ StringMessageUtils.truncate(data.toString(),100,true),'*',80);
    logger.info(msg);
  }
  final InternalMessage message=context.getMessage();
  if (isLogMessageDetails() && logger.isInfoEnabled()) {
    StringBuilder sb=new StringBuilder();
    sb.append("Full Message payload: ").append(SystemUtils.LINE_SEPARATOR);
    sb.append(message.getPayload().getValue().toString()).append(SystemUtils.LINE_SEPARATOR);
    sb.append(StringMessageUtils.headersToString(message));
    logger.info(sb.toString());
  }
  if (eventCallback != null) {
    eventCallback.eventReceived(context,this,muleContext);
  }
  Object replyMessage;
  if (returnData != null) {
    if (returnData instanceof String && muleContext.getExpressionLanguage().isExpression(returnData.toString())) {
      replyMessage=muleContext.getExpressionLanguage().parse(returnData.toString(),context.getEvent(),flowConstruct);
    }
 else {
      replyMessage=returnData;
    }
  }
 else {
    if (appendString != null) {
      replyMessage=append(data.toString(),context.getEvent());
    }
 else {
      replyMessage=data;
    }
  }
  if (isEnableNotifications()) {
    muleContext.fireNotification(new FunctionalTestNotification(context,replyMessage,FunctionalTestNotification.EVENT_RECEIVED));
  }
  if (waitTime > 0) {
    try {
      Thread.sleep(waitTime);
    }
 catch (    InterruptedException e) {
      logger.info("FunctionalTestComponent waitTime was interrupted");
    }
  }
  return replyMessage;
}
