{
  configureRequesterExpressions();
  addRequesterProperties(message);
  final List<FieldDebugInfo> debugInfo=requester.getDebugInfo(event);
  assertThat(debugInfo.size(),equalTo(9));
  assertThat(debugInfo,hasItem(fieldLike(URI_DEBUG,String.class,String.format("http://%s:%s/",HOST,PORT))));
  assertThat(debugInfo,hasItem(fieldLike(METHOD_DEBUG,String.class,METHOD)));
  assertThat(debugInfo,hasItem(fieldLike(STREAMING_MODE_DEBUG,Boolean.class,TRUE)));
  assertThat(debugInfo,hasItem(fieldLike(SEND_BODY_DEBUG,HttpSendBodyMode.class,ALWAYS)));
  assertThat(debugInfo,hasItem(fieldLike(FOLLOW_REDIRECTS_DEBUG,Boolean.class,TRUE)));
  assertThat(debugInfo,hasItem(fieldLike(PARSE_RESPONSE_DEBUG,Boolean.class,TRUE)));
  assertThat(debugInfo,hasItem(fieldLike(RESPONSE_TIMEOUT_DEBUG,Integer.class,RESPONSE_TIMEOUT)));
  List<Matcher<FieldDebugInfo>> paramMatchers=new ArrayList<>();
  paramMatchers.add(fieldLike(PARAM_NAME1,String.class,PARAM_VALUE1));
  paramMatchers.add(fieldLike(PARAM_NAME2,List.class,contains(PARAM_VALUE1,PARAM_VALUE2)));
  assertThat(debugInfo,hasItem(objectLike(QUERY_PARAMS_DEBUG,List.class,paramMatchers)));
  if (securityFieldMatchers == null) {
    assertThat(debugInfo,hasItem(fieldLike(SECURITY_DEBUG,HttpRequestAuthentication.class,isNull())));
  }
 else {
    assertThat(debugInfo,hasItem(objectLike(SECURITY_DEBUG,HttpRequestAuthentication.class,securityFieldMatchers)));
  }
}
