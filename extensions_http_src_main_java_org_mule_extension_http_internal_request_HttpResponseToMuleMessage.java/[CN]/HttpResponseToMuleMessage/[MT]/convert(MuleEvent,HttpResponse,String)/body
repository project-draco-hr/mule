{
  String responseContentType=response.getHeaderValueIgnoreCase(CONTENT_TYPE);
  DataType dataType=muleEvent.getMessage().getDataType();
  if (StringUtils.isEmpty(responseContentType) && !MimeTypes.ANY.equals(dataType.getMimeType())) {
    responseContentType=DataTypeUtils.getContentType(dataType);
  }
  InputStream responseInputStream=((InputStreamHttpEntity)response.getEntity()).getInputStream();
  String encoding=getEncoding(responseContentType);
  Object payload=responseInputStream;
  Map<String,DataHandler> parts=new HashMap<>();
  if (responseContentType != null && parseResponse) {
    if (responseContentType.startsWith(MULTI_PART_PREFIX)) {
      try {
        parts=processParts(responseInputStream,responseContentType);
        payload=NullPayload.getInstance();
      }
 catch (      IOException e) {
        throw new MessagingException(muleEvent,e);
      }
    }
 else     if (responseContentType.startsWith(APPLICATION_X_WWW_FORM_URLENCODED.toLowerCase())) {
      payload=HttpParser.decodeString(IOUtils.toString(responseInputStream),encoding);
    }
  }
  if (config.isEnableCookies()) {
    processCookies(response,uri);
  }
  HttpResponseAttributes responseAttributes=createAttributes(response,parts);
  if (encoding != null) {
    dataType=createFromDataType(dataType,encoding);
  }
  MuleMessage responseMessage=new DefaultMuleMessage(payload,dataType,responseAttributes);
  String requestMessageId=muleEvent.getMessage().getUniqueId();
  String requestMessageRootId=muleEvent.getMessage().getMessageRootId();
  ((DefaultMuleMessage)responseMessage).setUniqueId(requestMessageId);
  ((DefaultMuleMessage)responseMessage).setMessageRootId(requestMessageRootId);
  return responseMessage;
}
