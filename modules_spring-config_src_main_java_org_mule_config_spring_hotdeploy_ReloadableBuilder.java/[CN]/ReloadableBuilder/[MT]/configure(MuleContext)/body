{
  final boolean redeploymentEnabled=!StartupContext.get().getStartupOptions().containsKey("production");
  try {
    final ConfigResource[] allResources;
    if (useDefaultConfigResource) {
      allResources=new ConfigResource[configResources.length + 2];
      allResources[0]=new ConfigResource(MULE_SPRING_CONFIG);
      allResources[1]=new ConfigResource(MULE_DEFAULTS_CONFIG);
      System.arraycopy(configResources,0,allResources,2,configResources.length);
      this.monitoredResource=new File(allResources[2].getUrl().getFile());
    }
 else {
      allResources=new ConfigResource[configResources.length + 1];
      allResources[0]=new ConfigResource(MULE_SPRING_CONFIG);
      System.arraycopy(configResources,0,allResources,1,configResources.length);
      this.monitoredResource=new File(allResources[1].getUrl().getFile());
    }
    if (redeploymentEnabled && logger.isInfoEnabled()) {
      logger.info("Monitoring for hot-reload: " + monitoredResource);
    }
    final FileWatcher watcher=new ConfigFileWatcher(muleContext);
    if (redeploymentEnabled) {
      muleContext.registerListener(new MuleContextNotificationListener<MuleContextNotification>(){
        public void onNotification(        MuleContextNotification notification){
          final int action=notification.getAction();
switch (action) {
case MuleContextNotification.CONTEXT_STARTED:
            System.out.println("ReloadableBuilder.onNotification:: CONTEXT_STARTED");
          scheduleConfigMonitor(watcher);
        break;
case MuleContextNotification.CONTEXT_STOPPING:
      System.out.println("ReloadableBuilder.onNotification:: CONTEXT_STOPPING");
    watchTimer.shutdownNow();
  muleContext.unregisterListener(this);
break;
}
}
}
);
}
super.configure(muleContext);
}
 catch (NotificationException e) {
throw new ConfigurationException(e);
}
catch (IOException e) {
throw new ConfigurationException(e);
}
}
