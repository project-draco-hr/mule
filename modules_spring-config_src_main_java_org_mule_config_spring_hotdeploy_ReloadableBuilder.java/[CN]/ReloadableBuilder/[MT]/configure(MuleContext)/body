{
  final boolean redeploymentEnabled=!StartupContext.get().getStartupOptions().containsKey("production");
  try {
    final ConfigResource[] allResources;
    if (useDefaultConfigResource) {
      allResources=new ConfigResource[configResources.length + 2];
      allResources[0]=new ConfigResource(MULE_SPRING_CONFIG);
      allResources[1]=new ConfigResource(MULE_DEFAULTS_CONFIG);
      System.arraycopy(configResources,0,allResources,2,configResources.length);
    }
 else {
      allResources=new ConfigResource[configResources.length + 1];
      allResources[0]=new ConfigResource(MULE_SPRING_CONFIG);
      System.arraycopy(configResources,0,allResources,1,configResources.length);
    }
    this.monitoredResource=new File(allResources[1].getUrl().getFile());
    ClassLoader parent=MuleBootstrapUtils.isStandalone() ? new DefaultMuleSharedDomainClassLoader(CLASSLOADER_ROOT) : CLASSLOADER_ROOT;
    ClassLoader cl=new MuleApplicationClassLoader(this.monitoredResource,parent);
    Thread.currentThread().setContextClassLoader(cl);
    if (redeploymentEnabled && logger.isInfoEnabled()) {
      logger.info("Monitoring for hot-reload: " + monitoredResource);
    }
    final FileWatcher watcher=new ConfigFileWatcher(muleContext);
    if (redeploymentEnabled) {
      muleContext.registerListener(new MuleContextNotificationListener<MuleContextNotification>(){
        public void onNotification(        MuleContextNotification notification){
          if (notification.getAction() == MuleContextNotification.CONTEXT_STARTED) {
            scheduleConfigMonitor(watcher);
          }
        }
      }
);
    }
    super.configure(muleContext);
  }
 catch (  NotificationException e) {
    throw new ConfigurationException(e);
  }
catch (  IOException e) {
    throw new ConfigurationException(e);
  }
}
