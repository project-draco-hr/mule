{
  final Latch latch1=new Latch();
  final Latch latch2=new Latch();
  FunctionalTestComponent tc1=getFunctionalTestComponent("testComponent1");
  FunctionalTestComponent tc2=getFunctionalTestComponent("testComponent2");
  assertNotNull(tc1);
  assertNotNull(tc2);
  tc1.setEventCallback(new EventCallback(){
    public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      latch1.release();
    }
  }
);
  tc2.setEventCallback(new EventCallback(){
    public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      latch2.release();
    }
  }
);
  MuleClient client=new MuleClient(muleContext);
  Map<String,Object> props=new HashMap<String,Object>();
  props.put("port",getPorts().get(0));
  props.put("path","foo");
  MuleMessage result=client.send("clientEndpoint",TEST_MESSAGE,props);
  assertEquals(TEST_MESSAGE + " Received",result.getPayloadAsString());
  assertTrue(latch1.await(3000,TimeUnit.MILLISECONDS));
  props.put("port",getPorts().get(1));
  result=client.send("clientEndpoint",TEST_MESSAGE,props);
  assertEquals(TEST_MESSAGE + " Received",result.getPayloadAsString());
  assertTrue(latch2.await(3000,TimeUnit.MILLISECONDS));
}
