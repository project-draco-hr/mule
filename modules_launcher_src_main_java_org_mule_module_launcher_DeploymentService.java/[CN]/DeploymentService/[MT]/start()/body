{
  final Map<String,Object> options=StartupContext.get().getStartupOptions();
  String appString=(String)options.get("app");
  final File appsDir=MuleContainerBootstrapUtils.getMuleAppsDir();
  String[] appAnchors=appsDir.list(new SuffixFileFilter(APP_ANCHOR_SUFFIX));
  for (  String anchor : appAnchors) {
    new File(appsDir,anchor).delete();
  }
  String[] apps;
  final boolean explicitAppSet=appString != null;
  if (!explicitAppSet) {
    final String[] zips=appsDir.list(new SuffixFileFilter(".zip"));
    Arrays.sort(zips);
    for (    String zip : zips) {
      try {
        deployer.installFromAppDir(zip);
      }
 catch (      Throwable t) {
        logger.error(String.format("Failed to install app from archive '%s'",zip),t);
        File appFile=new File(appsDir,zip);
        try {
          addZombie(appFile.toURL());
        }
 catch (        MalformedURLException muex) {
          if (logger.isDebugEnabled()) {
            logger.debug(muex);
          }
        }
      }
    }
    apps=appsDir.list(DirectoryFileFilter.DIRECTORY);
    Arrays.sort(apps);
  }
 else {
    apps=appString.split(":");
  }
  for (  String app : apps) {
    final Application a;
    try {
      a=appFactory.createApp(app);
      applications.add(a);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  for (  Application application : applications) {
    try {
      deployer.deploy(application);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  if (!explicitAppSet) {
    scheduleChangeMonitor(appsDir);
  }
}
