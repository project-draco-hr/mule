{
  final Map<String,Object> options=StartupContext.get().getStartupOptions();
  String appString=(String)options.get("app");
  final File appsDir=MuleContainerBootstrapUtils.getMuleAppsDir();
  String[] appAnchors=appsDir.list(new SuffixFileFilter(APP_ANCHOR_SUFFIX));
  for (  String anchor : appAnchors) {
    new File(appsDir,anchor).delete();
  }
  String[] apps;
  final boolean explicitAppSet=appString != null;
  DeploymentStatusTracker deploymentStatusTracker=new DeploymentStatusTracker();
  addDeploymentListener(deploymentStatusTracker);
  StartupSummaryDeploymentListener summaryDeploymentListener=new StartupSummaryDeploymentListener(deploymentStatusTracker);
  addStartupListener(summaryDeploymentListener);
  if (!explicitAppSet) {
    final String[] zips=appsDir.list(new SuffixFileFilter(".zip"));
    Arrays.sort(zips);
    for (    String zip : zips) {
      String appName=StringUtils.removeEnd(zip,".zip");
      try {
        guardedInstallFromAppDir(zip);
      }
 catch (      Throwable t) {
        logger.error(String.format("Failed to install app from archive '%s'",zip),t);
        deploymentListener.onDeploymentFailure(appName,t);
        File appZip=new File(appsDir,zip);
        addZombie(appZip);
      }
    }
    apps=appsDir.list(DirectoryFileFilter.DIRECTORY);
    Arrays.sort(apps);
  }
 else {
    apps=appString.split(":");
  }
  for (  String app : apps) {
    final Application a;
    try {
      final File appZip=new File(appsDir,app + ".zip");
      if (appZip.exists()) {
        a=guardedInstallFromAppDir(appZip.getName());
      }
 else {
        a=appFactory.createApp(app);
      }
      applications.add(a);
    }
 catch (    Throwable t) {
      deploymentListener.onDeploymentFailure(app,t);
      addZombie(new File(appsDir,app));
      logger.error(String.format("Failed to create application [%s]",app),t);
    }
  }
  for (  Application application : applications) {
    try {
      deploymentListener.onDeploymentStart(application.getAppName());
      guardedDeploy(application);
      deploymentListener.onDeploymentSuccess(application.getAppName());
    }
 catch (    Throwable t) {
      deploymentListener.onDeploymentFailure(application.getAppName(),t);
      final String msg=miniSplash(String.format("Failed to deploy app '%s', see below",application.getAppName()));
      logger.error(msg,t);
    }
  }
  for (  StartupListener listener : startupListeners) {
    try {
      listener.onAfterStartup();
    }
 catch (    Throwable t) {
      logger.error(t);
    }
  }
  if (!explicitAppSet) {
    scheduleChangeMonitor(appsDir);
  }
 else {
    if (logger.isInfoEnabled()) {
      logger.info(miniSplash("Mule is up and running in a fixed app set mode"));
    }
  }
}
