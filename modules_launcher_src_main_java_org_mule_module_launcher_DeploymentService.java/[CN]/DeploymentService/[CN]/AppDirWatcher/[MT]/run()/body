{
  try {
    if (logger.isDebugEnabled()) {
      logger.debug("Checking for changes...");
    }
    if (!lock.tryLock(0,TimeUnit.SECONDS)) {
      if (logger.isDebugEnabled()) {
        logger.debug("Another deployment operation in progress, will skip this cycle. Owner thread: " + ((DebuggableReentrantLock)lock).getOwner());
      }
      return;
    }
    final String[] zips=appsDir.list(new SuffixFileFilter(".zip"));
    String[] apps=appsDir.list(DirectoryFileFilter.DIRECTORY);
    String[] currentAnchors=appsDir.list(new SuffixFileFilter(APP_ANCHOR_SUFFIX));
    if (logger.isDebugEnabled()) {
      StringBuilder sb=new StringBuilder();
      sb.append(String.format("Current anchors:%n"));
      for (      String currentAnchor : currentAnchors) {
        sb.append(String.format("  %s%n",currentAnchor));
      }
      logger.debug(sb.toString());
    }
    @SuppressWarnings("unchecked") final Collection<String> deletedAnchors=CollectionUtils.subtract(Arrays.asList(appAnchors),Arrays.asList(currentAnchors));
    if (logger.isDebugEnabled()) {
      StringBuilder sb=new StringBuilder();
      sb.append(String.format("Deleted anchors:%n"));
      for (      String deletedAnchor : deletedAnchors) {
        sb.append(String.format("  %s%n",deletedAnchor));
      }
      logger.debug(sb.toString());
    }
    for (    String deletedAnchor : deletedAnchors) {
      String appName=StringUtils.removeEnd(deletedAnchor,APP_ANCHOR_SUFFIX);
      try {
        if (findApplication(appName) != null) {
          undeploy(appName);
        }
 else         if (logger.isDebugEnabled()) {
          logger.debug(String.format("Application [%s] has already been undeployed via API",appName));
        }
      }
 catch (      Throwable t) {
        logger.error("Failed to undeploy application: " + appName,t);
      }
    }
    appAnchors=currentAnchors;
    for (    String zip : zips) {
      URL url=null;
      try {
        final String appName=StringUtils.removeEnd(zip,".zip");
        Application app=(Application)CollectionUtils.find(applications,new BeanPropertyValueEqualsPredicate("appName",appName));
        if (app != null) {
          undeploy(appName);
        }
        url=new File(appsDir,zip).toURI().toURL();
        deploy(url);
      }
 catch (      Throwable t) {
        logger.error("Failed to deploy application archive: " + zip,t);
        addZombie(url);
      }
    }
    if (zips.length > 0 || dirty) {
      apps=appsDir.list(DirectoryFileFilter.DIRECTORY);
    }
    Collection deployedAppNames=CollectionUtils.collect(applications,new BeanToPropertyValueTransformer("appName"));
    @SuppressWarnings("unchecked") final Collection<String> addedApps=CollectionUtils.subtract(Arrays.asList(apps),deployedAppNames);
    for (    String addedApp : addedApps) {
      try {
        onNewExplodedApplication(addedApp);
      }
 catch (      Throwable t) {
        logger.error("Failed to deploy exploded application: " + addedApp,t);
        try {
          addZombie(new File(appsDir,addedApp).toURI().toURL());
        }
 catch (        MalformedURLException e) {
          if (logger.isDebugEnabled()) {
            logger.debug(e);
          }
        }
      }
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
  }
 finally {
    if (lock.isHeldByCurrentThread()) {
      lock.unlock();
    }
    dirty=false;
  }
}
