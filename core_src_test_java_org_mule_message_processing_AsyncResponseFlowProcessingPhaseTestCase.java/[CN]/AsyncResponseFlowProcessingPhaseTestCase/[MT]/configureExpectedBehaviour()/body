{
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ResponseCompletionCallback callback=(ResponseCompletionCallback)invocationOnMock.getArguments()[1];
      callback.responseSentSuccessfully();
      return null;
    }
  }
).when(mockTemplate).sendFailureResponseToClient(any(MessagingException.class),any(ResponseCompletionCallback.class));
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ResponseCompletionCallback callback=(ResponseCompletionCallback)invocationOnMock.getArguments()[1];
      callback.responseSentSuccessfully();
      return null;
    }
  }
).when(mockTemplate).sendResponseToClient(any(MuleEvent.class),any(ResponseCompletionCallback.class));
  when(mockTemplate.getMuleEvent()).thenReturn(mockMuleEvent);
}
