{
  boolean hasRegexCharacters=CollectionUtils.find(regexSpecialCharacters,new Predicate(){
    @Override public boolean evaluate(    Object object){
      return attributeValue.contains((CharSequence)object);
    }
  }
) != null;
  boolean compiles=false;
  boolean hasWildcards=false;
  if (hasRegexCharacters) {
    try {
      this.regexPattern=Pattern.compile(attributeValue);
      compiles=true;
    }
 catch (    Exception e) {
    }
    hasWildcards=attributeValue.startsWith("*") || attributeValue.endsWith("*");
  }
  return (hasRegexCharacters && compiles) || (hasRegexCharacters && hasWildcards);
}
