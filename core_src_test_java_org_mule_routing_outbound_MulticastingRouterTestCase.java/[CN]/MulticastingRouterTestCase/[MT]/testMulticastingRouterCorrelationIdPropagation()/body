{
  RegExFilter filter=new RegExFilter("(.*) Message");
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://test1",null,filter,null);
  assertNotNull(endpoint1);
  OutboundEndpoint mockendpoint1=RouterTestUtils.createMockEndpoint(endpoint1);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Provider","test://test2",null,filter,null);
  assertNotNull(endpoint2);
  OutboundEndpoint mockendpoint2=RouterTestUtils.createMockEndpoint(endpoint2);
  MulticastingRouter router=createObject(MulticastingRouter.class);
  List<MessageProcessor> endpoints=new ArrayList<MessageProcessor>();
  endpoints.add(mockendpoint1);
  endpoints.add(mockendpoint2);
  router.setRoutes(endpoints);
  router.setEnableCorrelation(CorrelationMode.NEVER);
  MuleMessage message=new DefaultMuleMessage(TEST_MESSAGE,muleContext);
  message.setProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY,"MyCustomCorrelationId",PropertyScope.INBOUND);
  assertTrue(router.isMatch(message));
  Answer<MuleEvent> answer=new Answer<MuleEvent>(){
    @Override public MuleEvent answer(    InvocationOnMock invocation) throws Throwable {
      Object[] arguments=invocation.getArguments();
      assertEquals(1,arguments.length);
      assertTrue(arguments[0] instanceof MuleEvent);
      MuleEvent event=(MuleEvent)arguments[0];
      String correlationId=event.getMessage().getOutboundProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY);
      assertNotNull(correlationId);
      assertEquals("MyCustomCorrelationId",correlationId);
      return event;
    }
  }
;
  when(mockendpoint1.process(any(MuleEvent.class))).thenAnswer(answer);
  when(mockendpoint2.process(any(MuleEvent.class))).thenAnswer(answer);
  MuleSession session=mock(MuleSession.class);
  router.route(new OutboundRoutingTestEvent(message,session,muleContext));
}
