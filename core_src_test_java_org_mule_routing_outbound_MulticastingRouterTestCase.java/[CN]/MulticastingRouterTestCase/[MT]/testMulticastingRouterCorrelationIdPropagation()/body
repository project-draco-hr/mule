{
  RegExFilter filter=new RegExFilter("(.*) Message");
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://test1",null,filter,null);
  assertNotNull(endpoint1);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Provider","test://test2",null,filter,null);
  assertNotNull(endpoint2);
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  MulticastingRouter router=createObject(MulticastingRouter.class);
  List<MessageProcessor> endpoints=new ArrayList<MessageProcessor>();
  endpoints.add((OutboundEndpoint)mockendpoint1.proxy());
  endpoints.add((OutboundEndpoint)mockendpoint2.proxy());
  router.setRoutes(endpoints);
  router.setEnableCorrelation(CorrelationMode.NEVER);
  MuleMessage message=new DefaultMuleMessage(TEST_MESSAGE,muleContext);
  message.setProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY,"MyCustomCorrelationId",PropertyScope.INBOUND);
  assertTrue(router.isMatch(message));
  ConstraintMatcher expectedCorrelationId=new ConstraintMatcher(){
    @Override public boolean matches(    Object[] args){
      boolean argsMatch=args.length == 1 && args[0] instanceof MuleEvent;
      if (argsMatch) {
        MuleEvent event=(MuleEvent)args[0];
        String correlationId=event.getMessage().getOutboundProperty(MuleProperties.MULE_CORRELATION_ID_PROPERTY);
        return correlationId != null && correlationId.equals("MyCustomCorrelationId");
      }
      return false;
    }
    @Override public Object[] getConstraints(){
      return new String[]{"Outbound Correlation ID property should be set."};
    }
  }
;
  mockendpoint1.expect("process",expectedCorrelationId);
  mockendpoint2.expect("process",expectedCorrelationId);
  MuleSession session=mock(MuleSession.class);
  router.route(new OutboundRoutingTestEvent(message,session,muleContext));
  mockendpoint1.verify();
  mockendpoint2.verify();
}
