{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getFlowConstruct",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?synchronous=true");
  assertNotNull(endpoint1);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Provider","test://Test2Provider?synchronous=true");
  assertNotNull(endpoint2);
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  MulticastingRouter router=createObject(MulticastingRouter.class);
  RegExFilter filter=new RegExFilter("(.*) Message");
  router.setFilter(filter);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add((OutboundEndpoint)mockendpoint1.proxy());
  endpoints.add((OutboundEndpoint)mockendpoint2.proxy());
  router.setEndpoints(endpoints);
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage(TEST_MESSAGE,muleContext);
  assertTrue(router.isMatch(message));
  MuleEvent event=new OutboundRoutingTestEvent(message,null);
  mockendpoint1.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  mockendpoint2.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  MuleMessage result=router.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy()));
  assertNotNull(result);
  assertTrue(result instanceof MuleMessageCollection);
  assertEquals(2,((MuleMessageCollection)result).size());
  mockendpoint1.verify();
  mockendpoint2.verify();
}
