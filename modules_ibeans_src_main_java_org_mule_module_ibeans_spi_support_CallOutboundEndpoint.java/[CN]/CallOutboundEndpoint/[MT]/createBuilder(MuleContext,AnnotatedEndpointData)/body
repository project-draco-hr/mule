{
  try {
    String address=epData.getAddress();
    int i=address.indexOf(":/");
    String scheme;
    if (i > -1) {
      scheme=address.substring(0,i);
      address=scheme + "://dynamic";
      EndpointURI tempUri=new MuleEndpointURI(address,context);
      AbstractConnector cnn=null;
      if (epData.getConnectorName() != null) {
        cnn=(AbstractConnector)context.getRegistry().lookupConnector(epData.getConnectorName());
      }
      if (cnn == null) {
        cnn=(AbstractConnector)new TransportFactory(context).createConnector(tempUri);
        if (epData.getConnectorName() != null) {
          cnn.setName(epData.getConnectorName());
        }
        context.getRegistry().registerConnector(cnn);
      }
      Map props=epData.getProperties();
      if (props == null) {
        props=new HashMap();
      }
 else {
        BeanUtils.populateWithoutFail(cnn,props,false);
      }
      EndpointBuilder builder=context.getRegistry().lookupEndpointFactory().getEndpointBuilder(address);
      builder.setConnector(cnn);
      builder.setName(epData.getName());
      builder.setProperties(props);
      return builder;
    }
 else {
      throw new IllegalArgumentException("When defining a dynamic endpoint the endpoint scheme must be set i.e. http://{dynamic}");
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
