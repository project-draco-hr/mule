{
  try {
    boolean sync=true;
    Call call=(Call)msgContext.getProperty("call_object");
    if (call == null) {
      throw new IllegalStateException("The call_object property must be set on the message context to the client Call object");
    }
    muleContext=(MuleContext)call.getProperty(MuleProperties.MULE_CONTEXT_PROPERTY);
    if (muleContext == null) {
      throw new IllegalArgumentException("Property org.mule.MuleContext not set on Axis MessageContext");
    }
    MuleEvent event=(MuleEvent)call.getProperty(MuleProperties.MULE_EVENT_PROPERTY);
    if (Boolean.TRUE.equals(call.getProperty("axis.one.way"))) {
      sync=false;
    }
    String uri=msgContext.getStrProp(MessageContext.TRANS_URL);
    ImmutableEndpoint requestEndpoint=(ImmutableEndpoint)call.getProperty(MuleProperties.MULE_ENDPOINT_PROPERTY);
    OutboundEndpoint endpoint;
    if (msgContext.getUsername() != null) {
      String[] tempEndpoint=uri.split("//");
      String credentialString=msgContext.getUsername() + ":" + msgContext.getPassword();
      uri=tempEndpoint[0] + "//" + credentialString+ "@"+ tempEndpoint[1];
      endpoint=lookupEndpoint(uri);
    }
 else {
      endpoint=lookupEndpoint(uri);
    }
    if (requestEndpoint.getConnector() instanceof AxisConnector) {
      msgContext.setTypeMappingRegistry(((AxisConnector)requestEndpoint.getConnector()).getAxis().getTypeMappingRegistry());
    }
    Map<String,Object> props=new HashMap<String,Object>();
    Object payload;
    int contentLength=0;
    String contentType=null;
    if (msgContext.getRequestMessage().countAttachments() > 0) {
      File temp=File.createTempFile("soap",".tmp");
      temp.deleteOnExit();
      FileOutputStream fos=new FileOutputStream(temp);
      msgContext.getRequestMessage().writeTo(fos);
      fos.close();
      contentLength=(int)temp.length();
      payload=new FileInputStream(temp);
      contentType="multipart/related";
    }
 else {
      ByteArrayOutputStream baos=new ByteArrayOutputStream(8192);
      msgContext.getRequestMessage().writeTo(baos);
      baos.close();
      payload=baos.toByteArray();
    }
    for (Iterator iterator=msgContext.getPropertyNames(); iterator.hasNext(); ) {
      String name=(String)iterator.next();
      if (!name.equals("call_object") && !name.equals("wsdl.service")) {
        props.put(name,msgContext.getProperty(name));
      }
    }
    if ((RequestContext.getEvent() != null) && (RequestContext.getEvent().getMessage() != null)) {
      props=AxisCleanAndAddProperties.cleanAndAdd(RequestContext.getEventContext());
    }
    String scheme=requestEndpoint.getEndpointURI().getScheme();
    if (!("vm".equalsIgnoreCase(scheme) || "jms".equalsIgnoreCase(scheme))) {
      if (call.useSOAPAction()) {
        uri=call.getSOAPActionURI();
      }
      props.put(SoapConstants.SOAP_ACTION_PROPERTY_CAPS,uri);
    }
    if (contentLength > 0) {
      props.put(HttpConstants.HEADER_CONTENT_LENGTH,Integer.toString(contentLength));
    }
    if (props.get(HttpConstants.HEADER_CONTENT_TYPE) == null) {
      if (contentType == null) {
        contentType="text/xml";
      }
      props.put(HttpConstants.HEADER_CONTENT_TYPE,contentType);
    }
    MuleMessage message=new DefaultMuleMessage(payload,props,muleContext);
    MuleSession session;
    if (event != null) {
      session=event.getSession();
    }
 else {
      session=new DefaultMuleSession(muleContext);
    }
    logger.info("Making Axis soap request on: " + uri);
    if (logger.isDebugEnabled()) {
      logger.debug("Soap request is:\n" + new String((payload instanceof byte[] ? (byte[])payload : payload.toString().getBytes())));
    }
    if (sync) {
      EndpointBuilder builder=new EndpointURIEndpointBuilder(endpoint);
      builder.setExchangePattern(MessageExchangePattern.REQUEST_RESPONSE);
      OutboundEndpoint syncEndpoint=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint(builder);
      MuleEvent dispatchEvent=new DefaultMuleEvent(message,new NullInboundEndpoint(MessageExchangePattern.REQUEST_RESPONSE,muleContext),session);
      MuleMessage result=null;
      MuleEvent resultEvent=syncEndpoint.process(dispatchEvent);
      if (resultEvent != null) {
        result=resultEvent.getMessage();
      }
      if (result != null) {
        byte[] response=result.getPayloadAsBytes();
        Message responseMessage=new Message(response);
        msgContext.setResponseMessage(responseMessage);
      }
 else {
        logger.warn("No response message was returned from synchronous call to: " + uri);
      }
      if (payload instanceof File) {
        ((File)payload).delete();
      }
    }
 else {
      MuleEvent dispatchEvent=new DefaultMuleEvent(message,new NullInboundEndpoint(MessageExchangePattern.ONE_WAY,muleContext),session);
      endpoint.process(dispatchEvent);
    }
  }
 catch (  Exception e) {
    if (e instanceof AxisFault) {
      throw (AxisFault)e;
    }
 else {
      throw new AxisFault(e.getMessage(),e);
    }
  }
}
