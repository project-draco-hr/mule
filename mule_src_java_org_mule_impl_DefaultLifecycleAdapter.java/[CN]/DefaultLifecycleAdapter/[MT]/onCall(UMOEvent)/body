{
  Object result=null;
  try {
    Object methodOverride=event.removeProperty(MuleProperties.MULE_METHOD_PROPERTY);
    Method method=null;
    if (methodOverride instanceof Method) {
      method=(Method)methodOverride;
    }
 else     if (methodOverride != null) {
      method=ClassHelper.getMethod(methodOverride.toString(),component.getClass());
    }
    result=entryPoint.invoke(component,RequestContext.getEventContext(),method);
    UMOMessage resultMessage=null;
    if (result == null && entryPoint.isVoid()) {
      resultMessage=new MuleMessage(event.getTransformedMessage(),event.getProperties());
    }
 else     if (result != null) {
      if (result instanceof UMOMessage) {
        resultMessage=(UMOMessage)result;
      }
 else {
        resultMessage=new MuleMessage(result,event.getProperties());
      }
    }
    boolean stopProcessing=false;
    if (descriptor.getResponseRouter() != null) {
      stopProcessing=descriptor.getResponseRouter().isStopProcessing();
    }
 else {
      stopProcessing=event.isStopFurtherProcessing();
    }
    if (descriptor.getResponseRouter() != null) {
      if (event.isSynchronous() && !stopProcessing) {
        stopProcessing=true;
        descriptor.getOutboundRouter().route(resultMessage,event.getSession(),false);
      }
      logger.debug("Waiting for response router message");
      result=descriptor.getResponseRouter().getResponse(resultMessage);
      if (stopProcessing) {
        logger.debug("Setting stop oubound processing according to response router");
        RequestContext.getEvent().setStopFurtherProcessing(true);
      }
      return result;
    }
 else {
      return resultMessage;
    }
  }
 catch (  Exception e) {
    throw new MuleException(new Message(Messages.FAILED_TO_INVOKE_X,"UMO Component: " + descriptor.getName()),e);
  }
}
