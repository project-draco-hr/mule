{
  Mock session=MuleTestUtils.getMockSession();
  Service testService=getTestService("test",Apple.class);
  InboundRouterCollection messageRouter=testService.getInboundRouter();
  messageRouter.addRouter(router);
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  ImmutableEndpoint endpoint=getTestInboundEndpoint(false);
  MuleEvent event=new DefaultMuleEvent(message,endpoint,(MuleSession)session.proxy());
  session.expectAndReturn("getService",testService);
  assertTrue(router.isMatch(event));
  session.expect("dispatchEvent",C.eq(event));
  session.expectAndReturn("getService",testService);
  session.expectAndReturn("getService",testService);
  messageRouter.process(event);
  session.verify();
  endpoint=getTestInboundEndpoint(true);
  message=new DefaultMuleMessage("test event",muleContext);
  event=new DefaultMuleEvent(message,endpoint,(MuleSession)session.proxy());
  session.expectAndReturn("sendEvent",C.eq(event),message);
  session.expectAndReturn("getService",testService);
  session.expectAndReturn("getService",testService);
  MuleMessage result=messageRouter.process(event).getMessage();
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
  session.expect("toString");
  session.expectAndReturn("getService",testService);
  endpoint=getTestInboundEndpoint(false);
  event=new DefaultMuleEvent(message,endpoint,(MuleSession)session.proxy());
  assertTrue(!router.isMatch(event));
  messageRouter.process(event);
  session.verify();
}
