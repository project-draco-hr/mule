{
  MuleExpressionEvaluator eval=new MuleExpressionEvaluator();
  eval.setMuleContext(muleContext);
  MuleMessage message=new DefaultMuleMessage("test",muleContext);
  message.setCorrelationId(message.getUniqueId());
  message.setCorrelationSequence(1);
  message.setCorrelationGroupSize(2);
  message.setReplyTo("foo");
  message.setEncoding("UTF-8");
  Exception e=new Exception("dummy");
  message.setExceptionPayload(new DefaultExceptionPayload(e));
  Object result=eval.evaluate(null,message);
  assertNotNull(result);
  assertEquals(message,result);
  result=eval.evaluate(null,null);
  assertNull(result);
  assertEquals(message.getUniqueId(),eval.evaluate("message.id",message));
  assertEquals(message.getUniqueId(),eval.evaluate("message.correlationId",message));
  assertEquals(new Integer(1),eval.evaluate("message.correlationSequence",message));
  assertEquals(new Integer(2),eval.evaluate("message.correlationGroupSize",message));
  assertEquals("foo",eval.evaluate("message.replyTo",message));
  assertEquals(e,eval.evaluate("message.exception",message));
  assertEquals("UTF-8",eval.evaluate("message.encoding",message));
  assertEquals("test",eval.evaluate("message.payload",message));
  try {
    eval.evaluate("message.xxx",message);
    fail("message.xxx is not a supported expresion");
  }
 catch (  Exception e1) {
  }
}
