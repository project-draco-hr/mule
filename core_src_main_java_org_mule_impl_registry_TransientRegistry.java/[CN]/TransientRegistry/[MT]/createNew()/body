{
  UMOLifecycleManager lifecycleManager=new GenericLifecycleManager();
  lifecycleManager.registerLifecycle(new ManagementContextInitialisePhase());
  lifecycleManager.registerLifecycle(new ManagementContextStartPhase());
  lifecycleManager.registerLifecycle(new ManagementContextStopPhase());
  lifecycleManager.registerLifecycle(new ManagementContextDisposePhase());
  MuleConfiguration config=new MuleConfiguration();
  QueueManager queueManager=new TransactionalQueueManager();
  queueManager.setPersistenceStrategy(new CachingPersistenceStrategy(new MemoryPersistenceStrategy()));
  ThreadingProfile tp=config.getDefaultThreadingProfile();
  UMOWorkManager workManager=new MuleWorkManager(tp,"MuleServer");
  ServerNotificationManager notificationManager=new ServerNotificationManager();
  notificationManager.registerEventType(ManagerNotificationListener.class,ManagerNotification.class);
  notificationManager.registerEventType(ModelNotificationListener.class,ModelNotification.class);
  notificationManager.registerEventType(ComponentNotificationListener.class,ComponentNotification.class);
  notificationManager.registerEventType(SecurityNotificationListener.class,SecurityNotification.class);
  notificationManager.registerEventType(ManagementNotificationListener.class,ManagementNotification.class);
  notificationManager.registerEventType(AdminNotificationListener.class,AdminNotification.class);
  notificationManager.registerEventType(CustomNotificationListener.class,CustomNotification.class);
  notificationManager.registerEventType(ConnectionNotificationListener.class,ConnectionNotification.class);
  notificationManager.registerEventType(RegistryNotificationListener.class,RegistryNotification.class);
  notificationManager.registerEventType(ExceptionNotificationListener.class,ExceptionNotification.class);
  notificationManager.registerEventType(TransactionNotificationListener.class,TransactionNotification.class);
  UMOSecurityManager securityManager=new MuleSecurityManager();
  UMOManagementContext context=new ManagementContext(lifecycleManager);
  TransientRegistry registry=new TransientRegistry();
  registry.setConfiguration(config);
  RegistryContext.setRegistry(registry);
  registry.getObjectTypeMap(ObjectProcessor.class).put(MuleProperties.OBJECT_MANAGMENT_CONTEXT_PROCESSOR,new ManagementContextDependencyProcessor(context));
  context.setId(UUID.getUUID());
  MuleServer.setManagementContext(context);
  registry.registerObject(MuleProperties.OBJECT_MANAGEMENT_CONTEXT,context,context);
  registry.registerObject(MuleProperties.OBJECT_SECURITY_MANAGER,securityManager,context);
  registry.registerObject(MuleProperties.OBJECT_WORK_MANAGER,workManager,context);
  registry.registerObject(MuleProperties.OBJECT_NOTIFICATION_MANAGER,notificationManager,context);
  registry.registerObject(MuleProperties.OBJECT_QUEUE_MANAGER,queueManager,context);
  registry.registerObject(MuleProperties.OBJECT_MULE_SIMPLE_REGISTRY_BOOTSTRAP,new SimpleRegistryBootstrap(),context);
  context.setWorkManager(workManager);
  context.setSecurityManager(securityManager);
  context.setNotificationManager(notificationManager);
  context.setQueueManager(queueManager);
  ModelServiceDescriptor sd=(ModelServiceDescriptor)registry.lookupServiceDescriptor(ServiceDescriptorFactory.MODEL_SERVICE_TYPE,config.getSystemModelType(),null);
  UMOModel model=sd.createModel();
  model.setName(MuleProperties.OBJECT_SYSTEM_MODEL);
  registry.registerModel(model);
  context.initialise();
  registry.initialise();
  return registry;
}
