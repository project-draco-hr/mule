{
  this.state="my state";
  this.incomingState=String.format(OAuthProperties.EVENT_STATE_TEMPLATE + "%s",eventId,state);
  this.exception=false;
  this.restoredEvent=Mockito.mock(MuleEvent.class,Mockito.RETURNS_DEEP_STUBS);
  this.manager=Mockito.mock(OAuth2Manager.class,Mockito.RETURNS_DEEP_STUBS);
  Mockito.when(this.manager.restoreAuthorizationEvent(eventId)).thenReturn(restoredEvent);
  this.processor=new OAuth2FetchAccessTokenMessageProcessor(this.manager,null);
  this.processor.setMuleContext(this.muleContext);
  this.event=Mockito.mock(MuleEvent.class,Mockito.RETURNS_DEEP_STUBS);
  Mockito.when(event.getMessage().getInvocationProperty(OAuthProperties.VERIFIER)).thenReturn(verifier);
  Mockito.when(event.getMessage().getInboundProperty("state")).thenReturn(incomingState);
  Mockito.when(event.getMuleContext().getExpressionManager().parse(Mockito.anyString(),Mockito.any(MuleMessage.class))).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[0];
    }
  }
);
}
