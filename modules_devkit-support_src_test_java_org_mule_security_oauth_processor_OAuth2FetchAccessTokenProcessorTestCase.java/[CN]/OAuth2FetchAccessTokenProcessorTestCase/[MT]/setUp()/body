{
  state="my state";
  incomingState=String.format(EVENT_STATE_TEMPLATE + "%s",eventId,state);
  exception=false;
  restoredEvent=mock(MuleEvent.class,RETURNS_DEEP_STUBS);
  when(restoredEvent.getMessage().getInboundProperty("http.query.params")).thenReturn(restoredParameters);
  manager=mock(OAuth2Manager.class,RETURNS_DEEP_STUBS);
  when(manager.restoreAuthorizationEvent(eventId)).thenReturn(restoredEvent);
  processor=new OAuth2FetchAccessTokenMessageProcessor(manager,null);
  processor.setMuleContext(muleContext);
  event=mock(MuleEvent.class,RETURNS_DEEP_STUBS);
  when(event.getMessage().getInvocationProperty(OAuthProperties.VERIFIER)).thenReturn(verifier);
  parameters.put("state",incomingState);
  when(event.getMessage().getInboundProperty("http.query.params")).thenReturn(parameters);
  when(restoredEvent.getMuleContext().getExpressionManager().parse(anyString(),any(MuleMessage.class))).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[0];
    }
  }
);
}
