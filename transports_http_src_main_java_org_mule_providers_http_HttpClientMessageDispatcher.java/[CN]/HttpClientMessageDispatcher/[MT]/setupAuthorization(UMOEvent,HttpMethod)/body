{
  httpMethod.setDoAuthentication(true);
  if (event != null && event.getCredentials() != null) {
    UMOMessage msg=event.getMessage();
    String authScopeHost=msg.getStringProperty("http.auth.scope.host",null);
    int authScopePort=msg.getIntProperty("http.auth.scope.port",-1);
    String authScopeRealm=msg.getStringProperty("http.auth.scope.realm",null);
    String authScopeScheme=msg.getStringProperty("http.auth.scope.scheme",null);
    client.getState().setCredentials(new AuthScope(authScopeHost,authScopePort,authScopeRealm,authScopeScheme),new UsernamePasswordCredentials(event.getCredentials().getUsername(),new String(event.getCredentials().getPassword())));
    client.getParams().setAuthenticationPreemptive(true);
  }
 else   if (endpoint.getEndpointURI().getUserInfo() != null && endpoint.getProperty(HttpConstants.HEADER_AUTHORIZATION) == null) {
    StringBuffer header=new StringBuffer(128);
    header.append("Basic ");
    header.append(new String(Base64.encodeBase64(endpoint.getEndpointURI().getUserInfo().getBytes(endpoint.getEncoding()))));
    httpMethod.addRequestHeader(HttpConstants.HEADER_AUTHORIZATION,header.toString());
  }
 else {
    client.getParams().setAuthenticationPreemptive(false);
  }
}
