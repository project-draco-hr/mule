{
  HttpMethod httpMethod=getMethod(event);
  connector.setupClientAuthorization(event,httpMethod,client,endpoint);
  httpMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,new MuleHttpMethodRetryHandler());
  Object body=null;
  boolean releaseConn=false;
  try {
    httpMethod=execute(event,httpMethod);
    ExceptionPayload ep=null;
    if (httpMethod.getStatusCode() >= ERROR_STATUS_CODE_RANGE_START) {
      ep=new ExceptionPayload(new DispatchException(event.getMessage(),event.getEndpoint(),new Exception("Http call returned a status of: " + httpMethod.getStatusCode() + " "+ httpMethod.getStatusText())));
    }
    InputStream is=httpMethod.getResponseBodyAsStream();
    if (is == null) {
      body=StringUtils.EMPTY;
      releaseConn=true;
    }
 else {
      is=new ReleasingInputStream(is,httpMethod);
      body=is;
    }
    Header[] headers=httpMethod.getResponseHeaders();
    HttpMessageAdapter adapter=new HttpMessageAdapter(new Object[]{body,headers});
    String status=String.valueOf(httpMethod.getStatusCode());
    adapter.setProperty(HttpConnector.HTTP_STATUS_PROPERTY,status);
    if (logger.isDebugEnabled()) {
      logger.debug("Http response is: " + status);
    }
    UMOMessage m=new MuleMessage(adapter);
    m.setExceptionPayload(ep);
    return m;
  }
 catch (  Exception e) {
    releaseConn=true;
    if (e instanceof DispatchException) {
      throw (DispatchException)e;
    }
    throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
  }
 finally {
    if (releaseConn) {
      httpMethod.releaseConnection();
    }
  }
}
