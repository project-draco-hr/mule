{
  if (!getProtocol().equalsIgnoreCase(endpointUri.getScheme()) && !getProtocol().equalsIgnoreCase(endpointUri.getSchemeMetaInfo())) {
    throw new InitialisationException("The endpointUri scheme is not compatible with this connector: " + getProtocol() + ", "+ endpointUri);
  }
  Properties props=new Properties();
  props.putAll(endpointUri.getParams());
  if (endpointUri.getUserInfo() != null) {
    int i=endpointUri.getUserInfo().indexOf(":");
    if (i == -1) {
      props.setProperty("username",endpointUri.getUserInfo());
    }
 else {
      props.setProperty("username",endpointUri.getUserInfo().substring(0,i));
      props.setProperty("password",endpointUri.getUserInfo().substring(i + 1));
    }
  }
  if (endpointUri.getHost() != null) {
    props.setProperty("hostname",endpointUri.getHost());
    props.setProperty("host",endpointUri.getHost());
  }
  if (endpointUri.getPort() > -1)   props.setProperty("port",String.valueOf(endpointUri.getPort()));
  try {
    BeanUtils.populateWithoutFail(this,props,true);
  }
 catch (  InvocationTargetException e) {
    throw new InitialisationException(e.getMessage(),e);
  }
}
