{
  final Latch toWaitFor=new Latch();
  final Latch taskIsRunning=new Latch();
  final Latch taskHasFinished=new Latch();
  final AtomicBoolean taskWasInterrupted=new AtomicBoolean(false);
  Runnable waiting=new Runnable(){
    public void run(){
      taskIsRunning.countDown();
      toWaitFor.lock();
      if (Thread.currentThread().isInterrupted()) {
        taskWasInterrupted.set(true);
      }
      taskHasFinished.countDown();
    }
  }
;
  Thread waitingThread=new Thread(waiting);
  waitingThread.start();
  taskIsRunning.await();
  Thread.sleep(500);
  waitingThread.interrupt();
  Thread.sleep(100);
  waitingThread.interrupt();
  Thread.sleep(100);
  waitingThread.interrupt();
  Thread.sleep(500);
  assertFalse(taskWasInterrupted.get());
  assertEquals(1,taskHasFinished.getCount());
  toWaitFor.countDown();
  taskHasFinished.await();
  assertTrue(taskWasInterrupted.get());
  assertEquals(0,toWaitFor.getCount());
}
