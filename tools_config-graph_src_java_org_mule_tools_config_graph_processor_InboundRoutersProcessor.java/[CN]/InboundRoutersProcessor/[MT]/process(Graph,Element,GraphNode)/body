{
  Element inboundRouter=currentElement.getChild(MuleTag.ELEMENT_INBOUND_ROUTER);
  if (inboundRouter != null) {
    GraphNode endpointsLink=parent;
    Element router=inboundRouter.getChild(MuleTag.ELEMENT_ROUTER);
    if (router != null) {
      GraphNode routerNode=graph.addNode();
      routerNode.getInfo().setHeader(router.getAttributeValue(MuleTag.ATTRIBUTE_CLASS_NAME));
      routerNode.getInfo().setFillColor(ColorRegistry.COLOR_ROUTER);
      addEdge(graph,routerNode,parent,"inbound router",isTwoWay(router));
      endpointsLink=routerNode;
    }
    List inbounEndpoints=inboundRouter.getChildren(MuleTag.ELEMENT_ENDPOINT);
    for (Iterator iterator=inbounEndpoints.iterator(); iterator.hasNext(); ) {
      Element inEndpoint=(Element)iterator.next();
      String url=inEndpoint.getAttributeValue(MuleTag.ATTRIBUTE_ADDRESS);
      if (url != null) {
        GraphNode in=(GraphNode)environment.getEndpointRegistry().getEndpoint(url,parent.getInfo().getHeader());
        StringBuffer caption=new StringBuffer();
        if (in == null) {
          in=graph.addNode();
          in.getInfo().setFillColor(ColorRegistry.COLOR_ENDPOINT);
          caption.append(url).append("\n");
          appendProperties(inEndpoint,caption);
          appendDescription(inEndpoint,caption);
          in.getInfo().setCaption(caption.toString());
        }
 else {
          caption.append(url).append("\n");
          appendProperties(inEndpoint,caption);
          appendDescription(inEndpoint,caption);
          in.getInfo().setCaption(caption.toString());
        }
        if (in != null) {
          InboundFilterProcessor processor=new InboundFilterProcessor(environment,endpointsLink);
          processor.processInboundFilter(graph,inEndpoint,in,endpointsLink);
        }
      }
    }
  }
}
