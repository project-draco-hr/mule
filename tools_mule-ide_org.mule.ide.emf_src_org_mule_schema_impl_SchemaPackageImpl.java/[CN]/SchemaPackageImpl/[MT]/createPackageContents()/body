{
  if (isCreated)   return;
  isCreated=true;
  agentsTypeEClass=createEClass(AGENTS_TYPE);
  createEAttribute(agentsTypeEClass,AGENTS_TYPE__MIXED);
  createEReference(agentsTypeEClass,AGENTS_TYPE__AGENT);
  agentTypeEClass=createEClass(AGENT_TYPE);
  createEAttribute(agentTypeEClass,AGENT_TYPE__MIXED);
  createEReference(agentTypeEClass,AGENT_TYPE__PROPERTIES);
  createEAttribute(agentTypeEClass,AGENT_TYPE__CLASS_NAME);
  createEAttribute(agentTypeEClass,AGENT_TYPE__NAME);
  createEAttribute(agentTypeEClass,AGENT_TYPE__REF);
  catchAllStrategyTypeEClass=createEClass(CATCH_ALL_STRATEGY_TYPE);
  createEAttribute(catchAllStrategyTypeEClass,CATCH_ALL_STRATEGY_TYPE__MIXED);
  createEReference(catchAllStrategyTypeEClass,CATCH_ALL_STRATEGY_TYPE__ENDPOINT);
  createEReference(catchAllStrategyTypeEClass,CATCH_ALL_STRATEGY_TYPE__GLOBAL_ENDPOINT);
  createEReference(catchAllStrategyTypeEClass,CATCH_ALL_STRATEGY_TYPE__PROPERTIES);
  createEAttribute(catchAllStrategyTypeEClass,CATCH_ALL_STRATEGY_TYPE__CLASS_NAME);
  componentFactoryTypeEClass=createEClass(COMPONENT_FACTORY_TYPE);
  createEAttribute(componentFactoryTypeEClass,COMPONENT_FACTORY_TYPE__MIXED);
  createEAttribute(componentFactoryTypeEClass,COMPONENT_FACTORY_TYPE__CLASS_NAME);
  componentLifecycleAdapterFactoryTypeEClass=createEClass(COMPONENT_LIFECYCLE_ADAPTER_FACTORY_TYPE);
  createEAttribute(componentLifecycleAdapterFactoryTypeEClass,COMPONENT_LIFECYCLE_ADAPTER_FACTORY_TYPE__MIXED);
  createEAttribute(componentLifecycleAdapterFactoryTypeEClass,COMPONENT_LIFECYCLE_ADAPTER_FACTORY_TYPE__CLASS_NAME);
  componentPoolFactoryTypeEClass=createEClass(COMPONENT_POOL_FACTORY_TYPE);
  createEAttribute(componentPoolFactoryTypeEClass,COMPONENT_POOL_FACTORY_TYPE__MIXED);
  createEReference(componentPoolFactoryTypeEClass,COMPONENT_POOL_FACTORY_TYPE__PROPERTIES);
  createEAttribute(componentPoolFactoryTypeEClass,COMPONENT_POOL_FACTORY_TYPE__CLASS_NAME);
  connectionStrategyTypeEClass=createEClass(CONNECTION_STRATEGY_TYPE);
  createEAttribute(connectionStrategyTypeEClass,CONNECTION_STRATEGY_TYPE__MIXED);
  createEReference(connectionStrategyTypeEClass,CONNECTION_STRATEGY_TYPE__PROPERTIES);
  createEAttribute(connectionStrategyTypeEClass,CONNECTION_STRATEGY_TYPE__CLASS_NAME);
  connectorTypeEClass=createEClass(CONNECTOR_TYPE);
  createEAttribute(connectorTypeEClass,CONNECTOR_TYPE__MIXED);
  createEReference(connectorTypeEClass,CONNECTOR_TYPE__PROPERTIES);
  createEReference(connectorTypeEClass,CONNECTOR_TYPE__THREADING_PROFILE);
  createEReference(connectorTypeEClass,CONNECTOR_TYPE__EXCEPTION_STRATEGY);
  createEReference(connectorTypeEClass,CONNECTOR_TYPE__CONNECTION_STRATEGY);
  createEAttribute(connectorTypeEClass,CONNECTOR_TYPE__CLASS_NAME);
  createEAttribute(connectorTypeEClass,CONNECTOR_TYPE__NAME);
  createEAttribute(connectorTypeEClass,CONNECTOR_TYPE__REF);
  constraintTypeEClass=createEClass(CONSTRAINT_TYPE);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__MIXED);
  createEReference(constraintTypeEClass,CONSTRAINT_TYPE__LEFT_FILTER);
  createEReference(constraintTypeEClass,CONSTRAINT_TYPE__RIGHT_FILTER);
  createEReference(constraintTypeEClass,CONSTRAINT_TYPE__FILTER);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__BATCH_SIZE);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__CLASS_NAME);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__EXPECTED_TYPE);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__EXPRESSION);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__FREQUENCY);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__PATH);
  createEAttribute(constraintTypeEClass,CONSTRAINT_TYPE__PATTERN);
  containerContextTypeEClass=createEClass(CONTAINER_CONTEXT_TYPE);
  createEAttribute(containerContextTypeEClass,CONTAINER_CONTEXT_TYPE__MIXED);
  createEReference(containerContextTypeEClass,CONTAINER_CONTEXT_TYPE__PROPERTIES);
  createEAttribute(containerContextTypeEClass,CONTAINER_CONTEXT_TYPE__CLASS_NAME);
  createEAttribute(containerContextTypeEClass,CONTAINER_CONTEXT_TYPE__NAME);
  containerEntryTypeEClass=createEClass(CONTAINER_ENTRY_TYPE);
  createEAttribute(containerEntryTypeEClass,CONTAINER_ENTRY_TYPE__MIXED);
  createEAttribute(containerEntryTypeEClass,CONTAINER_ENTRY_TYPE__REFERENCE);
  createEAttribute(containerEntryTypeEClass,CONTAINER_ENTRY_TYPE__REQUIRED);
  containerPropertyTypeEClass=createEClass(CONTAINER_PROPERTY_TYPE);
  createEAttribute(containerPropertyTypeEClass,CONTAINER_PROPERTY_TYPE__MIXED);
  createEAttribute(containerPropertyTypeEClass,CONTAINER_PROPERTY_TYPE__CONTAINER);
  createEAttribute(containerPropertyTypeEClass,CONTAINER_PROPERTY_TYPE__NAME);
  createEAttribute(containerPropertyTypeEClass,CONTAINER_PROPERTY_TYPE__REFERENCE);
  documentRootEClass=createEClass(DOCUMENT_ROOT);
  createEAttribute(documentRootEClass,DOCUMENT_ROOT__MIXED);
  createEReference(documentRootEClass,DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
  createEReference(documentRootEClass,DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
  createEReference(documentRootEClass,DOCUMENT_ROOT__MULE_CONFIGURATION);
  encryptionStrategyTypeEClass=createEClass(ENCRYPTION_STRATEGY_TYPE);
  createEAttribute(encryptionStrategyTypeEClass,ENCRYPTION_STRATEGY_TYPE__MIXED);
  createEReference(encryptionStrategyTypeEClass,ENCRYPTION_STRATEGY_TYPE__PROPERTIES);
  createEAttribute(encryptionStrategyTypeEClass,ENCRYPTION_STRATEGY_TYPE__CLASS_NAME);
  createEAttribute(encryptionStrategyTypeEClass,ENCRYPTION_STRATEGY_TYPE__NAME);
  endpointIdentifiersTypeEClass=createEClass(ENDPOINT_IDENTIFIERS_TYPE);
  createEAttribute(endpointIdentifiersTypeEClass,ENDPOINT_IDENTIFIERS_TYPE__MIXED);
  createEReference(endpointIdentifiersTypeEClass,ENDPOINT_IDENTIFIERS_TYPE__ENDPOINT_IDENTIFIER);
  endpointIdentifierTypeEClass=createEClass(ENDPOINT_IDENTIFIER_TYPE);
  createEAttribute(endpointIdentifierTypeEClass,ENDPOINT_IDENTIFIER_TYPE__MIXED);
  createEAttribute(endpointIdentifierTypeEClass,ENDPOINT_IDENTIFIER_TYPE__NAME);
  createEAttribute(endpointIdentifierTypeEClass,ENDPOINT_IDENTIFIER_TYPE__VALUE);
  endpointTypeEClass=createEClass(ENDPOINT_TYPE);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__MIXED);
  createEReference(endpointTypeEClass,ENDPOINT_TYPE__TRANSACTION);
  createEReference(endpointTypeEClass,ENDPOINT_TYPE__FILTER);
  createEReference(endpointTypeEClass,ENDPOINT_TYPE__SECURITY_FILTER);
  createEReference(endpointTypeEClass,ENDPOINT_TYPE__PROPERTIES);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__ADDRESS);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__CONNECTOR);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__CREATE_CONNECTOR);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__NAME);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__REF);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__REMOTE_SYNC);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__REMOTE_SYNC_TIMEOUT);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__SYNCHRONOUS);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__TRANSFORMERS);
  createEAttribute(endpointTypeEClass,ENDPOINT_TYPE__TYPE);
  entryPointResolverTypeEClass=createEClass(ENTRY_POINT_RESOLVER_TYPE);
  createEAttribute(entryPointResolverTypeEClass,ENTRY_POINT_RESOLVER_TYPE__MIXED);
  createEAttribute(entryPointResolverTypeEClass,ENTRY_POINT_RESOLVER_TYPE__CLASS_NAME);
  entryTypeEClass=createEClass(ENTRY_TYPE);
  createEAttribute(entryTypeEClass,ENTRY_TYPE__MIXED);
  createEAttribute(entryTypeEClass,ENTRY_TYPE__VALUE);
  environmentPropertiesTypeEClass=createEClass(ENVIRONMENT_PROPERTIES_TYPE);
  createEAttribute(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__MIXED);
  createEAttribute(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__GROUP);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__PROPERTY);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__FACTORY_PROPERTY);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__SYSTEM_PROPERTY);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__MAP);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__LIST);
  createEReference(environmentPropertiesTypeEClass,ENVIRONMENT_PROPERTIES_TYPE__FILE_PROPERTIES);
  exceptionStrategyTypeEClass=createEClass(EXCEPTION_STRATEGY_TYPE);
  createEAttribute(exceptionStrategyTypeEClass,EXCEPTION_STRATEGY_TYPE__MIXED);
  createEReference(exceptionStrategyTypeEClass,EXCEPTION_STRATEGY_TYPE__ENDPOINT);
  createEReference(exceptionStrategyTypeEClass,EXCEPTION_STRATEGY_TYPE__GLOBAL_ENDPOINT);
  createEReference(exceptionStrategyTypeEClass,EXCEPTION_STRATEGY_TYPE__PROPERTIES);
  createEAttribute(exceptionStrategyTypeEClass,EXCEPTION_STRATEGY_TYPE__CLASS_NAME);
  factoryEntryTypeEClass=createEClass(FACTORY_ENTRY_TYPE);
  createEAttribute(factoryEntryTypeEClass,FACTORY_ENTRY_TYPE__MIXED);
  createEAttribute(factoryEntryTypeEClass,FACTORY_ENTRY_TYPE__FACTORY);
  factoryPropertyTypeEClass=createEClass(FACTORY_PROPERTY_TYPE);
  createEAttribute(factoryPropertyTypeEClass,FACTORY_PROPERTY_TYPE__MIXED);
  createEAttribute(factoryPropertyTypeEClass,FACTORY_PROPERTY_TYPE__FACTORY);
  createEAttribute(factoryPropertyTypeEClass,FACTORY_PROPERTY_TYPE__NAME);
  filePropertiesTypeEClass=createEClass(FILE_PROPERTIES_TYPE);
  createEAttribute(filePropertiesTypeEClass,FILE_PROPERTIES_TYPE__MIXED);
  createEAttribute(filePropertiesTypeEClass,FILE_PROPERTIES_TYPE__LOCATION);
  createEAttribute(filePropertiesTypeEClass,FILE_PROPERTIES_TYPE__OVERRIDE);
  filterTypeEClass=createEClass(FILTER_TYPE);
  createEAttribute(filterTypeEClass,FILTER_TYPE__MIXED);
  createEReference(filterTypeEClass,FILTER_TYPE__PROPERTIES);
  createEReference(filterTypeEClass,FILTER_TYPE__FILTER);
  createEReference(filterTypeEClass,FILTER_TYPE__LEFT_FILTER);
  createEReference(filterTypeEClass,FILTER_TYPE__RIGHT_FILTER);
  createEAttribute(filterTypeEClass,FILTER_TYPE__CLASS_NAME);
  createEAttribute(filterTypeEClass,FILTER_TYPE__CONFIG_FILE);
  createEAttribute(filterTypeEClass,FILTER_TYPE__EXPECTED_TYPE);
  createEAttribute(filterTypeEClass,FILTER_TYPE__EXPRESSION);
  createEAttribute(filterTypeEClass,FILTER_TYPE__PATH);
  createEAttribute(filterTypeEClass,FILTER_TYPE__PATTERN);
  globalEndpointsTypeEClass=createEClass(GLOBAL_ENDPOINTS_TYPE);
  createEAttribute(globalEndpointsTypeEClass,GLOBAL_ENDPOINTS_TYPE__MIXED);
  createEReference(globalEndpointsTypeEClass,GLOBAL_ENDPOINTS_TYPE__ENDPOINT);
  globalEndpointTypeEClass=createEClass(GLOBAL_ENDPOINT_TYPE);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__MIXED);
  createEReference(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__TRANSACTION);
  createEReference(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__FILTER);
  createEReference(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__SECURITY_FILTER);
  createEReference(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__PROPERTIES);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__ADDRESS);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__NAME);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__REMOTE_SYNC);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__REMOTE_SYNC_TIMEOUT);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__SYNCHRONOUS);
  createEAttribute(globalEndpointTypeEClass,GLOBAL_ENDPOINT_TYPE__TRANSFORMERS);
  inboundRouterTypeEClass=createEClass(INBOUND_ROUTER_TYPE);
  createEAttribute(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__MIXED);
  createEReference(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__CATCH_ALL_STRATEGY);
  createEReference(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__ENDPOINT);
  createEReference(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__GLOBAL_ENDPOINT);
  createEReference(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__ROUTER);
  createEAttribute(inboundRouterTypeEClass,INBOUND_ROUTER_TYPE__MATCH_ALL);
  interceptorStackTypeEClass=createEClass(INTERCEPTOR_STACK_TYPE);
  createEAttribute(interceptorStackTypeEClass,INTERCEPTOR_STACK_TYPE__MIXED);
  createEReference(interceptorStackTypeEClass,INTERCEPTOR_STACK_TYPE__INTERCEPTOR);
  createEAttribute(interceptorStackTypeEClass,INTERCEPTOR_STACK_TYPE__NAME);
  interceptorTypeEClass=createEClass(INTERCEPTOR_TYPE);
  createEAttribute(interceptorTypeEClass,INTERCEPTOR_TYPE__MIXED);
  createEReference(interceptorTypeEClass,INTERCEPTOR_TYPE__PROPERTIES);
  createEAttribute(interceptorTypeEClass,INTERCEPTOR_TYPE__CLASS_NAME);
  createEAttribute(interceptorTypeEClass,INTERCEPTOR_TYPE__NAME);
  leftFilterTypeEClass=createEClass(LEFT_FILTER_TYPE);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__MIXED);
  createEReference(leftFilterTypeEClass,LEFT_FILTER_TYPE__PROPERTIES);
  createEReference(leftFilterTypeEClass,LEFT_FILTER_TYPE__FILTER);
  createEReference(leftFilterTypeEClass,LEFT_FILTER_TYPE__LEFT_FILTER);
  createEReference(leftFilterTypeEClass,LEFT_FILTER_TYPE__RIGHT_FILTER);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__CLASS_NAME);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__CONFIG_FILE);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__EXPECTED_TYPE);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__EXPRESSION);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__PATH);
  createEAttribute(leftFilterTypeEClass,LEFT_FILTER_TYPE__PATTERN);
  listTypeEClass=createEClass(LIST_TYPE);
  createEAttribute(listTypeEClass,LIST_TYPE__MIXED);
  createEAttribute(listTypeEClass,LIST_TYPE__GROUP);
  createEReference(listTypeEClass,LIST_TYPE__ENTRY);
  createEReference(listTypeEClass,LIST_TYPE__FACTORY_ENTRY);
  createEReference(listTypeEClass,LIST_TYPE__SYSTEM_ENTRY);
  createEReference(listTypeEClass,LIST_TYPE__CONTAINER_ENTRY);
  createEAttribute(listTypeEClass,LIST_TYPE__NAME);
  mapTypeEClass=createEClass(MAP_TYPE);
  createEAttribute(mapTypeEClass,MAP_TYPE__MIXED);
  createEAttribute(mapTypeEClass,MAP_TYPE__GROUP);
  createEReference(mapTypeEClass,MAP_TYPE__PROPERTY);
  createEReference(mapTypeEClass,MAP_TYPE__FACTORY_PROPERTY);
  createEReference(mapTypeEClass,MAP_TYPE__CONTAINER_PROPERTY);
  createEReference(mapTypeEClass,MAP_TYPE__SYSTEM_PROPERTY);
  createEReference(mapTypeEClass,MAP_TYPE__MAP);
  createEReference(mapTypeEClass,MAP_TYPE__LIST);
  createEReference(mapTypeEClass,MAP_TYPE__FILE_PROPERTIES);
  createEAttribute(mapTypeEClass,MAP_TYPE__NAME);
  modelTypeEClass=createEClass(MODEL_TYPE);
  createEAttribute(modelTypeEClass,MODEL_TYPE__MIXED);
  createEAttribute(modelTypeEClass,MODEL_TYPE__DESCRIPTION);
  createEReference(modelTypeEClass,MODEL_TYPE__ENTRY_POINT_RESOLVER);
  createEReference(modelTypeEClass,MODEL_TYPE__COMPONENT_FACTORY);
  createEReference(modelTypeEClass,MODEL_TYPE__COMPONENT_LIFECYCLE_ADAPTER_FACTORY);
  createEReference(modelTypeEClass,MODEL_TYPE__COMPONENT_POOL_FACTORY);
  createEReference(modelTypeEClass,MODEL_TYPE__EXCEPTION_STRATEGY);
  createEReference(modelTypeEClass,MODEL_TYPE__MULE_DESCRIPTOR);
  createEAttribute(modelTypeEClass,MODEL_TYPE__NAME);
  createEAttribute(modelTypeEClass,MODEL_TYPE__REF);
  muleConfigurationTypeEClass=createEClass(MULE_CONFIGURATION_TYPE);
  createEAttribute(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__MIXED);
  createEAttribute(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__DESCRIPTION);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__ENVIRONMENT_PROPERTIES);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__MULE_ENVIRONMENT_PROPERTIES);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__CONTAINER_CONTEXT);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__SECURITY_MANAGER);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__TRANSACTION_MANAGER);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__AGENTS);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__CONNECTOR);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__ENDPOINT_IDENTIFIERS);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__TRANSFORMERS);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__GLOBAL_ENDPOINTS);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__INTERCEPTOR_STACK);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__MODEL);
  createEReference(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__MULE_DESCRIPTOR);
  createEAttribute(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__ID);
  createEAttribute(muleConfigurationTypeEClass,MULE_CONFIGURATION_TYPE__VERSION);
  muleDescriptorTypeEClass=createEClass(MULE_DESCRIPTOR_TYPE);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__MIXED);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__INBOUND_ROUTER);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__OUTBOUND_ROUTER);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__RESPONSE_ROUTER);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__INTERCEPTOR);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__THREADING_PROFILE);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__POOLING_PROFILE);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__QUEUE_PROFILE);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__EXCEPTION_STRATEGY);
  createEReference(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__PROPERTIES);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__CONTAINER_MANAGED);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__IMPLEMENTATION);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__INBOUND_ENDPOINT);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__INBOUND_TRANSFORMER);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__INITIAL_STATE);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__NAME);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__OUTBOUND_ENDPOINT);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__OUTBOUND_TRANSFORMER);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__REF);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__RESPONSE_TRANSFORMER);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__SINGLETON);
  createEAttribute(muleDescriptorTypeEClass,MULE_DESCRIPTOR_TYPE__VERSION);
  muleEnvironmentPropertiesTypeEClass=createEClass(MULE_ENVIRONMENT_PROPERTIES_TYPE);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__MIXED);
  createEReference(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__THREADING_PROFILE);
  createEReference(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__POOLING_PROFILE);
  createEReference(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__QUEUE_PROFILE);
  createEReference(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__PERSISTENCE_STRATEGY);
  createEReference(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__CONNECTION_STRATEGY);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__CLIENT_MODE);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__MODEL);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__RECOVERABLE_MODE);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__SERVER_URL);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__SYNCHRONOUS);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__SYNCHRONOUS_EVENT_TIMEOUT);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__SYNCHRONOUS_RECEIVE);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__TRANSACTION_TIMEOUT);
  createEAttribute(muleEnvironmentPropertiesTypeEClass,MULE_ENVIRONMENT_PROPERTIES_TYPE__WORKING_DIRECTORY);
  outboundRouterTypeEClass=createEClass(OUTBOUND_ROUTER_TYPE);
  createEAttribute(outboundRouterTypeEClass,OUTBOUND_ROUTER_TYPE__MIXED);
  createEReference(outboundRouterTypeEClass,OUTBOUND_ROUTER_TYPE__CATCH_ALL_STRATEGY);
  createEReference(outboundRouterTypeEClass,OUTBOUND_ROUTER_TYPE__ROUTER);
  createEAttribute(outboundRouterTypeEClass,OUTBOUND_ROUTER_TYPE__MATCH_ALL);
  persistenceStrategyTypeEClass=createEClass(PERSISTENCE_STRATEGY_TYPE);
  createEAttribute(persistenceStrategyTypeEClass,PERSISTENCE_STRATEGY_TYPE__MIXED);
  createEReference(persistenceStrategyTypeEClass,PERSISTENCE_STRATEGY_TYPE__PROPERTIES);
  createEAttribute(persistenceStrategyTypeEClass,PERSISTENCE_STRATEGY_TYPE__CLASS_NAME);
  poolingProfileTypeEClass=createEClass(POOLING_PROFILE_TYPE);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__MIXED);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__EXHAUSTED_ACTION);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__FACTORY);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__INITIALISATION_POLICY);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__MAX_ACTIVE);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__MAX_IDLE);
  createEAttribute(poolingProfileTypeEClass,POOLING_PROFILE_TYPE__MAX_WAIT);
  propertiesTypeEClass=createEClass(PROPERTIES_TYPE);
  createEAttribute(propertiesTypeEClass,PROPERTIES_TYPE__MIXED);
  createEAttribute(propertiesTypeEClass,PROPERTIES_TYPE__GROUP);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__PROPERTY);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__FACTORY_PROPERTY);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__CONTAINER_PROPERTY);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__SYSTEM_PROPERTY);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__MAP);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__LIST);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__FILE_PROPERTIES);
  createEReference(propertiesTypeEClass,PROPERTIES_TYPE__TEXT_PROPERTY);
  propertyTypeEClass=createEClass(PROPERTY_TYPE);
  createEAttribute(propertyTypeEClass,PROPERTY_TYPE__MIXED);
  createEAttribute(propertyTypeEClass,PROPERTY_TYPE__NAME);
  createEAttribute(propertyTypeEClass,PROPERTY_TYPE__VALUE);
  queueProfileTypeEClass=createEClass(QUEUE_PROFILE_TYPE);
  createEAttribute(queueProfileTypeEClass,QUEUE_PROFILE_TYPE__MIXED);
  createEReference(queueProfileTypeEClass,QUEUE_PROFILE_TYPE__PROPERTIES);
  createEAttribute(queueProfileTypeEClass,QUEUE_PROFILE_TYPE__MAX_OUTSTANDING_MESSAGES);
  createEAttribute(queueProfileTypeEClass,QUEUE_PROFILE_TYPE__PERSISTENT);
  replyToTypeEClass=createEClass(REPLY_TO_TYPE);
  createEAttribute(replyToTypeEClass,REPLY_TO_TYPE__MIXED);
  createEAttribute(replyToTypeEClass,REPLY_TO_TYPE__ADDRESS);
  responseRouterTypeEClass=createEClass(RESPONSE_ROUTER_TYPE);
  createEAttribute(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__MIXED);
  createEReference(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__ENDPOINT);
  createEReference(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__GLOBAL_ENDPOINT);
  createEReference(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__ROUTER);
  createEAttribute(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__TIMEOUT);
  createEAttribute(responseRouterTypeEClass,RESPONSE_ROUTER_TYPE__TRANSFORMERS);
  rightFilterTypeEClass=createEClass(RIGHT_FILTER_TYPE);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__MIXED);
  createEReference(rightFilterTypeEClass,RIGHT_FILTER_TYPE__PROPERTIES);
  createEReference(rightFilterTypeEClass,RIGHT_FILTER_TYPE__FILTER);
  createEReference(rightFilterTypeEClass,RIGHT_FILTER_TYPE__LEFT_FILTER);
  createEReference(rightFilterTypeEClass,RIGHT_FILTER_TYPE__RIGHT_FILTER);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__CLASS_NAME);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__CONFIG_FILE);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__EXPECTED_TYPE);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__EXPRESSION);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__PATH);
  createEAttribute(rightFilterTypeEClass,RIGHT_FILTER_TYPE__PATTERN);
  routerTypeEClass=createEClass(ROUTER_TYPE);
  createEAttribute(routerTypeEClass,ROUTER_TYPE__MIXED);
  createEReference(routerTypeEClass,ROUTER_TYPE__ENDPOINT);
  createEReference(routerTypeEClass,ROUTER_TYPE__GLOBAL_ENDPOINT);
  createEReference(routerTypeEClass,ROUTER_TYPE__REPLY_TO);
  createEReference(routerTypeEClass,ROUTER_TYPE__TRANSACTION);
  createEReference(routerTypeEClass,ROUTER_TYPE__FILTER);
  createEReference(routerTypeEClass,ROUTER_TYPE__PROPERTIES);
  createEAttribute(routerTypeEClass,ROUTER_TYPE__CLASS_NAME);
  createEAttribute(routerTypeEClass,ROUTER_TYPE__ENABLE_CORRELATION);
  createEAttribute(routerTypeEClass,ROUTER_TYPE__PROPERTY_EXTRACTOR);
  securityFilterTypeEClass=createEClass(SECURITY_FILTER_TYPE);
  createEAttribute(securityFilterTypeEClass,SECURITY_FILTER_TYPE__MIXED);
  createEReference(securityFilterTypeEClass,SECURITY_FILTER_TYPE__PROPERTIES);
  createEAttribute(securityFilterTypeEClass,SECURITY_FILTER_TYPE__CLASS_NAME);
  createEAttribute(securityFilterTypeEClass,SECURITY_FILTER_TYPE__USE_PROVIDERS);
  securityManagerTypeEClass=createEClass(SECURITY_MANAGER_TYPE);
  createEAttribute(securityManagerTypeEClass,SECURITY_MANAGER_TYPE__MIXED);
  createEReference(securityManagerTypeEClass,SECURITY_MANAGER_TYPE__SECURITY_PROVIDER);
  createEReference(securityManagerTypeEClass,SECURITY_MANAGER_TYPE__ENCRYPTION_STRATEGY);
  createEAttribute(securityManagerTypeEClass,SECURITY_MANAGER_TYPE__CLASS_NAME);
  createEAttribute(securityManagerTypeEClass,SECURITY_MANAGER_TYPE__REF);
  securityProviderTypeEClass=createEClass(SECURITY_PROVIDER_TYPE);
  createEAttribute(securityProviderTypeEClass,SECURITY_PROVIDER_TYPE__MIXED);
  createEReference(securityProviderTypeEClass,SECURITY_PROVIDER_TYPE__PROPERTIES);
  createEAttribute(securityProviderTypeEClass,SECURITY_PROVIDER_TYPE__CLASS_NAME);
  createEAttribute(securityProviderTypeEClass,SECURITY_PROVIDER_TYPE__NAME);
  createEAttribute(securityProviderTypeEClass,SECURITY_PROVIDER_TYPE__REF);
  systemEntryTypeEClass=createEClass(SYSTEM_ENTRY_TYPE);
  createEAttribute(systemEntryTypeEClass,SYSTEM_ENTRY_TYPE__MIXED);
  createEAttribute(systemEntryTypeEClass,SYSTEM_ENTRY_TYPE__DEFAULT_VALUE);
  createEAttribute(systemEntryTypeEClass,SYSTEM_ENTRY_TYPE__KEY);
  systemPropertyTypeEClass=createEClass(SYSTEM_PROPERTY_TYPE);
  createEAttribute(systemPropertyTypeEClass,SYSTEM_PROPERTY_TYPE__MIXED);
  createEAttribute(systemPropertyTypeEClass,SYSTEM_PROPERTY_TYPE__DEFAULT_VALUE);
  createEAttribute(systemPropertyTypeEClass,SYSTEM_PROPERTY_TYPE__KEY);
  createEAttribute(systemPropertyTypeEClass,SYSTEM_PROPERTY_TYPE__NAME);
  textPropertyTypeEClass=createEClass(TEXT_PROPERTY_TYPE);
  createEAttribute(textPropertyTypeEClass,TEXT_PROPERTY_TYPE__VALUE);
  createEAttribute(textPropertyTypeEClass,TEXT_PROPERTY_TYPE__NAME);
  threadingProfileTypeEClass=createEClass(THREADING_PROFILE_TYPE);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__MIXED);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__DO_THREADING);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__ID);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__MAX_BUFFER_SIZE);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__MAX_THREADS_ACTIVE);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__MAX_THREADS_IDLE);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__POOL_EXHAUSTED_ACTION);
  createEAttribute(threadingProfileTypeEClass,THREADING_PROFILE_TYPE__THREAD_TTL);
  transactionManagerTypeEClass=createEClass(TRANSACTION_MANAGER_TYPE);
  createEAttribute(transactionManagerTypeEClass,TRANSACTION_MANAGER_TYPE__MIXED);
  createEReference(transactionManagerTypeEClass,TRANSACTION_MANAGER_TYPE__PROPERTIES);
  createEAttribute(transactionManagerTypeEClass,TRANSACTION_MANAGER_TYPE__FACTORY);
  createEAttribute(transactionManagerTypeEClass,TRANSACTION_MANAGER_TYPE__REF);
  transactionTypeEClass=createEClass(TRANSACTION_TYPE);
  createEAttribute(transactionTypeEClass,TRANSACTION_TYPE__MIXED);
  createEReference(transactionTypeEClass,TRANSACTION_TYPE__CONSTRAINT);
  createEAttribute(transactionTypeEClass,TRANSACTION_TYPE__ACTION);
  createEAttribute(transactionTypeEClass,TRANSACTION_TYPE__FACTORY);
  createEAttribute(transactionTypeEClass,TRANSACTION_TYPE__TIMEOUT);
  transformersTypeEClass=createEClass(TRANSFORMERS_TYPE);
  createEAttribute(transformersTypeEClass,TRANSFORMERS_TYPE__MIXED);
  createEReference(transformersTypeEClass,TRANSFORMERS_TYPE__TRANSFORMER);
  transformerTypeEClass=createEClass(TRANSFORMER_TYPE);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__MIXED);
  createEReference(transformerTypeEClass,TRANSFORMER_TYPE__PROPERTIES);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__CLASS_NAME);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__IGNORE_BAD_INPUT);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__NAME);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__REF);
  createEAttribute(transformerTypeEClass,TRANSFORMER_TYPE__RETURN_CLASS);
  actionTypeEEnum=createEEnum(ACTION_TYPE);
  createConnectorTypeEEnum=createEEnum(CREATE_CONNECTOR_TYPE);
  enableCorrelationTypeEEnum=createEEnum(ENABLE_CORRELATION_TYPE);
  exhaustedActionTypeEEnum=createEEnum(EXHAUSTED_ACTION_TYPE);
  idTypeEEnum=createEEnum(ID_TYPE);
  initialisationPolicyTypeEEnum=createEEnum(INITIALISATION_POLICY_TYPE);
  initialStateTypeEEnum=createEEnum(INITIAL_STATE_TYPE);
  poolExhaustedActionTypeEEnum=createEEnum(POOL_EXHAUSTED_ACTION_TYPE);
  typeTypeEEnum=createEEnum(TYPE_TYPE);
  actionTypeObjectEDataType=createEDataType(ACTION_TYPE_OBJECT);
  createConnectorTypeObjectEDataType=createEDataType(CREATE_CONNECTOR_TYPE_OBJECT);
  enableCorrelationTypeObjectEDataType=createEDataType(ENABLE_CORRELATION_TYPE_OBJECT);
  exhaustedActionTypeObjectEDataType=createEDataType(EXHAUSTED_ACTION_TYPE_OBJECT);
  idTypeObjectEDataType=createEDataType(ID_TYPE_OBJECT);
  initialisationPolicyTypeObjectEDataType=createEDataType(INITIALISATION_POLICY_TYPE_OBJECT);
  initialStateTypeObjectEDataType=createEDataType(INITIAL_STATE_TYPE_OBJECT);
  poolExhaustedActionTypeObjectEDataType=createEDataType(POOL_EXHAUSTED_ACTION_TYPE_OBJECT);
  typeTypeObjectEDataType=createEDataType(TYPE_TYPE_OBJECT);
  versionTypeEDataType=createEDataType(VERSION_TYPE);
}
