{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getFlowConstruct",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider");
  assertNotNull(endpoint1);
  List<String> recipients=new ArrayList<String>();
  recipients.add("test://recipient1?synchronous=true");
  recipients.add("test://recipient2?synchronous=true");
  MockingStaticRecipientList router=createObject(MockingStaticRecipientList.class);
  router.setRecipients(recipients);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint1);
  router.setEndpoints(endpoints);
  router.setMuleContext(muleContext);
  assertEquals(2,router.getRecipients().size());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  message=new DefaultMuleMessage("test event",muleContext);
  final MuleEvent event=new OutboundRoutingTestEvent(message,null);
  final List<Mock> mockEndpoints=new ArrayList<Mock>();
  router.setMockEndpointListener(new MockEndpointListener(){
    public void mockEndpointAdded(    Mock recipient){
      mockEndpoints.add(recipient);
      recipient.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
    }
  }
);
  router.getRecipients().add("test://recipient3?synchronous=true");
  MuleMessage result=router.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy()));
  assertNotNull(result);
  assertTrue(result.getPayload() instanceof List);
  assertEquals(3,((List)result.getPayload()).size());
  session.verify();
}
