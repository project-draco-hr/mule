{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getService",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider");
  assertNotNull(endpoint1);
  List<String> recipients=new ArrayList<String>();
  recipients.add("test://recipient1?synchronous=true");
  recipients.add("test://recipient2?synchronous=true");
  StaticRecipientList router=createObject(StaticRecipientList.class);
  router.setRecipients(recipients);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint1);
  router.setEndpoints(endpoints);
  router.setMuleContext(muleContext);
  assertEquals(2,router.getRecipients().size());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  message=new DefaultMuleMessage("test event",muleContext);
  router.getRecipients().add("test://recipient3?synchronous=true");
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(ImmutableEndpoint.class)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(ImmutableEndpoint.class)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(ImmutableEndpoint.class)),message);
  MuleMessage result=router.route(message,(MuleSession)session.proxy());
  assertNotNull(result);
  assertTrue(result.getPayload() instanceof List);
  assertEquals(3,((List)result.getPayload()).size());
  session.verify();
}
