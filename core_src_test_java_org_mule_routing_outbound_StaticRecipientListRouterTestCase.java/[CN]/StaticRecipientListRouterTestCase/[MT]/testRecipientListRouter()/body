{
  Mock session=MuleTestUtils.getMockSession();
  Endpoint endpoint1=getTestEndpoint("Test1Provider",Endpoint.ENDPOINT_TYPE_SENDER);
  assertNotNull(endpoint1);
  List recipients=new ArrayList();
  recipients.add("test://recipient1");
  recipients.add("test://recipient2");
  StaticRecipientList router=new StaticRecipientList();
  router.setRecipients(recipients);
  List endpoints=new ArrayList();
  endpoints.add(endpoint1);
  router.setEndpoints(endpoints);
  router.setMuleContext(muleContext);
  assertEquals(2,router.getRecipients().size());
  MuleMessage message=new DefaultMuleMessage("test event");
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.isA(Endpoint.class)));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.isA(Endpoint.class)));
  router.route(message,(MuleSession)session.proxy(),false);
  session.verify();
  message=new DefaultMuleMessage("test event");
  router.getRecipients().add("test://recipient3");
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(Endpoint.class)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(Endpoint.class)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.isA(Endpoint.class)),message);
  MuleMessage result=router.route(message,(MuleSession)session.proxy(),true);
  assertNotNull(result);
  assertTrue(result.getPayload() instanceof List);
  assertEquals(3,((List)result.getPayload()).size());
  session.verify();
}
