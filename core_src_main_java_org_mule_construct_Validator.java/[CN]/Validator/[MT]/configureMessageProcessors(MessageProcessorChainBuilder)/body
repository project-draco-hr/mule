{
  builder.chain(new LoggingInterceptor());
  builder.chain(new FlowConstructStatisticsMessageProcessor());
  final ErrorAwareEventReturningMessageProcessor outboundMessageProcessor=new ErrorAwareEventReturningMessageProcessor();
  outboundMessageProcessor.setListener(outboundEndpoint);
  final ResponseMessageProcessorAdapter ackResponseMessageProcessor=new ResponseMessageProcessorAdapter();
  ackResponseMessageProcessor.setListener(outboundMessageProcessor);
  ackResponseMessageProcessor.setProcessor(getExpressionTransformer(getName() + "-ack-expression",ackExpression));
  MessageProcessor validRouteMessageProcessor=ackResponseMessageProcessor;
  if (hasErrorExpression()) {
    final ErrorExpressionTransformerMessageProcessor errorResponseMessageProcessor=new ErrorExpressionTransformerMessageProcessor(getExpressionTransformer(getName() + "-error-expression",errorExpression));
    errorResponseMessageProcessor.setListener(ackResponseMessageProcessor);
    validRouteMessageProcessor=errorResponseMessageProcessor;
  }
  final ChoiceRouter choiceRouter=new ChoiceRouter();
  choiceRouter.addRoute(validRouteMessageProcessor,validationFilter);
  choiceRouter.setDefaultRoute(getExpressionTransformer(getName() + "-nack-expression",nackExpression));
  builder.chain(choiceRouter);
}
