{
  if (m_keyStoreName == null) {
    throw new IOException("KeyStore file name cannot be null");
  }
  if (m_keyStorePassword == null) {
    throw new IOException("KeyStore password cannot be null");
  }
  Logger logger=getLogger();
  if (logger.isEnabledFor(Logger.TRACE)) {
    logger.trace("Creating SSLServerSocket");
    logger.trace("\tKeyStore " + m_keyStoreName + ", type "+ m_keyStoreType);
    logger.trace("\tKeyManager algorithm is " + m_keyManagerAlgorithm);
    logger.trace("\tTrustStore " + m_trustStoreName + ", type "+ m_trustStoreType);
    logger.trace("\tTrustManager algorithm is " + m_trustManagerAlgorithm);
    logger.trace("\tSSL protocol version is " + m_sslProtocol);
  }
  try {
    KeyStore keystore=KeyStore.getInstance(m_keyStoreType);
    InputStream keyStoreStream=IOUtils.getResourceAsStream(m_keyStoreName,getClass());
    if (keyStoreStream == null) {
      File fle=new java.io.File(m_keyStoreName);
      if (fle.exists())       keyStoreStream=new FileInputStream(fle);
    }
    if (keyStoreStream == null)     throw new IOException("Cannot find KeyStore " + m_keyStoreName);
    keystore.load(keyStoreStream,m_keyStorePassword.toCharArray());
    try {
      keyStoreStream.close();
    }
 catch (    IOException x) {
    }
    KeyManagerFactory keyFactory=KeyManagerFactory.getInstance(m_keyManagerAlgorithm);
    keyFactory.init(keystore,m_keyManagerPassword == null ? m_keyStorePassword.toCharArray() : m_keyManagerPassword.toCharArray());
    TrustManagerFactory trustFactory=null;
    if (m_trustStoreName != null) {
      if (m_trustStorePassword == null) {
        throw new IOException("TrustStore password cannot be null");
      }
      KeyStore trustStore=KeyStore.getInstance(m_trustStoreType);
      InputStream trustStoreStream=IOUtils.getResourceAsStream(m_trustStoreName,getClass());
      if (trustStoreStream == null) {
        throw new IOException("Cannot find TrustStore " + m_trustStoreName);
      }
      trustStore.load(trustStoreStream,m_trustStorePassword.toCharArray());
      trustFactory=TrustManagerFactory.getInstance(m_trustManagerAlgorithm);
      trustFactory.init(trustStore);
    }
    SSLContext context=SSLContext.getInstance(m_sslProtocol);
    context.init(keyFactory.getKeyManagers(),trustFactory == null ? null : trustFactory.getTrustManagers(),null);
    SSLServerSocketFactory ssf=context.getServerSocketFactory();
    SSLServerSocket serverSocket=(SSLServerSocket)ssf.createServerSocket(port,backlog,InetAddress.getByName(host));
    return serverSocket;
  }
 catch (  IOException x) {
    logger.error("",x);
    throw x;
  }
catch (  UnrecoverableKeyException x) {
    logger.error("Probably a bad key password",x);
    throw new IOException("Probably a bad key password: " + x.toString());
  }
catch (  Exception x) {
    logger.error("Unexpected exception",x);
    throw new IOException(x.toString());
  }
}
