{
  /** 
 * Fetches a ClusterNodeNotificationListener added to a mock mule context
 */
class NotificationAnswer implements Answer {
    ClusterNodeNotificationListener listener;
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      listener=(ClusterNodeNotificationListener)invocation.getArguments()[0];
      return null;
    }
    public ClusterNodeNotificationListener getListener(){
      return listener;
    }
  }
  ;
  /** 
 * Validates the classloader used in connector's connect is the app classloader
 */
class ConnectClassLoaderCheckAnswer implements Answer {
    ClassLoader expectedClassLoader;
    public ConnectClassLoaderCheckAnswer(    ClassLoader expectedClassLoader){
      this.expectedClassLoader=expectedClassLoader;
    }
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      ClassLoader connectClassLoader=Thread.currentThread().getContextClassLoader();
      assertThat(connectClassLoader,is(expectedClassLoader));
      return null;
    }
  }
  ;
  ClassLoader expectedClassLoader=new ClassLoader(){
    String thismakesme="different";
  }
;
  NotificationAnswer notificationAnswer=new NotificationAnswer();
  MuleContext muleContextSpy=spy(muleContext);
  doReturn(false).when(muleContextSpy).isPrimaryPollingInstance();
  doReturn(expectedClassLoader).when(muleContextSpy).getExecutionClassLoader();
  doAnswer(notificationAnswer).when(muleContextSpy).registerListener(any(ClusterNodeNotificationListener.class));
  JmsConnector connectorSpy=spy(createConnectionFactoryWhenGettingConnection(mock(TestXAConnectionFactory.class),muleContextSpy));
  connectorSpy.setClientId("MyClientId");
  connectorSpy.initialise();
  connectorSpy.connect();
  doAnswer(new ConnectClassLoaderCheckAnswer(expectedClassLoader)).when(connectorSpy).connect();
  ClassLoader preNotificationClassLoader=Thread.currentThread().getContextClassLoader();
  notificationAnswer.getListener().onNotification(mock(ClusterNodeNotification.class));
  ClassLoader afterNotificationClassLoader=Thread.currentThread().getContextClassLoader();
  assertThat(preNotificationClassLoader,is(afterNotificationClassLoader));
}
