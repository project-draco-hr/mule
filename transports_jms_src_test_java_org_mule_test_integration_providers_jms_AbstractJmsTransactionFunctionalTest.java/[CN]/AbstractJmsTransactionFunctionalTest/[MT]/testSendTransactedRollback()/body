{
  EventCallback callback=new EventCallback(){
    public synchronized void eventReceived(    UMOEventContext context,    Object component) throws Exception {
      currentTx=context.getCurrentTransaction();
      assertNotNull(currentTx);
      assertTrue(currentTx.isBegun());
      logger.info("@@@@ Rolling back transaction @@@@");
      currentTx.setRollbackOnly();
      callbackCalled.countDown();
    }
  }
;
  FunctionalTestComponent ftc=lookupTestComponent("transactionTestModel","component2");
  ftc.setEventCallback(callback);
  send(TEST_MESSAGE,"component2In");
  assertTrue(callbackCalled.await(LOCK_TIMEOUT,TimeUnit.MILLISECONDS));
  assertEquals(TEST_MESSAGE,ftc.getLastReceivedMessage());
  assertTrue(currentTx.isBegun());
  Thread.sleep(1000);
  assertTrue(currentTx.isRolledBack());
  assertNull("Transaction was rolled back, but message got delivered anyways.",receive("component2Out",1000));
}
