{
  if (axisComponent == null) {
    if (axisComponent == null) {
      axisComponent=getOrCreateAxisComponent();
    }
 else {
      managementContext.getRegistry().unregisterComponent(AXIS_SERVICE_PROPERTY + getName());
    }
    if (axisComponent.getProperties().get(AXIS) == null) {
      axisComponent.getProperties().put(AXIS,axis);
    }
  }
  String serviceName=receiver.getComponent().getName();
  String endpoint;
  String scheme=ep.getScheme().toLowerCase();
  if (scheme.equals("jms") || scheme.equals("vm")) {
    endpoint=ep.toString();
  }
 else {
    endpoint=receiver.getEndpointURI().getAddress() + "/" + serviceName;
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Modified endpoint with " + scheme + " scheme to "+ endpoint);
  }
  UMOEndpoint receiverEndpoint=(UMOEndpoint)receiver.getEndpoint();
  boolean sync=false;
  if (!receiverEndpoint.isSynchronousSet()) {
    if (scheme.equals("http") || scheme.equals("https") || scheme.equals("ssl")|| scheme.equals("tcp")) {
      sync=true;
    }
  }
 else {
    sync=receiverEndpoint.isSynchronous();
  }
  UMOEndpointBuilder builder=new EndpointURIEndpointBuilder(endpoint,managementContext);
  builder.setSynchronous(sync);
  builder.setName(ep.getScheme() + ":" + serviceName);
  builder.setTransformers(receiver.getEndpoint().getTransformers());
  ((MuleEndpoint)receiver.getEndpoint()).setTransformers(new LinkedList());
  builder.setResponseTransformers(receiver.getEndpoint().getResponseTransformers());
  ((MuleEndpoint)receiver.getEndpoint()).setResponseTransformers(new LinkedList());
  builder.setFilter(receiver.getEndpoint().getFilter());
  ((MuleEndpoint)receiver.getEndpoint()).setFilter(null);
  builder.setSecurityFilter(receiver.getEndpoint().getSecurityFilter());
  ((MuleEndpoint)receiver.getEndpoint()).setSecurityFilter(null);
  builder.setProperties(receiverEndpoint.getProperties());
  UMOImmutableEndpoint serviceEndpoint=managementContext.getRegistry().lookupEndpointFactory().createInboundEndpoint(builder,managementContext);
  axisComponent.getInboundRouter().addEndpoint(serviceEndpoint);
}
