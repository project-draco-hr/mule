{
  Enumeration<?> e=ClassUtils.getResources(SERVICE_PATH + REGISTRY_PROPERTIES,getClass());
  List<Properties> bootstraps=new LinkedList<Properties>();
  while (e.hasMoreElements()) {
    try {
      URL url=(URL)e.nextElement();
      if (logger.isDebugEnabled()) {
        logger.debug("Reading bootstrap file: " + url.toString());
      }
      Properties p=new OrderedProperties();
      p.load(url.openStream());
      bootstraps.add(p);
    }
 catch (    Exception e1) {
      throw new InitialisationException(e1,this);
    }
  }
  int objectCounter=1;
  int transformerCounter=1;
  Properties transformers=new OrderedProperties();
  Properties namedObjects=new OrderedProperties();
  Properties unnamedObjects=new OrderedProperties();
  Map<String,String> singleTransactionFactories=new LinkedHashMap<String,String>();
  for (  Properties bootstrap : bootstraps) {
    for (    Map.Entry entry : bootstrap.entrySet()) {
      final String key=(String)entry.getKey();
      if (key.contains(OBJECT_KEY)) {
        String newKey=key.substring(0,key.lastIndexOf(".")) + objectCounter++;
        unnamedObjects.put(newKey,entry.getValue());
      }
 else       if (key.contains(TRANSFORMER_KEY)) {
        String newKey=key.substring(0,key.lastIndexOf(".")) + transformerCounter++;
        transformers.put(newKey,entry.getValue());
      }
 else       if (key.contains(SINGLE_TX)) {
        if (!key.contains(".transaction.resource")) {
          String transactionResourceKey=key.replace(".transaction.factory",".transaction.resource");
          String transactionResource=bootstrap.getProperty(transactionResourceKey);
          if (transactionResource == null) {
            throw new InitialisationException(CoreMessages.createStaticMessage(String.format("Theres no transaction resource specified for transaction factory %s",key)),this);
          }
          singleTransactionFactories.put((String)entry.getValue(),transactionResource);
        }
      }
 else {
{
          namedObjects.put(key,entry.getValue());
        }
      }
    }
  }
  try {
    registerUnnamedObjects(unnamedObjects,context.getRegistry());
    registerTransformers((MuleRegistryHelper)context.getRegistry());
    registerTransformers(transformers,context.getRegistry());
    registerObjects(namedObjects,context.getRegistry());
    registerTransactionFactories(singleTransactionFactories,context);
  }
 catch (  Exception e1) {
    throw new InitialisationException(e1,this);
  }
}
