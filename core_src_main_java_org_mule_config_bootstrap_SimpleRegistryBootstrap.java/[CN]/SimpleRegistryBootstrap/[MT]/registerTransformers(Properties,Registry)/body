{
  int i=1;
  String transString=props.getProperty(TRANSFORMER_PREFIX + i);
  String name=null;
  String returnClassString=null;
  while (transString != null) {
    Class returnClass=null;
    int x=transString.indexOf(",");
    if (x > -1) {
      Properties p=PropertiesUtils.getPropertiesFromString(transString.substring(i + 1),',');
      name=p.getProperty("name",null);
      returnClassString=p.getProperty("returnClass",null);
    }
    if (returnClassString != null) {
      if (returnClassString.equals("byte[]")) {
        returnClass=byte[].class;
      }
 else {
        returnClass=ClassUtils.loadClass(returnClassString,getClass());
      }
    }
    String transClass=(x == -1 ? transString : transString.substring(0,x));
    UMOTransformer trans=(UMOTransformer)ClassUtils.instanciateClass(transClass,ClassUtils.NO_ARGS);
    if (!(trans instanceof DiscoverableTransformer)) {
      throw new TransformerException(CoreMessages.transformerNotImplementDiscoverable(trans));
    }
    if (returnClass != null) {
      trans.setReturnClass(returnClass);
    }
    if (name != null) {
      trans.setName(name);
    }
 else {
      name=trans.getName();
      trans.setName("_" + name);
    }
    registry.registerTransformer(trans);
    props.remove(TRANSFORMER_PREFIX + i++);
    name=null;
    returnClass=null;
    transString=props.getProperty(TRANSFORMER_PREFIX + i);
  }
}
