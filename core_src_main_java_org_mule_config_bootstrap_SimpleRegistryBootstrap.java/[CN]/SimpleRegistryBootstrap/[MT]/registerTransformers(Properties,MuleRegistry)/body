{
  String transString;
  String name=null;
  String returnClassString;
  boolean optional=false;
  for (  Map.Entry<Object,Object> entry : props.entrySet()) {
    transString=(String)entry.getValue();
    Class<?> returnClass=null;
    returnClassString=null;
    int x=transString.indexOf(",");
    if (x > -1) {
      Properties p=PropertiesUtils.getPropertiesFromString(transString.substring(x + 1),',');
      name=p.getProperty("name",null);
      returnClassString=p.getProperty("returnClass",null);
      optional=p.containsKey("optional");
    }
    final String transClass=(x == -1 ? transString : transString.substring(0,x));
    try {
      String mime=null;
      if (returnClassString != null) {
        int i=returnClassString.indexOf(":");
        if (i > -1) {
          mime=returnClassString.substring(i + 1);
          returnClassString=returnClassString.substring(0,i);
        }
        if (returnClassString.equals("byte[]")) {
          returnClass=byte[].class;
        }
 else {
          returnClass=ClassUtils.loadClass(returnClassString,getClass());
        }
      }
      Transformer trans=(Transformer)ClassUtils.instanciateClass(transClass);
      if (!(trans instanceof DiscoverableTransformer)) {
        throw new RegistrationException(CoreMessages.transformerNotImplementDiscoverable(trans));
      }
      if (returnClass != null) {
        trans.setReturnDataType(DataTypeFactory.create(returnClass,mime));
      }
      if (name != null) {
        trans.setName(name);
      }
 else {
        name=trans.getName();
        trans.setName("_" + name);
      }
      registry.registerTransformer(trans);
    }
 catch (    InvocationTargetException itex) {
      Throwable cause=ExceptionUtils.getCause(itex);
      throwExceptionIfNotOptional(cause instanceof NoClassDefFoundError && optional,cause,"Ignoring optional transformer: " + transClass);
    }
catch (    NoClassDefFoundError ncdfe) {
      throwExceptionIfNotOptional(optional,ncdfe,"Ignoring optional transformer: " + transClass);
    }
catch (    ClassNotFoundException cnfe) {
      throwExceptionIfNotOptional(optional,cnfe,"Ignoring optional transformer: " + transClass);
    }
    name=null;
    returnClass=null;
  }
}
