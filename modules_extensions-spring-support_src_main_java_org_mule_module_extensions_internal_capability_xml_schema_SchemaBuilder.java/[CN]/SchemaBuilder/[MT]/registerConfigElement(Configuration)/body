{
  Map<QName,String> otherAttributes=new HashMap<>();
  final ExtensionType config=registerExtension(configuration.getName(),otherAttributes);
  config.getAttributeOrAttributeGroup().add(createNameAttribute());
  final ExplicitGroup choice=new ExplicitGroup();
  choice.setMinOccurs(new BigInteger("0"));
  choice.setMaxOccurs("unbounded");
  config.setChoice(choice);
  for (  final Parameter parameter : configuration.getParameters()) {
    parameter.getType().getQualifier().accept(new BaseDataQualifierVisitor(){
      private boolean forceOptional=false;
      @Override public void onList(){
        forceOptional=true;
        defaultOperation();
        generateCollectionElement(choice,parameter,true);
      }
      @Override public void onPojo(){
        forceOptional=false;
        defaultOperation();
        registerComplexTypeChildElement(choice,parameter.getName(),parameter.getDescription(),parameter.getType(),isRequired(parameter,forceOptional));
      }
      @Override protected void defaultOperation(){
        config.getAttributeOrAttributeGroup().add(createAttribute(parameter,isRequired(parameter,forceOptional)));
      }
    }
);
  }
  config.setAnnotation(createDocAnnotation(configuration.getDescription()));
  if (choice.getParticle().size() == 0) {
    config.setChoice(null);
  }
  return this;
}
