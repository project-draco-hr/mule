{
  Set<String> unresolvedReferences=new TreeSet<String>(referred.keySet());
  unresolvedReferences.removeAll(mimports.keySet());
  unresolvedReferences.removeAll(contained.keySet());
  for (Iterator<String> p=unresolvedReferences.iterator(); p.hasNext(); ) {
    String pack=p.next();
    if (pack.startsWith("java.") || ignore.containsKey(pack))     p.remove();
 else {
      if (isDynamicImport(pack))       p.remove();
    }
  }
  if (!unresolvedReferences.isEmpty()) {
    Set<String> culprits=new HashSet<String>();
    for (    Clazz clazz : classSpace.values()) {
      if (hasOverlap(unresolvedReferences,clazz.imports.keySet()))       culprits.add(clazz.getPath());
    }
    error("Unresolved references to " + unresolvedReferences + " by class(es) on the Bundle-Classpath"+ bundleClasspath+ ": "+ culprits);
  }
}
