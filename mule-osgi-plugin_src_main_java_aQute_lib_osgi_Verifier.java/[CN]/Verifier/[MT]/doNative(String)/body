{
  if (nc != null) {
    QuotedTokenizer qt=new QuotedTokenizer(nc,",;=",false);
    char del;
    do {
      do {
        String name=qt.nextToken();
        if (name == null) {
          error("Can not parse name from bundle native code header: " + nc);
          return;
        }
        del=qt.getSeparator();
        if (del == ';') {
          if (dot != null && !dot.exists(name)) {
            error("Native library not found in JAR: " + name);
          }
        }
 else {
          String value=null;
          if (del == '=')           value=qt.nextToken();
          String key=name.toLowerCase();
          if (key.equals("osname")) {
          }
 else           if (key.equals("osversion")) {
            verify(value,VERSIONRANGE);
          }
 else           if (key.equals("language")) {
            verify(value,ISO639);
          }
 else           if (key.equals("processor")) {
          }
 else           if (key.equals("selection-filter")) {
            verifyFilter(value);
          }
 else           if (name.equals("*") && value == null) {
            if (qt.nextToken() != null)             error("Bundle-Native code header may only END in wildcard: nc");
          }
 else {
            warning("Unknown attribute in native code: " + name + "="+ value);
          }
          del=qt.getSeparator();
        }
      }
 while (del == ';');
    }
 while (del == ',');
  }
}
