{
  UMOMessage result=null;
  if (endpoints == null || endpoints.size() == 0) {
    throw new RoutePathNotFoundException(CoreMessages.noEndpointsForRouter(),message,null);
  }
  try {
    UMOImmutableEndpoint ep=(UMOImmutableEndpoint)endpoints.get(0);
    String uri=ep.getEndpointURI().toString();
    if (logger.isDebugEnabled()) {
      logger.debug("Uri before parsing is: " + uri);
    }
    Map props=new HashMap();
    props.putAll(ep.getProperties());
    for (Iterator iterator=message.getPropertyNames().iterator(); iterator.hasNext(); ) {
      String propertyKey=(String)iterator.next();
      props.put(propertyKey,message.getProperty(propertyKey));
    }
    uri=parser.parse(props,uri);
    if (logger.isDebugEnabled()) {
      logger.debug("Uri after parsing is: " + uri);
    }
    UMOEndpointURI newUri=new MuleEndpointURI(uri);
    if (!newUri.getScheme().equalsIgnoreCase(ep.getEndpointURI().getScheme())) {
      throw new CouldNotRouteOutboundMessageException(CoreMessages.schemeCannotChangeForRouter(ep.getEndpointURI().getScheme(),newUri.getScheme()),message,ep);
    }
    ep=new DynamicEndpointURIEndpoint(ep,new MuleEndpointURI(uri));
    if (synchronous) {
      result=send(session,message,ep);
    }
 else {
      dispatch(session,message,ep);
    }
  }
 catch (  UMOException e) {
    throw new CouldNotRouteOutboundMessageException(message,(UMOImmutableEndpoint)endpoints.get(0),e);
  }
  return result;
}
