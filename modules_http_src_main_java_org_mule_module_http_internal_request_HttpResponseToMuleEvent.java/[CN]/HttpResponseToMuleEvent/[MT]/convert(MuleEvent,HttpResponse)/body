{
  String responseContentType=response.getHeaderValue(HttpHeaders.Names.CONTENT_TYPE.toLowerCase());
  InputStream responseInputStream=((InputStreamHttpEntity)response.getEntity()).getInputStream();
  for (  String headerName : response.getHeaderNames()) {
    String headerValue=response.getHeaderValue(headerName);
    muleEvent.getMessage().setProperty(headerName,headerValue,PropertyScope.INBOUND);
  }
  muleEvent.getMessage().setProperty(HttpConstants.ResponseProperties.HTTP_STATUS_PROPERTY,response.getStatusCode(),PropertyScope.INBOUND);
  if (responseContentType != null && parseResponse.resolveBooleanValue(muleEvent) && responseContentType.startsWith("multipart/")) {
    try {
      final Collection<HttpPartDataSource> httpParts=HttpPartDataSource.createFrom(HttpParser.parseMultipartContent(responseInputStream,responseContentType));
      DefaultMuleMessage message=(DefaultMuleMessage)muleEvent.getMessage();
      setResponsePayload(NullPayload.getInstance(),muleEvent);
      for (      HttpPartDataSource httpPart : httpParts) {
        message.addInboundAttachment(httpPart.getName(),new DataHandler(httpPart));
      }
    }
 catch (    Exception e) {
      throw new MessagingException(muleEvent,e);
    }
  }
 else   if (responseContentType != null && responseContentType.startsWith(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED.toLowerCase())) {
    MediaType mediaType=MediaType.parse(responseContentType);
    String encoding=mediaType.charset().isPresent() ? mediaType.charset().get().name() : Charset.defaultCharset().name();
    setResponsePayload(HttpParser.decodeString(IOUtils.toString(responseInputStream),encoding),muleEvent);
  }
 else {
    setResponsePayload(responseInputStream,muleEvent);
  }
}
