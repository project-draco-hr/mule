{
  SpringXmlConfigurationMuleArtifactFactory factoryTest=new SpringXmlConfigurationMuleArtifactFactory();
  XmlConfigurationCallback callback=getXmlConfigurationCallbackMock();
  Element[] propertyPlaceholders=new Element[2];
  propertyPlaceholders[0]=createBeanPropertyPlaceholder("test1.properties","true");
  propertyPlaceholders[1]=createPropertyPlaceholder("test2.properties","true");
  Mockito.when(callback.getPropertyPlaceholders()).thenReturn(propertyPlaceholders);
  Element element=createElement("logger","http://www.mulesoft.org/schema/mule/core");
  String muleConfigTxt=factoryTest.getArtifactMuleConfig("test-flow",element,callback,false);
  Document muleConfig=DocumentHelper.parseText(muleConfigTxt);
  List result=DocumentHelper.selectNodes("/mule/*[local-name()='bean' and @class='" + BEAN_PROPERTY_PLACEHOLDER_CLASS + "']",muleConfig);
  Assert.assertThat("Property placeholder bean is present",result.size(),CoreMatchers.is(1));
  result=DocumentHelper.selectNodes("//*[local-name()='property' and @name='location' and @value='test1.properties']",muleConfig);
  Assert.assertThat("Property placeholder prop for location is test1.properties",result.size(),CoreMatchers.is(1));
  result=DocumentHelper.selectNodes("//*[local-name()='property' and @name='ignoreUnresolvablePlaceholders' and @value='true']",muleConfig);
  Assert.assertThat("Property placeholder prop for ignoreUnresolvablePlaceholders is true",result.size(),CoreMatchers.is(1));
  result=DocumentHelper.selectNodes("/mule/*[local-name()='property-placeholder' and @location='test2.properties' and @ignore-unresolvable='true']",muleConfig);
  Assert.assertThat("Property placeholder for test2.properties is present",result.size(),CoreMatchers.is(1));
}
