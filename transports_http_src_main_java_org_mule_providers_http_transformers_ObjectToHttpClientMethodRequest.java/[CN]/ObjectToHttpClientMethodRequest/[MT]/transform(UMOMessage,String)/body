{
  Object src=msg.getPayload();
  String endpoint=msg.getStringProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,null);
  if (endpoint == null) {
    throw new TransformerException(HttpMessages.eventPropertyNotSetCannotProcessRequest(MuleProperties.MULE_ENDPOINT_PROPERTY),this);
  }
  String method=msg.getStringProperty(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
  try {
    URI uri=new URI(endpoint);
    HttpMethod httpMethod;
    if (HttpConstants.METHOD_GET.equals(method)) {
      httpMethod=new GetMethod(uri.toString());
      String paramName=msg.getStringProperty(HttpConnector.HTTP_GET_BODY_PARAM_PROPERTY,HttpConnector.DEFAULT_HTTP_GET_BODY_PARAM_PROPERTY);
      String query=uri.getQuery();
      if (!(src instanceof NullPayload) && !StringUtils.EMPTY.equals(src)) {
        if (query == null) {
          query=paramName + "=" + src.toString();
        }
 else {
          query+="&" + paramName + "="+ src.toString();
        }
      }
      httpMethod.setQueryString(query);
    }
 else     if (HttpConstants.METHOD_POST.equalsIgnoreCase(method)) {
      PostMethod postMethod=new PostMethod(uri.toString());
      String paramName=msg.getStringProperty(HttpConnector.HTTP_POST_BODY_PARAM_PROPERTY,null);
      if (paramName == null) {
        addParameters(uri.getQuery(),postMethod);
        setupEntityMethod(src,outputEncoding,msg,uri,postMethod);
      }
 else {
        postMethod.addParameter(paramName,src.toString());
      }
      httpMethod=postMethod;
    }
 else     if (HttpConstants.METHOD_PUT.equalsIgnoreCase(method)) {
      PutMethod putMethod=new PutMethod(uri.toString());
      setupEntityMethod(src,outputEncoding,msg,uri,putMethod);
      httpMethod=putMethod;
    }
 else     if (HttpConstants.METHOD_DELETE.equalsIgnoreCase(method)) {
      httpMethod=new DeleteMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_HEAD.equalsIgnoreCase(method)) {
      httpMethod=new HeadMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_OPTIONS.equalsIgnoreCase(method)) {
      httpMethod=new OptionsMethod(uri.toString());
    }
 else     if (HttpConstants.METHOD_TRACE.equalsIgnoreCase(method)) {
      httpMethod=new TraceMethod(uri.toString());
    }
 else {
      throw new TransformerException(HttpMessages.unsupportedMethod(method));
    }
    HttpMethodParams params=(HttpMethodParams)msg.removeProperty(HttpConnector.HTTP_PARAMS_PROPERTY);
    if (params != null) {
      httpMethod.setParams(params);
    }
 else {
      String httpVersion=msg.getStringProperty(HttpConnector.HTTP_VERSION_PROPERTY,HttpConstants.HTTP11);
      if (HttpConstants.HTTP10.equals(httpVersion)) {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_0);
      }
 else {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_1);
      }
    }
    setHeaders(httpMethod,msg);
    return httpMethod;
  }
 catch (  Exception e) {
    throw new TransformerException(this,e);
  }
}
