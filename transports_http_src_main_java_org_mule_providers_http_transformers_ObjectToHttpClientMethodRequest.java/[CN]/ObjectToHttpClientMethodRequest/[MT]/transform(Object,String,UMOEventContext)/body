{
  UMOMessage msg=context.getMessage();
  String endpoint=msg.getStringProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,null);
  if (endpoint == null) {
    throw new TransformerException(HttpMessages.eventPropertyNotSetCannotProcessRequest(MuleProperties.MULE_ENDPOINT_PROPERTY),this);
  }
  String method=msg.getStringProperty(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
  try {
    URI uri=new URI(endpoint);
    HttpMethod httpMethod=null;
    if (HttpConstants.METHOD_GET.equals(method)) {
      httpMethod=new GetMethod(uri.toString());
      setHeaders(httpMethod,context);
      String paramName=msg.getStringProperty(HttpConnector.HTTP_GET_BODY_PARAM_PROPERTY,HttpConnector.DEFAULT_HTTP_GET_BODY_PARAM_PROPERTY);
      String query=uri.getQuery();
      if (!(src instanceof NullPayload) && !StringUtils.EMPTY.equals(src)) {
        if (query == null) {
          query=paramName + "=" + src.toString();
        }
 else {
          query+="&" + paramName + "="+ src.toString();
        }
      }
      httpMethod.setQueryString(query);
    }
 else {
      PostMethod postMethod=new PostMethod(uri.toString());
      setHeaders(postMethod,context);
      String paramName=msg.getStringProperty(HttpConnector.HTTP_POST_BODY_PARAM_PROPERTY,null);
      if (paramName == null) {
        addParameters(uri.getQuery(),postMethod);
        if (!(context.getMessage().getPayload() instanceof NullPayload)) {
          String mimeType=msg.getStringProperty(HttpConstants.HEADER_CONTENT_TYPE,null);
          if (src instanceof String) {
            if (mimeType != null) {
              int parameterIndex=mimeType.indexOf(";");
              if (parameterIndex > 0) {
                mimeType=mimeType.substring(0,parameterIndex);
              }
            }
            if (mimeType == null)             mimeType=HttpConstants.DEFAULT_CONTENT_TYPE;
            postMethod.setRequestEntity(new StringRequestEntity(src.toString(),mimeType,encoding));
          }
 else           if (src instanceof InputStream) {
            if (mimeType == null)             mimeType=HttpConstants.DEFAULT_CONTENT_TYPE;
            postMethod.setRequestEntity(new InputStreamRequestEntity((InputStream)src,mimeType));
          }
 else {
            if (mimeType == null)             mimeType=HttpConstants.DEFAULT_CONTENT_TYPE;
            byte[] buffer=(byte[])serializableToByteArray.doTransform(src,encoding);
            postMethod.setRequestEntity(new ByteArrayRequestEntity(buffer,mimeType));
          }
        }
      }
 else {
        postMethod.addParameter(paramName,src.toString());
      }
      httpMethod=postMethod;
    }
    HttpMethodParams params=(HttpMethodParams)msg.removeProperty(HttpConnector.HTTP_PARAMS_PROPERTY);
    if (params != null) {
      httpMethod.setParams(params);
    }
 else {
      String httpVersion=msg.getStringProperty(HttpConnector.HTTP_VERSION_PROPERTY,HttpConstants.HTTP11);
      if (HttpConstants.HTTP10.equals(httpVersion)) {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_0);
      }
 else {
        httpMethod.getParams().setVersion(HttpVersion.HTTP_1_1);
      }
    }
    return httpMethod;
  }
 catch (  Exception e) {
    throw new TransformerException(this,e);
  }
}
