{
switch (state) {
case START:
    AbstractBeanDefinition objectFactoryDefn=objectFactoryParser.muleParse(element,parserContext);
  componentParser.forceParent(objectFactoryDefn);
AbstractBeanDefinition componentDefn1=componentParser.muleParse(element,parserContext);
state=POST_CHILDREN;
currentElement=element;
return componentDefn1;
case POST_CHILDREN:
if (!currentElement.equals(element)) {
throw new IllegalStateException("Cannot nest " + ClassUtils.getSimpleName(getClass()));
}
AbstractBeanDefinition componentDefn2=componentParser.muleParse(element,parserContext);
state=START;
return componentDefn2;
default :
throw new IllegalStateException("Unexpected state in " + ClassUtils.getSimpleName(getClass()));
}
}
