{
  String p;
  p=System.getProperty(MuleProperties.MULE_ENCODING_SYSTEM_PROPERTY);
  if (p != null) {
    encoding=p;
  }
 else {
    System.setProperty(MuleProperties.MULE_ENCODING_SYSTEM_PROPERTY,encoding);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "endpoints.synchronous");
  if (p != null) {
    synchronous=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "systemModelType");
  if (p != null) {
    systemModelType=p;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "timeout.synchronous");
  if (p != null) {
    responseTimeout=NumberUtils.toInt(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "timeout.transaction");
  if (p != null) {
    defaultTransactionTimeout=NumberUtils.toInt(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "workingDirectory");
  if (p != null) {
    workingDirectory=p;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "clientMode");
  if (p != null) {
    clientMode=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "serverId");
  if (p != null) {
    id=p;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "clusterId");
  if (p != null) {
    clusterId=p;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "domainId");
  if (p != null) {
    domainId=p;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "message.cacheBytes");
  if (p != null) {
    cacheMessageAsBytes=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "message.cacheOriginal");
  if (p != null) {
    cacheMessageOriginalPayload=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "streaming.enable");
  if (p != null) {
    enableStreaming=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "transform.autoWrap");
  if (p != null) {
    autoWrapMessageAwareTransform=BooleanUtils.toBoolean(p);
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "stacktrace.full");
  if (p != null) {
    fullStackTraces=false;
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "stacktrace.filter");
  if (p != null) {
    stackTraceFilter=p.split(",");
  }
  p=System.getProperty(MuleProperties.SYSTEM_PROPERTY_PREFIX + "verbose.exceptions");
  if (p != null) {
    verboseExceptions=BooleanUtils.toBoolean(p);
  }
 else {
    verboseExceptions=logger.isDebugEnabled();
  }
}
