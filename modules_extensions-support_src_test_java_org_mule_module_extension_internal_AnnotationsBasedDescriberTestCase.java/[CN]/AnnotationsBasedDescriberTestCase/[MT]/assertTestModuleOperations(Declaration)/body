{
  assertThat(declaration.getOperations(),hasSize(17));
  assertOperation(declaration,SAY_MY_NAME_OPERATION,"");
  assertOperation(declaration,GET_ENEMY_OPERATION,"");
  assertOperation(declaration,KILL_OPERATION,"");
  assertOperation(declaration,KILL_CUSTOM_OPERATION,"");
  assertOperation(declaration,KILL_WITH_WEAPON,"");
  assertOperation(declaration,KILL_WITH_MULTIPLES_WEAPONS,"");
  assertOperation(declaration,HIDE_METH_IN_EVENT_OPERATION,"");
  assertOperation(declaration,HIDE_METH_IN_MESSAGE_OPERATION,"");
  assertOperation(declaration,DIE,"");
  assertOperation(declaration,KILL_MANY,"");
  assertOperation(declaration,KILL_ONE,"");
  assertOperation(declaration,LAUNDER_MONEY,"");
  assertOperation(declaration,INJECTED_EXTENSION_MANAGER,"");
  assertOperation(declaration,ALIAS,"");
  assertOperation(declaration,CALL_SAUL,"");
  OperationDeclaration operation=getOperation(declaration,SAY_MY_NAME_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,GET_ENEMY_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertParameter(operation.getParameters(),"index","",DataType.of(int.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(2));
  assertParameter(operation.getParameters(),"victim","",DataType.of(String.class),false,SUPPORTED,"#[payload]");
  assertParameter(operation.getParameters(),"goodbyeMessage","",DataType.of(String.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_WITH_WEAPON);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertParameter(operation.getParameters(),"weapon","",DataType.of(Weapon.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_WITH_MULTIPLES_WEAPONS);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertParameter(operation.getParameters(),"weaponList","",DataType.of(List.class,Weapon.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_CUSTOM_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(2));
  assertParameter(operation.getParameters(),"victim","",DataType.of(String.class),false,SUPPORTED,"#[payload]");
  assertParameter(operation.getParameters(),"goodbyeMessage","",DataType.of(String.class),true,SUPPORTED,null);
  operation=getOperation(declaration,HIDE_METH_IN_EVENT_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,HIDE_METH_IN_MESSAGE_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,LAUNDER_MONEY);
  assertParameter(operation.getParameters(),"amount","",DataType.of(long.class),true,SUPPORTED,null);
  operation=getOperation(declaration,INJECTED_EXTENSION_MANAGER);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,ALIAS);
  assertParameter(operation.getParameters(),"greeting","",DataType.of(String.class),true,SUPPORTED,null);
  assertParameter(operation.getParameters(),"myName","",DataType.of(String.class),false,SUPPORTED,HEISENBERG);
  assertParameter(operation.getParameters(),"age","",DataType.of(Integer.class),false,SUPPORTED,AGE);
  operation=getOperation(declaration,KNOCK);
  assertParameter(operation.getParameters(),"door","",DataType.of(KnockeableDoor.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KNOCK_MANY);
  assertParameter(operation.getParameters(),"doors","",DataType.of(List.class,KnockeableDoor.class),true,SUPPORTED,null);
  operation=getOperation(declaration,CALL_SAUL);
  assertThat(operation.getParameters(),is(empty()));
  ConnectionTypeModelProperty connectionType=operation.getModelProperty(ConnectionTypeModelProperty.KEY);
  assertThat(connectionType,is(notNullValue()));
  assertThat(connectionType.getConnectionType(),equalTo(HeisenbergConnection.class));
}
