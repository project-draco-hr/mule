{
  assertThat(declaration.getOperations(),hasSize(22));
  assertOperation(declaration,SAY_MY_NAME_OPERATION,"");
  assertOperation(declaration,GET_ENEMY_OPERATION,"");
  assertOperation(declaration,KILL_OPERATION,"");
  assertOperation(declaration,KILL_CUSTOM_OPERATION,"");
  assertOperation(declaration,KILL_WITH_WEAPON,"");
  assertOperation(declaration,KILL_WITH_MULTIPLES_WEAPONS,"");
  assertOperation(declaration,KILL_WITH_MULTIPLE_WILDCARD_WEAPONS,"");
  assertOperation(declaration,GET_PAYMENT_FROM_EVENT_OPERATION,"");
  assertOperation(declaration,GET_PAYMENT_FROM_MESSAGE_OPERATION,"");
  assertOperation(declaration,DIE,"");
  assertOperation(declaration,KILL_MANY,"");
  assertOperation(declaration,KILL_ONE,"");
  assertOperation(declaration,LAUNDER_MONEY,"");
  assertOperation(declaration,INJECTED_EXTENSION_MANAGER,"");
  assertOperation(declaration,ALIAS,"");
  assertOperation(declaration,CALL_SAUL,"");
  assertOperation(declaration,CALL_GUS_FRING,"");
  assertOperation(declaration,GET_SAUL_PHONE,"");
  OperationDeclaration operation=getOperation(declaration,SAY_MY_NAME_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,GET_ENEMY_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertThat(operation.getReturnType(),equalTo(toMetadataType(String.class)));
  assertThat(operation.getAttributesType(),equalTo(toMetadataType(Integer.class)));
  assertParameter(operation.getParameters(),"index","",toMetadataType(int.class),false,SUPPORTED,"0");
  operation=getOperation(declaration,KILL_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(2));
  assertParameter(operation.getParameters(),"victim","",toMetadataType(String.class),false,SUPPORTED,"#[payload]");
  assertParameter(operation.getParameters(),"goodbyeMessage","",toMetadataType(String.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_WITH_WEAPON);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(3));
  assertParameter(operation.getParameters(),"weapon","",toMetadataType(Weapon.class),true,SUPPORTED,null);
  assertParameter(operation.getParameters(),"type","",toMetadataType(Weapon.WeaponType.class),true,SUPPORTED,null);
  assertParameter(operation.getParameters(),"weaponAttributes","",toMetadataType(Weapon.WeaponAttributes.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_WITH_MULTIPLES_WEAPONS);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertParameter(operation.getParameters(),"weaponList","",arrayOf(List.class,objectTypeBuilder(Weapon.class)),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_WITH_MULTIPLE_WILDCARD_WEAPONS);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(1));
  assertParameter(operation.getParameters(),"wildCardWeapons","",arrayOf(List.class,objectTypeBuilder(Weapon.class)),true,SUPPORTED,null);
  operation=getOperation(declaration,KILL_CUSTOM_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters(),hasSize(2));
  assertParameter(operation.getParameters(),"victim","",toMetadataType(String.class),false,SUPPORTED,"#[payload]");
  assertParameter(operation.getParameters(),"goodbyeMessage","",toMetadataType(String.class),true,SUPPORTED,null);
  operation=getOperation(declaration,GET_PAYMENT_FROM_EVENT_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,GET_PAYMENT_FROM_MESSAGE_OPERATION);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,LAUNDER_MONEY);
  assertParameter(operation.getParameters(),"amount","",toMetadataType(long.class),true,SUPPORTED,null);
  operation=getOperation(declaration,INJECTED_EXTENSION_MANAGER);
  assertThat(operation,is(notNullValue()));
  assertThat(operation.getParameters().isEmpty(),is(true));
  operation=getOperation(declaration,ALIAS);
  assertParameter(operation.getParameters(),"greeting","",toMetadataType(String.class),true,SUPPORTED,null);
  assertParameter(operation.getParameters(),"myName","",toMetadataType(String.class),false,SUPPORTED,HEISENBERG);
  assertParameter(operation.getParameters(),"age","",toMetadataType(Integer.class),false,SUPPORTED,AGE);
  operation=getOperation(declaration,KNOCK);
  assertParameter(operation.getParameters(),"door","",toMetadataType(KnockeableDoor.class),true,SUPPORTED,null);
  operation=getOperation(declaration,KNOCK_MANY);
  assertParameter(operation.getParameters(),"doors","",arrayOf(List.class,objectTypeBuilder(KnockeableDoor.class)),true,SUPPORTED,null);
  operation=getOperation(declaration,CALL_SAUL);
  assertThat(operation.getParameters(),is(empty()));
  ConnectionTypeModelProperty connectionType=operation.getModelProperty(ConnectionTypeModelProperty.class).get();
  assertThat(connectionType.getConnectionType(),equalTo(HeisenbergConnection.class));
  operation=getOperation(declaration,CURE_CANCER);
  assertThat(operation.getParameters(),is(empty()));
  java.util.Optional<ExceptionEnricherFactory> exceptionEnricherFactory=operation.getExceptionEnricherFactory();
  assertThat(exceptionEnricherFactory.isPresent(),is(true));
  assertThat(exceptionEnricherFactory.get().createEnricher(),instanceOf(CureCancerExceptionEnricher.class));
  operation=getOperation(declaration,CALL_GUS_FRING);
  assertThat(operation.getParameters(),is(empty()));
  java.util.Optional<ExceptionEnricherFactory> exceptionEnricherFactory2=operation.getExceptionEnricherFactory();
  assertThat(exceptionEnricherFactory2.isPresent(),is(false));
  operation=getOperation(declaration,IGNORED_OPERATION);
  assertThat(operation,is(nullValue()));
}
