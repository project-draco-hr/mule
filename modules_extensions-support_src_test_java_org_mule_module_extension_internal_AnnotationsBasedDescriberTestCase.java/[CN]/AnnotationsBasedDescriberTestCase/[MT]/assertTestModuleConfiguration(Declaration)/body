{
  assertThat(declaration.getConfigurations(),hasSize(1));
  ConfigurationDeclaration conf=declaration.getConfigurations().get(0);
  assertThat(conf.getName(),equalTo(DEFAULT_CONFIG_NAME));
  List<ParameterDeclaration> parameters=conf.getParameters();
  assertThat(parameters,hasSize(23));
  assertParameter(parameters,"myName","",DataType.of(String.class),false,SUPPORTED,HEISENBERG);
  assertParameter(parameters,"age","",DataType.of(Integer.class),false,SUPPORTED,AGE);
  assertParameter(parameters,"enemies","",DataType.of(List.class,String.class),true,SUPPORTED,null);
  assertParameter(parameters,"money","",DataType.of(BigDecimal.class),true,SUPPORTED,null);
  assertParameter(parameters,"cancer","",DataType.of(boolean.class),true,SUPPORTED,null);
  assertParameter(parameters,"cancer","",DataType.of(boolean.class),true,SUPPORTED,null);
  assertParameter(parameters,"dateOfBirth","",DataType.of(Date.class),true,SUPPORTED,null);
  assertParameter(parameters,"dateOfDeath","",DataType.of(Calendar.class),true,SUPPORTED,null);
  assertParameter(parameters,"recipe","",DataType.of(Map.class,String.class,Long.class),false,SUPPORTED,null);
  assertParameter(parameters,"ricinPacks","",DataType.of(Set.class,Ricin.class),false,SUPPORTED,null);
  assertParameter(parameters,"nextDoor","",DataType.of(KnockeableDoor.class),false,SUPPORTED,null);
  assertParameter(parameters,"candidateDoors","",DataType.of(Map.class,String.class,KnockeableDoor.class),false,SUPPORTED,null);
  assertParameter(parameters,"initialHealth","",DataType.of(HealthStatus.class),false,SUPPORTED,"CANCER");
  assertParameter(parameters,"finalHealth","",DataType.of(HealthStatus.class),true,SUPPORTED,null);
  assertParameter(parameters,"labAddress","",DataType.of(String.class),false,REQUIRED,null);
  assertParameter(parameters,"firstEndevour","",DataType.of(String.class),false,NOT_SUPPORTED,null);
  assertParameter(parameters,"weapon","",DataType.of(Weapon.class),false,SUPPORTED,null);
  assertParameter(parameters,"moneyFunction","",DataType.of(Function.class,MuleEvent.class,Integer.class),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardWeapons","",DataType.of(List.class,Weapon.class),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardList","",DataType.of(List.class,Object.class),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardWeaponMap","",DataType.of(Map.class,Weapon.class,Object.class),false,SUPPORTED,null);
  assertParameter(parameters,"monthlyIncomes","",DataType.of(List.class,Long.class),true,SUPPORTED,null);
  assertParameter(parameters,"labeledRicin","",DataType.of(Map.class,String.class,Ricin.class),false,SUPPORTED,null);
  assertParameter(parameters,"deathsBySeasons","",DataType.of(Map.class,DataType.of(String.class),DataType.of(List.class,DataType.of(String.class))),false,SUPPORTED,null);
}
