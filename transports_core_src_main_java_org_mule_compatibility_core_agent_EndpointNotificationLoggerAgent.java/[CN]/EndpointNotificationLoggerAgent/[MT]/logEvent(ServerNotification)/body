{
  if (endpoint != null && !ignoredNotifications.contains(new Integer(e.getAction()))) {
    if (!endpoint.getConnector().isStarted()) {
      logger.warn("Endpoint not started: " + endpoint.getEndpointURI() + ". Cannot dispatch notification: "+ e);
      return;
    }
    if ((e.getAction() == ConnectionNotification.CONNECTION_FAILED || e.getAction() == ConnectionNotification.CONNECTION_DISCONNECTED) && (e.getSource()).equals(endpoint.getConnector())) {
      return;
    }
    MuleMessage msg=MuleMessage.builder().payload(e).build();
    try {
      if (endpoint.getFilter() != null && !endpoint.getFilter().accept(msg)) {
        if (logger.isInfoEnabled()) {
          logger.info("Message not accepted with filter: " + endpoint.getFilter());
        }
        return;
      }
      FlowConstruct flowConstruct=new FlowConstruct(){
        @Override public MuleContext getMuleContext(){
          return muleContext;
        }
        @Override public String getName(){
          return "EndpointNotificationLoggerAgent";
        }
        @Override public LifecycleState getLifecycleState(){
          return null;
        }
        @Override public MessagingExceptionHandler getExceptionListener(){
          return null;
        }
        @Override public FlowConstructStatistics getStatistics(){
          return null;
        }
      }
;
      MuleEvent event=MuleEvent.builder(create(flowConstruct,"EndpointNotificationLoggerAgent")).message(msg).exchangePattern(endpoint.getExchangePattern()).flow(flowConstruct).build();
      event.setEnableNotifications(false);
      endpoint.process(event);
    }
 catch (    Exception e1) {
      logger.error("Failed to dispatch event: " + e.toString() + " over endpoint: "+ endpoint+ ". Error is: "+ e1.getMessage(),e1);
    }
  }
}
