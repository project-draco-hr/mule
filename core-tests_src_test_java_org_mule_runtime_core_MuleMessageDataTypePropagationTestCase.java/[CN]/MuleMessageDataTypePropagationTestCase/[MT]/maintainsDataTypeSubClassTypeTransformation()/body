{
  DefaultMuleMessage muleMessage=new DefaultMuleMessage(new ClassCastException(TEST),muleContext);
  DataType originalDataType=DataType.builder().type(RuntimeException.class).mimeType(ANY).build();
  muleMessage.setDataType(originalDataType);
  Transformer transformer=mock(Transformer.class);
  DataType outputDataType=DataType.builder().type(Object.class).mimeType(ANY).build();
  when(transformer.getReturnDataType()).thenReturn(outputDataType);
  when(transformer.isSourceDataTypeSupported(DataType.builder().type(muleMessage.getPayload().getClass()).build())).thenReturn(true);
  when(transformer.transform(anyObject())).thenReturn(new ArithmeticException(TEST));
  MuleEvent muleEvent=mock(MuleEvent.class);
  MuleMessage result=transformationService.applyTransformers(muleMessage,muleEvent,Collections.singletonList(transformer));
  assertThat(result.getDataType().getType(),Matchers.<Class<?>>equalTo(RuntimeException.class));
}
