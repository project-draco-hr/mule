{
  PushbackInputStream pbis=(PushbackInputStream)pbMap.get(is);
  if (null == pbis) {
    pbis=new PushbackInputStream(is,PUSHBACK_BUFFER_SIZE);
    PushbackInputStream prev=(PushbackInputStream)pbMap.putIfAbsent(is,pbis);
    pbis=null == prev ? pbis : prev;
  }
  int len=-1;
  try {
    byte[] buffer=new byte[READ_BUFFER_SIZE];
    StringBuilder message=new StringBuilder(READ_BUFFER_SIZE);
    int patternIndex=-1;
    boolean repeat;
    do {
      len=safeRead(pbis,buffer);
      if (len >= 0) {
        message.append(new String(buffer,0,len));
        patternIndex=message.toString().indexOf(XML_PATTERN,1);
        repeat=isRepeat(patternIndex,len,pbis.available());
      }
 else {
        repeat=false;
      }
    }
 while (repeat);
    if (patternIndex > 0) {
      pbis.unread(message.substring(patternIndex,message.length()).getBytes());
      message.setLength(patternIndex);
    }
    return nullEmptyArray(message.toString().getBytes());
  }
  finally {
    if (len < 0) {
      pbMap.remove(is);
    }
  }
}
