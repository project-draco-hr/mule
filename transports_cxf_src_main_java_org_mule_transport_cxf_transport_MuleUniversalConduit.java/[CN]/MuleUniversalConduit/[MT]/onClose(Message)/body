{
  final CachedOutputStream cached=(CachedOutputStream)m.getContent(OutputStream.class);
  OutputHandler handler=new OutputHandler(){
    public void write(    MuleEvent event,    OutputStream out) throws IOException {
      IOUtils.copy(cached.getInputStream(),out);
    }
  }
;
  DefaultMessageAdapter req=new DefaultMessageAdapter(handler);
  String method=(String)m.get(Message.HTTP_REQUEST_METHOD);
  if (method == null)   method=HttpConstants.METHOD_POST;
  req.setProperty(HttpConnector.HTTP_METHOD_PROPERTY,method);
  req.setProperty(HttpConstants.HEADER_CONTENT_TYPE,m.get(Message.CONTENT_TYPE));
  MuleEvent event=RequestContext.getEvent();
  if (event != null) {
    MuleMessage msg=event.getMessage();
    for (Iterator i=msg.getPropertyNames().iterator(); i.hasNext(); ) {
      String propertyName=(String)i.next();
      if (!(propertyName.startsWith(MuleProperties.PROPERTY_PREFIX))) {
        req.setProperty(propertyName,msg.getProperty(propertyName));
      }
    }
  }
  MuleMessage result=null;
  String uri=setupURL(m);
  LOGGER.info("Sending message to " + uri);
  try {
    OutboundEndpoint ep=RegistryContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint(uri);
    result=sendStream(req,ep);
    if (result != null) {
      Message inMessage=new MessageImpl();
      String contentType=req.getStringProperty(HttpConstants.HEADER_CONTENT_TYPE,"text/xml");
      inMessage.put(Message.ENCODING,result.getEncoding());
      inMessage.put(Message.CONTENT_TYPE,contentType);
      inMessage.setContent(InputStream.class,new ByteArrayInputStream(result.getPayloadAsBytes()));
      inMessage.setExchange(m.getExchange());
      getMessageObserver().onMessage(inMessage);
    }
  }
 catch (  Exception e) {
    if (e instanceof IOException) {
      throw (IOException)e;
    }
    IOException ex=new IOException("Could not send message to Mule.");
    ex.initCause(e);
    throw ex;
  }
}
