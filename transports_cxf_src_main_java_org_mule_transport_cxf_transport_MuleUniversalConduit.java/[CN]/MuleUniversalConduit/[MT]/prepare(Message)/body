{
  final ByteArrayOutputStream cache=new ByteArrayOutputStream();
  final DelegatingOutputStream delegating=new DelegatingOutputStream(cache);
  message.setContent(OutputStream.class,delegating);
  message.setContent(DelegatingOutputStream.class,delegating);
  AbstractPhaseInterceptor<Message> i=new AbstractPhaseInterceptor<Message>(Phase.PRE_STREAM){
    public void handleMessage(    Message m) throws Fault {
      try {
        dispatchMuleMessage(m);
      }
 catch (      IOException e) {
        throw new Fault(e);
      }
    }
  }
;
  i.getAfter().add(MuleProtocolHeadersOutInterceptor.class.getName());
  message.getInterceptorChain().add(i);
  OutputHandler handler=new OutputHandler(){
    public void write(    MuleEvent event,    OutputStream out) throws IOException {
      out.write(cache.toByteArray());
      delegating.setOutputStream(out);
      message.getInterceptorChain().doIntercept(message);
    }
  }
;
  MuleEvent event=(MuleEvent)message.getExchange().get(MULE_EVENT_PROPERTY);
  DefaultMessageAdapter req;
  if (event == null) {
    req=new DefaultMessageAdapter(handler);
  }
 else {
    req=new DefaultMessageAdapter(handler,event.getMessage());
  }
  message.getExchange().put(CxfConstants.MULE_MESSAGE,req);
}
