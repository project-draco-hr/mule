{
  setProperty(MailProperties.INBOUND_TO_ADDRESSES_PROPERTY,MailUtils.mailAddressesToString(message.getRecipients(Message.RecipientType.TO)));
  setProperty(MailProperties.INBOUND_CC_ADDRESSES_PROPERTY,MailUtils.mailAddressesToString(message.getRecipients(Message.RecipientType.CC)));
  setProperty(MailProperties.INBOUND_BCC_ADDRESSES_PROPERTY,MailUtils.mailAddressesToString(message.getRecipients(Message.RecipientType.BCC)));
  try {
    setProperty(MailProperties.INBOUND_REPLY_TO_ADDRESSES_PROPERTY,MailUtils.mailAddressesToString(message.getReplyTo()));
  }
 catch (  javax.mail.MessagingException me) {
    logger.warn("Invalid address found in ReplyTo header:",me);
  }
  try {
    setProperty(MailProperties.INBOUND_FROM_ADDRESS_PROPERTY,MailUtils.mailAddressesToString(message.getFrom()));
  }
 catch (  javax.mail.MessagingException me) {
    logger.warn("Invalid address found in From header:",me);
  }
  setProperty(MailProperties.INBOUND_SUBJECT_PROPERTY,StringUtils.defaultIfEmpty(message.getSubject(),"(no subject)"));
  setProperty(MailProperties.INBOUND_CONTENT_TYPE_PROPERTY,StringUtils.defaultIfEmpty(message.getContentType(),"text/plain"));
  Date sentDate=message.getSentDate();
  if (sentDate == null) {
    sentDate=new Date();
  }
  setProperty(MailProperties.SENT_DATE_PROPERTY,sentDate);
  for (Enumeration e=message.getAllHeaders(); e.hasMoreElements(); ) {
    Header header=(Header)e.nextElement();
    String name=header.getName();
    String listName=toListHeader(name);
    String value=header.getValue();
    if (null == getProperty(name)) {
      setProperty(name,value);
    }
    if (null == getProperty(listName)) {
      setProperty(listName,new LinkedList());
    }
    if (getProperty(listName) instanceof List) {
      ((List)getProperty(listName)).add(header.getValue());
    }
  }
}
