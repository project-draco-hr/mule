{
  registerStandardTransportEndpoints(HttpConnector.HTTP,URIBuilder.SOCKET_ATTRIBUTES).addAlias("contentType",HttpConstants.HEADER_CONTENT_TYPE).addAlias("method",HttpConnector.HTTP_METHOD_PROPERTY);
  registerConnectorDefinitionParser(HttpConnector.class);
  registerBeanDefinitionParser("polling-connector",new MuleOrphanDefinitionParser(HttpPollingConnector.class,true));
  registerBeanDefinitionParser("rest-service-component",new ComponentDefinitionParser(RestServiceWrapper.class));
  registerBeanDefinitionParser("payloadParameterName",new ChildListEntryDefinitionParser("payloadParameterNames",ChildMapEntryDefinitionParser.VALUE));
  registerBeanDefinitionParser("requiredParameter",new ChildMapEntryDefinitionParser("requiredParams"));
  registerBeanDefinitionParser("optionalParameter",new ChildMapEntryDefinitionParser("optionalParams"));
  registerBeanDefinitionParser("http-response-to-object-transformer",new TransformerDefinitionParser(HttpClientMethodResponseToObject.class));
  registerBeanDefinitionParser("http-response-to-string-transformer",new TransformerDefinitionParser(HttpResponseToString.class));
  registerBeanDefinitionParser("object-to-http-request-transformer",new TransformerDefinitionParser(ObjectToHttpClientMethodRequest.class));
  registerBeanDefinitionParser("message-to-http-response-transformer",new TransformerDefinitionParser(MuleMessageToHttpResponse.class));
  registerBeanDefinitionParser("error-filter",new ChildDefinitionParser("filter",ErrorFilterFactoryBean.class));
  registerBeanDefinitionParser("request-wildcard-filter",new ChildDefinitionParser("filter",HttpRequestWildcardFilter.class));
}
