{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getService",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Endpoint","test://endpointUri.1");
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Endpoint","test://endpointUri.2");
  OutboundEndpoint endpoint3=getTestOutboundEndpoint("Test3Endpoint","test://endpointUri.3");
  OutboundEndpoint endpoint4=getTestOutboundEndpoint("Test4Endpoint","test://endpointUri.4?synchronous=true");
  OutboundEndpoint endpoint5=getTestOutboundEndpoint("Test5Endpoint","test://endpointUri.5?synchronous=true");
  OutboundEndpoint endpoint6=getTestOutboundEndpoint("Test6Endpoint","test://endpointUri.6?synchronous=true");
  AbstractMessageSplitter router=new AbstractMessageSplitter(){
    protected SplitMessage getMessageParts(    MuleMessage message,    List endpoints){
      int i=0;
      SplitMessage splitMessage=new SplitMessage();
      for (StringTokenizer tokenizer=new StringTokenizer(message.getPayload().toString(),","); tokenizer.hasMoreTokens(); i++) {
        String s=tokenizer.nextToken();
        splitMessage.addPart(s,(OutboundEndpoint)endpoints.get(i));
      }
      return splitMessage;
    }
  }
;
  router.setMuleContext(muleContext);
  List endpoints=new ArrayList();
  endpoints.add(endpoint1);
  endpoints.add(endpoint2);
  endpoints.add(endpoint3);
  router.setEndpoints(endpoints);
  MuleMessage message=new DefaultMuleMessage("test,mule,message",muleContext);
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint2)));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint3)));
  router.route(message,(MuleSession)session.proxy());
  session.verify();
  endpoints=new ArrayList();
  endpoints.add(endpoint4);
  endpoints.add(endpoint5);
  endpoints.add(endpoint6);
  router.getEndpoints().clear();
  router.setEndpoints(endpoints);
  message=new DefaultMuleMessage("test,mule,message",muleContext);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint4)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint5)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint6)),message);
  MuleMessage result=router.route(message,(MuleSession)session.proxy());
  assertNotNull(result);
  assertTrue(result instanceof MuleMessageCollection);
  assertEquals(3,((MuleMessageCollection)result).size());
  session.verify();
}
