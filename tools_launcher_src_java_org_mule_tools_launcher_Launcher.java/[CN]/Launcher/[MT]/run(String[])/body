{
  String muleHomeProperty=System.getProperty(MULE_HOME_PROPERTY);
  File muleHome=null;
  File sourceJar=Locator.getClassSource(getClass());
  File jarDir=sourceJar.getParentFile();
  if (muleHomeProperty != null) {
    muleHome=new File(muleHomeProperty);
  }
  if (muleHome == null || !muleHome.exists()) {
    muleHome=jarDir.getParentFile();
    System.setProperty(MULE_HOME_PROPERTY,muleHome.getAbsolutePath());
  }
  if (!muleHome.exists()) {
    throw new LauncherException("Mule home is set incorrectly or ant could not be located");
  }
  List libPaths=new ArrayList();
  String cpString=null;
  List argList=new ArrayList();
  String[] newArgs;
  boolean noClassPath=false;
  for (int i=0; i < args.length; ++i) {
    if (args[i].equals("-lib")) {
      if (i == args.length - 1) {
        throw new LauncherException("The -lib argument must be followed by a library location");
      }
      libPaths.add(args[++i]);
    }
 else     if (args[i].equals("-cp")) {
      if (i == args.length - 1) {
        throw new LauncherException("The -cp argument must be followed by a classpath expression");
      }
      if (cpString != null) {
        throw new LauncherException("The -cp argument must not be repeated");
      }
      cpString=args[++i];
    }
 else     if (args[i].equals("--noclasspath") || args[i].equals("-noclasspath")) {
      noClassPath=true;
    }
 else {
      argList.add(args[i]);
    }
  }
  if (argList.size() == args.length) {
    newArgs=args;
  }
 else {
    newArgs=(String[])argList.toArray(new String[argList.size()]);
  }
  List libPathURLs=new ArrayList();
  if (cpString != null && !noClassPath) {
    addPath(cpString,false,libPathURLs);
  }
  for (Iterator i=libPaths.iterator(); i.hasNext(); ) {
    String libPath=(String)i.next();
    addPath(libPath,true,libPathURLs);
  }
  URL[] libJars=(URL[])libPathURLs.toArray(new URL[libPathURLs.size()]);
  File toolsJar=Locator.getToolsJar();
  File muleLibDir=null;
  File muleLibOptDir=null;
  String muleLibDirProperty=System.getProperty(MULE_LIB_DIR_PROPERTY);
  if (muleLibDirProperty != null) {
    muleLibDir=new File(muleLibDirProperty);
  }
  if ((muleLibDir == null) || !muleLibDir.exists()) {
    muleLibDir=new File(muleHome + File.separator + "lib");
    System.setProperty(MULE_LIB_DIR_PROPERTY,muleLibDir.getAbsolutePath());
  }
  if ((muleLibDir == null) || !muleLibDir.exists()) {
    muleLibDir=jarDir;
    System.setProperty(MULE_LIB_DIR_PROPERTY,muleLibDir.getAbsolutePath());
  }
  URL[] systemJars=Locator.getLocationURLs(muleLibDir);
  muleLibOptDir=new File(muleLibDir.getAbsolutePath() + File.separator + "opt");
  URL[] muleOptJars=muleLibOptDir.exists() ? Locator.getLocationURLs(muleLibOptDir) : new URL[0];
  int numJars=libJars.length + muleOptJars.length + systemJars.length;
  if (toolsJar != null) {
    numJars++;
  }
  URL[] jars=new URL[numJars];
  System.arraycopy(libJars,0,jars,0,libJars.length);
  System.arraycopy(muleOptJars,0,jars,libJars.length,muleOptJars.length);
  System.arraycopy(systemJars,0,jars,muleOptJars.length + libJars.length,systemJars.length);
  if (toolsJar != null) {
    jars[jars.length - 1]=toolsJar.toURL();
  }
  StringBuffer baseClassPath=new StringBuffer(System.getProperty(JAVA_CLASS_PATH));
  if (baseClassPath.charAt(baseClassPath.length() - 1) == File.pathSeparatorChar) {
    baseClassPath.setLength(baseClassPath.length() - 1);
  }
  for (int i=0; i < jars.length; ++i) {
    baseClassPath.append(File.pathSeparatorChar);
    baseClassPath.append(Locator.fromURI(jars[i].toString()));
  }
  System.setProperty(JAVA_CLASS_PATH,baseClassPath.toString());
  URLClassLoader loader=new URLClassLoader(jars);
  Thread.currentThread().setContextClassLoader(loader);
  String tempMain=System.getProperty(MAIN_CLASS_PROPERTY,MAIN_CLASS);
  Class mainClass=null;
  try {
    mainClass=loader.loadClass(tempMain);
  }
 catch (  Exception ex) {
    System.err.println("Incompatible version of org.mule.tools.laucher detected");
    File mainJar=Locator.getClassSource(mainClass);
    System.err.println("Location of this class is: " + mainJar);
  }
  Method main=null;
  try {
    main=mainClass.getMethod("main",new Class[]{String[].class});
  }
 catch (  NoSuchMethodException e) {
    System.err.println("There is no main(String[] args) method on launch class: " + mainClass);
    e.printStackTrace(System.err);
  }
catch (  SecurityException e) {
    System.err.println("A Security Exception blocked access to the main method of class: " + mainClass);
    e.printStackTrace(System.err);
  }
  try {
    main.invoke(mainClass,new Object[]{newArgs});
  }
 catch (  Exception e) {
    System.err.println("Failed to invoke class: " + mainClass);
    e.printStackTrace(System.err);
  }
}
