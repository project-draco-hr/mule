{
  try {
    HttpResponse response=(HttpResponse)src;
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    OutputStream outstream=out;
    ResponseWriter writer=new ResponseWriter(outstream,encoding);
    writer.println(response.getStatusLine());
    Iterator item=response.getHeaderIterator();
    while (item.hasNext()) {
      Header header=(Header)item.next();
      writer.print(header.toExternalForm());
    }
    writer.println();
    writer.flush();
    InputStream content=response.getBody();
    if (content != null) {
      Header transferenc=response.getFirstHeader(HttpConstants.HEADER_TRANSFER_ENCODING);
      if (transferenc != null) {
        response.removeHeaders(HttpConstants.HEADER_CONTENT_LENGTH);
        if (transferenc.getValue().indexOf(HttpConstants.TRANSFER_ENCODING_CHUNKED) != -1) {
          outstream=new ChunkedOutputStream(outstream);
          byte[] tmp=new byte[1024];
          int i=0;
          while ((i=content.read(tmp)) >= 0) {
            outstream.write(tmp,0,i);
          }
          if (outstream instanceof ChunkedOutputStream) {
            ((ChunkedOutputStream)outstream).finish();
          }
        }
      }
 else {
        byte[] tmp=new byte[1024];
        int i=0;
        while ((i=content.read(tmp)) >= 0) {
          outstream.write(tmp,0,i);
        }
      }
    }
    outstream.flush();
    out.flush();
    byte[] result=out.toByteArray();
    outstream.close();
    out.close();
    if (getReturnClass().equals(String.class)) {
      return new String(result,encoding);
    }
 else {
      return result;
    }
  }
 catch (  IOException e) {
    throw new TransformerException(this,e);
  }
}
