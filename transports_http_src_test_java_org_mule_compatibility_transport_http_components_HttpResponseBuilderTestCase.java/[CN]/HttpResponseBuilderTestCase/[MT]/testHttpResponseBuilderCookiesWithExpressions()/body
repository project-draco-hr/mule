{
  HttpResponseBuilder httpResponseBuilder=createHttpResponseBuilder();
  List<CookieWrapper> cookies=new ArrayList<>();
  cookies.add(createCookie(HEADER_NAME,HEADER_VALUE,HEADER_DOMAIN,HEADER_PATH,HEADER_EXPIRY_DATE,HEADER_SECURE,HEADER_VERSION));
  httpResponseBuilder.setCookies(cookies);
  when(mockExpressionLanguage.parse(HEADER_NAME,mockEvent,null)).thenReturn("userName");
  when(mockExpressionLanguage.parse(HEADER_VALUE,mockEvent,null)).thenReturn("John_Galt");
  when(mockExpressionLanguage.parse(HEADER_DOMAIN,mockEvent,null)).thenReturn("localhost");
  when(mockExpressionLanguage.parse(HEADER_PATH,mockEvent,null)).thenReturn("/");
  when(mockExpressionLanguage.isExpression(HEADER_EXPIRY_DATE)).thenReturn(true);
  when(mockExpressionLanguage.evaluate(HEADER_EXPIRY_DATE,mockEvent,null)).thenReturn("Sun, 15 Dec 2013 16:00:00 GMT");
  when(mockExpressionLanguage.parse(HEADER_SECURE,mockEvent,null)).thenReturn("true");
  when(mockExpressionLanguage.parse(HEADER_VERSION,mockEvent,null)).thenReturn("1");
  HttpResponse response=new HttpResponse();
  httpResponseBuilder.setCookies(response,mockEvent);
  Map<String,String> responseCookies=getHeaderCookie(response.getHeaders());
  assertNotNull(responseCookies);
  assertEquals("userName=John_Galt; Version=1; Domain=localhost; Path=/; Secure; Expires=Sun, 15-Dec-2013 16:00:00 GMT",responseCookies.get("userName"));
}
