{
  MuleTransactionConfig config=new MuleTransactionConfig(TransactionConfig.ACTION_ALWAYS_JOIN);
  config.setInteractWithExternal(true);
  mockExternalTransactionFactory=mock(ExternalTransactionAwareTransactionFactory.class);
  config.setFactory(mockExternalTransactionFactory);
  when(mockExternalTransactionFactory.joinExternalTransaction(mockMuleContext)).thenAnswer(new Answer<Transaction>(){
    @Override public Transaction answer(    InvocationOnMock invocationOnMock) throws Throwable {
      TransactionCoordination.getInstance().bindTransaction(mockTransaction);
      return mockTransaction;
    }
  }
);
  TransactionTemplate transactionTemplate=createTransactionalTemplate(config);
  MuleEvent exceptionListenerResult=configureExceptionListenerCall();
  Object result=transactionTemplate.execute(getFailureTransactionCallback(mockMessagingException));
  org.junit.Assert.assertThat((MuleEvent)result,Is.is(exceptionListenerResult));
  verify(mockTransaction,VerificationModeFactory.times(0)).commit();
  verify(mockTransaction,VerificationModeFactory.times(0)).rollback();
  assertThat(TransactionCoordination.getInstance().getTransaction(),IsNull.<Object>nullValue());
}
