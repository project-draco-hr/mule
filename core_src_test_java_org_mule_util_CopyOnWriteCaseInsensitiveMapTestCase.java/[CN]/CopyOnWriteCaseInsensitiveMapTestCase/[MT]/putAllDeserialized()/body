{
  CopyOnWriteCaseInsensitiveMap<String,Object> original=createTestMap();
  Map<String,Object> copyOnWriteMap=serializeAndDeserialize(original);
  Map<String,String> newOriginalEntriesMap=new HashMap<String,String>();
  newOriginalEntriesMap.put("newOriginal1","val");
  newOriginalEntriesMap.put("newOriginal2","val");
  newOriginalEntriesMap.put("newOriginal3","val");
  original.putAll(newOriginalEntriesMap);
  Map<String,String> newCopyEntriesMap=new HashMap<String,String>();
  newCopyEntriesMap.put("newCopy1","val");
  newCopyEntriesMap.put("newCopy2","val");
  newCopyEntriesMap.put("newCopy3","val");
  copyOnWriteMap.putAll(newCopyEntriesMap);
  assertMapContents(original);
  assertEquals(5,original.size());
  assertTrue(original.containsKey("newOriginal1"));
  assertTrue(original.containsKey("newOriginal2"));
  assertTrue(original.containsKey("newOriginal3"));
  assertFalse(original.containsKey("newCopy1"));
  assertFalse(original.containsKey("newCopy2"));
  assertFalse(original.containsKey("newCopy3"));
  assertMapContents(copyOnWriteMap);
  assertEquals(5,copyOnWriteMap.size());
  assertTrue(copyOnWriteMap.containsKey("newCopy1"));
  assertTrue(copyOnWriteMap.containsKey("newCopy2"));
  assertTrue(copyOnWriteMap.containsKey("newCopy3"));
  assertFalse(copyOnWriteMap.containsKey("newOriginal1"));
  assertFalse(copyOnWriteMap.containsKey("newOriginal2"));
  assertFalse(copyOnWriteMap.containsKey("newOriginal3"));
}
