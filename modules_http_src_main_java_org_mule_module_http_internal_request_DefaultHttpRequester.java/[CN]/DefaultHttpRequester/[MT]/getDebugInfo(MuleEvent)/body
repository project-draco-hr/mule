{
  final List<FieldDebugInfo<?>> fields=new ArrayList<>();
  fields.add(createFieldDebugInfo(URI_DEBUG,String.class,new FieldDebugInfoFactory.FieldEvaluator(){
    @Override public Object evaluate() throws Exception {
      return resolveURI(event);
    }
  }
));
  fields.add(createFieldDebugInfo(METHOD_DEBUG,String.class,method,event));
  fields.add(createFieldDebugInfo(STREAMING_MODE_DEBUG,Boolean.class,requestStreamingMode,event));
  fields.add(createFieldDebugInfo(SEND_BODY_DEBUG,HttpSendBodyMode.class,new FieldDebugInfoFactory.FieldEvaluator(){
    @Override public Object evaluate() throws Exception {
      return HttpSendBodyMode.valueOf(sendBodyMode.resolveStringValue(event));
    }
  }
));
  fields.add(createFieldDebugInfo(FOLLOW_REDIRECTS_DEBUG,Boolean.class,followRedirects,event));
  fields.add(createFieldDebugInfo(PARSE_RESPONSE_DEBUG,Boolean.class,parseResponse,event));
  fields.add(createFieldDebugInfo(RESPONSE_TIMEOUT_DEBUG,Integer.class,new FieldDebugInfoFactory.FieldEvaluator(){
    @Override public Object evaluate() throws Exception {
      return resolveResponseTimeout(event);
    }
  }
));
  fields.add(createFieldDebugInfo(QUERY_PARAMS_DEBUG,List.class,getQueryParamsDebugInfo(event)));
  fields.add(getSecurityFieldDebugInfo(event));
  return fields;
}
