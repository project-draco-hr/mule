{
  final HttpAuthentication authentication=requestConfig.getAuthentication();
  final HttpRequest httpRequest=createHttpRequest(muleEvent,authentication);
  notificationHelper.fireNotification(muleEvent.getMessage(),httpRequest.getUri(),muleEvent.getFlowConstruct(),MESSAGE_REQUEST_BEGIN);
  getHttpClient().send(httpRequest,resolveResponseTimeout(muleEvent),followRedirects.resolveBooleanValue(muleEvent),authentication,new CompletionHandler<HttpResponse,Exception>(){
    @Override public void onFailure(    Exception exception){
      MessagingException msgException=new MessagingException(CoreMessages.createStaticMessage("Error sending HTTP request"),DefaultMuleEvent.copy(muleEvent),exception,DefaultHttpRequester.this);
      completionHandler.onFailure(msgException);
    }
    @Override public void onCompletion(    HttpResponse httpResponse){
      try {
        notificationHelper.fireNotification(muleEvent.getMessage(),httpRequest.getUri(),muleEvent.getFlowConstruct(),MESSAGE_REQUEST_END);
        httpResponseToMuleEvent.convert(muleEvent,httpResponse);
        if (resendRequest(muleEvent,checkRetry,authentication)) {
          consumePayload(muleEvent);
          innerProcessNonBlocking(muleEvent,completionHandler,false);
        }
 else {
          validateResponse(muleEvent);
          completionHandler.onCompletion(muleEvent);
        }
      }
 catch (      MessagingException messagingException) {
        completionHandler.onFailure(messagingException);
      }
catch (      MuleException muleException) {
        completionHandler.onFailure(new MessagingException(muleEvent,muleException,DefaultHttpRequester.this));
      }
    }
  }
);
}
