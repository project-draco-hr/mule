{
  boolean checkFileAge=fileConnector.getCheckFileAge();
  if (checkFileAge) {
    long fileAge=fileConnector.getFileAge();
    long lastMod=file.lastModified();
    long now=System.currentTimeMillis();
    long thisFileAge=now - lastMod;
    if (thisFileAge < fileAge) {
      if (logger.isDebugEnabled()) {
        logger.debug("The file has not aged enough yet, will return nothing for: " + file);
      }
      return;
    }
  }
  if (!(file.canRead() && file.exists() && file.isFile())) {
    throw new DefaultMuleException(FileMessages.fileDoesNotExist(file.getName()));
  }
  if (!attemptFileLock(file)) {
    return;
  }
 else   if (logger.isInfoEnabled()) {
    logger.info("Lock obtained on file: " + file.getAbsolutePath());
  }
  DefaultMuleMessage fileParserMessasge=new DefaultMuleMessage(null,connector.getMuleContext());
  fileParserMessasge.setInboundProperty(FileConnector.PROPERTY_ORIGINAL_FILENAME,file.getName());
  final String originalSourceFile=file.getAbsolutePath();
  final String originalSourceFileName=file.getName();
  final File sourceFile;
  if (workDir != null) {
    String workFileName=file.getName();
    workFileName=fileConnector.getFilenameParser().getFilename(fileParserMessasge,workFileNamePattern);
    File workFile=FileUtils.newFile(workDir,workFileName);
    fileConnector.move(file,workFile);
    sourceFile=workFile;
  }
 else {
    sourceFile=file;
  }
  File destinationFile=null;
  if (moveDir != null) {
    String destinationFileName=originalSourceFileName;
    if (moveToPattern != null) {
      destinationFileName=fileConnector.getFilenameParser().getFilename(fileParserMessasge,moveToPattern);
    }
    destinationFile=FileUtils.newFile(moveDir,destinationFileName);
  }
  MuleMessage message=null;
  String encoding=endpoint.getEncoding();
  try {
    if (fileConnector.isStreaming()) {
      ReceiverFileInputStream payload=createReceiverFileInputStream(sourceFile,destinationFile,new InputStreamCloseListener(){
        @Override public void fileClose(        File file){
          try {
            if (logger.isDebugEnabled()) {
              logger.debug(String.format("Removing processing flag for $ ",file.getAbsolutePath()));
            }
            filesBeingProcessingObjectStore.remove(file.getAbsolutePath());
          }
 catch (          ObjectStoreException e) {
            logger.warn("Failure trying to remove file " + originalSourceFile + " from list of files under processing");
          }
        }
      }
);
      message=createMuleMessage(payload,encoding);
    }
 else {
      message=createMuleMessage(sourceFile,encoding);
    }
  }
 catch (  FileNotFoundException e) {
    logger.error("File being read disappeared!",e);
    return;
  }
  if (workDir != null) {
    message.setProperty(FileConnector.PROPERTY_SOURCE_DIRECTORY,file.getParent(),PropertyScope.INBOUND);
    message.setProperty(FileConnector.PROPERTY_SOURCE_FILENAME,file.getName(),PropertyScope.INBOUND);
  }
  message.setInvocationProperty(FileConnector.PROPERTY_ORIGINAL_FILENAME,originalSourceFileName);
  if (forceSync) {
    message.setProperty(MuleProperties.MULE_FORCE_SYNC_PROPERTY,Boolean.TRUE,PropertyScope.INBOUND);
  }
  final Object originalPayload=message.getPayload();
  ExecutionTemplate<MuleEvent> executionTemplate=createExecutionTemplate();
  final MuleMessage finalMessage=message;
  if (fileConnector.isStreaming()) {
    processWithStreaming(sourceFile,(ReceiverFileInputStream)originalPayload,executionTemplate,finalMessage);
  }
 else {
    processWithoutStreaming(originalSourceFile,originalSourceFileName,sourceFile,destinationFile,executionTemplate,finalMessage);
  }
}
