{
  try {
    executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        moveAndDelete(sourceFile,destinationFile,originalSourceFileName,finalMessage);
        return null;
      }
    }
);
    deleteFileIfRequired(sourceFile,destinationFile);
  }
 catch (  MessagingException e) {
    if (e.causedRollback()) {
      rollbackFileMoveIfRequired(originalSourceFile,sourceFile);
    }
 else {
      deleteFileIfRequired(sourceFile,destinationFile);
    }
  }
catch (  Exception e) {
    rollbackFileMoveIfRequired(originalSourceFile,sourceFile);
    connector.getMuleContext().getExceptionListener().handleException(e);
  }
 finally {
    try {
      filesBeingProcessingObjectStore.remove(originalSourceFile);
      if (logger.isDebugEnabled()) {
        logger.debug(String.format("Removing processing flag for $ ",originalSourceFile));
      }
    }
 catch (    ObjectStoreException e) {
      logger.warn("Failure trying to remove file " + originalSourceFile + " from list of files under processing");
    }
  }
}
