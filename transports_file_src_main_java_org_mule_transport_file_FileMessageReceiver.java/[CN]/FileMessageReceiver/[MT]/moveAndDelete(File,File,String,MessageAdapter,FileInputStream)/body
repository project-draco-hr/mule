{
  if (moveDir != null) {
    String destinationFileName=sourceFileOriginalName;
    if (moveToPattern != null) {
      destinationFileName=((FileConnector)connector).getFilenameParser().getFilename(msgAdapter,moveToPattern);
    }
    destinationFile=FileUtils.newFile(moveDir,destinationFileName);
  }
  boolean fileWasMoved=false;
  try {
    if (!(sourceFile.canRead() && sourceFile.exists() && sourceFile.isFile())) {
      throw new DefaultMuleException(FileMessages.fileDoesNotExist(sourceFileOriginalName));
    }
    if (destinationFile != null) {
      if (fileIn != null) {
        fileIn.close();
      }
      fileWasMoved=this.moveFile(sourceFile,destinationFile);
      if (!fileWasMoved) {
        throw new DefaultMuleException(FileMessages.failedToMoveFile(sourceFile.getAbsolutePath(),destinationFile.getAbsolutePath()));
      }
      Object payload=getPayload(destinationFile,true);
      msgAdapter=connector.getMessageAdapter(payload);
      msgAdapter.setProperty(FileConnector.PROPERTY_FILENAME,destinationFile.getName());
      msgAdapter.setProperty(FileConnector.PROPERTY_ORIGINAL_FILENAME,sourceFileOriginalName);
    }
    this.routeMessage(new DefaultMuleMessage(msgAdapter),endpoint.isSynchronous());
    if (!((FileConnector)connector).isStreaming()) {
      boolean moveTo=destinationFile != null;
      File current=moveTo ? destinationFile : sourceFile;
      delete(current,moveTo);
    }
  }
 catch (  Exception e) {
    boolean fileWasRolledBack=false;
    if (fileWasMoved) {
      fileWasRolledBack=this.rollbackFileMove(destinationFile,sourceFile.getAbsolutePath());
    }
    Exception ex=new RoutingException(FileMessages.exceptionWhileProcessing(sourceFile.getName(),(fileWasRolledBack ? "successful" : "unsuccessful")),new DefaultMuleMessage(msgAdapter),endpoint,e);
    this.handleException(ex);
  }
}
