{
  preProcess(element);
  setParserContext(parserContext);
  setRegistry(parserContext.getRegistry());
  checkElementNameUnique(element);
  Class beanClass=getClassInternal(element);
  BeanDefinitionBuilder builder=createBeanDefinitionBuilder(element,beanClass);
  builder.getRawBeanDefinition().setSource(parserContext.extractSource(element));
  builder.setScope(isSingleton() ? BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE);
  if (!Component.class.isAssignableFrom(beanClass) && !MessageSource.class.isAssignableFrom(beanClass) && !OutboundRouterCollection.class.isAssignableFrom(beanClass)&& !OutboundRouter.class.isAssignableFrom(beanClass)&& !AbstractExceptionListener.class.isAssignableFrom(beanClass)) {
    if (Initialisable.class.isAssignableFrom(beanClass)) {
      builder.setInitMethodName(Initialisable.PHASE_NAME);
    }
    if (Disposable.class.isAssignableFrom(beanClass)) {
      builder.setDestroyMethodName(Disposable.PHASE_NAME);
    }
  }
  if (parserContext.isNested()) {
    builder.setScope(parserContext.getContainingBeanDefinition().isSingleton() ? BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE);
  }
  doParse(element,parserContext,builder);
  return builder.getBeanDefinition();
}
