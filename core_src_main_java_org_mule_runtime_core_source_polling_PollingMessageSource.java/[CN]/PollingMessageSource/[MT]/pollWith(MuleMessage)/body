{
  ExecutionTemplate<MuleEvent> executionTemplate=createMainExecutionTemplate(muleContext,flowConstruct,flowConstruct.getExceptionListener());
  try {
    final MessageProcessorPollingInterceptor interceptor=override.interceptor();
    if (interceptor instanceof MuleContextAware) {
      ((MuleContextAware)interceptor).setMuleContext(muleContext);
    }
    MuleEvent muleEvent=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        MuleEvent event=MuleEvent.builder(create(flowConstruct,getPollingUniqueName())).message(request).exchangePattern(ONE_WAY).flow(flowConstruct).build();
        event=interceptor.prepareSourceEvent(event);
        setCurrentEvent(event);
        MuleEvent sourceEvent=sourceMessageProcessor.process(event);
        if (isNewMessage(sourceEvent)) {
          muleContext.getNotificationManager().fireNotification(new ConnectorMessageNotification(this,sourceEvent.getMessage(),getPollingUniqueName(),flowConstruct,MESSAGE_RECEIVED));
          event=interceptor.prepareRouting(sourceEvent,sourceEvent);
          listener.process(event);
          interceptor.postProcessRouting(event);
        }
 else {
          logger.info(pollSourceReturnedNull(flowConstruct.getName()).getMessage());
        }
        return null;
      }
    }
);
    if (muleEvent != null) {
      interceptor.postProcessRouting(muleEvent);
    }
  }
 catch (  MessagingException e) {
  }
catch (  Exception e) {
    muleContext.getExceptionListener().handleException(e);
  }
}
