{
  final MuleClient client=new MuleClient(muleContext);
  final Map<String,Serializable> props=new HashMap<>();
  props.put("JMSReplyTo","replyTo.queue");
  props.put(MULE_REMOTE_SYNC_PROPERTY,"false");
  props.put("transacted","true");
  while (client.request("jms://replyTo.queue",2000) != null) {
  }
  MuleTransactionConfig tc=new MuleTransactionConfig(ACTION_ALWAYS_BEGIN);
  tc.setFactory(new JmsTransactionFactory());
  EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(new URIBuilder("jms://test.queue",muleContext));
  endpointBuilder.setTransactionConfig(tc);
  endpointBuilder.setName("TransactedTest.Queue");
  ImmutableEndpoint inboundEndpoint=getEndpointFactory().getOutboundEndpoint(endpointBuilder);
  registerEndpoint(client.getMuleContext().getRegistry(),inboundEndpoint);
  ExecutionTemplate<Void> executionTemplate=TransactionalExecutionTemplate.createTransactionalExecutionTemplate(muleContext,tc);
  executionTemplate.execute(new ExecutionCallback<Void>(){
    @Override public Void process() throws Exception {
      for (int i=0; i < 100; i++) {
        client.send("jms://test.queue","Test Client Dispatch message " + i,props);
      }
      return null;
    }
  }
);
  for (int i=0; i < 100; i++) {
    MuleMessage result=client.request("jms://replyTo.queue",2000);
    assertNotNull(result);
  }
  MuleMessage result=client.request("jms://replyTo.queue",2000);
  assertNull(result);
}
