{
  super(connector,component,endpoint);
  Map props=endpoint.getProperties();
  Trigger overrideTrigger=(Trigger)props.get(PROPERTY_TRIGGER);
  if (overrideTrigger != null) {
    trigger=overrideTrigger;
  }
 else {
    this.trigger=trigger;
  }
  try {
    if (scheduler == null) {
      scheduler=new StdSchedulerFactory().getScheduler();
      scheduler.start();
    }
    jobDetail=new JobDetail(endpoint.getEndpointURI().getPath() + "Job",Scheduler.DEFAULT_GROUP,NoOpJob.class);
    Trigger clone=(Trigger)trigger.clone();
    clone.setName(getName() + "Trigger");
    scheduler.scheduleJob(jobDetail,clone);
    trigger.addTriggerListener(getName());
    scheduler.addTriggerListener(this);
  }
 catch (  SchedulerException e) {
    throw new InitialisationException(e,component);
  }
}
