{
  super.addBuilders(builders);
  Class<?> runner=getAnnotationAttributeFrom(this.getClass(),RunWith.class,"value");
  if (runner == null || !runner.equals(ArtifactClassLoaderRunner.class)) {
    throw new IllegalStateException(this.getClass().getName() + " extends " + ArtifactFunctionalTestCase.class.getName()+ " so it should be annotated to only run with: "+ ArtifactClassLoaderRunner.class+ ". See "+ RunnerDelegateTo.class+ " for defining a delegate runner to be used.");
  }
  if (pluginClassLoaders != null && !pluginClassLoaders.isEmpty()) {
    builders.add(0,new IsolatedClassLoaderExtensionsManagerConfigurationBuilder(pluginClassLoaders));
    builders.add(0,new TestBootstrapServiceDiscovererContextBuilder(containerClassLoader,getExecutionClassLoader(),pluginClassLoaders));
  }
}
