{
  new DefaultsConfigurationBuilder().configure(muleContext);
  MuleRegistry registry=muleContext.getRegistry();
  EjbConnector ejbConnector=new EjbConnector(muleContext);
  ejbConnector.setName("ejbConnector");
  ejbConnector.setSecurityPolicy("security.policy");
  ejbConnector.setJndiInitialFactory("org.openejb.client.LocalInitialContextFactory");
  Map<String,String> jndiProviderProperties=new HashMap<String,String>();
  jndiProviderProperties.put("openejb.base","${openejb.base}");
  jndiProviderProperties.put("openejb.configuration","${openejb.configuration}");
  jndiProviderProperties.put("logging.conf","${logging.conf}");
  jndiProviderProperties.put("openejb.nobanner","${openejb.nobanner}");
  ejbConnector.setJndiProviderProperties(jndiProviderProperties);
  ActiveMQJmsConnector activeMQJmsConnector=new ActiveMQJmsConnector(muleContext);
  activeMQJmsConnector.setName("activeMQJmsConnector");
  registry.registerConnector(activeMQJmsConnector);
  Transformer RestRequestToCustomerRequest=new RestRequestToCustomerRequest();
  RestRequestToCustomerRequest.setName("RestRequestToCustomerRequest");
  registry.registerTransformer(RestRequestToCustomerRequest);
  Transformer LoanQuoteRequestToCreditProfileArgs=new LoanQuoteRequestToCreditProfileArgs();
  registry.registerTransformer(LoanQuoteRequestToCreditProfileArgs);
  Transformer CreditProfileXmlToCreditProfile=new CreditProfileXmlToCreditProfile();
  registry.registerTransformer(CreditProfileXmlToCreditProfile);
  Transformer SetLendersAsRecipients=new SetLendersAsRecipients();
  registry.registerTransformer(SetLendersAsRecipients);
  Transformer ObjectToJMSMessage=new ObjectToJMSMessage();
  registry.registerTransformer(ObjectToJMSMessage);
  EndpointBuilder CustomerRequestsREST=new EndpointURIEndpointBuilder(new URIBuilder("jetty:rest://localhost:8888/loanbroker",muleContext));
  registry.registerEndpointBuilder("CustomerRequestsREST",CustomerRequestsREST);
  EndpointBuilder CustomerRequests=new EndpointURIEndpointBuilder(new URIBuilder("vm://customer.requests",muleContext));
  registry.registerEndpointBuilder("CustomerRequests",CustomerRequests);
  EndpointBuilder LoanQuotes=new EndpointURIEndpointBuilder(new URIBuilder("jms://esb.loan.quotes",muleContext));
  registry.registerEndpointBuilder("LoanQuotes",LoanQuotes);
  EndpointBuilder CustomerResponses=LoanQuotes;
  registry.registerEndpointBuilder("CustomerResponses",CustomerResponses);
  EndpointBuilder CreditAgencyGateway=new EndpointURIEndpointBuilder(new URIBuilder("jms://esb.credit.agency",muleContext));
  registry.registerEndpointBuilder("CreditAgencyGateway",CreditAgencyGateway);
  EndpointBuilder CreditAgency=new EndpointURIEndpointBuilder(new URIBuilder("ejb://localhost:1099/local/CreditAgency?method=getCreditProfile",muleContext));
  registry.registerEndpointBuilder("CreditAgency",CreditAgency);
  EndpointBuilder LenderGateway=new EndpointURIEndpointBuilder(new URIBuilder("jms://esb.lender.service",muleContext));
  registry.registerEndpointBuilder("LenderGateway",LenderGateway);
  EndpointBuilder LenderService=new EndpointURIEndpointBuilder(new URIBuilder("vm://lender.service",muleContext));
  registry.registerEndpointBuilder("LenderService",LenderService);
  EndpointBuilder BankingGateway=new EndpointURIEndpointBuilder(new URIBuilder("jms://esb.banks",muleContext));
  EndpointBuilder bank1=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:10080/mule/TheBank1?operation=getLoanQuote",muleContext));
  registry.registerEndpointBuilder("bank1",bank1);
  EndpointBuilder bank2=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:20080/mule/TheBank2?operation=getLoanQuote",muleContext));
  registry.registerEndpointBuilder("bank2",bank2);
  EndpointBuilder bank3=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:30080/mule/TheBank3?operation=getLoanQuote",muleContext));
  registry.registerEndpointBuilder("bank3",bank3);
  EndpointBuilder bank4=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:40080/mule/TheBank4?operation=getLoanQuote",muleContext));
  registry.registerEndpointBuilder("bank4",bank4);
  EndpointBuilder bank1In=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:10080/mule?serviceClass=org.mule.example.loanbroker.bank.BankService",muleContext));
  registry.registerEndpointBuilder("bank1In",bank1In);
  EndpointBuilder bank2In=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:20080/mule?serviceClass=org.mule.example.loanbroker.bank.BankService",muleContext));
  registry.registerEndpointBuilder("bank2In",bank2In);
  EndpointBuilder bank3In=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:30080/mule?serviceClass=org.mule.example.loanbroker.bank.BankService",muleContext));
  registry.registerEndpointBuilder("bank3In",bank3In);
  EndpointBuilder bank4In=new EndpointURIEndpointBuilder(new URIBuilder("cxf:http://localhost:40080/mule?serviceClass=org.mule.example.loanbroker.bank.BankService",muleContext));
  registry.registerEndpointBuilder("bank4In",bank4In);
  Model model=new SedaModel();
  model.setName("model");
  registry.registerModel(model);
  Service loanBrokerService=new SedaService(muleContext);
  loanBrokerService.setName("LoanBroker");
  loanBrokerService.setModel(model);
  loanBrokerService.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(AsynchronousLoanBroker.class)));
  InboundRouterCollection loanBrokerServiceInbound=new DefaultInboundRouterCollection();
  loanBrokerServiceInbound.addEndpoint(CustomerRequestsREST.buildInboundEndpoint());
  EndpointBuilder eb=(EndpointBuilder)CustomerRequests.clone();
  eb.addTransformer(RestRequestToCustomerRequest);
  loanBrokerServiceInbound.addEndpoint(eb.buildInboundEndpoint());
  loanBrokerService.setInboundRouter(loanBrokerServiceInbound);
  OutboundRouterCollection loanBrokerServiceOutbound=new DefaultOutboundRouterCollection();
  OutboundPassThroughRouter outboundPassThroughRouter=new OutboundPassThroughRouter();
  outboundPassThroughRouter.addEndpoint(CreditAgency.buildOutboundEndpoint());
  loanBrokerServiceOutbound.addRouter(outboundPassThroughRouter);
  loanBrokerService.setOutboundRouter(loanBrokerServiceOutbound);
  ResponseRouterCollection responseRouterCollection=new DefaultResponseRouterCollection();
  responseRouterCollection.addEndpoint(LoanQuotes.buildInboundEndpoint());
  responseRouterCollection.addRouter(new BankQuotesResponseAggregator());
  loanBrokerService.setResponseRouter(responseRouterCollection);
  registry.registerService(loanBrokerService);
  Service creditAgencyGatewayService=new SedaService(muleContext);
  creditAgencyGatewayService.setName("CreditAgencyGatewayService");
  creditAgencyGatewayService.setModel(model);
  PooledJavaComponent component=new PooledJavaComponent(new PrototypeObjectFactory(CreditAgencyGateway.class));
  creditAgencyGatewayService.setComponent(component);
  InboundRouterCollection creditAgencyGatewayServiceInbound=new DefaultInboundRouterCollection();
  creditAgencyGatewayServiceInbound.addEndpoint(CreditAgencyGateway.buildInboundEndpoint());
  creditAgencyGatewayService.setInboundRouter(creditAgencyGatewayServiceInbound);
  EndpointBuilder eb2=(EndpointBuilder)CreditAgency.clone();
  eb2.addTransformer(LoanQuoteRequestToCreditProfileArgs);
  eb2.setExchangePattern(MessageExchangePattern.request_response);
  List<Transformer> responseTransformers=new ArrayList<Transformer>();
  responseTransformers.add(CreditProfileXmlToCreditProfile);
  eb2.setResponseTransformers(responseTransformers);
  component.setBindingCollection(new DefaultBindingCollection());
  DefaultInterfaceBinding binding=new DefaultInterfaceBinding();
  binding.setInterface(CreditAgencyService.class);
  binding.setMethod("getCreditProfile");
  binding.setEndpoint(eb2.buildOutboundEndpoint());
  component.getBindingCollection().addRouter(binding);
  OutboundRouterCollection creditAgencyGatewayServiceOutbound=new DefaultOutboundRouterCollection();
  FilteringOutboundRouter creditAgencyGatewayServiceOutboundRouter=new FilteringOutboundRouter();
  creditAgencyGatewayServiceOutboundRouter.addEndpoint(LenderGateway.buildOutboundEndpoint());
  creditAgencyGatewayServiceOutbound.addRouter(creditAgencyGatewayServiceOutboundRouter);
  creditAgencyGatewayService.setOutboundRouter(creditAgencyGatewayServiceOutbound);
  registry.registerService(creditAgencyGatewayService);
  Service lenderGatewayService=new SedaService(muleContext);
  lenderGatewayService.setName("CreditAgencyGatewayService");
  lenderGatewayService.setModel(model);
  InboundRouterCollection lenderGatewayServiceInbound=new DefaultInboundRouterCollection();
  lenderGatewayServiceInbound.addEndpoint(LenderGateway.buildInboundEndpoint());
  lenderGatewayService.setInboundRouter(lenderGatewayServiceInbound);
  OutboundRouterCollection lenderGatewayServiceInboundOutbound=new DefaultOutboundRouterCollection();
  FilteringOutboundRouter lenderGatewayServiceInboundOutboundRouter=new FilteringOutboundRouter();
  EndpointBuilder eb3=(EndpointBuilder)LenderService.clone();
  eb3.setExchangePattern(MessageExchangePattern.request_response);
  lenderGatewayServiceInboundOutboundRouter.addEndpoint(eb3.buildOutboundEndpoint());
  EndpointBuilder eb4=(EndpointBuilder)BankingGateway.clone();
  eb4.addTransformer(SetLendersAsRecipients);
  eb4.addTransformer(ObjectToJMSMessage);
  lenderGatewayServiceInboundOutboundRouter.addEndpoint(eb4.buildOutboundEndpoint());
  lenderGatewayServiceInboundOutbound.addRouter(lenderGatewayServiceInboundOutboundRouter);
  lenderGatewayService.setOutboundRouter(lenderGatewayServiceInboundOutbound);
  registry.registerService(lenderGatewayService);
  Service lenderServiceService=new SedaService(muleContext);
  lenderServiceService.setName("LenderServiceService");
  lenderServiceService.setModel(model);
  lenderGatewayService.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(DefaultLender.class)));
  InboundRouterCollection lenderServiceServiceInbound=new DefaultInboundRouterCollection();
  lenderServiceServiceInbound.addEndpoint(LenderService.buildInboundEndpoint());
  lenderServiceService.setInboundRouter(lenderServiceServiceInbound);
  registry.registerService(lenderGatewayService);
  Service bankingGatewayService=new SedaService(muleContext);
  bankingGatewayService.setName("BankingGatewayService");
  bankingGatewayService.setModel(model);
  InboundRouterCollection bankingGatewayServiceInbound=new DefaultInboundRouterCollection();
  bankingGatewayServiceInbound.addEndpoint(BankingGateway.buildInboundEndpoint());
  bankingGatewayService.setInboundRouter(bankingGatewayServiceInbound);
  OutboundRouterCollection bankingGatewayServiceOutbound=new DefaultOutboundRouterCollection();
  StaticRecipientList staticRecipientList=new StaticRecipientList();
  staticRecipientList.setReplyTo("LoanQuotes");
  staticRecipientList.setFilter(new MessagePropertyFilter("recipients!=null"));
  registry.registerService(lenderGatewayService);
  Service bank1Service=new SedaService(muleContext);
  bank1Service.setName("TheBank1");
  bank1Service.setModel(model);
  bank1Service.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(Bank.class)));
  InboundRouterCollection bank1ServiceInbound=new DefaultInboundRouterCollection();
  bank1ServiceInbound.addEndpoint(bank1In.buildInboundEndpoint());
  bank1Service.setInboundRouter(bank1ServiceInbound);
  registry.registerService(bank1Service);
  Service bank2Service=new SedaService(muleContext);
  bank2Service.setName("TheBank2");
  bank2Service.setModel(model);
  bank2Service.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(Bank.class)));
  InboundRouterCollection bank2ServiceInbound=new DefaultInboundRouterCollection();
  bank2ServiceInbound.addEndpoint(bank2In.buildInboundEndpoint());
  bank2Service.setInboundRouter(bank2ServiceInbound);
  registry.registerService(bank2Service);
  Service bank3Service=new SedaService(muleContext);
  bank3Service.setName("TheBank3");
  bank3Service.setModel(model);
  bank3Service.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(Bank.class)));
  InboundRouterCollection bank3ServiceInbound=new DefaultInboundRouterCollection();
  bank3ServiceInbound.addEndpoint(bank3In.buildInboundEndpoint());
  bank3Service.setInboundRouter(bank3ServiceInbound);
  registry.registerService(bank3Service);
  Service bank4Service=new SedaService(muleContext);
  bank4Service.setName("TheBank4");
  bank4Service.setModel(model);
  bank4Service.setComponent(new PooledJavaComponent(new PrototypeObjectFactory(Bank.class)));
  InboundRouterCollection bank4ServiceInbound=new DefaultInboundRouterCollection();
  bank4ServiceInbound.addEndpoint(bank4In.buildInboundEndpoint());
  bank4Service.setInboundRouter(bank4ServiceInbound);
  registry.registerService(bank4Service);
}
