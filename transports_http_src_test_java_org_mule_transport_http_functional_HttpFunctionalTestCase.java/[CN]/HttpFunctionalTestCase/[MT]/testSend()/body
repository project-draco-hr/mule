{
  final TestSedaService testSedaService=(TestSedaService)muleContext.getRegistry().lookupService("testComponent");
  FunctionalTestComponent testComponent=(FunctionalTestComponent)getComponent(testSedaService);
  assertNotNull(testComponent);
  if (checkPathProperties) {
    EventCallback callback=new EventCallback(){
      public void eventReceived(      final MuleEventContext context,      final Object component) throws Exception {
        MuleMessage msg=context.getMessage();
        assertEquals("/",msg.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
        assertEquals("/",msg.getProperty(HttpConnector.HTTP_REQUEST_PATH_PROPERTY));
        assertEquals("/",msg.getProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY));
      }
    }
;
    testComponent.setEventCallback(callback);
  }
  MuleClient client=new MuleClient();
  Map props=new HashMap();
  props.put(HttpConstants.HEADER_CONTENT_TYPE,"text/plain;charset=UTF-8");
  MuleMessage result=client.send("clientEndpoint",TEST_MESSAGE,props);
  assertEquals(TEST_MESSAGE + " Received",result.getPayloadAsString());
}
