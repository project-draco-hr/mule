{
  readOnly=false;
  if (added != null) {
    List<Object> queueAdded=added.get(queue);
    if (queueAdded != null) {
      return queueAdded.remove(queueAdded.size() - 1);
    }
  }
  Object object;
  try {
    object=queue.poll(pollTimeout);
  }
 catch (  InterruptedException e) {
    if (transactionalQueueManager.getMuleContext().isStopping()) {
      throw e;
    }
    return null;
  }
  if (object != null) {
    if (removed == null) {
      removed=new HashMap<QueueInfo,List<Object>>();
    }
    List<Object> queueRemoved=removed.get(queue);
    if (queueRemoved == null) {
      queueRemoved=new ArrayList<Object>();
      removed.put(queue,queueRemoved);
    }
    queueRemoved.add(object);
    object=transactionalQueueManager.doLoad(queue,object);
  }
  return object;
}
