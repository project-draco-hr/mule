{
  MuleEvent restoredEvent=this.restoreOriginalEvent(event);
  this.notifyCallbackReception(event);
  try {
    OAuth2Adapter oauthAdapter=this.oauthManager.createAdapter(restoredEvent,((String)event.getMessage().getInvocationProperty(OAuthProperties.VERIFIER)));
    if (oauthAdapter.getAccessTokenUrl() == null) {
      oauthAdapter.setAccessTokenUrl(this.getAccessTokenUrl());
    }
    oauthAdapter.fetchAccessToken(this.getRedirectUri());
    String transformedAccessTokenId=this.getAccessTokenId();
    if (StringUtils.isEmpty(transformedAccessTokenId)) {
      transformedAccessTokenId=this.oauthManager.getDefaultUnauthorizedConnector().getName();
    }
    transformedAccessTokenId=(String)this.evaluateAndTransform(restoredEvent.getMuleContext(),restoredEvent,String.class,null,transformedAccessTokenId);
    this.oauthManager.getAccessTokenPoolFactory().passivateObject(transformedAccessTokenId,oauthAdapter);
    MuleMessage message=restoredEvent.getMessage();
    message.setInvocationProperty(OAuthProperties.VERIFIER,event.getMessage().getInvocationProperty(OAuthProperties.VERIFIER));
    message.setInvocationProperty(OAuthProperties.ACCESS_TOKEN_ID,transformedAccessTokenId);
    message.removeProperty(OAuthProperties.HTTP_STATUS,PropertyScope.OUTBOUND);
    message.removeProperty(OAuthProperties.CALLBACK_LOCATION,PropertyScope.OUTBOUND);
  }
 catch (  Exception e) {
    throw new MessagingException(MessageFactory.createStaticMessage("Unable to fetch access token"),event,e);
  }
  return restoredEvent;
}
