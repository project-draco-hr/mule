{
  checkConfigurationIsNotAnOperation(configurationType.getDeclaringClass());
  ConfigurationDeclarer configurationDeclarer;
  Optional<Configuration> configurationAnnotation=configurationType.getAnnotation(Configuration.class);
  if (configurationAnnotation.isPresent()) {
    final Configuration configuration=configurationAnnotation.get();
    configurationDeclarer=declarer.withConfig(configuration.name()).describedAs(configuration.description());
  }
 else {
    configurationDeclarer=declarer.withConfig(DEFAULT_CONFIG_NAME).describedAs(DEFAULT_CONFIG_DESCRIPTION);
  }
  configurationDeclarer.createdWith(new TypeAwareConfigurationFactory(configurationType.getDeclaringClass(),extensionType.getDeclaringClass().getClassLoader())).withModelProperty(new ImplementingTypeModelProperty(configurationType.getDeclaringClass()));
  declareFieldBasedParameters(configurationDeclarer,configurationType.getParameters(),new ParameterDeclarationContext(CONFIGURATION,configurationDeclarer.getDeclaration()));
  declareOperations(declarer,configurationDeclarer,configurationType);
  declareMessageSources(declarer,configurationDeclarer,configurationType);
  declareConnectionProviders(configurationDeclarer,configurationType);
}
