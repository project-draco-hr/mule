{
  List<ParsedParameter> descriptors=parseParameters(method,typeLoader,operation);
  checkAnnotationsNotUsedMoreThanOnce(method,operation,UseConfig.class,Connection.class,MetadataKeyId.class,Content.class);
  for (  ParsedParameter parsedParameter : descriptors) {
    if (parsedParameter.isAdvertised()) {
      ParameterDeclarer parameter=parsedParameter.isRequired() ? operation.withRequiredParameter(parsedParameter.getName()) : operation.withOptionalParameter(parsedParameter.getName()).defaultingTo(parsedParameter.getDefaultValue());
      parameter=parsedParameter.isAnnotationPresent(Content.class) ? declareContentType(parameter,metadataScope,parsedParameter.getType()) : parameter.ofType(parsedParameter.getType());
      parameter.withExpressionSupport(getExpressionSupport(parsedParameter.getAnnotation(Expression.class)));
      parameter.describedAs(EMPTY);
      addTypeRestrictions(parameter,parsedParameter);
      LayoutModelProperty layoutModelProperty=parseLayoutAnnotations(parsedParameter,parsedParameter.getName());
      if (layoutModelProperty != null) {
        parameter.withModelProperty(layoutModelProperty);
      }
      enrichWithImplementingParameterProperty(parsedParameter,parameter);
      parseMetadataAnnotations(parsedParameter,parameter);
      XmlHints elementStyle=parsedParameter.getAnnotation(XmlHints.class);
      if (elementStyle != null) {
        parameter.withModelProperty(new XmlHintsModelProperty(elementStyle));
      }
    }
    if (parsedParameter.isAnnotationPresent(Connection.class)) {
      addConnectionTypeModelProperty(parsedParameter.getType(),operation);
    }
    if (parsedParameter.isAnnotationPresent(UseConfig.class)) {
      addConfigTypeModelProperty(parsedParameter.getType(),operation);
    }
  }
}
