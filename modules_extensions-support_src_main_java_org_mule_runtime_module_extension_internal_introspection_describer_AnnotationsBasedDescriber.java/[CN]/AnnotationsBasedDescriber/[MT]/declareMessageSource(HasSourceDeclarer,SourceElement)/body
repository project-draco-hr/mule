{
  SourceDeclarer source=sourceDeclarers.get(sourceType.getDeclaredClass());
  if (source != null) {
    declarer.withMessageSource(source);
    return;
  }
  source=declarer.withMessageSource(sourceType.getAlias());
  List<java.lang.reflect.Type> sourceGenerics=sourceType.getSuperClassGenerics();
  if (sourceGenerics.size() != 2) {
    throw new IllegalModelDefinitionException(format("Message source class '%s' was expected to have 2 generic types " + "(one for the Payload type and another for the Attributes type) but %d were found",sourceType.getName(),sourceGenerics.size()));
  }
  source.sourceCreatedBy(new DefaultSourceFactory(sourceType.getDeclaredClass())).withExceptionEnricherFactory(getExceptionEnricherFactory(sourceType)).withModelProperty(new ImplementingTypeModelProperty(sourceType.getDeclaredClass()));
  source.withOutput().ofType(typeLoader.load(sourceGenerics.get(0)));
  source.withOutputAttributes().ofType(typeLoader.load(sourceGenerics.get(1)));
  declareFieldBasedParameters(source,sourceType.getParameters());
  sourceDeclarers.put(sourceType.getDeclaredClass(),source);
}
