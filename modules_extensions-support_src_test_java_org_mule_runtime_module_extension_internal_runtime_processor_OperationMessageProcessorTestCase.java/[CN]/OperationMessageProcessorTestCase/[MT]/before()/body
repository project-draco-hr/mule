{
  configureMockEvent(event);
  when(operationModel.getName()).thenReturn(getClass().getName());
  when(operationModel.getReturnType()).thenReturn(toMetadataType(String.class));
  when(operationModel.getExecutor()).thenReturn(operationExecutorFactory);
  when(operationExecutorFactory.createExecutor()).thenReturn(operationExecutor);
  when(operationModel.getName()).thenReturn(OPERATION_NAME);
  when(operationModel.getExceptionEnricherFactory()).thenReturn(Optional.of(exceptionEnricherFactory));
  when(exceptionEnricherFactory.createEnricher()).thenReturn(new NullExceptionEnricher());
  when(operationModel.getMetadataResolverFactory()).thenReturn(metadataResolverFactory);
  when(metadataResolverFactory.getKeyResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(metadataResolverFactory.getContentResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(metadataResolverFactory.getOutputResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(keyParamMock.getName()).thenReturn("type");
  when(keyParamMock.getType()).thenReturn(stringType);
  when(keyParamMock.getModelProperty(MetadataKeyPartModelProperty.class)).thenReturn(Optional.of(new MetadataKeyPartModelProperty(0)));
  when(keyParamMock.getModelProperty(MetadataContentModelProperty.class)).thenReturn(Optional.empty());
  when(contentMock.getName()).thenReturn("content");
  when(contentMock.getType()).thenReturn(stringType);
  when(contentMock.getModelProperty(MetadataContentModelProperty.class)).thenReturn(Optional.of(new MetadataContentModelProperty()));
  when(contentMock.getModelProperty(MetadataKeyPartModelProperty.class)).thenReturn(Optional.empty());
  when(operationModel.getParameterModels()).thenReturn(Arrays.asList(keyParamMock,contentMock));
  when(operationModel.getReturnType()).thenReturn(returnTypeMock);
  when(operationModel.getAttributesType()).thenReturn(returnTypeMock);
  when(operationExecutorFactory.createExecutor()).thenReturn(operationExecutor);
  when(resolverSet.resolve(event)).thenReturn(parameters);
  when(configurationInstance.getName()).thenReturn(CONFIG_NAME);
  when(configurationInstance.getModel()).thenReturn(configurationModel);
  when(configurationInstance.getValue()).thenReturn(configuration);
  when(configurationInstance.getConnectionProvider()).thenReturn(Optional.of(connectionProviderWrapper));
  when(configurationProvider.get(event)).thenReturn(configurationInstance);
  when(configurationProvider.getModel()).thenReturn(configurationModel);
  when(configurationModel.getOperationModel(OPERATION_NAME)).thenReturn(Optional.of(operationModel));
  connectionManager=new DefaultConnectionManager(context);
  connectionManager.initialise();
  when(connectionProviderWrapper.getRetryPolicyTemplate()).thenReturn(connectionManager.getDefaultRetryPolicyTemplate());
  when(extensionManager.getConfiguration(anyString(),anyObject())).thenReturn(configurationInstance);
  when(extensionManager.getConfiguration(extensionModel,event)).thenReturn(configurationInstance);
  when(extensionManager.getConfigurationProvider(extensionModel)).thenReturn(Optional.of(configurationProvider));
  when(extensionManager.getConfigurationProvider(CONFIG_NAME)).thenReturn(Optional.of(configurationProvider));
  messageProcessor=createOperationMessageProcessor();
}
