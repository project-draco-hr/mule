{
  Service service=new SedaService();
  service.setMuleContext(muleContext);
  service.setName("moveDeleteBridgeService");
  String url=fileToUrl(inFile.getParentFile()) + "?connector=moveDeleteConnector";
  org.mule.api.transformer.Transformer transformer=null;
  if (streaming) {
    if (filePayload) {
      fail("Inconsistant test case: streaming and file payload are not compatible");
    }
 else {
      transformer=new FileMessageAdaptorAssertingTransformer(FileMessageAdapter.class,ReceiverFileInputStream.class);
    }
  }
 else {
    if (filePayload) {
      transformer=new FileMessageAdaptorAssertingTransformer(FileMessageAdapter.class,File.class);
    }
 else {
      transformer=new FileMessageAdaptorAssertingTransformer(FileContentsMessageAdapter.class,byte[].class);
    }
  }
  EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(new URIBuilder(url),muleContext);
  endpointBuilder.addTransformer(transformer);
  if (filePayload) {
    endpointBuilder.addTransformer(new NoActionTransformer());
  }
  endpointBuilder.setSynchronous(true);
  service.getInboundRouter().addEndpoint(muleContext.getRegistry().lookupEndpointFactory().getInboundEndpoint(endpointBuilder));
  final Latch latch=new Latch();
  FunctionalTestComponent testComponent=new FunctionalTestComponent();
  testComponent.setEventCallback(new EventCallback(){
    public void eventReceived(    final MuleEventContext context,    final Object message) throws Exception {
      assertEquals(1,latch.getCount());
      latch.countDown();
      assertEquals(TEST_MESSAGE,context.transformMessageToString());
    }
  }
);
  testComponent.initialise();
  final DefaultJavaComponent component=new DefaultJavaComponent(new SingletonObjectFactory(testComponent));
  component.setMuleContext(muleContext);
  service.setComponent(component);
  service.setMuleContext(muleContext);
  service.setModel(muleContext.getRegistry().lookupSystemModel());
  muleContext.getRegistry().registerService(service);
  service.start();
  return latch;
}
