{
  final MuleEvent event=(MuleEvent)exchange.get(CxfConstants.MULE_EVENT);
  MuleEvent responseEvent=null;
  if (PropertyUtils.isTrue(exchange.remove(CxfConstants.NON_BLOCKING_RESPONSE))) {
    responseEvent=event;
  }
 else {
    try {
      MuleMessage reqMsg=event.getMessage();
      Object payload=extractPayload(exchange.getInMessage());
      Class payloadClass=payload != null ? payload.getClass() : Object.class;
      reqMsg.setPayload(payload,DataTypeFactory.create(payloadClass,cxfMmessageProcessor.getMimeType()));
      BindingOperationInfo bop=exchange.get(BindingOperationInfo.class);
      Service svc=exchange.get(Service.class);
      if (!cxfMmessageProcessor.isProxy()) {
        MethodDispatcher md=(MethodDispatcher)svc.get(MethodDispatcher.class.getName());
        Method m=md.getMethod(bop);
        if (targetClass != null) {
          m=matchMethod(m,targetClass);
        }
        event.setFlowVariable(MuleProperties.MULE_METHOD_PROPERTY,m);
      }
      if (bop != null) {
        event.setFlowVariable(CxfConstants.INBOUND_OPERATION,bop.getOperationInfo().getName());
        event.setFlowVariable(CxfConstants.INBOUND_SERVICE,svc.getName());
      }
      ErrorHandlingExecutionTemplate errorHandlingExecutionTemplate=ErrorHandlingExecutionTemplate.createErrorHandlingExecutionTemplate(event.getMuleContext(),event.getFlowConstruct().getExceptionListener());
      responseEvent=errorHandlingExecutionTemplate.execute(new ExecutionCallback<MuleEvent>(){
        @Override public MuleEvent process() throws Exception {
          return cxfMmessageProcessor.processNext(event);
        }
      }
);
    }
 catch (    MuleException e) {
      exchange.put(CxfConstants.MULE_EVENT,event);
      Throwable cause=e;
      if (Boolean.valueOf((String)event.getFlowVariable(CxfConstants.UNWRAP_MULE_EXCEPTIONS))) {
        cause=ExceptionHelper.getNonMuleException(e);
        if (cause instanceof ScriptException && cause.getCause() != null) {
          cause=cause.getCause();
        }
      }
 else       if (e instanceof ComponentException) {
        cause=e.getCause();
      }
      throw new Fault(cause);
    }
catch (    Exception e) {
      exchange.put(CxfConstants.MULE_EVENT,event);
      throw new Fault(e);
    }
    if (!event.getExchangePattern().hasResponse()) {
      responseEvent=null;
    }
    if (responseEvent instanceof NonBlockingVoidMuleEvent) {
      exchange.put(Message.SUSPENDED_INVOCATION,true);
      exchange.put(CxfConstants.MULE_EVENT,responseEvent);
      return null;
    }
  }
  if (responseEvent != null && !VoidMuleEvent.getInstance().equals(responseEvent)) {
    exchange.put(CxfConstants.MULE_EVENT,responseEvent);
    MuleMessage resMessage=responseEvent.getMessage();
    if (resMessage.getExceptionPayload() != null) {
      Throwable cause=resMessage.getExceptionPayload().getException();
      if (cause instanceof ComponentException) {
        cause=cause.getCause();
      }
      exchange.getInMessage().put(FaultMode.class,FaultMode.UNCHECKED_APPLICATION_FAULT);
      if (cause instanceof Fault) {
        throw (Fault)cause;
      }
      throw new Fault(cause);
    }
 else     if (resMessage.getPayload() instanceof NullPayload) {
      return new MessageContentsList((Object)null);
    }
 else     if (cxfMmessageProcessor.isProxy()) {
      resMessage.getPayload();
      return new Object[]{resMessage};
    }
 else {
      return new Object[]{resMessage.getPayload()};
    }
  }
 else {
    exchange.getInMessage().getInterceptorChain().abort();
    if (exchange.getOutMessage() != null) {
      exchange.getOutMessage().getInterceptorChain().abort();
    }
    exchange.put(CxfConstants.MULE_EVENT,null);
    return null;
  }
}
