{
  while (classToIntrospect != null) {
    Type[] ifcs=classToIntrospect.getGenericInterfaces();
    for (    Type ifc : ifcs) {
      if (ifc instanceof ParameterizedType) {
        ParameterizedType paramIfc=(ParameterizedType)ifc;
        Type rawType=paramIfc.getRawType();
        if (genericIfc.equals(rawType)) {
          Type[] typeArgs=paramIfc.getActualTypeArguments();
          Class[] result=new Class[typeArgs.length];
          for (int i=0; i < typeArgs.length; i++) {
            Type arg=typeArgs[i];
            if (arg instanceof TypeVariable) {
              arg=getTypeVariableMap(ownerClass).get((TypeVariable)arg);
            }
            result[i]=(arg instanceof Class ? (Class)arg : Object.class);
          }
          return result;
        }
 else         if (genericIfc.isAssignableFrom((Class)rawType)) {
          return doResolveTypeArguments(ownerClass,(Class)rawType,genericIfc);
        }
      }
 else       if (genericIfc.isAssignableFrom((Class)ifc)) {
        return doResolveTypeArguments(ownerClass,(Class)ifc,genericIfc);
      }
    }
    classToIntrospect=classToIntrospect.getSuperclass();
  }
  return null;
}
