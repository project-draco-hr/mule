{
  if (replyTo != null) {
    logger.debug("event was dispatched synchronously, but there is a ReplyTo endpoint set, so using asynchronous dispatch");
    dispatch(session,message,endpoint);
    return null;
  }
  this.setMessageProperties(session,message,endpoint);
  if (logger.isDebugEnabled()) {
    logger.debug("Message being sent to: " + endpoint.getEndpointURI());
    logger.debug(message);
  }
  if (logger.isTraceEnabled()) {
    try {
      logger.trace("Message payload: \n" + message.getPayloadAsString());
    }
 catch (    Exception e) {
    }
  }
  UMOMessage result=session.sendEvent(message,endpoint);
  if (getRouterStatistics() != null) {
    if (getRouterStatistics().isEnabled()) {
      getRouterStatistics().incrementRoutedMessage(endpoint);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Response message from sending to: " + endpoint.getEndpointURI());
    logger.debug(result);
  }
  if (logger.isTraceEnabled()) {
    try {
      logger.trace("Message payload: \n" + result.getPayloadAsString());
    }
 catch (    Exception e) {
    }
  }
  return result;
}
