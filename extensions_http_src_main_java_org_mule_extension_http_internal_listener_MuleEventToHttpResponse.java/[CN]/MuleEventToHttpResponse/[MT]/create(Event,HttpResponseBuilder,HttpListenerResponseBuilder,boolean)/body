{
  Map<String,String> headers=listenerResponseBuilder.getHeaders(event);
  final HttpResponseHeaderBuilder httpResponseHeaderBuilder=new HttpResponseHeaderBuilder();
  for (  String name : headers.keySet()) {
    if (TRANSFER_ENCODING.equals(name) && !supportsTransferEncoding) {
      logger.debug("Client HTTP version is lower than 1.1 so the unsupported 'Transfer-Encoding' header has been removed and 'Content-Length' will be sent instead.");
    }
 else {
      httpResponseHeaderBuilder.addHeader(name,headers.get(name));
    }
  }
  if (httpResponseHeaderBuilder.getContentType() == null) {
    DataType dataType=event.getMessage().getPayload().getDataType();
    if (!MediaType.ANY.matches(dataType.getMediaType())) {
      httpResponseHeaderBuilder.addHeader(CONTENT_TYPE,dataType.getMediaType().toString());
    }
  }
  final String configuredContentType=httpResponseHeaderBuilder.getContentType();
  final String existingTransferEncoding=httpResponseHeaderBuilder.getTransferEncoding();
  final String existingContentLength=httpResponseHeaderBuilder.getContentLength();
  HttpEntity httpEntity;
  final Object payload=event.getMessage().getPayload().getValue();
  if (payload == null) {
    setupContentLengthEncoding(httpResponseHeaderBuilder,0);
    httpEntity=new EmptyHttpEntity();
  }
 else   if (payload instanceof Map) {
    if (configuredContentType == null) {
      httpResponseHeaderBuilder.addContentType(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED.toRfcString());
    }
 else     if (!configuredContentType.startsWith(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED.toRfcString())) {
      warnMapPayloadButNoUrlEncodedContentType(httpResponseHeaderBuilder.getContentType());
    }
    httpEntity=createUrlEncodedEntity(event,(Map)payload);
    if (responseStreaming == ALWAYS && supportsTransferEncoding) {
      setupChunkedEncoding(httpResponseHeaderBuilder);
    }
 else {
      if (httpEntity instanceof EmptyHttpEntity) {
        setupContentLengthEncoding(httpResponseHeaderBuilder,0);
      }
 else {
        ByteArrayHttpEntity byteArrayHttpEntity=(ByteArrayHttpEntity)httpEntity;
        setupContentLengthEncoding(httpResponseHeaderBuilder,byteArrayHttpEntity.getContent().length);
      }
    }
  }
 else   if (payload instanceof MultiPartPayload) {
    if (configuredContentType == null) {
      httpResponseHeaderBuilder.addContentType(createMultipartFormDataContentType());
    }
 else     if (!configuredContentType.startsWith(MULTIPART)) {
      warnNoMultipartContentTypeButMultipartEntity(httpResponseHeaderBuilder.getContentType());
    }
    httpEntity=createMultipartEntity(event,httpResponseHeaderBuilder.getContentType(),(MultiPartPayload)payload);
    resolveEncoding(httpResponseHeaderBuilder,existingTransferEncoding,existingContentLength,supportsTransferEncoding,(ByteArrayHttpEntity)httpEntity);
  }
 else   if (payload instanceof InputStream) {
    if (responseStreaming == ALWAYS || (responseStreaming == AUTO && existingContentLength == null)) {
      if (supportsTransferEncoding) {
        setupChunkedEncoding(httpResponseHeaderBuilder);
      }
      httpEntity=new InputStreamHttpEntity((InputStream)payload);
    }
 else {
      ByteArrayHttpEntity byteArrayHttpEntity=new ByteArrayHttpEntity(IOUtils.toByteArray(((InputStream)payload)));
      setupContentLengthEncoding(httpResponseHeaderBuilder,byteArrayHttpEntity.getContent().length);
      httpEntity=byteArrayHttpEntity;
    }
  }
 else {
    try {
      ByteArrayHttpEntity byteArrayHttpEntity=new ByteArrayHttpEntity(event.getMessageAsBytes(muleContext));
      resolveEncoding(httpResponseHeaderBuilder,existingTransferEncoding,existingContentLength,supportsTransferEncoding,byteArrayHttpEntity);
      httpEntity=byteArrayHttpEntity;
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  Collection<String> headerNames=httpResponseHeaderBuilder.getHeaderNames();
  for (  String headerName : headerNames) {
    Collection<String> values=httpResponseHeaderBuilder.getHeader(headerName);
    for (    String value : values) {
      responseBuilder.addHeader(headerName,value);
    }
  }
  Integer statusCode=listenerResponseBuilder.getStatusCode(event);
  if (statusCode != null) {
    responseBuilder.setStatusCode(statusCode);
  }
  String reasonPhrase=resolveReasonPhrase(listenerResponseBuilder.getReasonPhrase(event),statusCode);
  if (reasonPhrase != null) {
    responseBuilder.setReasonPhrase(reasonPhrase);
  }
  responseBuilder.setEntity(httpEntity);
  return responseBuilder.build();
}
