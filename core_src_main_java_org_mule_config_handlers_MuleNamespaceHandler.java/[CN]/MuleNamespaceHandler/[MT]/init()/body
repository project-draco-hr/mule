{
  registerBeanDefinitionParser("configuration",new ConfigurationDefinitionParser());
  registerBeanDefinitionParser("default-threading-profile",new ThreadingProfileDefinitionParser());
  registerBeanDefinitionParser("default-dispatcher-connection-straqtegy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("default-receiver-connection-straqtegy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("properties",new PropertiesDefinitionParser());
  registerBeanDefinitionParser("threading-profile",new ThreadingProfileDefinitionParser());
  registerBeanDefinitionParser("custom-exception-strategy",new SimpleChildDefinitionParser("exceptionListener",null));
  registerBeanDefinitionParser("default-component-exception-strategy",new SimpleChildDefinitionParser("exceptionListener",DefaultComponentExceptionStrategy.class));
  registerBeanDefinitionParser("default-connector-exception-strategy",new SimpleChildDefinitionParser("exceptionListener",DefaultExceptionStrategy.class));
  registerBeanDefinitionParser("dispatcher-threading-profile",new ThreadingProfileDefinitionParser());
  registerBeanDefinitionParser("receiver-threading-profile",new ThreadingProfileDefinitionParser());
  registerBeanDefinitionParser("dispatcher-connection-straqtegy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("receiver-connection-straqtegy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("service-overrides",new ServiceOverridesDefinitionParser());
  registerBeanDefinitionParser("custom-connector",new CustomElementDefinitionParser());
  registerBeanDefinitionParser("custom-transformer",new CustomElementDefinitionParser());
  registerBeanDefinitionParser("transformer-no-action",new SingleElementDefinitionParser(NoActionTransformer.class));
  registerBeanDefinitionParser("source-type",new SourceTypeDefinitionParser());
  registerBeanDefinitionParser("transformer-base64-encoder",new SingleElementDefinitionParser(Base64Encoder.class));
  registerBeanDefinitionParser("transformer-base64-decoder",new SingleElementDefinitionParser(Base64Decoder.class));
  registerBeanDefinitionParser("transformer-xml-entity-encoder",new SingleElementDefinitionParser(XmlEntityEncoder.class));
  registerBeanDefinitionParser("transformer-xml-entity-decoder",new SingleElementDefinitionParser(XmlEntityDecoder.class));
  registerBeanDefinitionParser("transformer-gzip-compress",new SingleElementDefinitionParser(GZipCompressTransformer.class));
  registerBeanDefinitionParser("transformer-gzip-uncompress",new SingleElementDefinitionParser(GZipUncompressTransformer.class));
  registerBeanDefinitionParser("transformer-encrypt",new SingleElementDefinitionParser(EncryptionTransformer.class));
  registerBeanDefinitionParser("transformer-decrypt",new SingleElementDefinitionParser(DecryptionTransformer.class));
  registerBeanDefinitionParser("transformer-byte-array-to-hex-string",new SingleElementDefinitionParser(ByteArrayToHexString.class));
  registerBeanDefinitionParser("transformer-hex-sting-to-byte-array",new SingleElementDefinitionParser(HexStringToByteArray.class));
  registerBeanDefinitionParser("transformer-byte-array-to-object",new SingleElementDefinitionParser(ByteArrayToObject.class));
  registerBeanDefinitionParser("transformer-object-to-byte-array",new SingleElementDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("transformer-byte-array-to-serializable",new SingleElementDefinitionParser(ByteArrayToSerializable.class));
  registerBeanDefinitionParser("transformer-serializable-to-byte-array",new SingleElementDefinitionParser(SerializableToByteArray.class));
  registerBeanDefinitionParser("jndi-transaction-manager",new SingleElementDefinitionParser(GenericTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("weblogic-transaction-manager",new SingleElementDefinitionParser(WeblogicTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jboss-transaction-manager",new SingleElementDefinitionParser(JBossTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jrun-transaction-manager",new SingleElementDefinitionParser(JRunTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("resin3-transaction-manager",new SingleElementDefinitionParser(Resin3TransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("websphere-transaction-manager",new SingleElementDefinitionParser(WebsphereTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("custom-transaction-manager-factory",new CustomElementDefinitionParser());
  registerBeanDefinitionParser("endpoint",new EndpointDefinitionParser());
  registerBeanDefinitionParser("endpoint-ref",new EndpointRefDefinitionParser());
  registerBeanDefinitionParser("transaction",new TransactionConfigDefinitionParser());
  registerBeanDefinitionParser("custom-container",new CustomElementDefinitionParser());
  registerBeanDefinitionParser("rmi-container",new SingleElementDefinitionParser(RmiContainerContext.class));
  registerBeanDefinitionParser("jndi-container",new SingleElementDefinitionParser(JndiContainerContext.class));
  registerBeanDefinitionParser("properties-container",new SingleElementDefinitionParser(PropertiesContainerContext.class));
  registerBeanDefinitionParser("model-seda",new ModelDefinitionParser("seda"));
  registerBeanDefinitionParser("model-inherited",new InheritedModelDefinitionParser());
  registerBeanDefinitionParser("model-seda-optimised",new ModelDefinitionParser("seda-optimised"));
  registerBeanDefinitionParser("model-simple",new ModelDefinitionParser("simple"));
  registerBeanDefinitionParser("model-pipeline",new ModelDefinitionParser("pipeline"));
  registerBeanDefinitionParser("custom-model",new ModelDefinitionParser("custom"));
  registerBeanDefinitionParser("component-lifecycle-adapter-factory",new SimpleChildDefinitionParser("lifecycleAdapterFactory",null));
  registerBeanDefinitionParser("callable-entrypoint-resolver",new SimpleChildDefinitionParser("entryPointResolver",CallableEntryPointResolver.class));
  registerBeanDefinitionParser("custom-entrypoint-resolver",new SimpleChildDefinitionParser("entryPointResolver",null));
  registerBeanDefinitionParser("service",new ServiceDescriptorDefinitionParser());
  registerBeanDefinitionParser("inbound-router",new SimpleChildDefinitionParser("inboundRouter",InboundRouterCollection.class));
  registerBeanDefinitionParser("outbound-router",new SimpleChildDefinitionParser("outboundRouter",OutboundRouterCollection.class));
  registerBeanDefinitionParser("nested-router",new SimpleChildDefinitionParser("nestedRouter",NestedRouterCollection.class));
  registerBeanDefinitionParser("response-router",new SimpleChildDefinitionParser("responseRouter",ResponseRouterCollection.class));
  registerBeanDefinitionParser("pass-through-router",new RouterDefinitionParser("router",InboundPassThroughRouter.class));
  registerBeanDefinitionParser("idempotent-receiver-router",new RouterDefinitionParser("router",IdempotentReceiver.class));
  registerBeanDefinitionParser("idempotent-secure-hash-receiver-router",new RouterDefinitionParser("router",IdempotentSecureHashReceiver.class));
  registerBeanDefinitionParser("selective-consumer-router",new RouterDefinitionParser("router",SelectiveConsumer.class));
  registerBeanDefinitionParser("wire-tap-router",new RouterDefinitionParser("router",WireTap.class));
  registerBeanDefinitionParser("correlation-aggregator-router",new RouterDefinitionParser("router",CorrelationAggregator.class));
  registerBeanDefinitionParser("message-chunking-aggregator-router",new RouterDefinitionParser("router",MessageChunkingAggregator.class));
  registerBeanDefinitionParser("correlation-resequencer-router",new RouterDefinitionParser("router",CorrelationEventResequencer.class));
  registerBeanDefinitionParser("custom-router",new RouterDefinitionParser("router",null));
  registerBeanDefinitionParser("binding",new RouterDefinitionParser("router",NestedRouter.class));
  registerBeanDefinitionParser("pass-through-router",new RouterDefinitionParser("router",OutboundPassThroughRouter.class));
  registerBeanDefinitionParser("filtering-router",new RouterDefinitionParser("router",FilteringOutboundRouter.class));
  registerBeanDefinitionParser("chaining-router",new RouterDefinitionParser("router",ChainingRouter.class));
  registerBeanDefinitionParser("endpoint-selector-router",new RouterDefinitionParser("router",EndpointSelector.class));
  registerBeanDefinitionParser("exception-based-router",new RouterDefinitionParser("router",ExceptionBasedRouter.class));
  registerBeanDefinitionParser("list-message-splitter-router",new RouterDefinitionParser("router",FilteringListMessageSplitter.class));
  registerBeanDefinitionParser("message-chunking-router",new RouterDefinitionParser("router",MessageChunkingRouter.class));
  registerBeanDefinitionParser("multicasting-router",new RouterDefinitionParser("router",MulticastingRouter.class));
  registerBeanDefinitionParser("static-recipient-list-router",new RouterDefinitionParser("router",StaticRecipientList.class));
  registerBeanDefinitionParser("template-endpoint-router",new RouterDefinitionParser("router",TemplateEndpointRouter.class));
  registerBeanDefinitionParser("custom-router",new RouterDefinitionParser("router",null));
  registerBeanDefinitionParser("forwarding-catch-all-strategy",new SimpleChildDefinitionParser("catchAllStrategy",ForwardingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-catch-all-strategy",new SimpleChildDefinitionParser("catchAllStrategy",null));
  registerBeanDefinitionParser("and-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("or-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("not-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("regex-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("exception-type-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("message-property-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("payload-type-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("wildcard-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("equals-filter",new FilterDefinitionParser());
}
