{
  if (StringUtils.isBlank(minVersion)) {
    throw new IllegalArgumentException("Cannot validate a blank min mule version");
  }
  String runtimeVersion=this.getMuleVersion();
  if (runtimeVersion.equals("Unknown")) {
    logger.warn("Unknown Mule runtime version. This module may not work properly!");
  }
 else {
    String[] expectedMinVersion=minVersion.split("\\.");
    if (runtimeVersion.contains("-")) {
      runtimeVersion=runtimeVersion.split("-")[0];
    }
    String[] currentRuntimeVersion=runtimeVersion.split("\\.");
    for (int i=0; (i < expectedMinVersion.length); i++) {
      try {
        if (Integer.parseInt(currentRuntimeVersion[i]) > Integer.parseInt(expectedMinVersion[i])) {
          break;
        }
        if (Integer.parseInt(currentRuntimeVersion[i]) < Integer.parseInt(expectedMinVersion[i])) {
          throw new ConfigurationException(CoreMessages.minMuleVersionNotMet(minVersion));
        }
      }
 catch (      NumberFormatException nfe) {
        logger.warn(String.format("Error parsing Mule version '%s', cannot validate current Mule version",runtimeVersion));
      }
catch (      ArrayIndexOutOfBoundsException iobe) {
        logger.warn(String.format("Error parsing Mule version '%s', cannot validate current Mule version",runtimeVersion));
      }
    }
  }
}
