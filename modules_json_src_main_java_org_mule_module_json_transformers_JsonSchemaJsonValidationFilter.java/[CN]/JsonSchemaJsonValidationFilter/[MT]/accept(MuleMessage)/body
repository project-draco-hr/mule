{
  JsonNode data;
  Object input=message.getPayload();
  Object output=input;
  try {
    if (input instanceof String) {
      data=JsonLoader.fromString((String)input);
    }
 else     if (input instanceof Reader) {
      data=JsonLoader.fromReader((Reader)input);
      output=data.toString();
    }
 else     if (input instanceof InputStream) {
      data=JsonLoader.fromReader(new InputStreamReader((InputStream)input));
      output=data.toString();
    }
 else     if (input instanceof byte[]) {
      data=JsonLoader.fromReader(new InputStreamReader(new ByteArrayInputStream((byte[])input)));
    }
 else     if (input instanceof JsonNode) {
      data=(JsonNode)input;
    }
 else     if (input instanceof JsonData) {
      JsonData jsonData=(JsonData)input;
      data=JsonLoader.fromReader(new StringReader(jsonData.toString()));
    }
 else {
      logger.warn("Payload type " + input.getClass().getName() + " is not supported");
      return false;
    }
    message.setPayload(output);
    ValidationReport report=jsonSchema.validate(data);
    logger.debug("JSON Schema validation report: " + report.getMessages());
    return report.isSuccess();
  }
 catch (  Exception e) {
    logger.info("Unable to validate JSON!",e);
    return false;
  }
}
