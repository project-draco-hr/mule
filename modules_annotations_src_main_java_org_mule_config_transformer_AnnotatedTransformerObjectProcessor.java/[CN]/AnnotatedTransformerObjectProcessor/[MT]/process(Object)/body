{
  Class<? extends Object> clazz=object.getClass();
  if (clazz.getAnnotation(ContainsTransformerMethods.class) == null) {
    return object;
  }
  List<AnnotationMetaData> annotations=AnnotationUtils.getMethodAnnotations(clazz,Transformer.class);
  if (annotations.size() == 0) {
    return object;
  }
  for (  AnnotationMetaData data : annotations) {
    try {
      Transformer annotation=(Transformer)data.getAnnotation();
      String sourceMimeType=annotation.sourceMimeType().equals(MimeTypes.ANY) ? null : annotation.sourceMimeType();
      String resultMimeType=annotation.resultMimeType().equals(MimeTypes.ANY) ? null : annotation.resultMimeType();
      AnnotatedTransformerProxy trans=new AnnotatedTransformerProxy(annotation.priorityWeighting(),object,(Method)data.getMember(),annotation.sourceTypes(),sourceMimeType,resultMimeType);
      muleContext.getRegistry().registerTransformer(trans);
    }
 catch (    MuleException e) {
      throw new RuntimeException(e);
    }
  }
  return object;
}
