{
  path+="/model";
  digester.addRule(path,new Rule(){
    public void begin(    String string,    String string1,    Attributes attributes) throws Exception {
      UMOModel model=manager.getModel();
      if (model == null) {
        String modelType=attributes.getValue("type");
        if (modelType == null) {
          modelType=MuleManager.getConfiguration().getModelType();
        }
        if (modelType.equalsIgnoreCase("custom")) {
          String className=attributes.getValue("className");
          if (className == null) {
            throw new IllegalArgumentException("Cannot use 'custom' model type without setting the 'className' for the model");
          }
 else {
            model=(UMOModel)ClassUtils.instanciateClass(className,ClassUtils.NO_ARGS,getClass());
          }
        }
 else {
          model=ModelFactory.createModel(modelType);
        }
      }
      digester.push(model);
    }
  }
);
  addSetPropertiesRule(path,digester);
  digester.addSetRoot(path,"setModel");
  digester.addObjectCreate(path + "/entry-point-resolver",DEFAULT_ENTRY_POINT_RESOLVER,"className");
  addSetPropertiesRule(path + "/entry-point-resolver",digester);
  digester.addSetNext(path + "/entry-point-resolver","setEntryPointResolver");
  digester.addObjectCreate(path + "/component-lifecycle-adapter-factory",DEFAULT_LIFECYCLE_ADAPTER,"className");
  addSetPropertiesRule(path,digester);
  digester.addSetNext(path + "/component-lifecycle-adapter-factory","setLifecycleAdapterFactory");
  addPoolingProfileRules(digester,path);
  addExceptionStrategyRules(digester,path);
  addMuleDescriptorRules(digester,path);
}
