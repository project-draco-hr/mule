{
  if (messageInfoMapping == null) {
    messageInfoMapping=originalEvent.getFlowConstruct().getMessageInfoMapping();
  }
  String correlationId=messageInfoMapping.getCorrelationId(originalEvent.getMessage());
  List<MuleEvent> resultEvents=new ArrayList<MuleEvent>();
  int correlationSequence=0;
  MessageSequence<?> messageSequence=seq;
  if (batchSize > 1) {
    messageSequence=new PartitionedMessageSequence(seq,batchSize);
  }
  int count=messageSequence.size();
  MuleEvent currentEvent=originalEvent;
  for (; messageSequence.hasNext(); ) {
    Object payload=messageSequence.next();
    MuleMessage message=createMessage(payload,originalEvent.getMessage());
    correlationSequence++;
    if (counterVariableName != null) {
      message.setInvocationProperty(counterVariableName,correlationSequence);
    }
    if (enableCorrelation != CorrelationMode.NEVER) {
      boolean correlationSet=message.getCorrelationId() != null;
      if ((!correlationSet && (enableCorrelation == CorrelationMode.IF_NOT_SET)) || (enableCorrelation == CorrelationMode.ALWAYS)) {
        message.setCorrelationId(correlationId);
      }
      message.setCorrelationGroupSize(count);
      message.setCorrelationSequence(correlationSequence);
    }
    message.propagateRootId(originalEvent.getMessage());
    MuleEvent resultEvent=processNext(RequestContext.setEvent(new DefaultMuleEvent(message,originalEvent,currentEvent.getSession())));
    if (resultEvent != null) {
      currentEvent=resultEvent;
      resultEvents.add(resultEvent);
    }
  }
  if (correlationSequence == 1) {
    logger.warn("Splitter only returned a single result. If this is not expected, please check your split expression");
  }
  return resultEvents;
}
