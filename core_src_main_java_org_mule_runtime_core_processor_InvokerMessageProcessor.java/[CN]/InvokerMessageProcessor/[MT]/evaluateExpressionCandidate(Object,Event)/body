{
  if (expressionCandidate instanceof Collection<?>) {
    Collection<Object> collectionTemplate=(Collection<Object>)expressionCandidate;
    Collection<Object> newCollection=new ArrayList<>();
    for (    Object object : collectionTemplate) {
      newCollection.add(evaluateExpressionCandidate(object,event));
    }
    return newCollection;
  }
 else   if (expressionCandidate instanceof Map<?,?>) {
    Map<Object,Object> mapTemplate=(Map<Object,Object>)expressionCandidate;
    Map<Object,Object> newMap=new HashMap<>();
    for (    Entry<Object,Object> entry : mapTemplate.entrySet()) {
      newMap.put(evaluateExpressionCandidate(entry.getKey(),event),evaluateExpressionCandidate(entry.getValue(),event));
    }
    return newMap;
  }
 else   if (expressionCandidate instanceof String[]) {
    String[] stringArrayTemplate=(String[])expressionCandidate;
    Object[] newArray=new String[stringArrayTemplate.length];
    for (int j=0; j < stringArrayTemplate.length; j++) {
      newArray[j]=evaluateExpressionCandidate(stringArrayTemplate[j],event);
    }
    return newArray;
  }
  if (expressionCandidate instanceof String) {
    Object arg;
    String expression=(String)expressionCandidate;
    if (expression.startsWith(patternInfo.getPrefix()) && expression.endsWith(patternInfo.getSuffix()) && expression.lastIndexOf(patternInfo.getPrefix()) == 0) {
      arg=expressionLanguage.evaluate(expression,event,flowConstruct);
    }
 else {
      arg=expressionLanguage.parse(expression,event,flowConstruct);
    }
    if (arg instanceof InternalMessage) {
      arg=((InternalMessage)arg).getPayload().getValue();
    }
    return arg;
  }
 else {
    return expressionCandidate;
  }
}
