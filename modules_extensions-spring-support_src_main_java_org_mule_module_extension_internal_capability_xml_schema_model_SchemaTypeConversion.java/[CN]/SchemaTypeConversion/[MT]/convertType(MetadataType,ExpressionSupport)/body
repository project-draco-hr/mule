{
  final boolean dynamic=MuleExtensionUtils.acceptsExpressions(expressionSupport);
  final ValueHolder<QName> qName=new ValueHolder<>();
  type.accept(new MetadataTypeVisitor(){
    @Override public void visitBoolean(    BooleanType booleanType){
      qName.set(dynamic ? EXPRESSION_BOOLEAN : SUBSTITUTABLE_BOOLEAN);
    }
    @Override public void visitNumber(    NumberType numberType){
      Class<Number> type=JavaTypeUtils.getType(numberType);
      if (anyOf(type,Integer.class,int.class)) {
        qName.set(dynamic ? EXPRESSION_INTEGER : SUBSTITUTABLE_INT);
      }
 else       if (anyOf(type,Double.class,double.class)) {
        qName.set(dynamic ? EXPRESSION_DOUBLE : SUBSTITUTABLE_DECIMAL);
      }
 else       if (anyOf(type,Long.class,long.class)) {
        qName.set(dynamic ? EXPRESSION_LONG : SUBSTITUTABLE_LONG);
      }
 else {
        qName.set(dynamic ? EXPRESSION_DECIMAL : SUBSTITUTABLE_DECIMAL);
      }
    }
    @Override public void visitString(    StringType stringType){
      qName.set(dynamic ? EXPRESSION_STRING : STRING);
    }
    @Override public void visitDateTime(    DateTimeType dateTimeType){
      onDate();
    }
    @Override public void visitDate(    DateType dateType){
      onDate();
    }
    @Override public void visitArrayType(    ArrayType arrayType){
      qName.set(dynamic ? EXPRESSION_LIST : SUBSTITUTABLE_NAME);
    }
    @Override public void visitDictionary(    DictionaryType dictionaryType){
      qName.set(dynamic ? EXPRESSION_MAP : SUBSTITUTABLE_MAP);
    }
    @Override protected void defaultVisit(    MetadataType metadataType){
      qName.set(dynamic ? EXPRESSION_OBJECT : STRING);
    }
    private void onDate(){
      qName.set(dynamic ? EXPRESSION_DATE_TIME : SUBSTITUTABLE_DATE_TIME);
    }
    private boolean anyOf(    Class<Number> type,    Class<?>... targets){
      for (      Class<?> target : targets) {
        if (type.equals(target)) {
          return true;
        }
      }
      return false;
    }
  }
);
  return qName.get();
}
