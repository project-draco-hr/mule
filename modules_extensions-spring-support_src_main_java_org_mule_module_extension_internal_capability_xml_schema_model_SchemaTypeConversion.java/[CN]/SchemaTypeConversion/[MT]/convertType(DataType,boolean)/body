{
  final ValueHolder<QName> qName=new ValueHolder<>();
  type.getQualifier().accept(new AbstractDataQualifierVisitor(){
    @Override public void onBoolean(){
      qName.set(dynamic ? EXPRESSION_BOOLEAN : SUBSTITUTABLE_BOOLEAN);
    }
    @Override public void onInteger(){
      qName.set(dynamic ? EXPRESSION_INTEGER : SUBSTITUTABLE_INT);
    }
    @Override public void onDouble(){
      qName.set(dynamic ? EXPRESSION_DOUBLE : SUBSTITUTABLE_DECIMAL);
    }
    @Override public void onDecimal(){
      qName.set(dynamic ? EXPRESSION_DECIMAL : SUBSTITUTABLE_DECIMAL);
    }
    @Override public void onString(){
      qName.set(dynamic ? EXPRESSION_STRING : STRING);
    }
    @Override public void onLong(){
      qName.set(dynamic ? EXPRESSION_LONG : SUBSTITUTABLE_LONG);
    }
    @Override public void onDateTime(){
      qName.set(dynamic ? EXPRESSION_DATE_TIME : SUBSTITUTABLE_DATE_TIME);
    }
    @Override public void onList(){
      qName.set(dynamic ? EXPRESSION_LIST : SUBSTITUTABLE_NAME);
    }
    @Override public void onMap(){
      qName.set(dynamic ? EXPRESSION_MAP : SUBSTITUTABLE_NAME);
    }
    @Override protected void defaultOperation(){
      qName.set(dynamic ? EXPRESSION_OBJECT : STRING);
    }
  }
);
  return qName.get();
}
