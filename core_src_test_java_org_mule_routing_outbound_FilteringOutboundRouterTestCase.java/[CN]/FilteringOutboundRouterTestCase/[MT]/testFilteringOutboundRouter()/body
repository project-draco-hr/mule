{
  Mock session=MuleTestUtils.getMockSession();
  DefaultOutboundRouterCollection messageRouter=new DefaultOutboundRouterCollection();
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  Endpoint endpoint1=getTestOutboundEndpoint("Test1Provider");
  assertNotNull(endpoint1);
  FilteringOutboundRouter router=new FilteringOutboundRouter();
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router.setFilter(filter);
  List endpoints=new ArrayList();
  endpoints.add(endpoint1);
  router.setEndpoints(endpoints);
  assertFalse(router.isUseTemplates());
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event");
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.eq(message,endpoint1));
  router.route(message,(MuleSession)session.proxy(),false);
  session.verify();
  message=new DefaultMuleMessage("test event");
  session.expectAndReturn("sendEvent",C.eq(message,endpoint1),message);
  MuleMessage result=router.route(message,(MuleSession)session.proxy(),true);
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
  message=new DefaultMuleMessage(new Exception("test event"));
  assertTrue(!router.isMatch(message));
  router.setTransformers(CollectionUtils.singletonList(new AbstractTransformer(){
    public Object doTransform(    Object src,    String encoding) throws TransformerException {
      return ((Exception)src).getMessage();
    }
  }
));
  assertTrue(router.isMatch(message));
}
