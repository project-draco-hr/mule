{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getFlowConstruct",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?exchangePattern=request-response");
  assertNotNull(endpoint1);
  Mock mockEndpoint=RouterTestUtils.getMockEndpoint(endpoint1);
  FilteringOutboundRouter router=new FilteringOutboundRouter();
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router.setFilter(filter);
  List<MessageProcessor> endpoints=new ArrayList<MessageProcessor>();
  endpoints.add((OutboundEndpoint)mockEndpoint.proxy());
  router.setRoutes(endpoints);
  assertTrue(router.isUseTemplates());
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  mockEndpoint.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  router.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy(),muleContext));
  mockEndpoint.verify();
  message=new DefaultMuleMessage(new Exception("test event"),muleContext);
  assertTrue(!router.isMatch(message));
  router.setTransformers(CollectionUtils.singletonList(new AbstractTransformer(){
    @Override public Object doTransform(    Object src,    String encoding) throws TransformerException {
      return ((Exception)src).getMessage();
    }
  }
));
  assertTrue(router.isMatch(message));
}
