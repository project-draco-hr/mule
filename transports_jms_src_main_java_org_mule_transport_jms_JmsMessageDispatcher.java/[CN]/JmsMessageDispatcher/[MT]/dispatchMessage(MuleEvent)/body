{
  Session session=null;
  MessageProducer producer=null;
  MessageConsumer consumer=null;
  Destination replyTo=null;
  boolean transacted=false;
  boolean cached=false;
  boolean useReplyToDestination;
  final Transaction muleTx=TransactionCoordination.getInstance().getTransaction();
  if (logger.isDebugEnabled()) {
    logger.debug("dispatching on endpoint: " + event.getEndpoint().getEndpointURI() + ". MuleEvent id is: "+ event.getId()+ ". Outbound transformers are: "+ event.getEndpoint().getTransformers());
  }
  boolean sessionManaged=true;
  try {
    session=connector.getSessionFromTransaction();
    if (session != null) {
      transacted=true;
    }
 else     if (event.getMessage().getBooleanProperty(JmsConstants.CACHE_JMS_SESSIONS_PROPERTY,connector.isCacheJmsSessions())) {
      sessionManaged=false;
      cached=true;
      if (cachedSession != null) {
        session=cachedSession;
      }
 else {
        session=connector.getSession(event.getEndpoint());
        cachedSession=session;
      }
    }
 else {
      sessionManaged=muleTx != null && muleTx.isXA();
      session=connector.getSession(event.getEndpoint());
      if (event.getEndpoint().getTransactionConfig().isTransacted()) {
        transacted=true;
      }
    }
    useReplyToDestination=returnResponse(event) && !transacted;
    boolean topic=connector.getTopicResolver().isTopic(event.getEndpoint(),true);
    Destination dest=connector.getJmsSupport().createDestination(session,endpoint);
    producer=connector.getJmsSupport().createProducer(session,dest,topic);
    preTransformMessage(event.getMessage());
    Object message=event.transformMessage();
    if (!(message instanceof Message)) {
      throw new DispatchException(JmsMessages.checkTransformer("JMS message",message.getClass(),connector.getName()),event.getMessage(),event.getEndpoint());
    }
    Message msg=(Message)message;
    processMessage(msg,event);
    if (event.getMessage().getCorrelationId() != null) {
      msg.setJMSCorrelationID(event.getMessage().getCorrelationId());
    }
    MuleMessage eventMsg=event.getMessage();
    replyTo=getReplyToDestination(msg,session,event,useReplyToDestination,topic);
    if (replyTo != null) {
      msg.setJMSReplyTo(replyTo);
    }
    String ttlString=(String)eventMsg.removeProperty(JmsConstants.TIME_TO_LIVE_PROPERTY);
    String priorityString=(String)eventMsg.removeProperty(JmsConstants.PRIORITY_PROPERTY);
    String persistentDeliveryString=(String)eventMsg.removeProperty(JmsConstants.PERSISTENT_DELIVERY_PROPERTY);
    long ttl=StringUtils.isNotBlank(ttlString) ? NumberUtils.toLong(ttlString) : Message.DEFAULT_TIME_TO_LIVE;
    int priority=StringUtils.isNotBlank(priorityString) ? NumberUtils.toInt(priorityString) : Message.DEFAULT_PRIORITY;
    boolean persistent=StringUtils.isNotBlank(persistentDeliveryString) ? BooleanUtils.toBoolean(persistentDeliveryString) : connector.isPersistentDelivery();
    if (connector.isHonorQosHeaders()) {
      int priorityProp=eventMsg.getIntProperty(JmsConstants.JMS_PRIORITY,Connector.INT_VALUE_NOT_SET);
      int deliveryModeProp=eventMsg.getIntProperty(JmsConstants.JMS_DELIVERY_MODE,Connector.INT_VALUE_NOT_SET);
      if (priorityProp != Connector.INT_VALUE_NOT_SET) {
        priority=priorityProp;
      }
      if (deliveryModeProp != Connector.INT_VALUE_NOT_SET) {
        persistent=deliveryModeProp == DeliveryMode.PERSISTENT;
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Sending message of type " + ClassUtils.getSimpleName(msg.getClass()));
    }
    connector.getJmsSupport().send(producer,msg,persistent,priority,ttl,topic);
    if (useReplyToDestination && replyTo != null) {
      consumer=createReplyToConsumer(msg,event,session,replyTo,topic);
      if (topic) {
        Latch l=new Latch();
        ReplyToListener listener=new ReplyToListener(l);
        consumer.setMessageListener(listener);
        connector.getJmsSupport().send(producer,msg,persistent,priority,ttl,topic);
        int timeout=event.getTimeout();
        if (logger.isDebugEnabled()) {
          logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
        }
        l.await(timeout,TimeUnit.MILLISECONDS);
        consumer.setMessageListener(null);
        listener.release();
        Message result=listener.getMessage();
        if (result == null) {
          logger.debug("No message was returned via replyTo destination");
          return null;
        }
 else {
          MessageAdapter adapter=connector.getMessageAdapter(result);
          return new DefaultMuleMessage(JmsMessageUtils.toObject(result,connector.getSpecification(),endpoint.getEncoding()),adapter);
        }
      }
 else {
        int timeout=event.getTimeout();
        if (logger.isDebugEnabled()) {
          logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
        }
        Message result=consumer.receive(timeout);
        if (result == null) {
          logger.debug("No message was returned via replyTo destination " + replyTo);
          return null;
        }
 else {
          MessageAdapter adapter=connector.getMessageAdapter(result);
          return new DefaultMuleMessage(JmsMessageUtils.toObject(result,connector.getSpecification(),endpoint.getEncoding()),adapter);
        }
      }
    }
    return null;
  }
  finally {
    connector.closeQuietly(producer);
    connector.closeQuietly(consumer);
    if (replyTo != null && (replyTo instanceof TemporaryQueue || replyTo instanceof TemporaryTopic)) {
      if (replyTo instanceof TemporaryQueue) {
        connector.closeQuietly((TemporaryQueue)replyTo);
      }
 else {
        connector.closeQuietly((TemporaryTopic)replyTo);
      }
    }
    if (!sessionManaged && transacted && muleTx instanceof TransactionCollection) {
      handleMultiTx(session);
    }
    if (session != null && !cached && !transacted) {
      connector.closeQuietly(session);
    }
  }
}
