{
  Session session=null;
  MessageProducer producer=null;
  MessageConsumer consumer=null;
  Destination replyTo=null;
  boolean transacted=false;
  boolean cached=false;
  boolean useReplyToDestination;
  final Transaction muleTx=TransactionCoordination.getInstance().getTransaction();
  if (logger.isDebugEnabled()) {
    logger.debug("dispatching on endpoint: " + endpoint.getEndpointURI() + ". MuleEvent id is: "+ event.getId()+ ". Outbound transformers are: "+ endpoint.getTransformers());
  }
  boolean sessionManaged=true;
  try {
    session=connector.getTransactionalResource(endpoint);
    if (muleTx != null && muleTx.hasResource(session)) {
      transacted=true;
    }
 else     if (event.getMessage().getOutboundProperty(JmsConstants.CACHE_JMS_SESSIONS_PROPERTY,connector.isCacheJmsSessions())) {
      sessionManaged=false;
      cached=true;
      if (cachedSession != null) {
        session=cachedSession;
      }
 else {
        cachedSession=session;
      }
    }
 else {
      sessionManaged=muleTx != null && muleTx.isXA();
      if (endpoint.getTransactionConfig().isTransacted()) {
        transacted=true;
      }
    }
    useReplyToDestination=returnResponse(event,doSend) && !transacted;
    boolean topic=connector.getTopicResolver().isTopic(endpoint,true);
    Destination dest=connector.getJmsSupport().createDestination(session,endpoint);
    producer=connector.getJmsSupport().createProducer(session,dest,topic);
    Object message=event.getMessage().getPayload();
    if (!(message instanceof Message)) {
      throw new DispatchException(JmsMessages.checkTransformer("JMS message",message.getClass(),connector.getName()),event,getEndpoint());
    }
    Message msg=(Message)message;
    MuleMessage eventMsg=event.getMessage();
    replyTo=getReplyToDestination(msg,session,event,useReplyToDestination,topic);
    if (replyTo != null) {
      msg.setJMSReplyTo(replyTo);
    }
    processMessage(msg,event);
    long ttl=eventMsg.getOutboundProperty(JmsConstants.TIME_TO_LIVE_PROPERTY,Message.DEFAULT_TIME_TO_LIVE);
    int priority=eventMsg.getOutboundProperty(JmsConstants.PRIORITY_PROPERTY,Message.DEFAULT_PRIORITY);
    boolean persistent=eventMsg.getOutboundProperty(JmsConstants.PERSISTENT_DELIVERY_PROPERTY,connector.isPersistentDelivery());
    if (connector.isHonorQosHeaders()) {
      Object priorityProp=eventMsg.getInboundProperty(JmsConstants.JMS_PRIORITY);
      Object deliveryModeProp=eventMsg.getInboundProperty(JmsConstants.JMS_DELIVERY_MODE);
      if (priorityProp != null) {
        priority=NumberUtils.toInt(priorityProp);
      }
      if (deliveryModeProp != null) {
        persistent=NumberUtils.toInt(deliveryModeProp) == DeliveryMode.PERSISTENT;
      }
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Sending message of type " + ClassUtils.getSimpleName(msg.getClass()));
      logger.debug("Sending JMS Message type " + msg.getJMSType() + "\n  JMSMessageID="+ msg.getJMSMessageID()+ "\n  JMSCorrelationID="+ msg.getJMSCorrelationID()+ "\n  JMSDeliveryMode="+ (persistent ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT)+ "\n  JMSPriority="+ priority+ "\n  JMSReplyTo="+ msg.getJMSReplyTo());
    }
    connector.getJmsSupport().send(producer,msg,persistent,priority,ttl,topic,endpoint);
    if (useReplyToDestination && replyTo != null) {
      consumer=createReplyToConsumer(msg,event,session,replyTo,topic);
      if (topic) {
        Latch l=new Latch();
        ReplyToListener listener=new ReplyToListener(l);
        consumer.setMessageListener(listener);
        connector.getJmsSupport().send(producer,msg,persistent,priority,ttl,topic,endpoint);
        int timeout=event.getTimeout();
        if (logger.isDebugEnabled()) {
          logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
        }
        l.await(timeout,TimeUnit.MILLISECONDS);
        consumer.setMessageListener(null);
        listener.release();
        Message result=listener.getMessage();
        if (result == null) {
          logger.debug("No message was returned via replyTo destination");
          return createNullMuleMessage();
        }
 else {
          return createMessageWithJmsMessagePayload(result);
        }
      }
 else {
        int timeout=event.getTimeout();
        if (logger.isDebugEnabled()) {
          logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
        }
        Message result=consumer.receive(timeout);
        if (result == null) {
          logger.debug("No message was returned via replyTo destination " + replyTo);
          return createNullMuleMessage();
        }
 else {
          return createMessageWithJmsMessagePayload(result);
        }
      }
    }
 else {
      return returnOriginalMessageAsReply ? createMuleMessage(msg) : null;
    }
  }
  finally {
    connector.closeQuietly(producer);
    connector.closeQuietly(consumer);
    if (replyTo != null && (replyTo instanceof TemporaryQueue || replyTo instanceof TemporaryTopic)) {
      if (replyTo instanceof TemporaryQueue) {
        connector.closeQuietly((TemporaryQueue)replyTo);
      }
 else {
        connector.closeQuietly((TemporaryTopic)replyTo);
      }
    }
    if (!sessionManaged && transacted) {
      handleMultiTx(session);
    }
    if (session != null && !cached && !transacted) {
      connector.closeQuietly(session);
    }
  }
}
