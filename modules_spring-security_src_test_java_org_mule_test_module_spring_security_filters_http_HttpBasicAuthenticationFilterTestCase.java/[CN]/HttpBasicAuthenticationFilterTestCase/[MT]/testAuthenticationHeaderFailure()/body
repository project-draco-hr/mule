{
  Event oldEvent=getCurrentEvent();
  final HttpRequestAttributes attrs=mock(HttpRequestAttributes.class);
  when(attrs.getHeaders()).thenReturn(new ParameterMap(singletonMap(AUTHORIZATION,"Basic a")));
  Event event=eventBuilder().message(InternalMessage.builder().payload("a").attributes(attrs).build()).build();
  setCurrentEvent(event);
  HttpBasicAuthenticationFilter filter=new HttpBasicAuthenticationFilter();
  SecurityManager manager=mock(SecurityManager.class);
  filter.setSecurityManager(manager);
  doThrow(new UnauthorisedException(mock(I18nMessage.class))).when(manager).authenticate(anyObject());
  try {
    filter.authenticate(event);
    fail("An UnauthorisedException should be thrown");
  }
 catch (  UnauthorisedException e) {
    verify(manager);
  }
  setCurrentEvent(oldEvent);
}
