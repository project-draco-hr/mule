{
  ExecutionTemplate<MuleEvent> executionTemplate=createExecutionTemplate();
  try {
    final MessageProcessorPollingInterceptor interceptor=override.interceptor();
    MuleEvent muleEvent=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        ImmutableEndpoint ep=endpoint;
        if (sourceMessageProcessor instanceof ImmutableEndpoint) {
          ep=(ImmutableEndpoint)sourceMessageProcessor;
        }
        MuleEvent event=new DefaultMuleEvent(request,ep.getExchangePattern(),flowConstruct);
        event=interceptor.prepareSourceEvent(event);
        OptimizedRequestContext.criticalSetEvent(event);
        MuleEvent sourceEvent=sourceMessageProcessor.process(event);
        if (isNewMessage(sourceEvent)) {
          event=interceptor.prepareRouting(sourceEvent,createMuleEvent(sourceEvent.getMessage(),null));
          routeEvent(event);
          interceptor.postProcessRouting(event);
        }
 else {
          logger.info(pollSourceReturnedNull(flowConstruct.getName()));
        }
        return null;
      }
    }
);
    if (muleEvent != null) {
      interceptor.postProcessRouting(muleEvent);
    }
  }
 catch (  MessagingException e) {
  }
catch (  Exception e) {
    getEndpoint().getMuleContext().getExceptionListener().handleException(e);
  }
}
