{
  String ackExpression="some-expression";
  String expressionEvalutaionResult="new payload";
  when(mockUntilSuccessfulConfiguration.getAckExpression()).thenReturn(ackExpression);
  when(mockUntilSuccessfulConfiguration.getMuleContext().getExpressionManager().evaluate(ackExpression,event)).thenReturn(expressionEvalutaionResult);
  SynchronousUntilSuccessfulProcessingStrategy processingStrategy=createProcessingStrategy();
  when(mockRoute.process(any(MuleEvent.class))).thenAnswer(new Answer<MuleEvent>(){
    @Override public MuleEvent answer(    InvocationOnMock invocation) throws Throwable {
      return (MuleEvent)invocation.getArguments()[0];
    }
  }
);
  MuleEvent response=processingStrategy.route(event);
  assertThat(response.getMessage().getPayload(),equalTo(expressionEvalutaionResult));
  verify(mockRoute).process(any(MuleEvent.class));
  verify(mockUntilSuccessfulConfiguration.getMuleContext().getExpressionManager()).evaluate(ackExpression,event);
}
