{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference messageHolder=new AtomicReference();
  EventCallback callback=new EventCallback(){
    public synchronized void eventReceived(    MuleEventContext context,    Object component){
      try {
        if (1 == latch.getCount()) {
          messageHolder.set(context.getMessage());
          latch.countDown();
        }
      }
 catch (      Exception e) {
        fail();
      }
    }
  }
;
  Object component=getComponent("testComponent");
  assertTrue("FunctionalStreamingTestComponent expected",component instanceof FunctionalStreamingTestComponent);
  FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)component;
  ftc.setEventCallback(callback,TEST_MESSAGE.length());
  createFileOnFtpServer("input.txt");
  assertTrue(latch.await(getTimeout(),TimeUnit.MILLISECONDS));
  MuleMessage message=(MuleMessage)messageHolder.get();
  assertNotNull(message);
  assertTrue(message.getPayload() instanceof InputStream);
}
