{
  if (logger.isDebugEnabled()) {
    logger.debug("splitExpression is " + splitExpression);
  }
  Object src=message.getPayload();
  try {
    if (src instanceof byte[]) {
      src=new String((byte[])src);
    }
    Document dom4jDoc=null;
    if (src instanceof String) {
      String xml=(String)src;
      logger.debug("Incoming payload size " + xml.length());
      dom4jDoc=DocumentHelper.parseText(xml);
    }
 else     if (src instanceof org.dom4j.Document) {
      dom4jDoc=(org.dom4j.Document)src;
    }
 else {
      logger.error("Non-xml message payload: " + src.getClass().toString());
      return;
    }
    if (dom4jDoc != null) {
      XPath xpath=dom4jDoc.createXPath(splitExpression);
      if (namespaces != null)       xpath.setNamespaceURIs(namespaces);
      List nodes=xpath.selectNodes(dom4jDoc);
      if (logger.isDebugEnabled()) {
        logger.debug("Split into " + nodes.size());
      }
      tlNodes.set(nodes);
    }
 else {
      logger.error("Unable to create dom4j document from payload");
    }
  }
 catch (  Exception e) {
    logger.error("Error spliting document with " + splitExpression,e);
  }
  properties=message.getProperties();
}
