{
  final File pluginsDir=new File(appDir,MuleFoldersUtil.PLUGINS_FOLDER);
  String[] pluginZips=pluginsDir.list(new SuffixFileFilter(".zip"));
  if (pluginZips == null || pluginZips.length == 0) {
    return Collections.emptySet();
  }
  Arrays.sort(pluginZips);
  Set<PluginDescriptor> pds=new HashSet<>(pluginZips.length);
  for (  String pluginZip : pluginZips) {
    final String pluginName=StringUtils.removeEnd(pluginZip,".zip");
    final File tmpDir=new File(MuleContainerBootstrapUtils.getMuleTmpDir(),appDescriptor.getName() + "/plugins/" + pluginName);
    FileUtils.unzip(new File(pluginsDir,pluginZip),tmpDir);
    final PluginDescriptor pd=new PluginDescriptor();
    pd.setName(pluginName);
    pd.setAppDescriptor(appDescriptor);
    final File pluginPropsFile=new File(tmpDir,"plugin.properties");
    if (pluginPropsFile.exists()) {
      Properties props=new Properties();
      props.load(new FileReader(pluginPropsFile));
      final String overrideString=props.getProperty(PROPERTY_LOADER_OVERRIDE);
      if (StringUtils.isNotBlank(overrideString)) {
        Set<String> values=new HashSet<>();
        final String[] overrides=overrideString.split(",");
        Collections.addAll(values,overrides);
        pd.setLoaderOverride(values);
      }
    }
    try {
      pd.setRuntimeClassesDir(new File(tmpDir,"classes").toURI().toURL());
      final File libDir=new File(tmpDir,"lib");
      URL[] urls=new URL[0];
      if (libDir.exists()) {
        final File[] jars=libDir.listFiles((FilenameFilter)new SuffixFileFilter(".jar"));
        urls=new URL[jars.length];
        for (int i=0; i < jars.length; i++) {
          urls[i]=jars[i].toURI().toURL();
        }
      }
      pd.setRuntimeLibs(urls);
    }
 catch (    MalformedURLException e) {
      throw new IllegalArgumentException("Failed to create plugin descriptor " + tmpDir);
    }
    pds.add(pd);
  }
  return pds;
}
