{
  CxfMessageReceiver cxfReceiver=(CxfMessageReceiver)receiver;
  Server server=cxfReceiver.getServer();
  uriToServer.put(server.getEndpoint().getEndpointInfo().getAddress(),server);
  SedaService service=new SedaService();
  service.setMuleContext(muleContext);
  String uniqueServiceName=createServiceName(server.getEndpoint());
  service.setName(uniqueServiceName);
  service.setModel(muleContext.getRegistry().lookupSystemModel());
  CxfServiceComponent svcComponent=new CxfServiceComponent(this,(CxfMessageReceiver)receiver);
  svcComponent.setBus(bus);
  final DefaultJavaComponent component=new DefaultJavaComponent(new SingletonObjectFactory(svcComponent));
  component.setMuleContext(muleContext);
  service.setComponent(component);
  String endpoint=receiver.getEndpointURI().getAddress();
  String scheme=ep.getScheme().toLowerCase();
  InboundEndpoint originalEndpoint=receiver.getEndpoint();
  boolean sync=originalEndpoint.isSynchronous();
  if (scheme.equals("http") || scheme.equals("https") || scheme.equals("ssl")|| scheme.equals("tcp")|| scheme.equals("servlet")) {
    originalEndpoint.getProperties().put(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
    originalEndpoint.getProperties().put(HttpConstants.HEADER_CONTENT_TYPE,"text/xml");
  }
  QName serviceName=server.getEndpoint().getEndpointInfo().getName();
  EndpointBuilder protocolEndpointBuilder=new EndpointURIEndpointBuilder(endpoint,muleContext);
  protocolEndpointBuilder.setSynchronous(sync);
  protocolEndpointBuilder.setName(ep.getScheme() + ":" + serviceName.getLocalPart());
  protocolEndpointBuilder.setTransactionConfig(originalEndpoint.getTransactionConfig());
  EndpointBuilder receiverEndpointBuilder=new EndpointURIEndpointBuilder(originalEndpoint,muleContext);
  EndpointBuilder transformerEndpoint;
  if (cxfReceiver.isApplyTransformersToProtocol()) {
    transformerEndpoint=protocolEndpointBuilder;
    receiverEndpointBuilder.setTransformers(Collections.<Transformer>emptyList());
    receiverEndpointBuilder.setResponseTransformers(Collections.<Transformer>emptyList());
  }
 else {
    transformerEndpoint=receiverEndpointBuilder;
  }
  if (originalEndpoint.getTransformers() != null && !originalEndpoint.getTransformers().isEmpty()) {
    transformerEndpoint.setTransformers(originalEndpoint.getTransformers());
  }
  if (originalEndpoint.getResponseTransformers() != null && !originalEndpoint.getResponseTransformers().isEmpty()) {
    transformerEndpoint.setResponseTransformers(originalEndpoint.getResponseTransformers());
  }
  EndpointBuilder filterEndpoint;
  if (cxfReceiver.isApplyFiltersToProtocol()) {
    filterEndpoint=protocolEndpointBuilder;
    receiverEndpointBuilder.setFilter(null);
  }
 else {
    filterEndpoint=receiverEndpointBuilder;
  }
  filterEndpoint.setFilter(originalEndpoint.getFilter());
  EndpointBuilder secFilterEndpoint;
  if (cxfReceiver.isApplySecurityToProtocol()) {
    secFilterEndpoint=protocolEndpointBuilder;
    receiverEndpointBuilder.setSecurityFilter(null);
  }
 else {
    secFilterEndpoint=receiverEndpointBuilder;
  }
  secFilterEndpoint.setSecurityFilter(originalEndpoint.getSecurityFilter());
  String connectorName=(String)originalEndpoint.getProperty(CxfConstants.PROTOCOL_CONNECTOR);
  if (connectorName != null) {
    protocolEndpointBuilder.setConnector(muleContext.getRegistry().lookupConnector(connectorName));
  }
  InboundEndpoint protocolEndpoint=muleContext.getRegistry().lookupEndpointFactory().getInboundEndpoint(protocolEndpointBuilder);
  InboundEndpoint receiverEndpoint=muleContext.getRegistry().lookupEndpointFactory().getInboundEndpoint(receiverEndpointBuilder);
  receiver.setEndpoint(receiverEndpoint);
  service.setInboundRouter(new DefaultInboundRouterCollection());
  service.getInboundRouter().addEndpoint(protocolEndpoint);
  services.add(service);
}
