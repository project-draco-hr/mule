{
  MuleClient client=muleContext.getClient();
  while (client.request(DESTINATION,1000) != null) {
    logger.warn("Destination " + DESTINATION + " isn't empty, draining it");
  }
  FunctionalTestComponent ftc=getFunctionalTestComponent("Bouncer");
  final Latch messageRedeliveryExceptionFired=new Latch();
  muleContext.registerListener(new ExceptionNotificationListener<ExceptionNotification>(){
    public void onNotification(    ExceptionNotification notification){
      logger.debug("onNotification() = " + notification.getException().getClass().getName());
      if (notification.getException() instanceof MessageRedeliveredException) {
        messageRedeliveryExceptionFired.countDown();
        assertEquals(DESTINATION,((MessageRedeliveredException)notification.getException()).getEndpoint().getEndpointURI().toString());
        assertEquals(MAX_REDELIVERY,((MessageRedeliveredException)notification.getException()).getMaxRedelivery());
        assertTrue(((MessageRedeliveredException)notification.getException()).getMuleMessage().getPayload() instanceof javax.jms.Message);
      }
    }
  }
);
  final CounterCallback callback=new CounterCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object Component) throws Exception {
      final int count=incCallbackCount();
      logger.info("Message Delivery Count is: " + count);
      throw new FunctionalTestException();
    }
  }
;
  ftc.setEventCallback(callback);
  client.dispatch(DESTINATION,TEST_MESSAGE,null);
  Thread.sleep(2000);
  if (!messageRedeliveryExceptionFired.await(timeout,TimeUnit.MILLISECONDS)) {
    fail("Exception from FunctionalTestComponent was not triggered three times");
  }
  assertEquals("MessageRedeliveredException never fired.",0,messageRedeliveryExceptionFired.getCount());
  assertEquals("Wrong number of delivery attempts",MAX_REDELIVERY + 1,callback.getCallbackCount());
}
