{
  ConnectorServiceDescriptor csd=(ConnectorServiceDescriptor)csdCache.get(new CSDKey(protocol,overrides));
  if (csd == null) {
    String location=SpiUtils.SERVICE_ROOT + PROVIDER_SERVICES_PATH;
    InputStream is=SpiUtils.findServiceDescriptor(PROVIDER_SERVICES_PATH,protocol,ConnectorFactory.class);
    try {
      if (is != null) {
        Properties props=new Properties();
        props.load(is);
        csd=new ConnectorServiceDescriptor(protocol,location,props);
        csd.setOverrides(overrides);
        if (csd.getServiceFinder() != null) {
          ConnectorServiceFinder finder=csd.createServiceFinder();
          csd=finder.findService(protocol,csd);
        }
        csdCache.put(new CSDKey(csd.getProtocol(),overrides),csd);
      }
 else {
        throw new ConnectorServiceNotFoundException(location + "/" + protocol);
      }
    }
 catch (    IOException e) {
      throw new ConnectorFactoryException(new Message(Messages.FAILED_TO_ENDPOINT_FROM_LOCATION_X,location + "/" + protocol),e);
    }
  }
  return csd;
}
