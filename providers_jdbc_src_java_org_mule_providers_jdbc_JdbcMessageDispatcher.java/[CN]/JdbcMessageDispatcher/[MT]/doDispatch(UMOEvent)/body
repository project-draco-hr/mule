{
  if (logger.isDebugEnabled()) {
    logger.debug("Dispatch event: " + event);
  }
  UMOEndpoint endpoint=event.getEndpoint();
  UMOEndpointURI endpointURI=endpoint.getEndpointURI();
  String writeStmt=endpointURI.getAddress();
  String str;
  if ((str=this.connector.getQuery(endpoint,writeStmt)) != null) {
    writeStmt=str;
  }
  if (writeStmt == null) {
    throw new IllegalArgumentException("Write statement should not be null");
  }
  if (!"insert".equalsIgnoreCase(writeStmt.substring(0,6)) && !"update".equalsIgnoreCase(writeStmt.substring(0,6)) && !"delete".equalsIgnoreCase(writeStmt.substring(0,6))) {
    throw new IllegalArgumentException("Write statement should be an insert / update / delete sql statement");
  }
  List paramNames=new ArrayList();
  writeStmt=JdbcUtils.parseStatement(writeStmt,paramNames);
  Object[] paramValues=JdbcUtils.getParams(endpointURI,paramNames,event.getMessage());
  UMOTransaction tx=TransactionCoordination.getInstance().getTransaction();
  Connection con=null;
  try {
    con=this.connector.getConnection();
    int nbRows=new QueryRunner().update(con,writeStmt,paramValues);
    if (nbRows != 1) {
      logger.warn("Row count for write should be 1 and not " + nbRows);
    }
    if (tx == null) {
      JdbcUtils.commitAndClose(con);
    }
    logger.debug("Event dispatched succesfuly");
  }
 catch (  Exception e) {
    logger.debug("Error dispatching event: " + e.getMessage(),e);
    if (tx == null) {
      JdbcUtils.rollbackAndClose(con);
    }
    throw e;
  }
}
