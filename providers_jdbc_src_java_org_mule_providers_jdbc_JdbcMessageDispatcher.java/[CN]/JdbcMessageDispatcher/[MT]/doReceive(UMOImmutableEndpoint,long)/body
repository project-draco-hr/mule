{
  if (logger.isDebugEnabled()) {
    logger.debug("Trying to receive a message with a timeout of " + timeout);
  }
  String[] stmts=this.connector.getReadAndAckStatements(endpoint);
  String readStmt=stmts[0];
  String ackStmt=stmts[1];
  List readParams=new ArrayList();
  List ackParams=new ArrayList();
  readStmt=JdbcUtils.parseStatement(readStmt,readParams);
  ackStmt=JdbcUtils.parseStatement(ackStmt,ackParams);
  Connection con=null;
  long t0=System.currentTimeMillis();
  try {
    con=this.connector.getConnection();
    if (timeout < 0) {
      timeout=Long.MAX_VALUE;
    }
    Object result=null;
    do {
      result=new QueryRunner().query(con,readStmt,JdbcUtils.getParams(endpoint,readParams,null),new MapHandler());
      if (result != null) {
        if (logger.isDebugEnabled()) {
          logger.debug("Received: " + result);
        }
        break;
      }
      long sleep=Math.min(this.connector.getPollingFrequency(),timeout - (System.currentTimeMillis() - t0));
      if (sleep > 0) {
        if (logger.isDebugEnabled()) {
          logger.debug("No results, sleeping for " + sleep);
        }
        Thread.sleep(sleep);
      }
 else {
        logger.debug("Timeout");
        return null;
      }
    }
 while (true);
    if (result != null && ackStmt != null) {
      int nbRows=new QueryRunner().update(con,ackStmt,JdbcUtils.getParams(endpoint,ackParams,result));
      if (nbRows != 1) {
        logger.warn("Row count for ack should be 1 and not " + nbRows);
      }
    }
    UMOMessageAdapter msgAdapter=this.connector.getMessageAdapter(result);
    UMOMessage message=new MuleMessage(msgAdapter);
    JdbcUtils.commitAndClose(con);
    return message;
  }
 catch (  Exception e) {
    JdbcUtils.rollbackAndClose(con);
    throw e;
  }
}
