{
  TestSplitter splitter=new TestSplitter();
  MultipleEventSensingMessageProcessor listener=new MultipleEventSensingMessageProcessor();
  splitter.setListener(listener);
  splitter.setMuleContext(muleContext);
  Apple apple=new Apple();
  Banana banana=new Banana();
  Orange orange=new Orange();
  FruitBowl fruitBowl=new FruitBowl();
  fruitBowl.addFruit(apple);
  fruitBowl.addFruit(banana);
  fruitBowl.addFruit(orange);
  Event inEvent=Event.builder(getTestEvent("")).message(InternalMessage.builder().payload(fruitBowl).build()).build();
  Event resultEvent=splitter.process(inEvent);
  assertEquals(3,listener.events.size());
  assertTrue(listener.events.get(0).getMessage().getPayload().getValue() instanceof Fruit);
  assertTrue(listener.events.get(1).getMessage().getPayload().getValue() instanceof Fruit);
  assertTrue(listener.events.get(2).getMessage().getPayload().getValue() instanceof Fruit);
  assertThat(resultEvent.getMessage().getPayload().getValue(),instanceOf(List.class));
  assertEquals(3,((List<InternalMessage>)resultEvent.getMessage().getPayload().getValue()).size());
  assertTrue(((List<InternalMessage>)resultEvent.getMessage().getPayload().getValue()).get(0).getPayload().getValue() instanceof Fruit);
  assertTrue(((List<InternalMessage>)resultEvent.getMessage().getPayload().getValue()).get(1).getPayload().getValue() instanceof Fruit);
  assertTrue(((List<InternalMessage>)resultEvent.getMessage().getPayload().getValue()).get(2).getPayload().getValue() instanceof Fruit);
}
