{
  try {
    Object ibean;
    String address=uri.getAddress();
    int i=address.indexOf(".");
    String ibeanName=address.substring(0,i);
    IBeanHolder holder=getMuleContext().getRegistry().lookupObject(ibeanName);
    if (holder == null) {
      throw new IllegalArgumentException();
    }
    ibean=holder.create(getMuleContext(),getiBeansPlugin());
    if (state.size() > 0) {
      Class[] types=new Class[state.size()];
      Object[] params=new Object[state.size()];
      int x=0;
      for (      Object o : state) {
        types[x]=o.getClass();
        params[x++]=o;
      }
      List<Method> methods=ClassUtils.getSatisfiableMethods(holder.getIbeanClass(),types,true,false,Collections.<String>emptyList(),null);
      if (methods.size() == 0) {
        throw new IllegalArgumentException("no matching methods");
      }
 else       if (methods.size() == 1) {
        if (methods.get(0).isAnnotationPresent(State.class)) {
          methods.get(0).invoke(ibean,params);
        }
      }
 else {
        boolean match=false;
        for (        Method method1 : methods) {
          if (method1.isAnnotationPresent(State.class)) {
            method1.invoke(ibean,params);
            match=true;
            break;
          }
        }
        if (!match) {
          throw new IllegalArgumentException("no matching @State method");
        }
      }
    }
    return ibean;
  }
 catch (  Exception e) {
    throw new DefaultMuleException(e);
  }
}
