{
  if (firstTime) {
    try {
      initCache(component,context);
    }
 catch (    Exception e) {
      InvocationResult result=new InvocationResult(InvocationResult.STATE_INVOKE_NOT_SUPPORTED);
      result.setErrorMessage(e.toString());
      return result;
    }
  }
  Object[] payload;
  Method method;
  String methodName=(String)context.getMessage().getProperty(MuleProperties.MULE_METHOD_PROPERTY);
  if (methodName != null) {
    method=getMethodByName(methodName,component);
    if (method == null) {
      throw new IllegalArgumentException("Method not found: " + methodName + " on object: "+ component.getClass()+ ". If the component is a proxy there needs to be an interface on the proxy that defines this method");
    }
    payload=getPayloadForMethod(method,component,context);
  }
 else   if (methodCache.size() == 1) {
    method=(Method)methodCache.values().iterator().next();
    payload=getPayloadForMethod(method,component,context);
  }
 else {
    payload=getPayloadFromMessage(context);
    method=getMethodByArguments(component,payload);
    if (method == null) {
      InvocationResult result=new InvocationResult(InvocationResult.STATE_INVOKE_NOT_SUPPORTED);
      result.setErrorMessage("@Entrypoint annotation not set on any methods of the service component: " + component);
      return result;
    }
  }
  return invokeMethod(component,method,(method.getParameterTypes().length == 0 ? ClassUtils.NO_ARGS : payload));
}
