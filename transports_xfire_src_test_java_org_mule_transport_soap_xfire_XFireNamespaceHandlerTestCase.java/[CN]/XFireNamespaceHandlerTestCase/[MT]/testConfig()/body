{
  XFireConnector connector=(XFireConnector)muleContext.getRegistry().lookupConnector("xfireConnector");
  assertNotNull(connector);
  assertEquals("org.codehaus.xfire.service.binding.MessageBindingProvider",connector.getBindingProvider());
  assertEquals(2,connector.getClientInHandlers().size());
  assertTrue(connector.getClientInHandlers().contains("org.codehaus.xfire.util.dom.DOMInHandler"));
  assertTrue(connector.getClientInHandlers().contains("org.codehaus.xfire.util.LoggingHandler"));
  assertEquals(1,connector.getClientOutHandlers().size());
  assertTrue(connector.getClientOutHandlers().contains("org.codehaus.xfire.util.dom.DOMOutHandler"));
  assertEquals(1,connector.getClientServices().size());
  assertTrue(connector.getClientServices().contains(MOCK_SERVICE_CLASS));
  assertEquals("org.codehaus.xfire.transport.dead.DeadLetterTransport",connector.getClientTransport());
  assertFalse(connector.isEnableJSR181Annotations());
  assertEquals(2,connector.getServerInHandlers().size());
  assertTrue(connector.getServerInHandlers().contains("org.codehaus.xfire.util.dom.DOMInHandler"));
  assertTrue(connector.getServerInHandlers().contains("org.codehaus.xfire.util.LoggingHandler"));
  assertEquals(1,connector.getServerOutHandlers().size());
  assertTrue(connector.getServerOutHandlers().contains("org.codehaus.xfire.util.dom.DOMOutHandler"));
  assertEquals(MOCK_SERVICE_CLASS,connector.getServiceTransport());
  assertEquals("org.mule.transport.soap.xfire.testmodels.MockTypeMappingRegistry",connector.getTypeMappingRegistry());
}
