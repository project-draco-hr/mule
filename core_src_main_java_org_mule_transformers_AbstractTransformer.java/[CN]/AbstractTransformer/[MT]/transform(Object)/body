{
  String encoding=null;
  Object payload=src;
  UMOMessageAdapter adapter=null;
  if (src instanceof UMOMessageAdapter) {
    encoding=((UMOMessageAdapter)src).getEncoding();
    adapter=(UMOMessageAdapter)src;
    if ((!isSourceTypeSupported(UMOMessageAdapter.class,true) && !isSourceTypeSupported(UMOMessage.class,true) && !(this instanceof AbstractMessageAwareTransformer))) {
      src=((UMOMessageAdapter)src).getPayload();
      payload=adapter.getPayload();
    }
  }
  if (encoding == null && endpoint != null) {
    encoding=endpoint.getEncoding();
  }
 else   if (encoding == null) {
    encoding=FileUtils.DEFAULT_ENCODING;
  }
  Class srcCls=src.getClass();
  if (!isSourceTypeSupported(srcCls)) {
    if (ignoreBadInput) {
      logger.debug("Source type is incompatible with this transformer and property 'ignoreBadInput' is set to true, so the transformer chain will continue.");
      return payload;
    }
 else {
      throw new TransformerException(CoreMessages.transformOnObjectUnsupportedTypeOfEndpoint(this.getName(),payload.getClass(),endpoint),this);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Applying transformer " + getName() + " ("+ getClass().getName()+ ")");
    logger.debug("Object before transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(payload),DEFAULT_TRUNCATE_LENGTH,false));
  }
  Object result;
  result=doTransform(payload,encoding);
  if (result == null) {
    result=NullPayload.getInstance();
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Object after transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(result),DEFAULT_TRUNCATE_LENGTH,false));
  }
  result=checkReturnClass(result);
  return result;
}
