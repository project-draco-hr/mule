{
  String encoding=null;
  if (src instanceof UMOMessage && !isSourceTypeSupported(UMOMessage.class)) {
    encoding=((UMOMessage)src).getEncoding();
    src=((UMOMessage)src).getPayload();
  }
  if (encoding == null && endpoint != null) {
    encoding=endpoint.getEncoding();
  }
 else   if (encoding == null) {
    encoding=FileUtils.DEFAULT_ENCODING;
  }
  if (!isSourceTypeSupported(src.getClass())) {
    if (ignoreBadInput) {
      logger.debug("Source type is incompatible with this transformer and property 'ignoreBadInput' is set to true, so the transformer chain will continue.");
      return src;
    }
 else {
      throw new TransformerException(new Message(Messages.TRANSFORM_X_UNSUPORTED_TYPE_X_ENDPOINT_X,getName(),src.getClass().getName(),(endpoint != null ? endpoint.getEndpointURI() : null)),this);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Applying transformer " + getName() + " ("+ getClass().getName()+ ")");
    logger.debug("Object before transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(src),DEFAULT_TRUNCATE_LENGTH,false));
  }
  Object result=doTransform(src,encoding);
  if (result == null) {
    result=NullPayload.getInstance();
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Object after transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(result),DEFAULT_TRUNCATE_LENGTH,false));
  }
  result=checkReturnClass(result);
  if (nextTransformer != null) {
    logger.debug("Following transformer in the chain is " + nextTransformer.getName() + " ("+ nextTransformer.getClass().getName()+ ")");
    result=nextTransformer.transform(result);
  }
  return result;
}
