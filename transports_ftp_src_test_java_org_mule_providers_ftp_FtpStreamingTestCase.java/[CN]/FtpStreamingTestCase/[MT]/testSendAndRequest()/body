{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference message=new AtomicReference();
  final AtomicInteger loopCount=new AtomicInteger(0);
  EventCallback callback=new EventCallback(){
    public synchronized void eventReceived(    UMOEventContext context,    Object component){
      try {
        logger.info("called " + loopCount.incrementAndGet() + " times");
        FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)component;
        if (1 == latch.getCount()) {
          message.set(ftc.getSummary());
          latch.countDown();
        }
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
;
  MuleClient client=new MuleClient();
  Object ftc=getPojoServiceForComponent("testComponent");
  assertTrue("FunctionalStreamingTestComponent expected",ftc instanceof FunctionalStreamingTestComponent);
  assertNotNull(ftc);
  ((FunctionalStreamingTestComponent)ftc).setEventCallback(callback,TEST_MESSAGE.length());
  client.dispatch("tcp://localhost:60196",TEST_MESSAGE,new HashMap());
  NamedPayload payload=awaitUpload();
  assertNotNull(payload);
  logger.info("received message: " + payload);
  assertEquals(TEST_MESSAGE,new String(payload.getPayload()));
  latch.await(getTimeout(),TimeUnit.MILLISECONDS);
  assertEquals("Received stream; length: 16; 'Test...sage'",message.get());
}
