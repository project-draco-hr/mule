{
  String compareTo=null;
  boolean not=false;
  int start=expression.lastIndexOf("/");
  if (start == -1) {
    start=0;
  }
  int i=0;
  if ((i=expression.indexOf("!=",start)) > -1) {
    compareTo=expression.substring(i + 2,expression.length()).trim();
    expression=expression.substring(0,i).trim();
    not=true;
  }
 else   if ((i=expression.indexOf("=",start)) > -1) {
    compareTo=expression.substring(i + 1,expression.length()).trim();
    expression=expression.substring(0,i).trim();
  }
  try {
    String json=message.getPayloadAsString();
    JsonData data=new JsonData(json);
    try {
      JsonNode resultNode=data.get(expression);
      if (compareTo != null) {
        Object resultValue=resultNode.isValueNode() ? resultNode.getValueAsText() : resultNode;
        if (compareTo.equalsIgnoreCase("null")) {
          boolean answer=resultValue == null;
          return (not ? !answer : answer);
        }
 else         if (resultValue instanceof Number && NumberUtils.isDigits(compareTo)) {
          boolean answer=NumberUtils.createNumber(compareTo).equals(resultValue);
          return (not ? !answer : answer);
        }
 else         if (resultValue instanceof Boolean && (compareTo.equalsIgnoreCase("true") || compareTo.equalsIgnoreCase("false"))) {
          boolean answer=resultValue.equals(Boolean.valueOf(compareTo));
          return (not ? !answer : answer);
        }
 else {
          boolean answer=compareTo.equals(resultValue);
          return (not ? !answer : answer);
        }
      }
 else {
        return extractResultFromNode(resultNode);
      }
    }
 catch (    IllegalArgumentException e) {
      if (compareTo == null) {
        logger.debug("returning null for json expression: " + expression + ": "+ e.getMessage());
        return null;
      }
      return (compareTo.equalsIgnoreCase("null")) & !not;
    }
  }
 catch (  Exception e) {
    throw new MuleRuntimeException(CoreMessages.failedToProcessExtractorFunction(getName() + ":" + expression),e);
  }
}
