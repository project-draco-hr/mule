{
  boolean doDebug=log.isDebugEnabled();
  if (doDebug) {
    log.debug("MuleWSSInSecurityHandler: enter invoke()");
  }
  RequestData reqData=new RequestData();
  try {
    reqData.setMsgContext(msgContext);
    Vector actions=new Vector();
    String action=null;
    if ((action=(String)getOption(WSHandlerConstants.ACTION)) == null) {
      action=getString(WSHandlerConstants.ACTION,msgContext);
    }
    if (action == null) {
      throw new XFireRuntimeException("MuleWSSInHandler: No action defined");
    }
    int doAction=WSSecurityUtil.decodeAction(action,actions);
    String actor=(String)getOption(WSHandlerConstants.ACTOR);
    AbstractMessage sm=msgContext.getCurrentMessage();
    Document doc=(Document)sm.getProperty(DOMInHandler.DOM_MESSAGE);
    if (doc == null)     throw new XFireRuntimeException("DOMInHandler must be enabled for WS-Security!");
    if (sm.getBody() instanceof XFireFault)     return;
    CallbackHandler cbHandler=null;
    if ((doAction & (WSConstants.ENCR | WSConstants.UT)) != 0) {
      cbHandler=getPasswordCB(reqData);
    }
    doReceiverAction(doAction,reqData);
    if (action.equals(WSHandlerConstants.SAML_TOKEN_SIGNED)) {
      reqData.setSigCrypto(loadSignatureCrypto(reqData));
    }
    Vector wsResult=null;
    try {
      wsResult=secEngine.processSecurityHeader(doc,actor,cbHandler,reqData.getSigCrypto(),reqData.getDecCrypto());
    }
 catch (    WSSecurityException ex) {
      throw new XFireFault("MuleWSSInHandler: security processing failed",ex,XFireFault.SENDER);
    }
    if (wsResult == null) {
      if (doAction == WSConstants.NO_SECURITY) {
        return;
      }
 else {
        throw new XFireFault("MuleWSSInHandler: Request does not contain required Security header",XFireFault.SENDER);
      }
    }
    if (reqData.getWssConfig().isEnableSignatureConfirmation()) {
      checkSignatureConfirmation(reqData,wsResult);
    }
    WSSecurityEngineResult actionResult=WSSecurityUtil.fetchActionResult(wsResult,WSConstants.SIGN);
    if (actionResult != null) {
      X509Certificate returnCert=actionResult.getCertificate();
      if (returnCert != null) {
        if (!verifyTrust(returnCert,reqData)) {
          throw new XFireFault("MuleWSSInHandler: The certificate used for the signature is not trusted",XFireFault.SENDER);
        }
      }
    }
    if (actions.elementAt(0).equals(new Integer(16))) {
      actions.clear();
      actions.add(new Integer(2));
      actions.add(new Integer(8));
    }
    if (!checkReceiverResults(wsResult,actions)) {
      throw new XFireFault("MuleWSSInHandler: security processing failed (actions mismatch)",XFireFault.SENDER);
    }
    Vector results=null;
    if ((results=(Vector)msgContext.getProperty(WSHandlerConstants.RECV_RESULTS)) == null) {
      results=new Vector();
      msgContext.setProperty(WSHandlerConstants.RECV_RESULTS,results);
    }
    WSHandlerResult rResult=new WSHandlerResult(actor,wsResult);
    results.add(0,rResult);
    if (doDebug) {
      log.debug("MuleWSSInHandler: exit invoke()");
    }
  }
 catch (  WSSecurityException e) {
    throw new WSSecurityException(e.getErrorCode());
  }
 finally {
    reqData.clear();
    reqData=null;
  }
}
