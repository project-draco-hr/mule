{
  OAuthAdapter connector=null;
  if (!processCallback.isProtected()) {
    return processCallback.process(oauthManager.getDefaultUnauthorizedConnector());
  }
  if (((AbstractConnectedProcessor)messageProcessor).getAccessTokenId() == null) {
    throw new IllegalArgumentException("The accessTokenId cannot be null");
  }
  String _transformedToken=((String)evaluateAndTransform(muleContext,event,AbstractConnectedProcessor.class.getDeclaredField("_accessTokenIdType").getGenericType(),null,((AbstractConnectedProcessor)messageProcessor).getAccessTokenId()));
  try {
    if (logger.isDebugEnabled()) {
      logger.debug(("Attempting to acquire access token using from store for [accessTokenId=" + _transformedToken.toString()));
    }
    connector=oauthManager.acquireAccessToken(_transformedToken);
    if (connector == null) {
      throw new UnableToAcquireConnectionException();
    }
 else {
      if (logger.isDebugEnabled()) {
        logger.debug((("Access token has been acquired for [accessTokenId=" + connector.getAccessTokenId()) + "]"));
      }
    }
    return next.execute(processCallback,connector,messageProcessor,event);
  }
 catch (  Exception e) {
    if ((processCallback.getManagedExceptions() != null) && (connector != null)) {
      for (      Class<? extends Exception> exceptionClass : processCallback.getManagedExceptions()) {
        if (exceptionClass.isInstance(e)) {
          if (logger.isDebugEnabled()) {
            logger.debug((((("An exception ( " + exceptionClass.getName()) + ") has been thrown. Destroying the access token with [accessTokenId=") + connector.getAccessTokenId()) + "]"));
          }
          try {
            oauthManager.destroyAccessToken(_transformedToken,connector);
            connector=null;
          }
 catch (          Exception innerException) {
            logger.error(innerException.getMessage(),innerException);
          }
        }
      }
    }
    throw e;
  }
 finally {
    try {
      if (connector != null) {
        if (logger.isDebugEnabled()) {
          logger.debug((("Releasing the access token back into the pool [accessTokenId=" + connector.getAccessTokenId()) + "]"));
        }
        oauthManager.releaseAccessToken(_transformedToken,connector);
      }
    }
 catch (    Exception e) {
      throw new UnableToReleaseConnectionException(e);
    }
  }
}
