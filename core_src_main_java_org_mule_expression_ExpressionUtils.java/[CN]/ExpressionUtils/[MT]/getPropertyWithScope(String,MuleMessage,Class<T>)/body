{
  PropertyScope defaultScope=getScope(expression);
  if (defaultScope != null) {
    expression=expression.substring(defaultScope.getScopeName().length() + 1);
  }
 else {
    defaultScope=PropertyScope.OUTBOUND;
  }
  if (expression.contains(ALL_ARGUMENT)) {
    WildcardFilter filter=new WildcardFilter(expression);
    if (Map.class.isAssignableFrom(type)) {
      Map<String,Object> props=new HashMap<String,Object>();
      for (      String name : msg.getPropertyNames(defaultScope)) {
        if (filter.accept(name)) {
          props.put(name,msg.getProperty(name,defaultScope));
        }
      }
      return (T)returnMap(props,defaultScope);
    }
 else     if (List.class.isAssignableFrom(type)) {
      List<Object> values=new ArrayList<Object>();
      for (      String name : msg.getPropertyNames(defaultScope)) {
        if (filter.accept(name)) {
          values.add(msg.getProperty(name,defaultScope));
        }
      }
      return (T)returnList(values,defaultScope);
    }
 else {
      throw new IllegalArgumentException("Type specified is not a collection type but '" + ALL_ARGUMENT + "' was specified for all properties. Type is: "+ type);
    }
  }
 else   if (Map.class.isAssignableFrom(type)) {
    String[] names=expression.split(DELIM);
    Map<String,Object> props=new HashMap<String,Object>();
    for (    String name : names) {
      boolean required=true;
      name=name.trim();
      PropertyScope scope=getScope(name);
      if (scope != null) {
        name=name.substring(scope.getScopeName().length() + 1);
      }
 else {
        scope=defaultScope;
      }
      if (name.endsWith(OPTIONAL_ARGUMENT)) {
        name=name.substring(0,name.length() - OPTIONAL_ARGUMENT.length());
        required=false;
      }
      Object value=msg.getProperty(name,scope);
      if (value == null && required) {
        throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull("headers",scope.getScopeName() + ":" + name));
      }
 else       if (value != null) {
        props.put(name,value);
      }
    }
    return (T)returnMap(props,defaultScope);
  }
 else   if (List.class.isAssignableFrom(type)) {
    String[] names=expression.split(DELIM);
    List<Object> values=new ArrayList<Object>();
    for (    String name : names) {
      boolean required=true;
      name=name.trim();
      PropertyScope scope=getScope(name);
      if (scope != null) {
        name=name.substring(scope.getScopeName().length() + 1);
      }
 else {
        scope=defaultScope;
      }
      if (name.endsWith(OPTIONAL_ARGUMENT)) {
        name=name.substring(0,name.length() - OPTIONAL_ARGUMENT.length());
        required=false;
      }
      name=name.trim();
      Object value=msg.getProperty(name,scope);
      if (value == null && required) {
        throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull("headers-list",scope.getScopeName() + ":" + name));
      }
 else       if (value != null) {
        values.add(value);
      }
    }
    return (T)returnList(values,defaultScope);
  }
 else {
    boolean required=true;
    if (expression.endsWith(OPTIONAL_ARGUMENT)) {
      expression=expression.substring(0,expression.length() - OPTIONAL_ARGUMENT.length());
      required=false;
    }
    Object result=msg.getProperty(expression.trim(),defaultScope);
    if (result == null && required) {
      throw new RequiredValueException(CoreMessages.expressionEvaluatorReturnedNull("header",defaultScope.getScopeName() + ":" + expression));
    }
    return (T)result;
  }
}
