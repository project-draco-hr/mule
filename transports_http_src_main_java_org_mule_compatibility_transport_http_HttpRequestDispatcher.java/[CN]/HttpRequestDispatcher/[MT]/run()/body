{
  while (!disconnect.get()) {
    if (httpConnector.isStarted() && !disconnect.get()) {
      try {
        retryTemplate.execute(new RetryCallback(){
          @Override public void doWork(          RetryContext context) throws Exception {
            Socket socket=null;
            try {
              socket=serverSocket.accept();
            }
 catch (            Exception e) {
              if (!httpConnector.isDisposed() && !disconnect.get()) {
                throw new ConnectException(e,null);
              }
            }
            if (socket != null) {
              final Runnable httpRequestDispatcherWork=new HttpRequestDispatcherWork(httpConnector,socket);
              requestHandOffExecutor.execute(httpRequestDispatcherWork);
            }
          }
          @Override public String getWorkDescription(){
            String hostName=((InetSocketAddress)serverSocket.getLocalSocketAddress()).getHostName();
            int port=((InetSocketAddress)serverSocket.getLocalSocketAddress()).getPort();
            return String.format("%s://%s:%d",httpConnector.getProtocol(),hostName,port);
          }
          @Override public Connector getWorkOwner(){
            return httpConnector;
          }
        }
,workManager);
      }
 catch (      Exception e) {
        httpConnector.getMuleContext().getExceptionListener().handleException(e);
      }
    }
  }
}
