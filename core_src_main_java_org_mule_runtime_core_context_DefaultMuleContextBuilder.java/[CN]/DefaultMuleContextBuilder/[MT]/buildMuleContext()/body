{
  logger.debug("Building new DefaultMuleContext instance with MuleContextBuilder: " + this);
  DefaultMuleContext muleContext=createDefaultMuleContext();
  muleContext.setMuleConfiguration(injectMuleContextIfRequired(getMuleConfiguration(),muleContext));
  muleContext.setWorkManager(injectMuleContextIfRequired(getWorkManager(),muleContext));
  muleContext.setworkListener(getWorkListener());
  muleContext.setNotificationManager(injectMuleContextIfRequired(getNotificationManager(),muleContext));
  muleContext.setLifecycleManager(injectMuleContextIfRequired(getLifecycleManager(),muleContext));
  muleContext.setExpressionManager(injectMuleContextIfRequired(new DefaultExpressionManager(),muleContext));
  DefaultRegistryBroker registryBroker=new DefaultRegistryBroker(muleContext);
  muleContext.setRegistryBroker(registryBroker);
  MuleRegistryHelper muleRegistry=new MuleRegistryHelper(registryBroker,muleContext);
  muleContext.setMuleRegistry(muleRegistry);
  muleContext.setInjector(new RegistryDelegatingInjector(muleRegistry));
  muleContext.setLocalMuleClient(new DefaultLocalMuleClient(muleContext));
  muleContext.setExceptionListener(createExceptionListener(muleContext));
  muleContext.setExecutionClassLoader(getExecutionClassLoader());
  muleContext.setBootstrapServiceDiscoverer(injectMuleContextIfRequired(getBootstrapPropertiesServiceDiscoverer(),muleContext));
  JavaObjectSerializer defaultObjectSerializer=new JavaObjectSerializer();
  defaultObjectSerializer.setMuleContext(muleContext);
  muleContext.setObjectSerializer(defaultObjectSerializer);
  muleContext.setErrorTypeLocator(createDefaultErrorTypeLocator(createDefaultErrorTypeRepository()));
  return muleContext;
}
