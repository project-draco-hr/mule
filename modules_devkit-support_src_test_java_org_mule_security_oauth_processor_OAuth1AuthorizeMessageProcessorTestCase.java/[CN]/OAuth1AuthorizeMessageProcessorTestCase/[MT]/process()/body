{
  final String state="state";
  final String authorizeUrl="authorizeUrl";
  final String accessTokenUrl="accessTokenUrl";
  final String requestTokenUrl="requestTokenUrl";
  final String location="location";
  this.processor.setState(state);
  this.processor.setAuthorizationUrl(authorizeUrl);
  this.processor.setAccessTokenUrl(accessTokenUrl);
  this.processor.setRequestTokenUrl(requestTokenUrl);
  Mockito.when(this.adapter.authorize(Mockito.argThat(new BaseMatcher<Map<String,String>>(){
    @Override public boolean matches(    Object item){
      Map<String,String> map=(Map<String,String>)item;
      return state.equals(map.get("state"));
    }
    @Override public void describeTo(    Description description){
      description.appendText("map matcher and asserter");
    }
  }
),Mockito.eq(requestTokenUrl),Mockito.eq(accessTokenUrl),Mockito.eq(authorizeUrl),Mockito.eq(redirectUri))).thenReturn(location);
  this.processor.process(this.event);
  Mockito.verify(this.adapter).setAccessTokenUrl(accessTokenUrl);
  Mockito.verify(this.event.getMessage()).setOutboundProperty(OAuthProperties.HTTP_STATUS,"302");
  Mockito.verify(this.event.getMessage()).setOutboundProperty(OAuthProperties.CALLBACK_LOCATION,location);
  Mockito.verify(this.muleContext).fireNotification(Mockito.argThat(new OAuthNotificationMatcher(OAuthAuthorizeNotification.OAUTH_AUTHORIZATION_BEGIN,this.event)));
}
