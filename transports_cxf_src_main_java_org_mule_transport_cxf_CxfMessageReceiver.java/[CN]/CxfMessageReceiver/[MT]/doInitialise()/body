{
  try {
    Map endpointProps=getEndpoint().getProperties();
    String wsdlUrl=(String)endpointProps.get(CxfConstants.WSDL_LOCATION);
    String bindingId=(String)endpointProps.get(CxfConstants.BINDING_ID);
    String frontend=(String)endpointProps.get(CxfConstants.FRONTEND);
    String bridge=(String)endpointProps.get(CxfConstants.BRIDGE);
    String serviceClassName=(String)endpointProps.get(CxfConstants.SERVICE_CLASS);
    String mtomEnabled=(String)endpointProps.get(CxfConstants.MTOM_ENABLED);
    List<DataBinding> databinding=(List<DataBinding>)endpointProps.get(CxfConstants.DATA_BINDING);
    List<AbstractFeature> features=(List<AbstractFeature>)endpointProps.get(CxfConstants.FEATURES);
    Class<?> svcCls=null;
    Class<?> targetCls=getTargetClass();
    if (!StringUtils.isEmpty(serviceClassName)) {
      svcCls=ClassUtils.loadClass(serviceClassName,getClass());
    }
 else {
      svcCls=targetCls;
    }
    if (BooleanUtils.toBoolean(bridge)) {
      svcCls=ProviderService.class;
      frontend="jaxws";
    }
    if (StringUtils.isEmpty(frontend)) {
      frontend=connector.getDefaultFrontend();
    }
    ServerFactoryBean sfb=null;
    if (CxfConstants.SIMPLE_FRONTEND.equals(frontend)) {
      sfb=new ServerFactoryBean();
      sfb.setDataBinding(new AegisDatabinding());
    }
 else     if (CxfConstants.JAX_WS_FRONTEND.equals(frontend)) {
      sfb=new JaxWsServerFactoryBean();
    }
 else {
      throw new CreateException(CxfMessages.invalidFrontend(frontend),this);
    }
    if (databinding != null && databinding.size() > 0) {
      sfb.setDataBinding(databinding.get(0));
    }
    if (!(service.getComponent() instanceof JavaComponent)) {
      throw new InitialisationException(CxfMessages.javaComponentRequiredForInboundEndpoint(),this);
    }
 else {
      sfb.setServiceBean(((JavaComponent)service.getComponent()).getObjectFactory().getInstance());
    }
    if (bindingId != null) {
      sfb.setBindingId(bindingId);
    }
    if (features != null) {
      sfb.setFeatures(features);
    }
    if (mtomEnabled != null) {
      Map<String,Object> properties=sfb.getProperties();
      if (properties == null) {
        properties=new HashMap<String,Object>();
        sfb.setProperties(properties);
      }
      properties.put("mtom-enabled",mtomEnabled);
    }
    sfb.setInInterceptors((List<Interceptor>)endpointProps.get("inInterceptors"));
    sfb.setInFaultInterceptors((List<Interceptor>)endpointProps.get("inFaultInterceptors"));
    sfb.setOutInterceptors((List<Interceptor>)endpointProps.get("outInterceptors"));
    sfb.setOutFaultInterceptors((List<Interceptor>)endpointProps.get("outFaultInterceptors"));
    if (sfb.getInInterceptors() == null) {
      sfb.setInInterceptors(new ArrayList<Interceptor>());
    }
    sfb.getInInterceptors().add(new MuleHeadersInInterceptor());
    if (sfb.getOutInterceptors() == null) {
      sfb.setOutInterceptors(new ArrayList<Interceptor>());
    }
    sfb.getOutInterceptors().add(new MuleProtocolHeadersOutInterceptor());
    if (sfb.getOutFaultInterceptors() == null) {
      sfb.setOutFaultInterceptors(new ArrayList<Interceptor>());
    }
    sfb.getOutInterceptors().add(new MuleProtocolHeadersOutInterceptor());
    sfb.setServiceClass(svcCls);
    sfb.setAddress(getAddressWithoutQuery());
    if (wsdlUrl != null) {
      sfb.setWsdlURL(wsdlUrl);
    }
    ReflectionServiceFactoryBean svcFac=sfb.getServiceFactory();
    addIgnoredMethods(svcFac,Callable.class.getName());
    addIgnoredMethods(svcFac,Initialisable.class.getName());
    addIgnoredMethods(svcFac,Disposable.class.getName());
    addIgnoredMethods(svcFac,ServiceAware.class.getName());
    String name=(String)endpointProps.get(CxfConstants.NAME);
    String namespace=(String)endpointProps.get(CxfConstants.NAMESPACE);
    initServiceName(svcCls,name,namespace,svcFac);
    boolean sync=endpoint.isSynchronous();
    if (endpoint.getEndpointURI().getScheme().startsWith("http") || endpoint.getEndpointURI().getScheme().startsWith("servlet")) {
      sync=true;
    }
    sfb.setInvoker(new MuleInvoker(this,targetCls,sync));
    sfb.setStart(false);
    Bus bus=connector.getCxfBus();
    sfb.setBus(bus);
    initializeServerFactory(sfb);
    Configurer configurer=bus.getExtension(Configurer.class);
    if (null != configurer) {
      configurer.configureBean(sfb.getServiceFactory().getEndpointName().toString(),sfb);
    }
    server=sfb.create();
  }
 catch (  MuleException e) {
    throw new InitialisationException(e,this);
  }
catch (  ClassNotFoundException e) {
    throw new InitialisationException(e,this);
  }
catch (  Exception e) {
    throw new InitialisationException(e,this);
  }
}
