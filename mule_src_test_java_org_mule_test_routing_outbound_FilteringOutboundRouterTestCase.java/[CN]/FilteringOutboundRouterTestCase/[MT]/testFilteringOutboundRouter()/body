{
  Mock session=MuleTestUtils.getMockSession();
  OutboundMessageRouter messageRouter=new OutboundMessageRouter();
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  UMOEndpoint endpoint1=getTestEndpoint("Test1Provider",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  assertNotNull(endpoint1);
  FilteringOutboundRouter router=new FilteringOutboundRouter();
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router.setFilter(filter);
  List endpoints=new ArrayList();
  endpoints.add(endpoint1);
  router.setEndpoints(endpoints);
  assertFalse(router.isUseTemplates());
  assertEquals(filter,router.getFilter());
  UMOMessage message=new MuleMessage("test event");
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.eq(message,endpoint1));
  router.route(message,(UMOSession)session.proxy(),false);
  session.verify();
  message=new MuleMessage("test event");
  session.expectAndReturn("sendEvent",C.eq(message,endpoint1),message);
  UMOMessage result=router.route(message,(UMOSession)session.proxy(),true);
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
  message=new MuleMessage(new Exception("test event"));
  assertTrue(!router.isMatch(message));
  router.setTransformer(new AbstractTransformer(){
    public Object doTransform(    Object src,    String encoding) throws TransformerException {
      return ((Exception)src).getMessage();
    }
  }
);
  assertTrue(router.isMatch(message));
}
