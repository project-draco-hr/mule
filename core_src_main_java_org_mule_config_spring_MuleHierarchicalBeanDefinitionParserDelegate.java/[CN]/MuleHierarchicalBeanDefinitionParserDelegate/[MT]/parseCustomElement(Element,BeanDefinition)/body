{
  if (logger.isDebugEnabled()) {
    logger.debug("parsing: " + elementToString(element));
  }
  if (delegateSpringElements(element,parent)) {
    return parent;
  }
 else {
    String namespaceUri=element.getNamespaceURI();
    NamespaceHandler handler=getReaderContext().getNamespaceHandlerResolver().resolve(namespaceUri);
    if (handler == null) {
      getReaderContext().error("Unable to locate NamespaceHandler for namespace [" + namespaceUri + "]",element);
      return null;
    }
    BeanDefinition child=handler.parse(element,new ParserContext(getReaderContext(),this,parent));
    registerBean(element,child);
    boolean isFactory=null != child && null != child.getBeanClassName() && (child.getBeanClassName().equals(MapFactoryBean.class.getName()) || child.getBeanClassName().equals(PropertiesFactoryBean.class.getName()));
    if (isMuleNamespace(element) && !isFactory) {
      NodeList list=element.getChildNodes();
      for (int i=0; i < list.getLength(); i++) {
        if (list.item(i) instanceof Element) {
          parseCustomElement((Element)list.item(i),child);
        }
      }
    }
    return child;
  }
}
