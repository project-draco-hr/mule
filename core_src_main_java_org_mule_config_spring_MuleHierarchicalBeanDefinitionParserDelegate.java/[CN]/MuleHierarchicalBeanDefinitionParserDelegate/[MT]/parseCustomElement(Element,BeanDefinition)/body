{
  if (logger.isDebugEnabled()) {
    logger.debug("parsing: " + CoreXMLUtils.elementToString(element));
  }
  if (CoreXMLUtils.isBeansNamespace(element)) {
    return handleSpringElements(element,parent);
  }
 else {
    String namespaceUri=element.getNamespaceURI();
    NamespaceHandler handler=getReaderContext().getNamespaceHandlerResolver().resolve(namespaceUri);
    if (handler == null) {
      getReaderContext().error("Unable to locate NamespaceHandler for namespace [" + namespaceUri + "]",element);
      return null;
    }
    boolean isRecurse=false;
    BeanDefinition finalChild;
    do {
      ParserContext parserContext=new ParserContext(getReaderContext(),this,parent);
      finalChild=handler.parse(element,parserContext);
      registerBean(element,finalChild);
      isRecurse=isRecurse || !testFlag(finalChild,MULE_NO_RECURSE);
    }
 while (null != finalChild && testFlag(finalChild,MULE_REPEAT_PARSE));
    if (CoreXMLUtils.isMuleNamespace(element) && isRecurse) {
      NodeList list=element.getChildNodes();
      for (int i=0; i < list.getLength(); i++) {
        if (list.item(i) instanceof Element) {
          parseCustomElement((Element)list.item(i),finalChild);
        }
      }
    }
    if (testFlag(finalChild,MULE_POST_CHILDREN)) {
      ParserContext parserContext=new ParserContext(getReaderContext(),this,parent);
      finalChild=handler.parse(element,parserContext);
    }
    return finalChild;
  }
}
