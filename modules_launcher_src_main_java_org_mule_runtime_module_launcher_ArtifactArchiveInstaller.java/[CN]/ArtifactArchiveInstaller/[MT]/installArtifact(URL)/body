{
  if (!artifactUrl.toString().endsWith(".zip")) {
    throw new IllegalArgumentException("Invalid Mule artifact archive: " + artifactUrl);
  }
  final String baseName=FilenameUtils.getBaseName(artifactUrl.toString());
  if (baseName.contains("%20")) {
    throw new DeploymentInitException(MessageFactory.createStaticMessage("Mule artifact name may not contain spaces: " + baseName));
  }
  File artifactDir=null;
  boolean errorEncountered=false;
  String artifactName;
  try {
    final String fullPath=artifactUrl.toURI().toString();
    if (logger.isInfoEnabled()) {
      logger.info("Exploding a Mule artifact archive: " + fullPath);
    }
    artifactName=FilenameUtils.getBaseName(fullPath);
    artifactDir=new File(artifactParentDir,artifactName);
    final File source=new File(artifactUrl.toURI());
    FileUtils.unzip(source,artifactDir);
    if ("file".equals(artifactUrl.getProtocol())) {
      FileUtils.deleteQuietly(source);
    }
  }
 catch (  URISyntaxException e) {
    errorEncountered=true;
    final IOException ex=new IOException(e.getMessage());
    ex.fillInStackTrace();
    throw ex;
  }
catch (  IOException e) {
    errorEncountered=true;
    throw e;
  }
catch (  Throwable t) {
    errorEncountered=true;
    final String msg="Failed to install artifact from URL: " + artifactUrl;
    throw new DeploymentInitException(MessageFactory.createStaticMessage(msg),t);
  }
 finally {
    if (errorEncountered && artifactDir != null && artifactDir.exists()) {
      FileUtils.deleteTree(artifactDir);
    }
  }
  return artifactName;
}
