{
  QuickConfigurationBuilder builder=null;
  try {
    builder=new QuickConfigurationBuilder();
    RegistryFacade registry=builder.getManagementContext().getRegistry();
    registry.setProperty("doCompression","true");
    registry.setTransactionManager(new TestTransactionManagerFactory().create());
    UMOAgent agent=new JmxAgent();
    agent.setName("jmxAgent");
    registry.registerAgent(agent);
    TestConnector c=new TestConnector();
    c.setName("dummyConnector");
    c.setExceptionListener(new TestExceptionStrategy());
    registry.registerConnector(c);
    TestCompressionTransformer t=new TestCompressionTransformer();
    t.setReturnClass(String.class);
    t.setBeanProperty2(12);
    t.setContainerProperty("");
    t.setBeanProperty1("this was set from the manager properties!");
    registry.registerTransformer(t);
    NoActionTransformer t2=new NoActionTransformer();
    t2.setReturnClass(byte[].class);
    registry.registerTransformer(t2);
    JXPathFilter filter=new JXPathFilter("name");
    filter.setExpectedValue("bar");
    Map ns=new HashMap();
    ns.put("foo","http://foo.com");
    filter.setNamespaces(ns);
    builder.registerEndpoint("test://fruitBowlPublishQ","fruitBowlEndpoint",false,null,filter);
    builder.registerEndpoint("test://test.queue","waterMelonEndpoint",false);
    builder.registerEndpoint("test://AppleQueue","appleInEndpoint",true);
    builder.registerEndpoint("test://AppleResponseQueue","appleResponseEndpoint",false);
    Map props=new HashMap();
    props.put("testGlobal","value1");
    builder.registerEndpoint("test://orangeQ","orangeEndpoint",false,props);
    UMOEndpoint ep=managementContext.getRegistry().getOrCreateEndpointForUri("test://test.queue2",UMOEndpoint.ENDPOINT_TYPE_SENDER);
    ep.setName("testEPWithCS");
    SimpleRetryConnectionStrategy cs=new SimpleRetryConnectionStrategy();
    cs.setRetryCount(4);
    cs.setFrequency(3000);
    ep.setConnectionStrategy(cs);
    builder.getManagementContext().getRegistry().registerEndpoint(ep);
    builder.getManagementContext().getRegistry().unregisterModel("main");
    UMOModel model=new SedaModel();
    model.setName("main");
    TestExceptionStrategy es=new TestExceptionStrategy();
    es.addEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://component.exceptions",UMOEndpoint.ENDPOINT_TYPE_SENDER));
    model.setExceptionListener(es);
    model.setLifecycleAdapterFactory(new TestDefaultLifecycleAdapterFactory());
    model.setEntryPointResolver(new TestEntryPointResolver());
    registry.registerModel(model);
    UMOEndpoint ep1=registry.lookupEndpoint("appleInEndpoint");
    ep1.setTransformer(registry.lookupTransformer("TestCompressionTransformer"));
    UMODescriptor d=builder.createDescriptor("orange","orangeComponent",null,ep1,props);
    d.setContainer("descriptor");
    DefaultComponentExceptionStrategy dces=new DefaultComponentExceptionStrategy();
    dces.addEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://orange.exceptions",UMOEndpoint.ENDPOINT_TYPE_SENDER));
    d.setExceptionListener(dces);
    UMOInboundRouterCollection inRouter=new InboundRouterCollection();
    inRouter.setCatchAllStrategy(new ForwardingCatchAllStrategy());
    inRouter.getCatchAllStrategy().setEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://catch.all",UMOEndpoint.ENDPOINT_TYPE_SENDER));
    UMOEndpoint ep2=builder.createEndpoint("test://orange/","Orange",true,"TestCompressionTransformer");
    ep2.setResponseTransformer(registry.lookupTransformer("TestCompressionTransformer"));
    inRouter.addEndpoint(ep2);
    UMOEndpoint ep3=registry.lookupEndpoint("orangeEndpoint");
    ep3.setFilter(new PayloadTypeFilter(String.class));
    ep3.setTransformer(registry.lookupTransformer("TestCompressionTransformer"));
    Map props2=new HashMap();
    props2.put("testLocal","value1");
    ep3.setProperties(props2);
    inRouter.addEndpoint(ep3);
    d.setInboundRouter(inRouter);
    UMONestedRouterCollection nestedRouter=new NestedRouterCollection();
    NestedRouter nr1=new NestedRouter();
    nr1.setEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://do.wash",UMOEndpoint.ENDPOINT_TYPE_SENDER));
    nr1.setInterface(FruitCleaner.class);
    nr1.setMethod("wash");
    nestedRouter.addRouter(nr1);
    NestedRouter nr2=new NestedRouter();
    nr2.setEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://do.polish",UMOEndpoint.ENDPOINT_TYPE_SENDER));
    nr2.setInterface(FruitCleaner.class);
    nr2.setMethod("polish");
    nestedRouter.addRouter(nr2);
    d.setNestedRouter(nestedRouter);
    UMOResponseRouterCollection responseRouter=new ResponseRouterCollection();
    responseRouter.addEndpoint(managementContext.getRegistry().getOrCreateEndpointForUri("test://response1",UMOEndpoint.ENDPOINT_TYPE_RECEIVER));
    responseRouter.addEndpoint(registry.lookupEndpoint("appleResponseEndpoint"));
    responseRouter.addRouter(new TestResponseAggregator());
    responseRouter.setTimeout(10001);
    d.setResponseRouter(responseRouter);
    Map cprops=new HashMap();
    cprops.put("orange",new Orange());
    cprops.put("brand","Juicy Baby!");
    cprops.put("segments","9");
    cprops.put("radius","4.21");
    Map nested=new HashMap();
    nested.put("prop1","prop1");
    nested.put("prop2","prop2");
    cprops.put("mapProperties",nested);
    List nested2=new ArrayList();
    nested2.add("prop1");
    nested2.add("prop2");
    nested2.add("prop3");
    cprops.put("listProperties",nested2);
    List nested3=new ArrayList();
    nested3.add("prop4");
    nested3.add("prop5");
    nested3.add("prop6");
    cprops.put("arrayProperties",nested3);
    d.setProperties(cprops);
    registry.lookupModel("main").registerComponent(d);
    if (StringUtils.isBlank(builder.getManagementContext().getId())) {
      builder.getManagementContext().setId("" + System.currentTimeMillis());
    }
    registry.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  return builder;
}
