{
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?exchangePattern=request-response");
  assertNotNull(endpoint1);
  OutboundEndpoint mockEndpoint=RouterTestUtils.createMockEndpoint(endpoint1);
  FilteringOutboundRouter router=new EndpointMulticastingRouter();
  router.setMuleContext(muleContext);
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router.setFilter(filter);
  List<OutboundEndpoint> endpoints=new ArrayList<>();
  endpoints.add(mockEndpoint);
  router.setRoutes(new ArrayList<Processor>(endpoints));
  assertTrue(router.isUseTemplates());
  assertEquals(filter,router.getFilter());
  InternalMessage message=InternalMessage.builder().payload("test event").build();
  Flow flow=getTestFlow(muleContext);
  final EventContext context=DefaultEventContext.create(flow,TEST_CONNECTOR);
  Event event=Event.builder(context).message(message).flow(flow).build();
  when(mockEndpoint.process(any(Event.class))).thenAnswer(new MuleEventCheckAnswer(event));
  MuleSession session=mock(MuleSession.class);
  Event result=router.route(Event.builder(context).message(message).flow(flow).build());
  assertNotNull(result);
  assertEquals(message,result.getMessage());
}
