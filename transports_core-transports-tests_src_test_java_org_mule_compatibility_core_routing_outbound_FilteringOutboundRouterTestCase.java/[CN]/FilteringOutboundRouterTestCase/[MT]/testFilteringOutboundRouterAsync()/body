{
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?exchangePattern=request-response");
  assertNotNull(endpoint1);
  OutboundEndpoint mockEndpoint=RouterTestUtils.createMockEndpoint(endpoint1);
  FilteringOutboundRouter router=new EndpointMulticastingRouter();
  router.setMuleContext(muleContext);
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router.setMuleContext(muleContext);
  router.setFilter(filter);
  List<MessageProcessor> endpoints=new ArrayList<>();
  endpoints.add(mockEndpoint);
  router.setRoutes(endpoints);
  assertTrue(router.isUseTemplates());
  assertEquals(filter,router.getFilter());
  MuleMessage message=MuleMessage.builder().payload("test event").build();
  assertTrue(router.isMatch(getTestEvent(message)));
  when(mockEndpoint.process(any(MuleEvent.class))).thenAnswer(new MuleEventCheckAnswer());
  MuleSession session=mock(MuleSession.class);
  Flow flow=getTestFlow();
  router.route(new DefaultMuleEvent(create(flow),message,flow,session));
  message=MuleMessage.builder().payload(new Exception("test event")).build();
  assertTrue(!router.isMatch(getTestEvent(message)));
  router.setTransformers(Arrays.<Transformer>asList(new AbstractTransformer(){
    @Override public Object doTransform(    Object src,    Charset outputEncoding) throws TransformerException {
      return ((Exception)src).getMessage();
    }
  }
));
  assertTrue(router.isMatch(getTestEvent(message)));
}
