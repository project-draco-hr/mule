{
  if (logger.isDebugEnabled()) {
    logger.debug("Attempting to fire lifecycle phase: " + getName());
  }
  if (currentPhase.equals(name)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Not firing, already in lifecycle phase: " + getName());
    }
    return;
  }
  if (!isPhaseSupported(currentPhase)) {
    throw new IllegalStateException("Lifecycle phase: " + name + " does not support current phase: "+ currentPhase+ ". Phases supported are: "+ StringMessageUtils.toString(supportedPhases));
  }
  Set duplicates=new HashSet();
  for (Iterator iterator=orderedLifecycleObjects.iterator(); iterator.hasNext(); ) {
    LifecycleObject lo=(LifecycleObject)iterator.next();
    List targets=new LinkedList(muleContext.getRegistry().lookupObjects(lo.getType()));
    if (targets.size() > 0) {
      lo.firePreNotification(muleContext);
      for (int retryCount=0; retryCount < RETRY_MAX && targets.size() > 0; ++retryCount) {
        for (Iterator target=targets.iterator(); target.hasNext(); ) {
          Object o=target.next();
          if (duplicates.contains(o)) {
            target.remove();
          }
 else {
            if (logger.isDebugEnabled()) {
              logger.debug("lifecycle phase: " + getName() + " for object: "+ o);
            }
            LifecycleTransitionResult result=applyLifecycle(o);
            if (result.isOk()) {
              target.remove();
              duplicates.add(o);
            }
 else             if (retryCount + 1 == RETRY_MAX) {
              throw (LifecycleException)new LifecycleException(CoreMessages.exceededRetry(getName(),o),o).initCause(result.getThrowable());
            }
 else {
              logger.debug("Retry requested for " + o);
            }
          }
        }
      }
      lo.firePostNotification(muleContext);
    }
  }
}
