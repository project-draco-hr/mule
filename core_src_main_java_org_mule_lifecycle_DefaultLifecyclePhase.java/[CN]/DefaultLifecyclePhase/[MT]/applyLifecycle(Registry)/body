{
  if (logger.isDebugEnabled()) {
    logger.debug("Applying lifecycle phase: " + getName());
  }
  Set duplicates=new HashSet();
  for (Iterator iterator=orderedLifecycleObjects.iterator(); iterator.hasNext(); ) {
    LifecycleObject lo=(LifecycleObject)iterator.next();
    Collection<?> targetsObj=registry.lookupObjects(lo.getType());
    List targets=new LinkedList(targetsObj);
    if (targets.size() == 0) {
      continue;
    }
    if (lo.getType().getName().indexOf("Agent") > -1) {
      Collections.sort(targets,new Comparator(){
        public int compare(        Object o1,        Object o2){
          String name1=o1.getClass().getName();
          String name2=o2.getClass().getName();
          if (name1.indexOf("RmiRegistryAgent") > -1) {
            return -1;
          }
 else           if (name2.indexOf("RmiRegistryAgent") > -1) {
            return 1;
          }
          return 0;
        }
      }
);
    }
    lo.firePreNotification(muleContext);
    for (Iterator target=targets.iterator(); target.hasNext(); ) {
      Object o=target.next();
      if (duplicates.contains(o)) {
        target.remove();
      }
 else {
        if (logger.isDebugEnabled()) {
          logger.debug("lifecycle phase: " + getName() + " for object: "+ o);
        }
        this.applyLifecycle(o);
        target.remove();
        duplicates.add(o);
      }
    }
    lo.firePostNotification(muleContext);
  }
}
