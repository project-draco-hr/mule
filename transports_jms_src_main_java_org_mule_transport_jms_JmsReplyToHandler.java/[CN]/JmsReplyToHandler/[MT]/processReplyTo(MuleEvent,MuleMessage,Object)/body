{
  Destination replyToDestination=null;
  MessageProducer replyToProducer=null;
  Session session=null;
  try {
    if (replyTo instanceof Destination) {
      replyToDestination=(Destination)replyTo;
    }
    if (replyToDestination == null) {
      super.processReplyTo(event,returnMessage,replyTo);
      return;
    }
    Class srcType=returnMessage.getPayload().getClass();
    for (    Transformer t : getTransformers()) {
      if (t.isSourceDataTypeSupported(DataTypeFactory.create(srcType))) {
        if (t.getEndpoint() == null) {
          t.setEndpoint(getEndpoint(event,"jms://temporary"));
          break;
        }
      }
    }
    returnMessage.applyTransformers(getTransformers());
    Object payload=returnMessage.getPayload();
    if (replyToDestination instanceof Topic && replyToDestination instanceof Queue && connector.getJmsSupport() instanceof Jms102bSupport) {
      logger.error(StringMessageUtils.getBoilerPlate("ReplyTo destination implements both Queue and Topic " + "while complying with JMS 1.0.2b specification. " + "Please report your application server or JMS vendor name and version "+ "to dev<_at_>mule.codehaus.org or http://mule.mulesource.org/jira"));
    }
    final boolean topic=connector.getTopicResolver().isTopic(replyToDestination);
    session=connector.getSession(false,topic);
    Message replyToMessage=JmsMessageUtils.toMessage(payload,session);
    processMessage(replyToMessage,event);
    if (logger.isDebugEnabled()) {
      logger.debug("Sending jms reply to: " + replyToDestination + " ("+ replyToDestination.getClass().getName()+ ")");
    }
    replyToProducer=connector.getJmsSupport().createProducer(session,replyToDestination,topic);
    MuleMessage eventMsg=event.getMessage();
    String ttlString=(String)eventMsg.removeProperty(JmsConstants.TIME_TO_LIVE_PROPERTY);
    String priorityString=(String)eventMsg.removeProperty(JmsConstants.PRIORITY_PROPERTY);
    String persistentDeliveryString=(String)eventMsg.removeProperty(JmsConstants.PERSISTENT_DELIVERY_PROPERTY);
    String correlationIDString=replyToMessage.getJMSCorrelationID();
    if (StringUtils.isBlank(correlationIDString)) {
      correlationIDString=(String)eventMsg.getProperty(JmsConstants.JMS_MESSAGE_ID,PropertyScope.INBOUND);
      replyToMessage.setJMSCorrelationID(correlationIDString);
    }
    if (event.getFlowConstruct() instanceof Service) {
      ((Service)event.getFlowConstruct()).getStatistics().incSentReplyToEvent();
    }
    final ImmutableEndpoint endpoint=event.getEndpoint();
    if (ttlString == null && priorityString == null && persistentDeliveryString == null) {
      connector.getJmsSupport().send(replyToProducer,replyToMessage,topic,endpoint);
    }
 else {
      long ttl=Message.DEFAULT_TIME_TO_LIVE;
      int priority=Message.DEFAULT_PRIORITY;
      if (ttlString != null) {
        ttl=Long.parseLong(ttlString);
      }
      if (priorityString != null) {
        priority=Integer.parseInt(priorityString);
      }
      boolean persistent=StringUtils.isNotBlank(persistentDeliveryString) ? Boolean.valueOf(persistentDeliveryString) : connector.isPersistentDelivery();
      connector.getJmsSupport().send(replyToProducer,replyToMessage,persistent,priority,ttl,topic,endpoint);
    }
    if (logger.isInfoEnabled()) {
      logger.info(String.format("Reply Message sent to: %s with correlationID:%s",replyToDestination,correlationIDString));
    }
  }
 catch (  Exception e) {
    throw new DispatchException(JmsMessages.failedToCreateAndDispatchResponse(replyToDestination),returnMessage,null,e);
  }
 finally {
    connector.closeQuietly(replyToProducer);
    final Transaction transaction=TransactionCoordination.getInstance().getTransaction();
    if (transaction == null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Closing non-TX replyTo session: " + session);
      }
      connector.closeQuietly(session);
    }
 else     if (logger.isDebugEnabled()) {
      logger.debug("Not closing TX replyTo session: " + session);
    }
  }
}
