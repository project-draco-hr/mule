{
  Destination replyToDestination=null;
  MessageProducer replyToProducer=null;
  Session session=null;
  try {
    if (replyTo instanceof Destination) {
      replyToDestination=(Destination)replyTo;
    }
    if (replyToDestination == null) {
      super.processReplyTo(event,returnMessage,replyTo);
      return;
    }
    Class srcType=returnMessage.getPayload().getClass();
    EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(String.format("%s://temporary",connector.getProtocol()),muleContext);
    endpointBuilder.setConnector(jmsConnector);
    OutboundEndpoint tempEndpoint=muleContext.getEndpointFactory().getOutboundEndpoint(endpointBuilder);
    List<Transformer> defaultTransportTransformers=((org.mule.transport.AbstractConnector)jmsConnector).getDefaultOutboundTransformers(tempEndpoint);
    muleContext.getTransformationService().applyTransformers(returnMessage,null,defaultTransportTransformers);
    Object payload=returnMessage.getPayload();
    if (replyToDestination instanceof Topic && replyToDestination instanceof Queue && jmsConnector.getJmsSupport() instanceof Jms102bSupport) {
      logger.error(StringMessageUtils.getBoilerPlate("ReplyTo destination implements both Queue and Topic " + "while complying with JMS 1.0.2b specification. " + "Please report your application server or JMS vendor name and version "+ "to dev<_at_>mule.codehaus.org or http://mule.mulesoft.org/jira"));
    }
    final boolean topic=jmsConnector.getTopicResolver().isTopic(replyToDestination);
    session=jmsConnector.getSession(false,topic);
    Message replyToMessage=JmsMessageUtils.toMessage(payload,session);
    connector.getSessionHandler().storeSessionInfoToMessage(event.getSession(),returnMessage);
    toJmsMessage.setJmsProperties(returnMessage,replyToMessage);
    processMessage(replyToMessage,event);
    if (logger.isDebugEnabled()) {
      logger.debug("Sending jms reply to: " + replyToDestination + " ("+ replyToDestination.getClass().getName()+ ")");
    }
    replyToProducer=jmsConnector.getJmsSupport().createProducer(session,replyToDestination,topic);
    MuleMessage eventMsg=event.getMessage();
    String ttlString=(String)eventMsg.getOutboundProperty(JmsConstants.TIME_TO_LIVE_PROPERTY);
    String priorityString=(String)eventMsg.getOutboundProperty(JmsConstants.PRIORITY_PROPERTY);
    String persistentDeliveryString=(String)eventMsg.getOutboundProperty(JmsConstants.PERSISTENT_DELIVERY_PROPERTY);
    String correlationIDString=replyToMessage.getJMSCorrelationID();
    if (StringUtils.isBlank(correlationIDString)) {
      correlationIDString=eventMsg.getInboundProperty(JmsConstants.JMS_MESSAGE_ID);
      replyToMessage.setJMSCorrelationID(correlationIDString);
    }
    if (ttlString == null && priorityString == null && persistentDeliveryString == null) {
      jmsConnector.getJmsSupport().send(replyToProducer,replyToMessage,topic,null);
    }
 else {
      long ttl=Message.DEFAULT_TIME_TO_LIVE;
      int priority=Message.DEFAULT_PRIORITY;
      if (ttlString != null) {
        ttl=Long.parseLong(ttlString);
      }
      if (priorityString != null) {
        priority=Integer.parseInt(priorityString);
      }
      boolean persistent=StringUtils.isNotBlank(persistentDeliveryString) ? Boolean.valueOf(persistentDeliveryString) : jmsConnector.isPersistentDelivery();
      jmsConnector.getJmsSupport().send(replyToProducer,replyToMessage,persistent,priority,ttl,topic,null);
    }
    if (logger.isInfoEnabled()) {
      logger.info(String.format("Reply Message sent to: %s with correlationID:%s",replyToDestination,correlationIDString));
    }
  }
 catch (  Exception e) {
    throw new DispatchException(JmsMessages.failedToCreateAndDispatchResponse(replyToDestination),event,null,e);
  }
 finally {
    jmsConnector.closeQuietly(replyToProducer);
    jmsConnector.closeSessionIfNoTransactionActive(session);
  }
}
