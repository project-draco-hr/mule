{
  final ExtensionType config=registerExtension(configurationModel.getName());
  config.getAttributeOrAttributeGroup().add(createNameAttribute());
  final ExplicitGroup choice=new ExplicitGroup();
  choice.setMinOccurs(new BigInteger("0"));
  choice.setMaxOccurs(UNBOUNDED);
  addDynamicConfigPolicyElement(choice,configurationModel);
  for (  final ParameterModel parameterModel : configurationModel.getParameterModels()) {
    parameterModel.getType().getQualifier().accept(new AbstractDataQualifierVisitor(){
      private boolean forceOptional=false;
      @Override public void onList(){
        forceOptional=true;
        defaultOperation();
        generateCollectionElement(choice,parameterModel,true);
      }
      @Override public void onPojo(){
        forceOptional=false;
        defaultOperation();
        registerComplexTypeChildElement(choice,parameterModel.getName(),parameterModel.getDescription(),parameterModel.getType(),isRequired(parameterModel,forceOptional));
      }
      @Override protected void defaultOperation(){
        config.getAttributeOrAttributeGroup().add(createAttribute(parameterModel,isRequired(parameterModel,forceOptional)));
      }
    }
);
  }
  config.setAnnotation(createDocAnnotation(configurationModel.getDescription()));
  if (!choice.getParticle().isEmpty()) {
    config.setChoice(choice);
  }
  return this;
}
