{
  if (_parts != null)   return;
  long total=0;
  _parts=new HashMap<String,Part>();
  if (_contentType == null || !_contentType.startsWith("multipart/form-data"))   return;
  String location=__DEFAULT_MULTIPART_CONFIG.getLocation();
  location=("".equals(_config.getLocation()) ? location : _config.getLocation());
  _tmpDir=new File(location);
  if (!_tmpDir.exists())   _tmpDir.mkdirs();
  String boundary="--" + value(_contentType.substring(_contentType.indexOf("boundary=")));
  byte[] byteBoundary=(boundary + "--").getBytes("ISO-8859-1");
  byte[] bytes=readLine(_in);
  String line=bytes == null ? null : new String(bytes,"UTF-8");
  if (line == null || !line.equals(boundary)) {
    throw new IOException("Missing initial multi part boundary");
  }
  boolean lastPart=false;
  String contentDisposition=null;
  String contentType=null;
  outer:   while (!lastPart) {
    MultiMap<String> headers=new MultiMap<String>();
    while (true) {
      bytes=readLine(_in);
      if (bytes == null)       break outer;
      if (bytes.length == 0)       break;
      total+=bytes.length;
      if (_config.getMaxRequestSize() > 0 && total > _config.getMaxRequestSize())       throw new IOException("Request exceeds maxRequestSize (" + _config.getMaxRequestSize() + ")");
      line=new String(bytes,"UTF-8");
      int c=line.indexOf(':',0);
      if (c > 0) {
        String key=line.substring(0,c).trim().toLowerCase();
        String value=line.substring(c + 1,line.length()).trim();
        headers.put(key,value);
        if (key.equalsIgnoreCase("content-disposition"))         contentDisposition=value;
        if (key.equalsIgnoreCase("content-type"))         contentType=value;
      }
    }
    boolean form_data=false;
    if (contentDisposition == null) {
      throw new IOException("Missing content-disposition");
    }
    StringTokenizer tok=new StringTokenizer(contentDisposition,";");
    String name=null;
    String filename=null;
    while (tok.hasMoreTokens()) {
      String t=tok.nextToken().trim();
      String tl=t.toLowerCase();
      if (t.startsWith("form-data"))       form_data=true;
 else       if (tl.startsWith("name="))       name=value(t);
 else       if (tl.startsWith("filename="))       filename=value(t);
    }
    if (!form_data) {
      continue;
    }
    if (name == null) {
      continue;
    }
    MultiPart part=new MultiPart(name,filename);
    part.setHeaders(headers);
    part.setContentType(contentType);
    _parts.put(name,part);
    part.open();
    try {
      int state=-2;
      int c;
      boolean cr=false;
      boolean lf=false;
      while (true) {
        int b=0;
        while ((c=(state != -2) ? state : _in.read()) != -1) {
          total++;
          if (_config.getMaxRequestSize() > 0 && total > _config.getMaxRequestSize())           throw new IOException("Request exceeds maxRequestSize (" + _config.getMaxRequestSize() + ")");
          state=-2;
          if (c == 13 || c == 10) {
            if (c == 13)             state=_in.read();
            break;
          }
          if (b >= 0 && b < byteBoundary.length && c == byteBoundary[b])           b++;
 else {
            if (cr)             part.write(13);
            if (lf)             part.write(10);
            cr=lf=false;
            if (b > 0)             part.write(byteBoundary,0,b);
            b=-1;
            part.write(c);
          }
        }
        if ((b > 0 && b < byteBoundary.length - 2) || (b == byteBoundary.length - 1)) {
          if (cr)           part.write(13);
          if (lf)           part.write(10);
          cr=lf=false;
          part.write(byteBoundary,0,b);
          b=-1;
        }
        if (b > 0 || c == -1) {
          if (b == byteBoundary.length)           lastPart=true;
          if (state == 10)           state=-2;
          break;
        }
        if (cr)         part.write(13);
        if (lf)         part.write(10);
        cr=(c == 13);
        lf=(c == 10 || state == 10);
        if (state == 10)         state=-2;
      }
    }
  finally {
      part.close();
    }
  }
}
