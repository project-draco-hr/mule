{
  final AtomicInteger correlationTimeoutCount=new AtomicInteger(0);
  muleContext.registerListener(new RoutingNotificationListener<RoutingNotification>(){
    public void onNotification(    RoutingNotification notification){
      if (notification.getAction() == RoutingNotification.CORRELATION_TIMEOUT) {
        correlationTimeoutCount.incrementAndGet();
      }
    }
  }
);
  FunctionalTestComponent vortex=(FunctionalTestComponent)getComponent("vortex");
  FunctionalTestComponent aggregator=(FunctionalTestComponent)getComponent("aggregator");
  MuleClient client=new MuleClient(muleContext);
  List list=Arrays.asList("first","second");
  client.dispatch("vm://splitter",list,null);
  Thread.sleep(5000);
  assertEquals("Correlation timeout should not have happened.",0,correlationTimeoutCount.intValue());
  assertEquals("Vortex received wrong number of messages.",1,vortex.getReceivedMessagesCount());
  assertEquals("Wrong message received","second",vortex.getLastReceivedMessage());
  assertEquals("Aggregator received wrong number of messages.",1,aggregator.getReceivedMessagesCount());
  assertEquals("Wrong message received",Arrays.asList("first"),aggregator.getLastReceivedMessage());
  Thread.sleep(9000);
  assertEquals("Other messages never received by aggregator.",1,aggregator.getReceivedMessagesCount());
  assertNotNull(client.request("vm://out?connector=queue",10000));
}
