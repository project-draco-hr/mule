{
  final AtomicInteger correlationTimeoutCount=new AtomicInteger(0);
  muleContext.registerListener(new RoutingNotificationListener<RoutingNotification>(){
    @Override public void onNotification(    RoutingNotification notification){
      if (notification.getAction() == RoutingNotification.CORRELATION_TIMEOUT) {
        correlationTimeoutCount.incrementAndGet();
      }
    }
  }
);
  FunctionalTestComponent vortex=(FunctionalTestComponent)getComponent("vortex");
  FunctionalTestComponent aggregator=(FunctionalTestComponent)getComponent("aggregator");
  MuleClient client=muleContext.getClient();
  List<String> list=Arrays.asList("first","second");
  flowRunner("splitter").withPayload(list).asynchronously().run();
  Thread.sleep(RECEIVE_TIMEOUT);
  assertThat("Correlation timeout should not have happened.",correlationTimeoutCount.intValue(),is(0));
  assertThat("Vortex received wrong number of messages.",vortex.getReceivedMessagesCount(),is(1));
  assertThat("Wrong message received",vortex.getLastReceivedMessage(),is("second"));
  assertThat("Aggregator received wrong number of messages.",aggregator.getReceivedMessagesCount(),is(1));
  assertThat("Wrong message received",((List<MuleMessage>)aggregator.getLastReceivedMessage()).get(0).getPayload(),is("first"));
  new PollingProber(2 * RECEIVE_TIMEOUT,200).check(new Probe(){
    @Override public boolean isSatisfied(){
      return aggregator.getReceivedMessagesCount() == 1;
    }
    @Override public String describeFailure(){
      return "Other messages never received by aggregator.";
    }
  }
);
  assertThat(client.request("test://out",RECEIVE_TIMEOUT).getRight().isPresent(),is(true));
}
