{
  Set<String> packages=new HashSet<>();
  Set<String> resources=new HashSet<>();
  try {
    final File libraryFile=new File(URLDecoder.decode(library.getFile(),"UTF-8"));
    if (!libraryFile.exists()) {
      throw new IllegalArgumentException("Library file does not exists: " + library);
    }
    if (libraryFile.isDirectory()) {
      final Collection<File> files=listFiles(libraryFile,TrueFileFilter.TRUE,TrueFileFilter.INSTANCE);
      for (      File classFile : files) {
        final String relativePath=classFile.getAbsolutePath().substring(libraryFile.getAbsolutePath().length() + 1);
        if (relativePath.endsWith(CLASS_EXTENSION)) {
          final String packageName=getPackageName(relativePath.substring(0,relativePath.length() - CLASS_EXTENSION.length()).replace("/","."));
          packages.add(packageName);
        }
 else {
          resources.add(relativePath);
        }
      }
    }
 else {
      if (libraryFile.getName().toLowerCase().endsWith(".jar")) {
        try (ZipInputStream zip=new ZipInputStream(new FileInputStream(libraryFile))){
          for (ZipEntry entry=zip.getNextEntry(); entry != null; entry=zip.getNextEntry()) {
            if (entry.isDirectory()) {
              continue;
            }
            if (entry.getName().endsWith(CLASS_EXTENSION)) {
              final String packageName=getPackageName(entry.getName().substring(0,entry.getName().length() - CLASS_EXTENSION.length()).replace("/","."));
              packages.add(packageName);
            }
 else {
              resources.add(entry.getName());
            }
          }
        }
       }
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException("Cannot explore URL: " + library,e);
  }
  return new JarInfo(packages,resources);
}
