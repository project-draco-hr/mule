{
  LinkedInConnectorOAuth1Adapter moduleObject=null;
  try {
  }
 catch (  IllegalAccessException e) {
    throw new DefaultMuleException(CoreMessages.failedToStart("authorize"),e);
  }
catch (  InstantiationException e) {
    throw new DefaultMuleException(CoreMessages.failedToStart("authorize"),e);
  }
  if (oauthCallback == null) {
    OAuth1FetchAccessTokenMessageProcessor fetchAccessTokenMessageProcessor=new OAuth1FetchAccessTokenMessageProcessor(moduleObject);
    oauthCallback=new DefaultHttpCallback(Arrays.asList(new ExtractAuthorizationCodeMessageProcessor(Pattern.compile(this.getAuthCodeRegex())),fetchAccessTokenMessageProcessor,listener),getMuleContext(),moduleObject.getDomain(),moduleObject.getLocalPort(),moduleObject.getRemotePort(),moduleObject.getPath(),moduleObject.getAsync(),getFlowConstruct().getExceptionListener(),moduleObject.getConnector());
    fetchAccessTokenMessageProcessor.setRedirectUri(oauthCallback.getUrl());
    if (accessTokenUrl != null) {
      fetchAccessTokenMessageProcessor.setAccessTokenUrl(accessTokenUrl);
    }
 else {
      fetchAccessTokenMessageProcessor.setAccessTokenUrl(moduleObject.getAccessTokenUrl());
    }
    if (requestTokenUrl != null) {
      fetchAccessTokenMessageProcessor.setRequestTokenUrl(requestTokenUrl);
    }
 else {
      fetchAccessTokenMessageProcessor.setRequestTokenUrl(moduleObject.getRequestTokenUrl());
    }
    if (authorizationUrl != null) {
      fetchAccessTokenMessageProcessor.setAuthorizationUrl(authorizationUrl);
    }
 else {
      fetchAccessTokenMessageProcessor.setAuthorizationUrl(moduleObject.getAuthorizationUrl());
    }
    oauthCallback.start();
  }
}
