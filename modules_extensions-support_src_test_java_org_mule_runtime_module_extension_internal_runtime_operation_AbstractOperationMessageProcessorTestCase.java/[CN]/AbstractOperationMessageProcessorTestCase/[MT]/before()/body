{
  event=configureEvent();
  when(operationModel.getName()).thenReturn(getClass().getName());
  when(operationModel.getOutput()).thenReturn(new ImmutableOutputModel("Message.Payload",toMetadataType(String.class),false,emptySet()));
  when(operationModel.getExecutor()).thenReturn(operationExecutorFactory);
  when(operationModel.getModelProperty(MetadataKeyIdModelProperty.class)).thenReturn(of(new MetadataKeyIdModelProperty(ExtensionsTypeLoaderFactory.getDefault().createTypeLoader().load(String.class))));
  setRequires(operationModel,true,true);
  when(operationExecutorFactory.createExecutor(operationModel)).thenReturn(operationExecutor);
  when(operationModel.getName()).thenReturn(OPERATION_NAME);
  when(operationModel.getExceptionEnricherFactory()).thenReturn(of(exceptionEnricherFactory));
  when(exceptionEnricherFactory.createEnricher()).thenReturn(new NullExceptionEnricher());
  when(operationModel.getMetadataResolverFactory()).thenReturn(metadataResolverFactory);
  when(metadataResolverFactory.getKeyResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(metadataResolverFactory.getInputResolver("content")).thenReturn(new TestNoConfigMetadataResolver());
  when(metadataResolverFactory.getInputResolver("type")).thenReturn(new NullMetadataResolver());
  when(metadataResolverFactory.getOutputResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(metadataResolverFactory.getOutputAttributesResolver()).thenReturn(new TestNoConfigMetadataResolver());
  when(keyParamMock.getName()).thenReturn("type");
  when(keyParamMock.getType()).thenReturn(stringType);
  when(keyParamMock.getModelProperty(MetadataKeyPartModelProperty.class)).thenReturn(of(new MetadataKeyPartModelProperty(0)));
  when(keyParamMock.getModelProperty(MetadataContentModelProperty.class)).thenReturn(empty());
  when(keyParamMock.getModelProperty(QueryParameterModelProperty.class)).thenReturn(empty());
  when(contentMock.getName()).thenReturn("content");
  when(contentMock.hasDynamicType()).thenReturn(true);
  when(contentMock.getType()).thenReturn(stringType);
  when(contentMock.getModelProperty(MetadataContentModelProperty.class)).thenReturn(of(new MetadataContentModelProperty()));
  when(contentMock.getModelProperty(MetadataKeyPartModelProperty.class)).thenReturn(empty());
  when(contentMock.getModelProperty(QueryParameterModelProperty.class)).thenReturn(empty());
  when(operationModel.getParameterModels()).thenReturn(Arrays.asList(keyParamMock,contentMock));
  when(outputMock.getType()).thenReturn(stringType);
  when(outputMock.hasDynamicType()).thenReturn(true);
  when(operationModel.getOutput()).thenReturn(outputMock);
  when(operationModel.getOutputAttributes()).thenReturn(outputMock);
  when(operationExecutorFactory.createExecutor(operationModel)).thenReturn(operationExecutor);
  when(resolverSet.resolve(event)).thenReturn(parameters);
  when(configurationInstance.getName()).thenReturn(CONFIG_NAME);
  when(configurationInstance.getModel()).thenReturn(configurationModel);
  when(configurationInstance.getValue()).thenReturn(configuration);
  when(configurationInstance.getConnectionProvider()).thenReturn(of(connectionProviderWrapper));
  when(configurationProvider.get(event)).thenReturn(configurationInstance);
  when(configurationProvider.getModel()).thenReturn(configurationModel);
  when(configurationModel.getOperationModel(OPERATION_NAME)).thenReturn(of(operationModel));
  connectionManager=new DefaultConnectionManager(context);
  connectionManager.initialise();
  when(connectionProviderWrapper.getRetryPolicyTemplate()).thenReturn(connectionManager.getDefaultRetryPolicyTemplate());
  mockSubTypes(extensionModel);
  mockClassLoaderModelProperty(extensionModel,getClass().getClassLoader());
  when(extensionManager.getConfiguration(anyString(),anyObject())).thenReturn(configurationInstance);
  when(extensionManager.getConfiguration(extensionModel,event)).thenReturn(configurationInstance);
  when(configurationProvider.get(anyObject())).thenReturn(configurationInstance);
  when(extensionManager.getConfigurationProvider(extensionModel)).thenReturn(of(configurationProvider));
  when(extensionManager.getConfigurationProvider(CONFIG_NAME)).thenReturn(of(configurationProvider));
  messageProcessor=setUpOperationMessageProcessor();
}
