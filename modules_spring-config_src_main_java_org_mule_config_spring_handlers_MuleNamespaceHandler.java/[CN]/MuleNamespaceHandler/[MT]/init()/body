{
  registerIgnoredElement("mule");
  registerIgnoredElement("description");
  registerBeanDefinitionParser("configuration",new ConfigurationDefinitionParser());
  registerBeanDefinitionParser("global-property",new GlobalPropertyDefinitionParser());
  registerBeanDefinitionParser("default-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_THREADING_PROFILE));
  registerBeanDefinitionParser("default-dispatcher-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-receiver-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-service-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_SERVICE_THREADING_PROFILE));
  registerBeanDefinitionParser("threading-profile",new ThreadingProfileDefinitionParser("threadingProfile",MuleProperties.OBJECT_DEFAULT_SERVICE_THREADING_PROFILE));
  registerBeanDefinitionParser("custom-exception-strategy",new ChildDefinitionParser("exceptionListener",null));
  registerBeanDefinitionParser("default-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultServiceExceptionStrategy.class));
  registerDeprecatedBeanDefinitionParser("default-service-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultServiceExceptionStrategy.class),"Use default-exception-strategy instead.");
  registerBeanDefinitionParser("commit-transaction",new ExceptionTXFilterDefinitionParser("commitTxFilter"));
  registerBeanDefinitionParser("rollback-transaction",new ExceptionTXFilterDefinitionParser("rollbackTxFilter"));
  registerBeanDefinitionParser("custom-agent",new DefaultNameMuleOrphanDefinitionParser());
  registerBeanDefinitionParser("routeable-exception-strategy",new ChildDefinitionParser("exceptionListener",RouteableExceptionStrategy.class));
  registerBeanDefinitionParser("pooling-profile",new PoolingProfileDefinitionParser());
  registerBeanDefinitionParser("queue-profile",new ChildDefinitionParser("queueProfile",QueueProfile.class));
  registerMuleBeanDefinitionParser("notifications",new NamedDefinitionParser(MuleProperties.OBJECT_NOTIFICATION_MANAGER)).addAlias("dynamic","notificationDynamic");
  registerBeanDefinitionParser("notification",new NotificationDefinitionParser());
  registerBeanDefinitionParser("disable-notification",new NotificationDisableDefinitionParser());
  registerMuleBeanDefinitionParser("notification-listener",new ChildDefinitionParser("allListenerSubscriptionPair",ListenerSubscriptionPair.class)).addAlias("ref","listener").addReference("listener");
  registerBeanDefinitionParser("dispatcher-threading-profile",new ThreadingProfileDefinitionParser("dispatcherThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("receiver-threading-profile",new ThreadingProfileDefinitionParser("receiverThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("service-overrides",new ServiceOverridesDefinitionParser());
  registerBeanDefinitionParser("custom-connector",new MuleOrphanDefinitionParser(true));
  registerMuleBeanDefinitionParser("transformer",new ParentDefinitionParser()).addAlias(AbstractMuleBeanDefinitionParser.ATTRIBUTE_REF,"messageProcessor");
  registerBeanDefinitionParser("custom-transformer",new MessageProcessorDefinitionParser());
  registerBeanDefinitionParser("auto-transformer",new MessageProcessorDefinitionParser(AutoTransformer.class));
  registerBeanDefinitionParser("message-properties-transformer",new MessagePropertiesTransformerDefinitionParser());
  registerMuleBeanDefinitionParser("expression-transformer",new ExpressionTransformerDefinitionParser(ExpressionTransformer.class));
  registerBeanDefinitionParser("return-argument",new ChildDefinitionParser("argument",ExpressionArgument.class));
  registerBeanDefinitionParser("bean-builder-transformer",new MessageProcessorDefinitionParser(BeanBuilderTransformer.class));
  final ChildDefinitionParser beanPropertyParser=new ChildDefinitionParser("argument",ExpressionArgument.class);
  beanPropertyParser.addAlias("property-name","name");
  registerBeanDefinitionParser("bean-property",beanPropertyParser);
  registerBeanDefinitionParser("base64-encoder-transformer",new MessageProcessorDefinitionParser(Base64Encoder.class));
  registerBeanDefinitionParser("base64-decoder-transformer",new MessageProcessorDefinitionParser(Base64Decoder.class));
  registerBeanDefinitionParser("xml-entity-encoder-transformer",new MessageProcessorDefinitionParser(XmlEntityEncoder.class));
  registerBeanDefinitionParser("xml-entity-decoder-transformer",new MessageProcessorDefinitionParser(XmlEntityDecoder.class));
  registerBeanDefinitionParser("gzip-compress-transformer",new MessageProcessorDefinitionParser(GZipCompressTransformer.class));
  registerBeanDefinitionParser("gzip-uncompress-transformer",new MessageProcessorDefinitionParser(GZipUncompressTransformer.class));
  registerBeanDefinitionParser("encrypt-transformer",new MessageProcessorDefinitionParser(EncryptionTransformer.class));
  registerBeanDefinitionParser("decrypt-transformer",new MessageProcessorDefinitionParser(DecryptionTransformer.class));
  registerBeanDefinitionParser("byte-array-to-hex-string-transformer",new MessageProcessorDefinitionParser(ByteArrayToHexString.class));
  registerBeanDefinitionParser("hex-string-to-byte-array-transformer",new MessageProcessorDefinitionParser(HexStringToByteArray.class));
  registerBeanDefinitionParser("byte-array-to-object-transformer",new MessageProcessorDefinitionParser(ByteArrayToObject.class));
  registerBeanDefinitionParser("object-to-byte-array-transformer",new MessageProcessorDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("object-to-string-transformer",new MessageProcessorDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("byte-array-to-serializable-transformer",new MessageProcessorDefinitionParser(ByteArrayToSerializable.class));
  registerBeanDefinitionParser("serializable-to-byte-array-transformer",new MessageProcessorDefinitionParser(SerializableToByteArray.class));
  registerBeanDefinitionParser("byte-array-to-string-transformer",new MessageProcessorDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("string-to-byte-array-transformer",new MessageProcessorDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("append-string-transformer",new MessageProcessorDefinitionParser(StringAppendTransformer.class));
  registerBeanDefinitionParser("map-to-bean-transformer",new MessageProcessorDefinitionParser(MapToBean.class));
  registerBeanDefinitionParser("bean-to-map-transformer",new MessageProcessorDefinitionParser(BeanToMap.class));
  registerBeanDefinitionParser("custom-transaction-manager",new TransactionManagerDefinitionParser());
  registerBeanDefinitionParser("jndi-transaction-manager",new TransactionManagerDefinitionParser(GenericTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("weblogic-transaction-manager",new TransactionManagerDefinitionParser(WeblogicTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jboss-transaction-manager",new TransactionManagerDefinitionParser(JBossTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jrun-transaction-manager",new TransactionManagerDefinitionParser(JRunTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("resin-transaction-manager",new TransactionManagerDefinitionParser(Resin3TransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("websphere-transaction-manager",new TransactionManagerDefinitionParser(WebsphereTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("endpoint",new OrphanEndpointDefinitionParser(EndpointURIEndpointBuilder.class));
  registerBeanDefinitionParser("inbound-endpoint",new ChildEndpointDefinitionParser(InboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("poll",new ChildEndpointDefinitionParser(PollingMessageSourceFactoryBean.class));
  registerBeanDefinitionParser("outbound-endpoint",new ChildEndpointDefinitionParser(OutboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("custom-transaction",new TransactionDefinitionParser());
  registerBeanDefinitionParser("xa-transaction",new TransactionDefinitionParser(XaTransactionFactory.class));
  registerMuleBeanDefinitionParser("processor",new ParentDefinitionParser()).addAlias(AbstractMuleBeanDefinitionParser.ATTRIBUTE_REF,"messageProcessor");
  registerMuleBeanDefinitionParser("custom-processor",new MessageProcessorDefinitionParser()).addIgnored("name");
  registerBeanDefinitionParser("processor-chain",new MessageProcessorChainDefinitionParser());
  registerBeanDefinitionParser("response",new ResponseDefinitionParser());
  registerMuleBeanDefinitionParser("message-filter",new MessageFilterDefinitionParser());
  registerMuleBeanDefinitionParser("invoke",new MessageProcessorDefinitionParser(InvokerMessageProcessor.class)).addAlias("method","methodName").addAlias("methodArguments","argumentExpressionsString").addAlias("methodArgumentTypes","ArgumentTypes");
  registerMuleBeanDefinitionParser("enricher",new MessageEnricherDefinitionParser("messageProcessor",MessageEnricher.class)).addIgnored("source").addIgnored("target").registerPreProcessor(new CheckExclusiveAttributesAndChildren(new String[]{"source","target"},new String[]{"enrich"})).registerPreProcessor(new CheckRequiredAttributesWhenNoChildren(new String[][]{new String[]{"target"}},"enrich")).addCollection("enrichExpressionPairs");
  registerMuleBeanDefinitionParser("enrich",new ChildDefinitionParser("enrichExpressionPair",EnrichExpressionPair.class));
  registerBeanDefinitionParser("async",new ChildDefinitionParser("messageProcessor",AsyncMessageProcessorsFactoryBean.class));
  registerBeanDefinitionParser("transactional",new ChildDefinitionParser("messageProcessor",TransactionalMessageProcessorsFactoryBean.class));
  registerMuleBeanDefinitionParser("logger",new ChildDefinitionParser("messageProcessor",LoggerMessageProcessor.class));
  registerBeanDefinitionParser("composite-source",new ChildDefinitionParser("messageSource",CompositeMessageSourceFactoryBean.class));
  registerBeanDefinitionParser("model",new ModelDefinitionParser());
  registerBeanDefinitionParser("seda-model",new InheritDefinitionParser(new OrphanDefinitionParser(SedaModel.class,true),new NamedDefinitionParser()));
  registerBeanDefinitionParser("entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet",DefaultEntryPointResolverSet.class));
  registerBeanDefinitionParser("legacy-entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet",LegacyEntryPointResolverSet.class));
  registerBeanDefinitionParser("custom-entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet"));
  registerBeanDefinitionParser("custom-entry-point-resolver",new ChildDefinitionParser("entryPointResolver"));
  registerBeanDefinitionParser("callable-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",CallableEntryPointResolver.class));
  registerMuleBeanDefinitionParser("property-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",MethodHeaderPropertyEntryPointResolver.class)).addAlias("property","methodProperty");
  registerBeanDefinitionParser("method-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ExplicitMethodEntryPointResolver.class));
  registerBeanDefinitionParser("reflection-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ReflectionEntryPointResolver.class));
  registerBeanDefinitionParser("no-arguments-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",NoArgumentsEntryPointResolver.class));
  registerBeanDefinitionParser("array-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ArrayEntryPointResolver.class));
  registerMuleBeanDefinitionParser("include-entry-point",new ParentDefinitionParser());
  registerMuleBeanDefinitionParser("exclude-entry-point",new ParentDefinitionParser()).addAlias("method","ignoredMethod");
  registerMuleBeanDefinitionParser("exclude-object-methods",new IgnoreObjectMethodsDefinitionParser());
  registerBeanDefinitionParser("seda-service",new ServiceDefinitionParser(SedaService.class));
  registerBeanDefinitionParser("service",new ServiceDefinitionParser(SedaService.class));
  registerBeanDefinitionParser("custom-service",new ServiceDefinitionParser());
  registerBeanDefinitionParser("flow",new FlowDefinitionParser());
  registerBeanDefinitionParser("simple-service",new SimpleServiceDefinitionParser());
  registerBeanDefinitionParser("bridge",new BridgeDefinitionParser());
  registerBeanDefinitionParser("validator",new ValidatorDefinitionParser());
  registerBeanDefinitionParser("flow-ref",new FlowRefDefinitionParser());
  registerBeanDefinitionParser("component",new ComponentDelegatingDefinitionParser(DefaultJavaComponent.class));
  registerBeanDefinitionParser("pooled-component",new ComponentDelegatingDefinitionParser(PooledJavaComponent.class));
  registerMuleBeanDefinitionParser("binding",new BindingDefinitionParser("interfaceBinding",DefaultInterfaceBinding.class));
  registerBeanDefinitionParser("pass-through-component",new ComponentDefinitionParser(PassThroughComponent.class));
  registerBeanDefinitionParser("log-component",new SimpleComponentDefinitionParser(SimpleCallableJavaComponent.class,LogComponent.class));
  registerBeanDefinitionParser("null-component",new SimpleComponentDefinitionParser(SimpleCallableJavaComponent.class,NullComponent.class));
  registerBeanDefinitionParser("static-component",new StaticComponentDefinitionParser());
  registerIgnoredElement("return-data");
  registerBeanDefinitionParser("echo-component",new SimpleComponentDefinitionParser(DefaultJavaComponent.class,EchoComponent.class));
  registerBeanDefinitionParser("singleton-object",new ObjectFactoryDefinitionParser(SingletonObjectFactory.class,"objectFactory"));
  registerBeanDefinitionParser("prototype-object",new ObjectFactoryDefinitionParser(PrototypeObjectFactory.class,"objectFactory"));
  registerBeanDefinitionParser("spring-object",new ObjectFactoryDefinitionParser(SpringBeanLookup.class,"objectFactory"));
  registerBeanDefinitionParser("custom-lifecycle-adapter-factory",new ChildDefinitionParser("lifecycleAdapterFactory"));
  registerBeanDefinitionParser("in-memory-store",new ChildDefinitionParser("store",InMemoryObjectStore.class));
  registerBeanDefinitionParser("simple-text-file-store",new ChildDefinitionParser("store",TextFileObjectStore.class));
  registerBeanDefinitionParser("inbound",new ChildDefinitionParser("messageSource",ServiceCompositeMessageSource.class,true));
  registerBeanDefinitionParser("outbound",new ChildDefinitionParser("outboundMessageProcessor",DefaultOutboundRouterCollection.class,true));
  registerBeanDefinitionParser("async-reply",new ChildDefinitionParser("asyncReplyMessageSource",ServiceAsyncReplyCompositeMessageSource.class,true));
  registerBeanDefinitionParser("forwarding-router",new InboundRouterDefinitionParser(ForwardingConsumer.class));
  registerBeanDefinitionParser("idempotent-receiver-router",new InboundRouterDefinitionParser(IdempotentMessageFilter.class));
  registerBeanDefinitionParser("idempotent-secure-hash-receiver-router",new InboundRouterDefinitionParser(IdempotentSecureHashMessageFilter.class));
  registerBeanDefinitionParser("selective-consumer-router",new InboundRouterDefinitionParser(MessageFilter.class));
  registerBeanDefinitionParser("wire-tap-router",new InboundRouterDefinitionParser(WireTap.class));
  registerBeanDefinitionParser("custom-correlation-aggregator-router",new InboundRouterDefinitionParser());
  registerBeanDefinitionParser("collection-aggregator-router",new InboundRouterDefinitionParser(SimpleCollectionAggregator.class));
  registerBeanDefinitionParser("message-chunking-aggregator-router",new InboundRouterDefinitionParser(MessageChunkAggregator.class));
  registerBeanDefinitionParser("correlation-resequencer-router",new InboundRouterDefinitionParser(Resequencer.class));
  registerBeanDefinitionParser("custom-inbound-router",new InboundRouterDefinitionParser(null));
  registerBeanDefinitionParser("pass-through-router",new RouterDefinitionParser(OutboundPassThroughRouter.class));
  registerBeanDefinitionParser("filtering-router",new RouterDefinitionParser(FilteringOutboundRouter.class));
  registerBeanDefinitionParser("chaining-router",new RouterDefinitionParser(ChainingRouter.class));
  registerBeanDefinitionParser("endpoint-selector-router",new RouterDefinitionParser(EndpointSelector.class));
  registerBeanDefinitionParser("exception-based-router",new RouterDefinitionParser(ExceptionBasedRouter.class));
  registerBeanDefinitionParser("recipient-list-exception-based-router",new RouterDefinitionParser(ExceptionBasedRouter.class));
  registerBeanDefinitionParser("list-message-splitter-router",new RouterDefinitionParser(ListMessageSplitter.class));
  registerBeanDefinitionParser("expression-splitter-router",new RouterDefinitionParser(ExpressionMessageSplitter.class));
  registerBeanDefinitionParser("message-chunking-router",new RouterDefinitionParser(MessageChunkingRouter.class));
  registerBeanDefinitionParser("multicasting-router",new RouterDefinitionParser(MulticastingRouter.class));
  registerBeanDefinitionParser("static-recipient-list-router",new RouterDefinitionParser(StaticRecipientList.class));
  registerBeanDefinitionParser("expression-recipient-list-router",new RouterDefinitionParser(ExpressionRecipientList.class));
  registerBeanDefinitionParser("recipients",new ChildListDefinitionParser("recipients"));
  registerBeanDefinitionParser("custom-outbound-router",new RouterDefinitionParser(null));
  registerBeanDefinitionParser("reply-to",new EndpointRefParser("replyTo"));
  registerBeanDefinitionParser("custom-async-reply-router",new InboundRouterDefinitionParser(null));
  registerBeanDefinitionParser("single-async-reply-router",new InboundRouterDefinitionParser(NullMessageProcessor.class));
  registerBeanDefinitionParser("collection-async-reply-router",new InboundRouterDefinitionParser(SimpleCollectionAggregator.class));
  registerBeanDefinitionParser("idempotent-message-filter",new InboundRouterDefinitionParser(IdempotentMessageFilter.class));
  registerBeanDefinitionParser("idempotent-secure-hash-message-filter",new InboundRouterDefinitionParser(IdempotentSecureHashMessageFilter.class));
  registerBeanDefinitionParser("wire-tap",new InboundRouterDefinitionParser(WireTap.class));
  registerBeanDefinitionParser("custom-aggregator",new AggregatorDefinitionParser());
  registerBeanDefinitionParser("collection-aggregator",new AggregatorDefinitionParser(SimpleCollectionAggregator.class));
  registerBeanDefinitionParser("message-chunk-aggregator",new AggregatorDefinitionParser(MessageChunkAggregator.class));
  registerBeanDefinitionParser("resequencer",new InboundRouterDefinitionParser(Resequencer.class));
  registerBeanDefinitionParser("splitter",new SplitterDefinitionParser(ExpressionSplitter.class));
  registerBeanDefinitionParser("collection-splitter",new SplitterDefinitionParser(CollectionSplitter.class));
  registerBeanDefinitionParser("message-chunk-splitter",new SplitterDefinitionParser(MessageChunkSplitter.class));
  registerBeanDefinitionParser("custom-splitter",new SplitterDefinitionParser());
  registerBeanDefinitionParser("choice",new ChildDefinitionParser("messageProcessor",ChoiceRouterFactoryBean.class));
  registerBeanDefinitionParser("when",(ChildDefinitionParser)new ChildDefinitionParser("route",MessageProcessorFilterPairFactoryBean.class).registerPreProcessor(new CheckExclusiveAttributesAndChildren(new String[]{"expression"},new String[]{"{http://www.mulesoft.org/schema/mule/core}abstractFilterType"})));
  registerBeanDefinitionParser("otherwise",new ChildDefinitionParser("defaultRoute",MessageProcessorFilterPairFactoryBean.class));
  registerBeanDefinitionParser("all",new ChildDefinitionParser("messageProcessor",MulticastingRouter.class));
  registerBeanDefinitionParser("recipient-list",new ChildDefinitionParser("messageProcessor",ExpressionRecipientList.class));
  registerBeanDefinitionParser("request-reply",new ChildDefinitionParser("messageProcessor",SimpleAsyncRequestReplyRequester.class));
  registerBeanDefinitionParser("first-successful",new ChildDefinitionParser("messageProcessor",FirstSuccessful.class));
  registerBeanDefinitionParser("round-robin",new ChildDefinitionParser("messageProcessor",RoundRobin.class));
  registerBeanDefinitionParser("expression-message-info-mapping",new ChildDefinitionParser("messageInfoMapping",ExpressionMessageInfoMapping.class));
  registerBeanDefinitionParser("custom-message-info-mapping",new ChildDefinitionParser("messageInfoMapping"));
  registerBeanDefinitionParser("logging-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",LoggingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerBeanDefinitionParser("forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",ForwardingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerMuleBeanDefinitionParser("filter",new FilterRefDefinitionParser());
  registerBeanDefinitionParser("and-filter",new FilterDefinitionParser(AndFilter.class));
  registerBeanDefinitionParser("or-filter",new FilterDefinitionParser(OrFilter.class));
  registerBeanDefinitionParser("not-filter",new FilterDefinitionParser(NotFilter.class));
  registerBeanDefinitionParser("regex-filter",new FilterDefinitionParser(RegExFilter.class));
  registerBeanDefinitionParser("exception-type-filter",new FilterDefinitionParser(ExceptionTypeFilter.class));
  registerBeanDefinitionParser("message-property-filter",new FilterDefinitionParser(MessagePropertyFilter.class));
  registerBeanDefinitionParser("payload-type-filter",new FilterDefinitionParser(PayloadTypeFilter.class));
  registerBeanDefinitionParser("wildcard-filter",new FilterDefinitionParser(WildcardFilter.class));
  registerBeanDefinitionParser("equals-filter",new FilterDefinitionParser(EqualsFilter.class));
  registerBeanDefinitionParser("expression-filter",new FilterDefinitionParser(ExpressionFilter.class));
  registerBeanDefinitionParser("custom-filter",new FilterDefinitionParser());
  registerMuleBeanDefinitionParser("properties",new ChildMapDefinitionParser("properties")).addCollection("properties");
  registerMuleBeanDefinitionParser("property",new ChildMapEntryDefinitionParser("properties")).addCollection("properties");
  registerMuleBeanDefinitionParser("add-message-properties",new ChildMapDefinitionParser("addProperties")).addCollection("addProperties");
  registerMuleBeanDefinitionParser("add-message-property",new ChildMapEntryDefinitionParser("addProperties")).addCollection("addProperties");
  registerMuleBeanDefinitionParser("rename-message-property",new ChildMapEntryDefinitionParser("renameProperties")).addCollection("renameProperties");
  registerBeanDefinitionParser("delete-message-property",new ChildListEntryDefinitionParser("deleteProperties",ChildMapEntryDefinitionParser.KEY));
  registerMuleBeanDefinitionParser("jndi-provider-properties",new ChildMapDefinitionParser("jndiProviderProperties")).addCollection("jndiProviderProperties");
  registerMuleBeanDefinitionParser("jndi-provider-property",new ChildMapEntryDefinitionParser("jndiProviderProperties")).addCollection("jndiProviderProperties");
  registerBeanDefinitionParser("environment",new ChildMapDefinitionParser("environment"));
  registerBeanDefinitionParser("expression",new ChildDefinitionParser("expression",ExpressionConfig.class));
  registerMuleBeanDefinitionParser("security-manager",new NamedDefinitionParser(MuleProperties.OBJECT_SECURITY_MANAGER)).addIgnored("type").addIgnored("name");
  registerBeanDefinitionParser("custom-security-provider",new NameTransferDefinitionParser("providers"));
  registerMuleBeanDefinitionParser("custom-encryption-strategy",new NameTransferDefinitionParser("encryptionStrategies")).addAlias("strategy","encryptionStrategy");
  registerBeanDefinitionParser("password-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",PasswordBasedEncryptionStrategy.class));
  registerMuleBeanDefinitionParser("secret-key-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",SecretKeyEncryptionStrategy.class)).registerPreProcessor(new CheckExclusiveAttributes(new String[][]{new String[]{"key"},new String[]{"keyFactory-ref"}}));
  registerBeanDefinitionParser("encryption-security-filter",new SecurityFilterDefinitionParser(MuleEncryptionEndpointSecurityFilter.class));
  registerBeanDefinitionParser("custom-security-filter",new SecurityFilterDefinitionParser());
  registerMuleBeanDefinitionParser("interceptor-stack",new InterceptorStackDefinitionParser());
  registerBeanDefinitionParser("custom-interceptor",new InterceptorDefinitionParser());
  registerBeanDefinitionParser("timer-interceptor",new InterceptorDefinitionParser(TimerInterceptor.class));
  registerBeanDefinitionParser("logging-interceptor",new InterceptorDefinitionParser(LoggingInterceptor.class));
}
