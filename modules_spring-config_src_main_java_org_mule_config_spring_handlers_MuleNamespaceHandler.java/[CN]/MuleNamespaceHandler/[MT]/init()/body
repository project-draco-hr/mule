{
  registerIgnoredElement("mule");
  registerIgnoredElement("description");
  registerBeanDefinitionParser("configuration",new ConfigurationDefinitionParser());
  registerBeanDefinitionParser("environment-property",new EnvironmentPropertyDefinitionParser());
  registerBeanDefinitionParser("default-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_THREADING_PROFILE));
  registerBeanDefinitionParser("default-dispatcher-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-receiver-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-component-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleProperties.OBJECT_DEFAULT_COMPONENT_THREADING_PROFILE));
  registerBeanDefinitionParser("default-dispatcher-connection-strategy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("default-receiver-connection-strategy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("component-threading-profile",new ThreadingProfileDefinitionParser("threadingProfile",MuleProperties.OBJECT_DEFAULT_COMPONENT_THREADING_PROFILE));
  registerBeanDefinitionParser("custom-exception-strategy",new ChildDefinitionParser("exceptionListener",null));
  registerBeanDefinitionParser("default-service-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultServiceExceptionStrategy.class));
  registerBeanDefinitionParser("default-connector-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultExceptionStrategy.class));
  registerBeanDefinitionParser("pooling-profile",new PoolingProfileDefinitionParser());
  registerBeanDefinitionParser("queue-profile",new ChildDefinitionParser("queueProfile",QueueProfile.class));
  registerMuleBeanDefinitionParser("notifications",new NamedDefinitionParser(MuleProperties.OBJECT_NOTIFICATION_MANAGER)).addAlias("dynamic","notificationDynamic");
  registerBeanDefinitionParser("notification",new NotificationDefinitionParser());
  registerBeanDefinitionParser("disable-notification",new NotificationDisableDefinitionParser());
  registerMuleBeanDefinitionParser("notification-listener",new ChildDefinitionParser("allListenerSubscriptionPair",ListenerSubscriptionPair.class)).addAlias("ref","listener").addReference("listener");
  registerBeanDefinitionParser("dispatcher-threading-profile",new ThreadingProfileDefinitionParser("dispatcherThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("receiver-threading-profile",new ThreadingProfileDefinitionParser("receiverThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("dispatcher-connection-strategy",new ConnectionStrategyDefinitionParser("dispatcherConnectionStrategy"));
  registerBeanDefinitionParser("receiver-connection-straqtegy",new ConnectionStrategyDefinitionParser("receiverConnectionStrategy"));
  registerBeanDefinitionParser("service-overrides",new ServiceOverridesDefinitionParser());
  registerBeanDefinitionParser("custom-connector",new MuleOrphanDefinitionParser(true));
  registerBeanDefinitionParser("transformers",new ParentDefinitionParser());
  registerMuleBeanDefinitionParser("responseTransformers",new ParentDefinitionParser()).addAlias("transformer","responseTransformer");
  registerBeanDefinitionParser("transformer",new TransformerRefDefinitionParser());
  registerBeanDefinitionParser("custom-transformer",new TransformerDefinitionParser());
  registerBeanDefinitionParser("no-action-transformer",new TransformerDefinitionParser(NoActionTransformer.class));
  registerBeanDefinitionParser("message-properties-transformer",new TransformerDefinitionParser(MessagePropertiesTransformer.class));
  registerBeanDefinitionParser("base64-encoder-transformer",new TransformerDefinitionParser(Base64Encoder.class));
  registerBeanDefinitionParser("base64-decoder-transformer",new TransformerDefinitionParser(Base64Decoder.class));
  registerBeanDefinitionParser("xml-entity-encoder-transformer",new TransformerDefinitionParser(XmlEntityEncoder.class));
  registerBeanDefinitionParser("xml-entity-decoder-transformer",new TransformerDefinitionParser(XmlEntityDecoder.class));
  registerBeanDefinitionParser("gzip-compress-transformer",new TransformerDefinitionParser(GZipCompressTransformer.class));
  registerBeanDefinitionParser("gzip-uncompress-transformer",new TransformerDefinitionParser(GZipUncompressTransformer.class));
  registerBeanDefinitionParser("encrypt-transformer",new TransformerDefinitionParser(EncryptionTransformer.class));
  registerBeanDefinitionParser("decrypt-transformer",new TransformerDefinitionParser(DecryptionTransformer.class));
  registerBeanDefinitionParser("byte-array-to-hex-string-transformer",new TransformerDefinitionParser(ByteArrayToHexString.class));
  registerBeanDefinitionParser("hex-string-to-byte-array-transformer",new TransformerDefinitionParser(HexStringToByteArray.class));
  registerBeanDefinitionParser("byte-array-to-object-transformer",new TransformerDefinitionParser(ByteArrayToObject.class));
  registerBeanDefinitionParser("object-to-byte-array-transformer",new TransformerDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("object-to-string-transformer",new TransformerDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("byte-array-to-serializable-transformer",new TransformerDefinitionParser(ByteArrayToSerializable.class));
  registerBeanDefinitionParser("serializable-to-byte-array-transformer",new TransformerDefinitionParser(SerializableToByteArray.class));
  registerBeanDefinitionParser("byte-array-to-string-transformer",new TransformerDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("string-to-byte-array-transformer",new TransformerDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("append-string-transformer",new TransformerDefinitionParser(StringAppendTransformer.class));
  registerBeanDefinitionParser("custom-transaction-manager",new TransactionManagerDefinitionParser());
  registerBeanDefinitionParser("jndi-transaction-manager",new TransactionManagerDefinitionParser(GenericTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("weblogic-transaction-manager",new TransactionManagerDefinitionParser(WeblogicTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jboss-transaction-manager",new TransactionManagerDefinitionParser(JBossTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("jrun-transaction-manager",new TransactionManagerDefinitionParser(JRunTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("resin-transaction-manager",new TransactionManagerDefinitionParser(Resin3TransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("websphere-transaction-manager",new TransactionManagerDefinitionParser(WebsphereTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("endpoint",new OrphanEndpointDefinitionParser(EndpointURIEndpointBuilder.class));
  registerBeanDefinitionParser("inbound-endpoint",new GenericEndpointDefinitionParser(InboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("outbound-endpoint",new GenericEndpointDefinitionParser(OutboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("custom-transaction",new TransactionDefinitionParser());
  registerBeanDefinitionParser("custom-container",new MuleOrphanDefinitionParser(true));
  registerBeanDefinitionParser("rmi-container",new MuleOrphanDefinitionParser(RmiContainerContext.class,true));
  registerBeanDefinitionParser("jndi-container",new MuleOrphanDefinitionParser(JndiContainerContext.class,true));
  registerBeanDefinitionParser("properties-container",new MuleOrphanDefinitionParser(PropertiesContainerContext.class,true));
  registerBeanDefinitionParser("model",new ModelDefinitionParser());
  registerBeanDefinitionParser("seda-model",new InheritDefinitionParser(new OrphanDefinitionParser(SedaModel.class,true),new NamedDefinitionParser()));
  registerBeanDefinitionParser("entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet",DefaultEntryPointResolverSet.class));
  registerBeanDefinitionParser("legacy-entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet",LegacyEntryPointResolverSet.class));
  registerBeanDefinitionParser("custom-entry-point-resolver-set",new ChildDefinitionParser("entryPointResolverSet"));
  registerBeanDefinitionParser("custom-entry-point-resolver",new ChildDefinitionParser("entryPointResolver"));
  registerBeanDefinitionParser("callable-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",CallableEntryPointResolver.class));
  registerMuleBeanDefinitionParser("property-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",MethodHeaderPropertyEntryPointResolver.class)).addAlias("property","methodProperty");
  registerBeanDefinitionParser("method-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ExplicitMethodEntryPointResolver.class));
  registerBeanDefinitionParser("reflection-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ReflectionEntryPointResolver.class));
  registerBeanDefinitionParser("no-arguments-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",NoArgumentsEntryPointResolver.class));
  registerBeanDefinitionParser("array-entry-point-resolver",new ChildDefinitionParser("entryPointResolver",ArrayEntryPointResolver.class));
  registerMuleBeanDefinitionParser("include-entry-point",new ParentDefinitionParser());
  registerMuleBeanDefinitionParser("exclude-entry-point",new ParentDefinitionParser()).addAlias("method","ignoredMethod");
  registerMuleBeanDefinitionParser("exclude-object-methods",new IgnoreObjectMethodsDefinitionParser());
  registerBeanDefinitionParser("seda-service",new ServiceDefinitionParser(SedaService.class));
  registerBeanDefinitionParser("service",new ServiceDefinitionParser(SedaService.class));
  registerBeanDefinitionParser("custom-service",new ServiceDefinitionParser());
  registerBeanDefinitionParser("component",new ComponentDefinitionParser());
  registerMuleBeanDefinitionParser("binding",new BindingDefinitionParser("nestedRouter.routers",DefaultNestedRouter.class)).addCollection("nestedRouter.routers");
  registerBeanDefinitionParser("bridge-component",new SimplePojoServiceDefinitionParser(PassThroughComponent.class));
  registerBeanDefinitionParser("pass-through-component",new SimplePojoServiceDefinitionParser(PassThroughComponent.class));
  registerBeanDefinitionParser("log-component",new SimplePojoServiceDefinitionParser(LogComponent.class));
  registerBeanDefinitionParser("echo-component",new SimplePojoServiceDefinitionParser(EchoComponent.class));
  registerBeanDefinitionParser("null-component",new SimplePojoServiceDefinitionParser(NullComponent.class));
  registerBeanDefinitionParser("singleton-object",new ObjectFactoryDefinitionParser(SingletonObjectFactory.class));
  registerBeanDefinitionParser("prototype-object",new ObjectFactoryDefinitionParser(PrototypeObjectFactory.class));
  registerBeanDefinitionParser("pooled-object",new ObjectFactoryDefinitionParser(PooledObjectFactory.class));
  registerBeanDefinitionParser("spring-object",new ObjectFactoryDefinitionParser(SpringBeanLookup.class));
  registerBeanDefinitionParser("inbound",new ChildDefinitionParser("inboundRouter",DefaultInboundRouterCollection.class));
  registerBeanDefinitionParser("outbound",new ChildDefinitionParser("outboundRouter",DefaultOutboundRouterCollection.class));
  registerBeanDefinitionParser("async-reply",new ChildDefinitionParser("responseRouter",DefaultResponseRouterCollection.class));
  registerBeanDefinitionParser("forwarding-router",new RouterDefinitionParser(ForwardingConsumer.class));
  registerBeanDefinitionParser("inbound-pass-through-router",new RouterDefinitionParser(InboundPassThroughRouter.class));
  registerBeanDefinitionParser("idempotent-receiver-router",new RouterDefinitionParser(IdempotentReceiver.class));
  registerBeanDefinitionParser("idempotent-secure-hash-receiver-router",new RouterDefinitionParser(IdempotentSecureHashReceiver.class));
  registerBeanDefinitionParser("selective-consumer-router",new RouterDefinitionParser(SelectiveConsumer.class));
  registerBeanDefinitionParser("wire-tap-router",new RouterDefinitionParser(WireTap.class));
  registerBeanDefinitionParser("correlation-aggregator-router",new RouterDefinitionParser());
  registerBeanDefinitionParser("message-chunking-aggregator-router",new RouterDefinitionParser(MessageChunkingAggregator.class));
  registerBeanDefinitionParser("correlation-resequencer-router",new RouterDefinitionParser(CorrelationEventResequencer.class));
  registerBeanDefinitionParser("custom-inbound-router",new RouterDefinitionParser(null));
  registerBeanDefinitionParser("outbound-pass-through-router",new RouterDefinitionParser(OutboundPassThroughRouter.class));
  registerBeanDefinitionParser("filtering-router",new RouterDefinitionParser(FilteringOutboundRouter.class));
  registerBeanDefinitionParser("chaining-router",new RouterDefinitionParser(ChainingRouter.class));
  registerBeanDefinitionParser("endpoint-selector-router",new RouterDefinitionParser(EndpointSelector.class));
  registerBeanDefinitionParser("exception-based-router",new RouterDefinitionParser(ExceptionBasedRouter.class));
  registerBeanDefinitionParser("list-message-splitter-router",new RouterDefinitionParser(FilteringListMessageSplitter.class));
  registerBeanDefinitionParser("message-chunking-router",new RouterDefinitionParser(MessageChunkingRouter.class));
  registerBeanDefinitionParser("multicasting-router",new RouterDefinitionParser(MulticastingRouter.class));
  registerBeanDefinitionParser("static-recipient-list-router",new RouterDefinitionParser(StaticRecipientList.class));
  registerBeanDefinitionParser("recipients",new ChildListDefinitionParser("recipients"));
  registerBeanDefinitionParser("template-endpoint-router",new RouterDefinitionParser(TemplateEndpointRouter.class));
  registerBeanDefinitionParser("custom-outbound-router",new RouterDefinitionParser(null));
  registerMuleBeanDefinitionParser("reply-to",new ParentDefinitionParser()).addAlias("address","replyTo");
  registerBeanDefinitionParser("custom-async-reply-router",new RouterDefinitionParser(null));
  registerBeanDefinitionParser("single-async-reply-router",new RouterDefinitionParser(SingleResponseRouter.class));
  registerBeanDefinitionParser("function-property-extractor",new ChildDefinitionParser("propertyExtractor",FunctionPropertyExtractor.class));
  registerBeanDefinitionParser("correlation-property-extractor",new ChildDefinitionParser("propertyExtractor",CorrelationPropertiesExtractor.class));
  registerBeanDefinitionParser("custom-property-extractor",new ChildDefinitionParser("propertyExtractor"));
  registerBeanDefinitionParser("map-property-extractor",new ChildDefinitionParser("propertyExtractor",MapPayloadPropertyExtractor.class));
  registerBeanDefinitionParser("message-property-extractor",new ChildDefinitionParser("propertyExtractor",MessageHeaderPropertyExtractor.class));
  registerBeanDefinitionParser("logging-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",LoggingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerBeanDefinitionParser("forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",ForwardingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerMuleBeanDefinitionParser("filter",new ParentDefinitionParser()).addAlias("ref","filter");
  registerBeanDefinitionParser("and-filter",new FilterDefinitionParser(AndFilter.class));
  registerBeanDefinitionParser("or-filter",new FilterDefinitionParser(OrFilter.class));
  registerBeanDefinitionParser("not-filter",new FilterDefinitionParser(NotFilter.class));
  registerBeanDefinitionParser("regex-filter",new FilterDefinitionParser(RegExFilter.class));
  registerBeanDefinitionParser("exception-type-filter",new FilterDefinitionParser(ExceptionTypeFilter.class));
  registerBeanDefinitionParser("message-property-filter",new FilterDefinitionParser(MessagePropertyFilter.class));
  registerBeanDefinitionParser("payload-type-filter",new FilterDefinitionParser(PayloadTypeFilter.class));
  registerBeanDefinitionParser("wildcard-filter",new FilterDefinitionParser(WildcardFilter.class));
  registerBeanDefinitionParser("equals-filter",new FilterDefinitionParser(EqualsFilter.class));
  registerBeanDefinitionParser("custom-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("retry-connection-strategy",new ChildDefinitionParser("connectionStrategy",SimpleRetryConnectionStrategy.class));
  registerMuleBeanDefinitionParser("properties",new ChildMapDefinitionParser("properties")).addCollection("properties");
  registerMuleBeanDefinitionParser("property",new ChildMapEntryDefinitionParser("properties")).addCollection("properties");
  registerMuleBeanDefinitionParser("add-message-properties",new ChildMapDefinitionParser("addProperties")).addCollection("addProperties");
  registerMuleBeanDefinitionParser("add-message-property",new ChildMapEntryDefinitionParser("addProperties")).addCollection("addProperties");
  registerBeanDefinitionParser("delete-message-property",new ChildListEntryDefinitionParser("deleteProperties",ChildMapEntryDefinitionParser.KEY));
  registerMuleBeanDefinitionParser("jndi-provider-properties",new ChildMapDefinitionParser("jndiProviderProperties")).addCollection("jndiProviderProperties");
  registerMuleBeanDefinitionParser("jndi-provider-property",new ChildMapEntryDefinitionParser("jndiProviderProperties")).addCollection("jndiProviderProperties");
  registerBeanDefinitionParser("environment",new ChildMapDefinitionParser("environment"));
  registerMuleBeanDefinitionParser("security-manager",new NamedDefinitionParser(MuleProperties.OBJECT_SECURITY_MANAGER)).addIgnored("type").addIgnored("name");
  registerBeanDefinitionParser("custom-security-provider",new NameTransferDefinitionParser("providers"));
  registerMuleBeanDefinitionParser("custom-encryption-strategy",new NameTransferDefinitionParser("encryptionStrategies")).addAlias("strategy","encryptionStrategy");
  registerBeanDefinitionParser("password-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",PasswordBasedEncryptionStrategy.class));
  registerMuleBeanDefinitionParser("secret-key-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",SecretKeyEncryptionStrategy.class)).registerPreProcessor(new CheckExclusiveAttributes(new String[][]{new String[]{"key"},new String[]{"keyFactory-ref"}}));
  registerBeanDefinitionParser("encryption-security-filter",new ChildDefinitionParser("securityFilter",MuleEncryptionEndpointSecurityFilter.class));
}
