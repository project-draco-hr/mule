{
  Object data=event.getMessage().getPayload();
  String filename=(String)event.getMessage().findPropertyInAnyScope(SftpConnector.PROPERTY_FILENAME,null);
  if (filename == null) {
    MuleMessage message=event.getMessage();
    String outPattern=(String)endpoint.getProperty(SftpConnector.PROPERTY_OUTPUT_PATTERN);
    if (outPattern == null) {
      outPattern=(String)message.getProperty(SftpConnector.PROPERTY_OUTPUT_PATTERN,connector.getOutputPattern());
    }
    filename=generateFilename(message,outPattern);
  }
  byte[] buf;
  InputStream inputStream;
  if (data instanceof byte[]) {
    buf=(byte[])data;
    inputStream=new ByteArrayInputStream(buf);
  }
 else   if (data instanceof InputStream) {
    inputStream=(InputStream)data;
  }
 else   if (data instanceof String) {
    inputStream=new ByteArrayInputStream(((String)data).getBytes());
  }
 else {
    throw new IllegalArgumentException("Unexpected message type: java.io.InputStream, byte[], or String expected. Got " + data.getClass().getName());
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Writing file to: " + endpoint.getEndpointURI() + " ["+ filename+ "]");
  }
  SftpClient client=null;
  boolean useTempDir=false;
  String transferFilename=null;
  try {
    String serviceName=(event.getFlowConstruct() == null) ? "UNKNOWN SERVICE" : event.getFlowConstruct().getName();
    SftpNotifier notifier=new SftpNotifier(connector,event.getMessage(),endpoint,serviceName);
    client=connector.createSftpClient(endpoint,notifier);
    String destDir=endpoint.getEndpointURI().getPath();
    if (logger.isDebugEnabled()) {
      logger.debug("Connection setup successful, writing file.");
    }
    filename=client.duplicateHandling(destDir,filename,sftpUtil.getDuplicateHandling());
    transferFilename=filename;
    useTempDir=sftpUtil.isUseTempDirOutbound();
    if (useTempDir) {
      sftpUtil.cwdToTempDirOnOutbound(client,destDir);
      boolean addUniqueSuffix=sftpUtil.isUseTempFileTimestampSuffix();
      if (addUniqueSuffix) {
        transferFilename=sftpUtil.createUniqueSuffix(transferFilename);
      }
    }
    client.storeFile(transferFilename,inputStream);
    if (useTempDir) {
      client.rename(transferFilename,destDir + "/" + filename);
    }
    logger.info("Successfully wrote file '" + filename + "' to "+ endpoint.getEndpointURI());
  }
 catch (  Exception e) {
    logger.error("Unexpected exception attempting to write file, message was: " + e.getMessage(),e);
    sftpUtil.setErrorOccurredOnInputStream(inputStream);
    if (useTempDir) {
      String tempDir=sftpUtil.getTempDirOutbound();
      sftpUtil.cleanupTempDir(client,transferFilename,tempDir);
    }
    throw e;
  }
 finally {
    if (client != null) {
      connector.releaseClient(endpoint,client);
    }
    inputStream.close();
  }
}
