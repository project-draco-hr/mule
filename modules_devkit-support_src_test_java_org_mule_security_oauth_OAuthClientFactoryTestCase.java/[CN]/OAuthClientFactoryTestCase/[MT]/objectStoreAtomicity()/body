{
  OAuthState state=this.registerState();
  this.objectStore=new InMemoryObjectStore<Serializable>();
  this.objectStore.store(KEY,state);
  this.factory=new TestClientFactory(this.manager,this.objectStore);
  final AtomicInteger rejectedAccessAttemps=new AtomicInteger(0);
  final CountDownLatch latch=new CountDownLatch(4);
  final Lock lock=new ReentrantLock();
  Mockito.when(this.muleContext.getLockFactory().createLock(Mockito.anyString())).thenAnswer(new Answer<Lock>(){
    private boolean first=true;
    @Override public synchronized Lock answer(    InvocationOnMock invocation) throws Throwable {
      if (this.first) {
        this.first=false;
      }
 else {
        rejectedAccessAttemps.addAndGet(1);
      }
      latch.countDown();
      return lock;
    }
  }
);
  final TestOAuth2Adapter adapter=this.getTesteAdapter();
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        factory.passivateObject(KEY,adapter);
        factory.makeObject(KEY);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  new Thread(r).start();
  new Thread(r).start();
  latch.await(5,TimeUnit.SECONDS);
  Assert.assertEquals(3,rejectedAccessAttemps.get());
}
