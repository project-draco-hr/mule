{
  OAuthState state=this.registerState();
  final int threadCount=200;
  this.objectStore=new InMemoryObjectStore<Serializable>();
  this.objectStore.store(KEY,state);
  this.factory=new TestClientFactory(this.manager,this.objectStore);
  final TestOAuth2Adapter adapter=this.getTesteAdapter();
  final List<Exception> exceptions=new ArrayList<Exception>();
  final CountDownLatch latch=new CountDownLatch(threadCount);
  Runnable r=new Runnable(){
    @Override public void run(){
      try {
        factory.makeObject(KEY);
        factory.passivateObject(KEY,adapter);
      }
 catch (      Exception e) {
        exceptions.add(e);
      }
 finally {
        latch.countDown();
      }
    }
  }
;
  for (int i=0; i < threadCount; i++) {
    new Thread(r).start();
  }
  latch.await();
  if (!exceptions.isEmpty()) {
    StringBuilder builder=new StringBuilder(String.format("Found %d exceptions: \n\n",exceptions.size()));
    for (int i=0; i < exceptions.size(); i++) {
      Exception e=exceptions.get(i);
      builder.append(String.format("Exception number %d:\n\n",i)).append("---------\n\n").append(e.getClass().getCanonicalName()).append(" - ").append(e.getMessage());
      for (      StackTraceElement element : e.getStackTrace()) {
        builder.append("\n").append(element);
      }
      builder.append("---------\n\n");
    }
    logger.error(builder.toString());
  }
  Assert.assertTrue(exceptions.isEmpty());
}
