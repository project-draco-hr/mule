{
  try {
    MessageContext context=new MessageContext();
    XFire xfire=(XFire)ctx.getComponent().getProperties().get(XFireConnector.XFIRE_PROPERTY);
    context.setService(xfire.getServiceRegistry().getService(getService(ctx)));
    context.setXFire(xfire);
    ByteArrayOutputStream resultStream=new ByteArrayOutputStream();
    context.setProperty(Channel.BACKCHANNEL_URI,resultStream);
    XMLStreamReader reader;
    Object payload=ctx.getMessage().getPayload();
    if (payload instanceof InputStream) {
      reader=STAXUtils.createXMLStreamReader((InputStream)payload,ctx.getEncoding(),context);
    }
 else     if (payload instanceof Reader) {
      reader=STAXUtils.createXMLStreamReader((Reader)payload,context);
    }
 else {
      String text=ctx.getTransformedMessageAsString(ctx.getEncoding());
      reader=STAXUtils.createXMLStreamReader(new StringReader(text),context);
    }
    InMessage in=new InMessage(reader,getUri());
    String soapAction=getSoapAction(ctx.getMessage());
    in.setProperty(SoapConstants.SOAP_ACTION,soapAction);
    receive(context,in);
    Object result=null;
    try {
      AbstractMessage fault=context.getExchange().getFaultMessage();
      if (fault != null && fault.getBody() != null) {
        result=resultStream.toString(fault.getEncoding());
        ExceptionPayload exceptionPayload=new ExceptionPayload(new Exception(result.toString()));
        ctx.getMessage().setExceptionPayload(exceptionPayload);
      }
 else       if (context.getExchange().hasOutMessage()) {
        result=resultStream.toString(context.getExchange().getOutMessage().getEncoding());
      }
    }
 catch (    UnsupportedEncodingException e1) {
      throw new MuleException(e1);
    }
    return result;
  }
 catch (  UMOException e) {
    logger.warn("Could not dispatch message to XFire!",e);
    throw e;
  }
}
