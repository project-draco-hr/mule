{
  JobConfig jobConfig=(JobConfig)endpoint.getProperty(QuartzConnector.PROPERTY_JOB_CONFIG);
  if (jobConfig == null) {
    throw new IllegalArgumentException(CoreMessages.objectIsNull(QuartzConnector.PROPERTY_JOB_CONFIG).getMessage());
  }
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.put(QuartzConnector.PROPERTY_JOB_DYNAMIC,Boolean.TRUE);
  MuleMessage msg=event.getMessage();
  for (  String key : msg.getInvocationPropertyNames()) {
    jobDataMap.put(key,msg.getInvocationProperty(key));
  }
  for (  String key : msg.getOutboundPropertyNames()) {
    jobDataMap.put(key,msg.getOutboundProperty(key));
  }
  if (jobConfig instanceof ScheduledDispatchJobConfig) {
    ScheduledDispatchJobConfig scheduledDispatchJobConfig=(ScheduledDispatchJobConfig)jobConfig;
    String endpointRef=event.getMuleContext().getExpressionManager().parse(scheduledDispatchJobConfig.getEndpointRef(),event);
    jobDataMap.put("endpointRef",endpointRef);
  }
  Job job=null;
  Object payload=event.getMessage().getPayload();
  if (jobConfig instanceof CustomJobConfig) {
    job=((CustomJobConfig)jobConfig).getJob();
  }
 else   if (jobConfig instanceof CustomJobFromMessageConfig) {
    job=((CustomJobFromMessageConfig)jobConfig).getJob(msg);
    jobConfig=((CustomJobFromMessageConfig)jobConfig).getJobConfig(msg);
  }
  jobDataMap.put(QuartzConnector.PROPERTY_JOB_CONFIG,jobConfig);
  Class<? extends Job> jobClass=jobConfig.getJobClass();
  if (job != null) {
    jobDataMap.put(QuartzConnector.PROPERTY_JOB_OBJECT,job);
    jobClass=CustomJob.class;
  }
  jobDataMap.put(QuartzConnector.PROPERTY_PAYLOAD,payload);
  String cronExpression=jobDataMap.getString(QuartzConnector.PROPERTY_CRON_EXPRESSION);
  String repeatInterval=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_INTERVAL);
  String repeatCount=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_COUNT);
  String startDelay=jobDataMap.getString(QuartzConnector.PROPERTY_START_DELAY);
  String groupName=jobConfig.getGroupName();
  String jobGroupName=jobConfig.getJobGroupName();
  if (groupName == null) {
    groupName=QuartzConnector.DEFAULT_GROUP_NAME;
  }
  if (jobGroupName == null) {
    jobGroupName=groupName;
  }
  JobDetail jobDetail=newJob(jobClass).withIdentity(endpoint.getEndpointURI().getAddress() + "-" + event.getId(),groupName).usingJobData(jobDataMap).build();
  TriggerBuilder triggerBuilder=newTrigger().withIdentity(endpoint.getEndpointURI().toString() + "-" + event.getId(),groupName).forJob(jobDetail.getKey().getName(),jobGroupName);
  if (cronExpression != null) {
    triggerBuilder.withSchedule(cronSchedule(cronExpression));
  }
 else   if (repeatInterval != null) {
    triggerBuilder.withSchedule(simpleSchedule().withIntervalInMilliseconds(Long.parseLong(repeatInterval)).withRepeatCount(repeatCount != null ? Integer.parseInt(repeatCount) : SimpleTrigger.REPEAT_INDEFINITELY));
  }
 else {
    throw new IllegalArgumentException(QuartzMessages.cronExpressionOrIntervalMustBeSet().getMessage());
  }
  Scheduler scheduler=((QuartzConnector)this.getConnector()).getQuartzScheduler();
  long start=System.currentTimeMillis();
  if (startDelay != null) {
    start+=Long.parseLong(startDelay);
  }
  triggerBuilder.startAt(new Date(start));
  scheduler.scheduleJob(jobDetail,triggerBuilder.build());
}
