{
  getDefaultObjectStore().store(OS_KEY5,PRE_EXISTENT_OS_VALUE);
  executePollOf("watermarkWithUpdateExpression");
  prober.check(new ObjectStoreProbe(getDefaultObjectStore()){
    @Override boolean evaluate(    ObjectStore<Serializable> os) throws ObjectStoreException {
      return os.contains(OS_KEY5) && RESULT_OF_UPDATE_EXPRESSION.equals(os.retrieve(OS_KEY5)) && foo.contains(RESULT_OF_UPDATE_EXPRESSION);
    }
    @Override public String describeFailure(){
      return "The object store does not contain the key " + OS_KEY5;
    }
  }
);
}
