{
  setDescriber(describerFor(MetadataExtension.class));
  ExtensionDeclarer declarer=getDescriber().describe(new DefaultDescribingContext(MetadataExtension.class.getClassLoader()));
  ExtensionDeclaration declaration=declarer.getDeclaration();
  List<ParameterDeclaration> params;
  OperationDeclaration dynamicContent=getOperation(declaration,"contentMetadataWithKeyId");
  assertOutputType(dynamicContent.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicContent.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynamicContent.getParameters();
  assertParameterType(findParameter(params,"type"),toMetadataType(String.class),false);
  assertParameterType(findParameter(params,"content"),toMetadataType(Object.class),true);
  OperationDeclaration dynamicOutput=getOperation(declaration,"outputMetadataWithKeyId");
  assertOutputType(dynamicOutput.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicOutput.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynamicOutput.getParameters();
  assertParameterType(findParameter(params,"type"),toMetadataType(String.class),false);
  assertParameterType(findParameter(params,"content"),toMetadataType(Object.class),false);
  OperationDeclaration dynaimcContentAndOutput=getOperation(declaration,"contentAndOutputMetadataWithKeyId");
  assertOutputType(dynaimcContentAndOutput.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynaimcContentAndOutput.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynaimcContentAndOutput.getParameters();
  assertParameterType(findParameter(params,"type"),toMetadataType(String.class),false);
  assertParameterType(findParameter(params,"content"),toMetadataType(Object.class),true);
  OperationDeclaration dynamicOutputAndAttributes=getOperation(declaration,"outputAttributesWithDynamicMetadata");
  assertOutputType(dynamicOutputAndAttributes.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicOutputAndAttributes.getOutputAttributes(),toMetadataType(AbstractOutputAttributes.class),true);
  params=dynamicOutputAndAttributes.getParameters();
  assertParameterType(findParameter(params,"type"),toMetadataType(String.class),false);
  OperationDeclaration staticOutputOnly=getOperation(declaration,"typeWithDeclaredSubtypesMetadata");
  assertOutputType(staticOutputOnly.getOutput(),toMetadataType(boolean.class),false);
  assertOutputType(staticOutputOnly.getOutputAttributes(),toMetadataType(void.class),false);
  OperationDeclaration staticOutputAndAttributes=getOperation(declaration,"outputAttributesWithDeclaredSubtypesMetadata");
  assertOutputType(staticOutputAndAttributes.getOutput(),toMetadataType(Shape.class),false);
  assertOutputType(staticOutputAndAttributes.getOutputAttributes(),toMetadataType(AbstractOutputAttributes.class),false);
}
