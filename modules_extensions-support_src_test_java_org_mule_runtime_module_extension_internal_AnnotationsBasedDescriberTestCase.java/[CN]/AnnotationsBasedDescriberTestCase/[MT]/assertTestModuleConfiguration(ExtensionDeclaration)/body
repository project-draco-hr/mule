{
  assertThat(extensionDeclaration.getConfigurations(),hasSize(1));
  ConfigurationDeclaration conf=extensionDeclaration.getConfigurations().get(0);
  assertThat(conf.getName(),equalTo(DEFAULT_CONFIG_NAME));
  List<ParameterDeclaration> parameters=conf.getParameters();
  assertThat(parameters,hasSize(25));
  assertParameter(parameters,"myName","",toMetadataType(String.class),false,SUPPORTED,HEISENBERG);
  assertParameter(parameters,"age","",toMetadataType(Integer.class),false,SUPPORTED,AGE);
  assertParameter(parameters,"enemies","",listOfString(),true,SUPPORTED,null);
  assertParameter(parameters,"money","",toMetadataType(BigDecimal.class),true,SUPPORTED,null);
  assertParameter(parameters,"cancer","",toMetadataType(boolean.class),true,SUPPORTED,null);
  assertParameter(parameters,"cancer","",toMetadataType(boolean.class),true,SUPPORTED,null);
  assertParameter(parameters,"dateOfBirth","",toMetadataType(Date.class),true,SUPPORTED,null);
  assertParameter(parameters,"dateOfDeath","",toMetadataType(Calendar.class),true,SUPPORTED,null);
  assertParameter(parameters,"recipe","",TYPE_BUILDER.dictionaryType().id(Map.class.getName()).ofKey(TYPE_BUILDER.stringType().id(String.class.getName())).ofValue(TYPE_BUILDER.numberType().id("java.lang.Long")).build(),false,SUPPORTED,null);
  assertParameter(parameters,"ricinPacks","",arrayOf(Set.class,objectTypeBuilder(Ricin.class)),false,SUPPORTED,null);
  assertParameter(parameters,"nextDoor","",toMetadataType(KnockeableDoor.class),false,SUPPORTED,null);
  assertParameter(parameters,"candidateDoors","",TYPE_BUILDER.dictionaryType().id(Map.class.getName()).ofKey(TYPE_BUILDER.stringType().id(String.class.getName())).ofValue(objectTypeBuilder(KnockeableDoor.class)).build(),false,SUPPORTED,null);
  assertParameter(parameters,"initialHealth","",toMetadataType(HealthStatus.class),false,SUPPORTED,"CANCER");
  assertParameter(parameters,"finalHealth","",toMetadataType(HealthStatus.class),true,SUPPORTED,null);
  assertParameter(parameters,"labAddress","",toMetadataType(String.class),false,REQUIRED,null);
  assertParameter(parameters,"firstEndevour","",toMetadataType(String.class),false,NOT_SUPPORTED,null);
  assertParameter(parameters,"weapon","",toMetadataType(Weapon.class),false,SUPPORTED,null);
  assertParameter(parameters,"moneyFunction","",TYPE_BUILDER.objectType().id(Function.class.getName()).with(new GenericTypesAnnotation(asList(MuleEvent.class.getName(),Integer.class.getName()))).build(),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardWeapons","",arrayOf(List.class,objectTypeBuilder(Weapon.class)),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardList","",arrayOf(List.class,objectTypeBuilder(Object.class)),false,SUPPORTED,null);
  assertParameter(parameters,"wildCardWeaponMap","",TYPE_BUILDER.dictionaryType().id(Map.class.getName()).ofKey(objectTypeBuilder(Weapon.class)).ofValue(objectTypeBuilder(Object.class)).build(),false,SUPPORTED,null);
  assertParameter(parameters,"monthlyIncomes","",arrayOf(List.class,TYPE_BUILDER.numberType().id(Long.class.getName())),true,SUPPORTED,null);
  assertParameter(parameters,"labeledRicin","",TYPE_BUILDER.dictionaryType().id(Map.class.getName()).ofKey(TYPE_BUILDER.stringType().id(String.class.getName())).ofValue(objectTypeBuilder(Ricin.class)).build(),false,SUPPORTED,null);
  assertParameter(parameters,"deathsBySeasons","",TYPE_BUILDER.dictionaryType().id(Map.class.getName()).ofKey(TYPE_BUILDER.stringType().id(String.class.getName())).ofValue(TYPE_BUILDER.arrayType().id(List.class.getName()).of(TYPE_BUILDER.stringType().id(String.class.getName()))).build(),false,SUPPORTED,null);
}
