{
  registerDeprecatedBeanDefinitionParser("jxpath-filter",new FilterDefinitionParser(JXPathFilter.class),"Use an expression-filter for filtering based in a Java Object or the xpath-filter in the case of an XML document");
  registerDeprecatedBeanDefinitionParser("jaxen-filter",new FilterDefinitionParser(JaxenFilter.class),"Use xpath-filter instead");
  registerDeprecatedBeanDefinitionParser("jxpath-extractor-transformer",new MessageProcessorDefinitionParser(JXPathExtractor.class),"Use MEL for extracting information out of a Java Object or the xpath3() MEL function in the case of an XML document");
  registerBeanDefinitionParser("is-xml-filter",new FilterDefinitionParser(IsXmlFilter.class));
  registerBeanDefinitionParser("xpath-filter",new FilterDefinitionParser(XPathFilter.class));
  registerBeanDefinitionParser("schema-validation-filter",new FilterDefinitionParser(SchemaValidationFilter.class));
  registerBeanDefinitionParser("dom-to-xml-transformer",new MessageProcessorDefinitionParser(DomDocumentToXml.class));
  registerBeanDefinitionParser("dom-to-output-handler-transformer",new MessageProcessorDefinitionParser(XmlToOutputHandler.class));
  registerBeanDefinitionParser("xml-to-dom-transformer",new MessageProcessorDefinitionParser(XmlToDomDocument.class));
  registerBeanDefinitionParser("xml-prettyprinter-transformer",new MessageProcessorDefinitionParser(XmlPrettyPrinter.class));
  registerBeanDefinitionParser("xpath-extractor-transformer",new MessageProcessorDefinitionParser(XPathExtractor.class));
  registerBeanDefinitionParser("jaxb-object-to-xml-transformer",new MessageProcessorDefinitionParser(JAXBMarshallerTransformer.class));
  registerBeanDefinitionParser("jaxb-xml-to-object-transformer",new MessageProcessorDefinitionParser(JAXBUnmarshallerTransformer.class));
  registerBeanDefinitionParser("jaxb-context",new OrphanDefinitionParser(JaxbContextFactoryBean.class,true));
  registerBeanDefinitionParser("object-to-xml-transformer",new MessageProcessorDefinitionParser(ObjectToXml.class));
  registerBeanDefinitionParser("xml-to-object-transformer",new MessageProcessorDefinitionParser(XmlToObject.class));
  registerBeanDefinitionParser("alias",new ChildMapEntryDefinitionParser("aliases","name","class"));
  registerBeanDefinitionParser("converter",new ChildListEntryDefinitionParser("converters","class"));
  registerBeanDefinitionParser("namespace-manager",new NamespaceManagerDefinitionParser());
  registerBeanDefinitionParser("namespace",new ChildMapEntryDefinitionParser("namespaces","prefix","uri"));
  registerBeanDefinitionParser("xslt-transformer",new XsltTransformerDefinitionParser());
  registerBeanDefinitionParser("xslt-text",new XsltTextDefinitionParser("xslt",String.class));
  registerBeanDefinitionParser("xquery-transformer",new MessageProcessorDefinitionParser(XQueryTransformer.class));
  registerBeanDefinitionParser("xquery-text",new TextDefinitionParser("xquery",true));
  registerBeanDefinitionParser("context-property",new ChildMapEntryDefinitionParser("contextProperties","key","value"));
}
