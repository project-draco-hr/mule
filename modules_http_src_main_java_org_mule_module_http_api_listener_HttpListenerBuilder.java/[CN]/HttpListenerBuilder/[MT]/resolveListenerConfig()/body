{
  if (this.httpListenerConfig == null) {
    final Collection<DefaultHttpListenerConfig> listenerConfigs=muleContext.getRegistry().lookupObjects(DefaultHttpListenerConfig.class);
    for (    DefaultHttpListenerConfig listenerConfig : listenerConfigs) {
      if (listenerConfig.getHost().equals(this.host) && listenerConfig.getPort().equals(this.port) && (protocol == null || (protocol.equals(HttpConstants.Protocols.HTTPS) && listenerConfig.hasTlsConfig()) || (protocol.equals(HttpConstants.Protocols.HTTP) && !listenerConfig.hasTlsConfig()))) {
        if (tlsContextFactory != null) {
          throw new IllegalStateException(String.format("There's already a listener configuration with tsl configuration defined for host(%s) and port(%s)",this.host,this.port));
        }
        this.httpListenerConfig=listenerConfig;
        break;
      }
    }
    if (httpListenerConfig == null) {
      HttpListenerConfigBuilder httpListenerConfigBuilder=new HttpListenerConfigBuilder(muleContext).setHost(host).setPort(port);
      if (protocol != null && protocol.equals(HttpConstants.Protocols.HTTPS)) {
        if (tlsContextFactory == null) {
          throw new IllegalStateException("Cannot create a listener for http without a tls context provided");
        }
        httpListenerConfigBuilder.setTlsContextFactory(this.tlsContextFactory);
      }
 else       if (protocol == null && tlsContextFactory != null) {
        httpListenerConfigBuilder.setTlsContextFactory(this.tlsContextFactory);
      }
      httpListenerConfig=httpListenerConfigBuilder.build();
    }
  }
}
