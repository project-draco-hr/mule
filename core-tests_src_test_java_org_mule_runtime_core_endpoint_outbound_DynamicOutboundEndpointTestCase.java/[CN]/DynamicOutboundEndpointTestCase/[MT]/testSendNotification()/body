{
  final TestEndpointMessageNotificationListener listener=new TestEndpointMessageNotificationListener(2);
  muleContext.registerListener(listener);
  final MuleEvent outboundEvent=createTestOutboundEvent();
  OutboundEndpoint endpoint=createOutboundEndpoint(null,null,null,null,MessageExchangePattern.REQUEST_RESPONSE,null);
  MyMessageDispatcherFactory.afterSend=new Closure(){
    @Override public void execute(    Object input){
      try {
        assertTrue(listener.latchFirst.await(RECEIVE_TIMEOUT,TimeUnit.MILLISECONDS));
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
      assertThat(listener.messageNotificationList,hasSize(1));
      assertThat(listener.messageNotificationList.get(0).getAction(),is(MESSAGE_SEND_BEGIN));
      assertThat(listener.messageNotificationList.get(0).getSource(),instanceOf(MuleMessage.class));
      assertThat(listener.messageNotificationList.get(0).getSource().getPayload(),is(outboundEvent.getMessage().getPayload()));
    }
  }
;
  endpoint.process(outboundEvent);
  assertEventSent();
  assertTrue(listener.latch.await(RECEIVE_TIMEOUT,TimeUnit.MILLISECONDS));
  assertThat(listener.messageNotificationList,hasSize(2));
  assertThat(listener.messageNotificationList.get(0).getAction(),is(MESSAGE_SEND_BEGIN));
  assertThat(listener.messageNotificationList.get(1).getAction(),is(MESSAGE_SEND_END));
  assertThat(listener.messageNotificationList.get(0).getSource(),instanceOf(MuleMessage.class));
  assertThat(listener.messageNotificationList.get(1).getSource(),instanceOf(MuleMessage.class));
  assertThat(listener.messageNotificationList.get(0).getSource().getPayload(),is(outboundEvent.getMessage().getPayload()));
  assertThat(listener.messageNotificationList.get(1).getSource().getPayload(),is((Object)RESPONSE_MESSAGE));
}
