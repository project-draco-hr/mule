{
  super.initialise();
  if (expression == null) {
    throw new InitialisationException(MessageFactory.createStaticMessage("An expression must be supplied to the StandardXPathExtractor"),this);
  }
  if (namespaceManager != null) {
    if (prefixToNamespaceMap == null) {
      prefixToNamespaceMap=new HashMap<String,String>(namespaceManager.getNamespaces());
    }
 else {
      prefixToNamespaceMap.putAll(namespaceManager.getNamespaces());
    }
  }
  getXpath().setNamespaceContext(new NamespaceContext(){
    @Override public String getNamespaceURI(    String prefix){
      return prefixToNamespaceMap.get(prefix);
    }
    @Override public String getPrefix(    String namespaceURI){
      for (      Map.Entry<String,String> entry : prefixToNamespaceMap.entrySet()) {
        if (namespaceURI.equals(entry.getValue())) {
          return entry.getKey();
        }
      }
      return null;
    }
    @Override public Iterator<?> getPrefixes(    String namespaceURI){
      String prefix=getPrefix(namespaceURI);
      if (prefix == null) {
        return Collections.emptyList().iterator();
      }
 else {
        return Arrays.asList(prefix).iterator();
      }
    }
  }
);
}
