{
  checkState(artifactDescriptor != null,"artifact descriptor cannot be null");
  parentClassLoader=getParentClassLoader();
  checkState(parentClassLoader != null,"parent class loader cannot be null");
  final String artifactId=getArtifactId(artifactDescriptor);
  RegionClassLoader regionClassLoader=new RegionClassLoader(artifactId,artifactDescriptor,parentClassLoader.getClassLoader(),parentClassLoader.getClassLoaderLookupPolicy());
  List<ArtifactPluginDescriptor> effectiveArtifactPluginDescriptors=createContainerApplicationPlugins();
  effectiveArtifactPluginDescriptors.addAll(artifactPluginDescriptors);
  effectiveArtifactPluginDescriptors=new NamePluginDependenciesResolver().resolve(effectiveArtifactPluginDescriptors);
  final List<ArtifactClassLoader> pluginClassLoaders=createPluginClassLoaders(artifactId,regionClassLoader,effectiveArtifactPluginDescriptors);
  final ArtifactClassLoader artifactClassLoader=artifactClassLoaderFactory.create(artifactId,regionClassLoader,artifactDescriptor,artifactPluginClassLoaders);
  regionClassLoader.addClassLoader(artifactClassLoader,artifactDescriptor.getClassLoaderFilter());
  for (int i=0; i < effectiveArtifactPluginDescriptors.size(); i++) {
    final ArtifactClassLoaderFilter classLoaderFilter=effectiveArtifactPluginDescriptors.get(i).getClassLoaderFilter();
    regionClassLoader.addClassLoader(pluginClassLoaders.get(i),classLoaderFilter);
  }
  return artifactClassLoader;
}
