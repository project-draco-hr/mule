{
  /** 
 * map value
 */
class ProxyIndicator {
    private final WeakReference<Class> targetClassRef;
    private final boolean isProxy;
    ProxyIndicator(    Class targetClass,    boolean proxy){
      this.targetClassRef=new WeakReference<Class>(targetClass);
      isProxy=proxy;
    }
    public Class getTargetClass(){
      return targetClassRef.get();
    }
    public boolean isProxy(){
      return isProxy;
    }
  }
  String typeName=type.getName();
  ProxyIndicator indicator=(ProxyIndicator)proxyClassCache.get(typeName);
  if (indicator != null) {
    Class classInMap=indicator.getTargetClass();
    if (classInMap == type) {
      return indicator.isProxy();
    }
 else     if (classInMap != null) {
      return Proxy.isProxyClass(type);
    }
  }
  boolean isProxy=Proxy.isProxyClass(type);
  proxyClassCache.put(typeName,new ProxyIndicator(type,isProxy));
  return isProxy;
}
