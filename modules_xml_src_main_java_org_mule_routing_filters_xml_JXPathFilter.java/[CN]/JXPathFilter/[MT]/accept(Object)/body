{
  if (obj == null) {
    logger.warn("Applying JXPathFilter to null object.");
    return false;
  }
  if (pattern == null) {
    logger.warn("Expression for JXPathFilter is not set.");
    return false;
  }
  if (expectedValue == null) {
    if (pattern.endsWith("= null") || pattern.endsWith("=null")) {
      expectedValue="null";
      pattern=pattern.substring(0,pattern.lastIndexOf("="));
    }
 else {
      if (logger.isInfoEnabled()) {
        logger.info("Expected value for JXPathFilter is not set, using 'true' by default");
      }
      expectedValue=Boolean.TRUE.toString();
    }
  }
  Object xpathResult=null;
  boolean accept=false;
  if (obj instanceof Document) {
    if (namespaces == null) {
      xpathResult=((Document)obj).valueOf(pattern);
    }
 else {
      XPath xpath=DocumentHelper.createXPath(pattern);
      xpath.setNamespaceURIs(namespaces);
      xpathResult=xpath.valueOf(obj);
    }
  }
 else   if (obj instanceof String) {
    try {
      return accept(DocumentHelper.parseText((String)obj));
    }
 catch (    DocumentException e) {
      logger.warn("JXPathFilter unable to parse XML document: " + e.getMessage(),e);
      if (logger.isDebugEnabled())       logger.debug("XML = " + StringMessageUtils.truncate((String)obj,200,false));
      return false;
    }
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug("Passing object of type " + obj.getClass().getName() + " to JXPathContext");
    }
    JXPathContext context=JXPathContext.newContext(obj);
    initialise(context);
    xpathResult=context.getValue(pattern);
  }
  if (logger.isDebugEnabled()) {
    logger.debug("JXPathFilter Expression result = '" + xpathResult + "' -  Expected value = '"+ expectedValue+ "'");
  }
  if (xpathResult != null) {
    accept=xpathResult.toString().equals(expectedValue);
  }
 else {
    if (expectedValue.equals("null")) {
      accept=true;
    }
 else {
      logger.warn("JXPathFilter expression evaluates to null: " + pattern);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("JXPathFilter accept object  : " + accept);
  }
  return accept;
}
