{
  List<ParameterDeclaration> params;
  List<OperationDeclaration> operations=declaration.getConfigurations().get(0).getOperations();
  OperationDeclaration dynamicContent=getDeclaration(operations,"contentMetadataWithKeyId");
  assertOutputType(dynamicContent.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicContent.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynamicContent.getParameters();
  assertParameterType(getDeclaration(params,"type"),toMetadataType(String.class),false);
  assertParameterType(getDeclaration(params,"content"),toMetadataType(Object.class),true);
  OperationDeclaration dynamicOutput=getDeclaration(operations,"outputMetadataWithKeyId");
  assertOutputType(dynamicOutput.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicOutput.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynamicOutput.getParameters();
  assertParameterType(getDeclaration(params,"type"),toMetadataType(String.class),false);
  assertParameterType(getDeclaration(params,"content"),toMetadataType(Object.class),true);
  OperationDeclaration dynaimcContentAndOutput=getDeclaration(operations,"contentAndOutputMetadataWithKeyId");
  assertOutputType(dynaimcContentAndOutput.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynaimcContentAndOutput.getOutputAttributes(),toMetadataType(void.class),false);
  params=dynaimcContentAndOutput.getParameters();
  assertParameterType(getDeclaration(params,"type"),toMetadataType(String.class),false);
  assertParameterType(getDeclaration(params,"content"),toMetadataType(Object.class),true);
  operations=declaration.getOperations();
  OperationDeclaration dynamicOutputAndAttributes=getDeclaration(operations,"outputAttributesWithDynamicMetadata");
  assertOutputType(dynamicOutputAndAttributes.getOutput(),toMetadataType(Object.class),true);
  assertOutputType(dynamicOutputAndAttributes.getOutputAttributes(),toMetadataType(AbstractOutputAttributes.class),false);
  params=dynamicOutputAndAttributes.getParameters();
  assertParameterType(getDeclaration(params,"type"),toMetadataType(String.class),false);
  OperationDeclaration staticOutputOnly=getDeclaration(operations,"typeWithDeclaredSubtypesMetadata");
  assertOutputType(staticOutputOnly.getOutput(),toMetadataType(boolean.class),false);
  assertOutputType(staticOutputOnly.getOutputAttributes(),toMetadataType(void.class),false);
  OperationDeclaration staticOutputAndAttributes=getDeclaration(operations,"outputAttributesWithDeclaredSubtypesMetadata");
  assertOutputType(staticOutputAndAttributes.getOutput(),toMetadataType(Shape.class),false);
  assertOutputType(staticOutputAndAttributes.getOutputAttributes(),toMetadataType(AbstractOutputAttributes.class),false);
}
