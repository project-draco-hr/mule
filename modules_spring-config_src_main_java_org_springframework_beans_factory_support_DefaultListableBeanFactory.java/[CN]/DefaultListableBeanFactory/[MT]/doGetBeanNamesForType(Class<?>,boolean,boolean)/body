{
  List<String> result=new ArrayList<String>();
  for (  String beanName : this.beanDefinitionNames) {
    if (!isAlias(beanName)) {
      try {
        RootBeanDefinition mbd=getMergedLocalBeanDefinition(beanName);
        if (!mbd.isAbstract() && (allowEagerInit || ((mbd.hasBeanClass() || !mbd.isLazyInit() || isAllowEagerClassLoading())) && !requiresEagerInitForType(mbd.getFactoryBeanName()))) {
          boolean isFactoryBean=isFactoryBean(beanName,mbd);
          boolean matchFound=(allowEagerInit || !isFactoryBean || containsSingleton(beanName)) && (includeNonSingletons || isSingleton(beanName)) && isTypeMatch(beanName,type);
          if (!matchFound && isFactoryBean) {
            beanName=FACTORY_BEAN_PREFIX + beanName;
            matchFound=(includeNonSingletons || mbd.isSingleton()) && isTypeMatch(beanName,type);
          }
          if (matchFound) {
            result.add(beanName);
          }
        }
      }
 catch (      CannotLoadBeanClassException ex) {
        if (allowEagerInit) {
          throw ex;
        }
        if (this.logger.isDebugEnabled()) {
          this.logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'",ex);
        }
        onSuppressedException(ex);
      }
catch (      BeanDefinitionStoreException ex) {
        if (allowEagerInit) {
          throw ex;
        }
        if (this.logger.isDebugEnabled()) {
          this.logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'",ex);
        }
        onSuppressedException(ex);
      }
    }
  }
synchronized (manualSingletonNames) {
    for (    String beanName : this.manualSingletonNames) {
      try {
        if (isFactoryBean(beanName)) {
          if ((includeNonSingletons || isSingleton(beanName)) && isTypeMatch(beanName,type)) {
            result.add(beanName);
            continue;
          }
          beanName=FACTORY_BEAN_PREFIX + beanName;
        }
        if (isTypeMatch(beanName,type)) {
          result.add(beanName);
        }
      }
 catch (      NoSuchBeanDefinitionException ex) {
        if (logger.isDebugEnabled()) {
          logger.debug("Failed to check manually registered singleton with name '" + beanName + "'",ex);
        }
      }
    }
  }
  return StringUtils.toStringArray(result);
}
