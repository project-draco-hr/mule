{
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?exchangePattern=request-response");
  assertNotNull(endpoint1);
  OutboundEndpoint mockendpoint1=RouterTestUtils.createMockEndpoint(endpoint1);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Provider","test://Test2Provider?exchangePattern=request-response");
  assertNotNull(endpoint2);
  OutboundEndpoint mockendpoint2=RouterTestUtils.createMockEndpoint(endpoint2);
  EndpointMulticastingRouter router=createObject(EndpointMulticastingRouter.class);
  RegExFilter filter=new RegExFilter("(.*) Message");
  filter.setMuleContext(muleContext);
  router.setFilter(filter);
  List<Processor> endpoints=new ArrayList<>();
  endpoints.add(mockendpoint1);
  endpoints.add(mockendpoint2);
  router.setRoutes(endpoints);
  assertEquals(filter,router.getFilter());
  InternalMessage message=InternalMessage.builder().payload(TEST_MESSAGE).build();
  assertTrue(router.isMatch(getTestEvent(message),mock(Event.Builder.class)));
  Flow flow=getTestFlow();
  final EventContext context=DefaultEventContext.create(flow,TEST_CONNECTOR);
  Event event=Event.builder(context).message(message).flow(flow).build();
  when(mockendpoint1.process(any(Event.class))).thenAnswer(new MuleEventCheckAnswer(event));
  when(mockendpoint2.process(any(Event.class))).thenAnswer(new MuleEventCheckAnswer(event));
  MuleSession session=mock(MuleSession.class);
  Event result=router.route(Event.builder(context).message(message).flow(flow).session(session).build());
  assertNotNull(result);
  InternalMessage resultMessage=result.getMessage();
  assertNotNull(resultMessage);
  assertEquals(2,((List<InternalMessage>)resultMessage.getPayload().getValue()).size());
}
