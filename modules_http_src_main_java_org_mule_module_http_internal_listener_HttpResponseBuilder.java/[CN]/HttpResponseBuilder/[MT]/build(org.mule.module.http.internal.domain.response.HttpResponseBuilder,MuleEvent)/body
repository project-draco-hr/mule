{
  final HttpResponseHeaderBuilder httpResponseHeaderBuilder=new HttpResponseHeaderBuilder();
  if (!disablePropertiesAsHeaders) {
    final Set<String> outboundProperties=event.getMessage().getOutboundPropertyNames();
    for (    String outboundPropertyName : outboundProperties) {
      if (!outboundPropertyName.equals(HttpConstants.ResponseProperties.HTTP_STATUS_PROPERTY)) {
        final Object outboundPropertyValue=event.getMessage().getOutboundProperty(outboundPropertyName);
        httpResponseHeaderBuilder.addHeader(outboundPropertyName,outboundPropertyValue);
      }
    }
  }
  ParameterMap resolvedHeaders=resolveParams(event,HttpParamType.HEADER);
  for (  String name : resolvedHeaders.keySet()) {
    final Collection<String> paramValues=resolvedHeaders.getAll(name);
    for (    String value : paramValues) {
      httpResponseHeaderBuilder.addHeader(name,value);
    }
  }
  final String configuredContentType=httpResponseHeaderBuilder.getContentType();
  final String existingTransferEncoding=httpResponseHeaderBuilder.getTransferEncoding();
  final String existingContentLength=httpResponseHeaderBuilder.getContentLength();
  HttpEntity httpEntity;
  if (!event.getMessage().getOutboundAttachmentNames().isEmpty()) {
    if (configuredContentType == null) {
      httpResponseHeaderBuilder.addContentType(createMultipartFormDataContentType());
    }
 else     if (!configuredContentType.startsWith(MULTIPART)) {
      warnNoMultipartContentTypeButMultipartEntity(httpResponseHeaderBuilder.getContentType());
    }
    httpEntity=createMultipartEntity(event,httpResponseHeaderBuilder.getContentType());
  }
 else {
    final Object payload=event.getMessage().getPayload();
    if (payload == NullPayload.getInstance()) {
      setupContentLengthEncoding(httpResponseHeaderBuilder,0);
      httpEntity=new EmptyHttpEntity();
    }
 else     if (payload instanceof Map) {
      if (configuredContentType == null) {
        httpResponseHeaderBuilder.addContentType(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED);
      }
 else       if (!configuredContentType.startsWith(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED)) {
        warnMapPayloadButNoUrlEncodedContentType(httpResponseHeaderBuilder.getContentType());
      }
      httpEntity=createUrlEncodedEntity(event,(Map)payload);
    }
 else     if (payload instanceof InputStream) {
      if (responseStreaming == ALWAYS || (responseStreaming == AUTO && existingContentLength == null)) {
        setupChunkedEncoding(httpResponseHeaderBuilder);
        httpEntity=new InputStreamHttpEntity((InputStream)payload);
      }
 else {
        ByteArrayHttpEntity byteArrayHttpEntity=new ByteArrayHttpEntity(IOUtils.toByteArray(((InputStream)payload)));
        setupContentLengthEncoding(httpResponseHeaderBuilder,byteArrayHttpEntity.getContent().length);
        httpEntity=byteArrayHttpEntity;
      }
    }
 else {
      try {
        ByteArrayHttpEntity byteArrayHttpEntity=new ByteArrayHttpEntity(event.getMessage().getPayloadAsBytes());
        if (responseStreaming == ALWAYS || (responseStreaming == AUTO && CHUNKED.equals(existingTransferEncoding))) {
          setupChunkedEncoding(httpResponseHeaderBuilder);
        }
 else {
          setupContentLengthEncoding(httpResponseHeaderBuilder,byteArrayHttpEntity.getContent().length);
        }
        httpEntity=byteArrayHttpEntity;
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  Collection<String> headerNames=httpResponseHeaderBuilder.getHeaderNames();
  for (  String headerName : headerNames) {
    Collection<String> values=httpResponseHeaderBuilder.getHeader(headerName);
    for (    String value : values) {
      httpResponseBuilder.addHeader(headerName,value);
    }
  }
  Integer resolvedStatusCode=resolveStatusCode(event);
  if (resolvedStatusCode != null) {
    httpResponseBuilder.setStatusCode(resolvedStatusCode);
  }
  if (this.reasonPhrase != null) {
    httpResponseBuilder.setReasonPhrase(reasonPhraseEvaluator.resolveStringValue(event));
  }
  httpResponseBuilder.setEntity(httpEntity);
  return httpResponseBuilder.build();
}
