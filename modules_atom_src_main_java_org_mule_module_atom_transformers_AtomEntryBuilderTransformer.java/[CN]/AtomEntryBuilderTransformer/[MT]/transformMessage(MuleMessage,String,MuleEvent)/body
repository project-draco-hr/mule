{
  Factory factory=Abdera.getInstance().getFactory();
  Entry entry=factory.newEntry();
  for (  ExpressionArgument arg : arguments) {
    if (arg.getName().equals("title")) {
      entry.setTitle(StringUtils.trimToEmpty((String)arg.evaluate(message)));
    }
 else     if (arg.getName().equals("id")) {
      entry.setId(StringUtils.trimToEmpty((String)arg.evaluate(message)));
    }
 else     if (arg.getName().equals("summary")) {
      entry.setSummary(StringUtils.trimToEmpty((String)arg.evaluate(message)));
    }
 else     if (arg.getName().equals("content")) {
      Object content=arg.evaluate(message);
      if (content instanceof DataHandler) {
        entry.setContent((DataHandler)content);
      }
      if (content instanceof Element) {
        entry.setContent((Element)content);
      }
      if (content instanceof String) {
        entry.setContent((String)content);
      }
      if (content instanceof InputStream) {
        entry.setContent((InputStream)content);
      }
    }
 else     if (arg.getName().equals("updated")) {
      Object date=arg.evaluate(message);
      if (date instanceof Date) {
        entry.setUpdated((Date)date);
      }
 else {
        entry.setUpdated(date.toString());
      }
    }
 else     if (arg.getName().equals("edited")) {
      Object date=arg.evaluate(message);
      if (date instanceof Date) {
        entry.setEdited((Date)date);
      }
 else {
        entry.setEdited(date.toString());
      }
    }
 else     if (arg.getName().equals("published")) {
      Object date=arg.evaluate(message);
      if (date instanceof Date) {
        entry.setPublished((Date)date);
      }
 else {
        entry.setPublished(date.toString());
      }
    }
 else     if (arg.getName().equals("rights")) {
      entry.setRights((String)arg.evaluate(message));
    }
 else     if (arg.getName().equals("draft")) {
      entry.setDraft((Boolean)arg.evaluate(message));
    }
 else     if (arg.getName().equals("author")) {
      Object author=arg.evaluate(message);
      if (author instanceof Person) {
        entry.addAuthor((Person)author);
      }
 else {
        entry.addAuthor(author.toString());
      }
    }
 else     if (arg.getName().equals("category")) {
      Object category=arg.evaluate(message);
      if (category instanceof Category) {
        entry.addCategory((Category)category);
      }
 else {
        entry.addCategory(category.toString());
      }
    }
 else     if (arg.getName().equals("contributor")) {
      Object author=arg.evaluate(message);
      if (author instanceof Person) {
        entry.addContributor((Person)author);
      }
 else {
        entry.addContributor(author.toString());
      }
    }
 else     if (arg.getName().equals("link")) {
      Object link=arg.evaluate(message);
      if (link instanceof Link) {
        entry.addLink((Link)link);
      }
 else {
        entry.addLink(link.toString());
      }
    }
 else {
      throw new TransformerMessagingException(CoreMessages.propertyHasInvalidValue("entry-property.name",arg.getName()),event,this);
    }
  }
  if (Entry.class.equals(getReturnClass())) {
    return entry;
  }
 else   if (OutputHandler.class.equals(getReturnClass())) {
    final Entry e=entry;
    return new OutputHandler(){
      public void write(      MuleEvent event,      OutputStream out) throws IOException {
        FOMWriterOptions opts=new FOMWriterOptions();
        opts.setCharset(event.getEncoding());
        e.writeTo(out,opts);
      }
    }
;
  }
 else {
    return entry.toString();
  }
}
