{
  if (isTransactionRollback()) {
    return event.getMessage();
  }
  event.setSynchronous(true);
  event.getMessage().setProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,event.getEndpoint().getEndpointURI().getUri().toString());
  event=OptimizedRequestContext.unsafeSetEvent(event);
  ImmutableEndpoint endpoint=event.getEndpoint();
  if (endpoint.getSecurityFilter() != null) {
    try {
      endpoint.getSecurityFilter().authenticate(event);
    }
 catch (    org.mule.api.security.SecurityException e) {
      logger.warn("Outbound Request was made but was not authenticated: " + e.getMessage(),e);
      connector.fireNotification(new SecurityNotification(e,SecurityNotification.SECURITY_AUTHENTICATION_FAILED));
      connector.handleException(e);
      return event.getMessage();
    }
catch (    MuleException e) {
      disposeAndLogException();
      throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
    }
  }
  final MuleEvent finalEvent=event;
  try {
    RetryContext context=retryTemplate.execute(new RetryCallback(){
      public void doWork(      RetryContext context) throws Exception {
        connect();
        MuleMessage result=doSend(finalEvent);
        if (connector.isEnableMessageEvents()) {
          String component=null;
          if (finalEvent.getService() != null) {
            component=finalEvent.getService().getName();
          }
          connector.fireNotification(new EndpointMessageNotification(finalEvent.getMessage(),finalEvent.getEndpoint(),component,EndpointMessageNotification.MESSAGE_SENT));
        }
        context.addReturnMessage(result);
      }
      public String getWorkDescription(){
        return getConnectionDescription();
      }
    }
);
    return context.getFirstReturnMessage();
  }
 catch (  Exception e) {
    disposeAndLogException();
    throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
  }
}
