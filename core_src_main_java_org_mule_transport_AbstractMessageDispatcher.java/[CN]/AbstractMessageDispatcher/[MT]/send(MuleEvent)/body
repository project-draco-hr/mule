{
  if (isTransactionRollback()) {
    return event.getMessage();
  }
  event.setSynchronous(true);
  event.getMessage().setProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,event.getEndpoint().getEndpointURI().getUri().toString());
  event=OptimizedRequestContext.unsafeSetEvent(event);
  ImmutableEndpoint endpoint=event.getEndpoint();
  if (endpoint.getSecurityFilter() != null) {
    try {
      endpoint.getSecurityFilter().authenticate(event);
    }
 catch (    org.mule.api.security.SecurityException e) {
      logger.warn("Outbound Request was made but was not authenticated: " + e.getMessage(),e);
      connector.fireNotification(new SecurityNotification(e,SecurityNotification.SECURITY_AUTHENTICATION_FAILED));
      handleExceptionByService(e,event);
      return event.getMessage();
    }
catch (    Exception e) {
      handleExceptionByService(e,event);
      throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
    }
  }
  try {
    if (endpoint instanceof OutboundEndpointDecorator) {
      if (!((OutboundEndpointDecorator)endpoint).onMessage(event.getMessage())) {
        return null;
      }
    }
    connect();
    MuleMessage result=doSend(event);
    if (result != null) {
      List<String> responseProperties=((OutboundEndpoint)endpoint).getResponseProperties();
      for (      String propertyName : responseProperties) {
        Object propertyValue=event.getMessage().getProperty(propertyName);
        if (propertyValue != null) {
          result.setProperty(propertyName,propertyValue);
        }
      }
    }
    if (connector.isEnableMessageEvents()) {
      String component=null;
      if (event.getService() != null) {
        component=event.getService().getName();
      }
      connector.fireNotification(new EndpointMessageNotification(event.getMessage(),event.getEndpoint(),component,EndpointMessageNotification.MESSAGE_SENT));
    }
    return result;
  }
 catch (  DispatchException e) {
    handleExceptionByService(e,event);
    throw e;
  }
catch (  Exception e) {
    handleExceptionByService(e,event);
    throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
  }
}
