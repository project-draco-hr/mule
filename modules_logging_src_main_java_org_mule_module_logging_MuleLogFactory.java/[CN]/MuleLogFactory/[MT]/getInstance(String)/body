{
  final ClassLoader ccl=Thread.currentThread().getContextClassLoader();
  ConcurrentMap<String,Log> loggerMap=repository.get(ccl == null ? NO_CCL_CLASSLOADER : ccl.hashCode());
  if (loggerMap == null) {
    loggerMap=new ConcurrentHashMap<String,Log>();
    final ConcurrentMap<String,Log> previous=repository.putIfAbsent(ccl == null ? NO_CCL_CLASSLOADER : ccl.hashCode(),loggerMap);
    if (previous != null) {
      loggerMap=previous;
    }
    if (ccl != null) {
      refs.put(new PhantomReference<ClassLoader>(ccl,referenceQueue),ccl.hashCode());
    }
  }
  Log instance=loggerMap.get(name);
  if (instance == null) {
    Logger logger=LoggerFactory.getLogger(name);
    if (logger instanceof LocationAwareLogger) {
      instance=new MuleLocationAwareLog((LocationAwareLogger)logger);
    }
 else {
      instance=new MuleLog(logger);
    }
    final Log previous=loggerMap.putIfAbsent(name,instance);
    if (previous != null) {
      instance=previous;
    }
  }
  return instance;
}
