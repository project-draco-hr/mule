{
  LinkedList<Processor> tempList=new LinkedList<>();
  final LinkedList<Processor> processorsForLifecycle=new LinkedList<>();
  for (int i=processors.size() - 1; i >= 0; i--) {
    Processor processor=initializeMessageProcessor(processors.get(i));
    if (processor instanceof InterceptingMessageProcessor) {
      InterceptingMessageProcessor interceptingProcessor=(InterceptingMessageProcessor)processor;
      if (i + 1 < processors.size()) {
        final MessageProcessorChain innerChain=createSimpleChain(tempList);
        processorsForLifecycle.addFirst(innerChain);
        interceptingProcessor.setListener(innerChain);
      }
      tempList=new LinkedList<>(singletonList(processor));
    }
 else {
      tempList.addFirst(processor);
    }
  }
  Processor head=tempList.size() == 1 ? tempList.get(0) : createSimpleChain(tempList);
  processorsForLifecycle.addFirst(head);
  return createInterceptingChain(head,processors,processorsForLifecycle);
}
