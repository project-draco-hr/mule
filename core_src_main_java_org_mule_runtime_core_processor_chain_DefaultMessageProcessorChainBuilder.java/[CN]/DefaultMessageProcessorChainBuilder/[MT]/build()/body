{
  LinkedList<Processor> tempList=new LinkedList<>();
  for (int i=processors.size() - 1; i >= 0; i--) {
    Processor processor=initializeMessageProcessor(processors.get(i));
    if (processor instanceof InterceptingMessageProcessor) {
      InterceptingMessageProcessor interceptingProcessor=(InterceptingMessageProcessor)processor;
      if (i + 1 < processors.size()) {
        if (tempList.size() == 1 && tempList.get(0) instanceof DefaultMessageProcessorChain) {
          interceptingProcessor.setListener(tempList.get(0));
        }
 else {
          final DefaultMessageProcessorChain innerChain=createInnerChain(tempList);
          innerChain.setTemplateMuleContext(muleContext);
          interceptingProcessor.setListener(innerChain);
        }
      }
      tempList=new LinkedList<>(singletonList(processor));
    }
 else {
      tempList.addFirst(initializeMessageProcessor(processor));
    }
  }
  final InterceptingChainLifecycleWrapper chain=buildMessageProcessorChain(createOuterChain(tempList));
  chain.setTemplateMuleContext(muleContext);
  return chain;
}
