{
  MuleMessage message=event.getMessage();
  MuleSession session=event.getSession();
  MuleEvent result;
  boolean matchfound=false;
  for (Iterator<OutboundRouter> iterator=getRouters().iterator(); iterator.hasNext(); ) {
    OutboundRouter outboundRouter=(OutboundRouter)iterator.next();
    final MuleMessage outboundRouterMessage;
    if (iterator.hasNext() && (isMatchAll() || outboundRouter.isRequiresNewMessage())) {
      if (((DefaultMuleMessage)message).isConsumable()) {
        throw new MessagingException(CoreMessages.cannotCopyStreamPayload(message.getPayload().getClass().getName()),event);
      }
      outboundRouterMessage=new DefaultMuleMessage(message.getPayload(),message,muleContext);
    }
 else {
      outboundRouterMessage=message;
    }
    if (outboundRouter.isMatch(outboundRouterMessage)) {
      matchfound=true;
      final OutboundRouter router=outboundRouter;
      TransactionTemplate<MuleEvent> tt=new TransactionTemplate<MuleEvent>(outboundRouter.getTransactionConfig(),muleContext);
      TransactionCallback<MuleEvent> cb=new TransactionCallback<MuleEvent>(){
        public MuleEvent doInTransaction() throws Exception {
          return router.process(event);
        }
      }
;
      try {
        result=tt.execute(cb);
      }
 catch (      RoutingException e) {
        throw e;
      }
catch (      Exception e) {
        throw new RoutingException(outboundRouterMessage,null,e);
      }
      if (!isMatchAll()) {
        return result;
      }
    }
  }
  if (!matchfound && getCatchAllStrategy() != null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Message did not match any routers on: " + session.getFlowConstruct().getName() + " invoking catch all strategy");
    }
    return catchAll(event);
  }
 else   if (!matchfound) {
    logger.warn("Message did not match any routers on: " + session.getFlowConstruct().getName() + " and there is no catch all strategy configured on this router.  Disposing message "+ message);
  }
  return event;
}
