{
  MuleMessage result;
  boolean matchfound=false;
  for (Iterator iterator=getRouters().iterator(); iterator.hasNext(); ) {
    OutboundRouter outboundRouter=(OutboundRouter)iterator.next();
    final MuleMessage outboundRouterMessage;
    if (iterator.hasNext() && (isMatchAll() || outboundRouter.isRequiresNewMessage())) {
      if (((DefaultMuleMessage)message).isConsumable()) {
        throw new MessagingException(CoreMessages.cannotCopyStreamPayload(message.getPayload().getClass().getName()),message);
      }
      outboundRouterMessage=new DefaultMuleMessage(message.getPayload(),message,muleContext);
    }
 else {
      outboundRouterMessage=message;
    }
    if (outboundRouter.isMatch(outboundRouterMessage)) {
      matchfound=true;
      final OutboundRouter router=outboundRouter;
      TransactionTemplate tt=new TransactionTemplate(outboundRouter.getTransactionConfig(),session.getService().getExceptionListener(),muleContext);
      TransactionCallback cb=new TransactionCallback(){
        public Object doInTransaction() throws Exception {
          return router.route(outboundRouterMessage,session);
        }
      }
;
      try {
        result=(MuleMessage)tt.execute(cb);
      }
 catch (      Exception e) {
        throw new RoutingException(outboundRouterMessage,null,e);
      }
      if (!isMatchAll()) {
        return result;
      }
    }
  }
  if (!matchfound && getCatchAllStrategy() != null) {
    if (logger.isDebugEnabled()) {
      logger.debug("Message did not match any routers on: " + session.getService().getName() + " invoking catch all strategy");
    }
    return catchAll(message,session);
  }
 else   if (!matchfound) {
    logger.warn("Message did not match any routers on: " + session.getService().getName() + " and there is no catch all strategy configured on this router.  Disposing message "+ message);
  }
  return message;
}
