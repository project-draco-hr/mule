{
synchronized (schedules) {
    for (Iterator<ScheduledFuture> i=schedules.keySet().iterator(); i.hasNext(); ) {
      ScheduledFuture schedule=i.next();
      schedule.cancel(false);
      int shutdownTimeout=connector.getMuleContext().getConfiguration().getShutdownTimeout();
      PollingReceiverWorker worker=schedules.get(schedule);
      for (int elapsed=0; worker.isRunning() && elapsed < shutdownTimeout; elapsed+=50) {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
          logger.warn("PollingReceiverWworker interupted while waiting for poll() to complete as part of message receiver stop.",e);
          break;
        }
      }
      i.remove();
      if (logger.isDebugEnabled()) {
        logger.debug(ObjectUtils.identityToShortString(this) + " cancelled polling schedule: " + ObjectUtils.identityToShortString(schedule));
      }
    }
  }
}
