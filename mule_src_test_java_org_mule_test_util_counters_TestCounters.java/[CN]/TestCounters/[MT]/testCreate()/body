{
  assertNotNull(CounterFactory.createCounter("create1",Type.NUMBER));
  assertNotNull(CounterFactory.createCounter("create2",Type.NUMBER,false));
  assertNotNull(CounterFactory.createCounter("create3","create1",Type.MIN));
  assertNotNull(CounterFactory.createCounter("create4","create1",Type.MIN,false));
  assertNotNull(CounterFactory.createCounter("create5","create1","create2",Type.PLUS));
  assertNotNull(CounterFactory.createCounter("create6","create1","create2",Type.PLUS,false));
  assertNotNull(CounterFactory.getCounter("create1"));
  assertNull(CounterFactory.getCounter("zzz"));
  for (Iterator it=CounterFactory.getCounters(); it.hasNext(); ) {
    Counter ct=(Counter)it.next();
  }
  try {
    CounterFactory.createCounter("create1",Type.NUMBER);
    fail("The creation of a duplicate counter should have failed");
  }
 catch (  IllegalStateException e) {
  }
}
