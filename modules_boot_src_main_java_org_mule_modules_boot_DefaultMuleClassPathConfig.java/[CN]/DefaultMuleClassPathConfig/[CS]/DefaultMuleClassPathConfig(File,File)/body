{
  try {
    addURL(new URL("file://" + muleHome.getAbsolutePath() + FOLDER_USER+ "/"));
    addURL(new URL("file://" + muleHome.getAbsolutePath() + FOLDER_MULE+ "/"));
    addURL(new URL("file://" + muleHome.getAbsolutePath() + FOLDER_OPT+ "/"));
    try {
      if (!muleHome.getCanonicalFile().equals(muleBase.getCanonicalFile())) {
        addURL(new URL("file://" + muleBase.getAbsolutePath() + FOLDER_USER+ "/"));
        File[] muleJars=listJars(muleBase,FOLDER_USER);
        for (int i=0; i < muleJars.length; i++) {
          File jar=muleJars[i];
          addURL(jar.toURL());
        }
      }
    }
 catch (    IOException ioe) {
      System.out.println("Unable to check to see if there are local jars to load: " + ioe.toString());
    }
    File[] muleJars=listJars(muleHome,FOLDER_USER);
    for (int i=0; i < muleJars.length; i++) {
      File jar=muleJars[i];
      addURL(jar.toURL());
    }
    muleJars=listJars(muleHome,FOLDER_MULE);
    for (int i=0; i < muleJars.length; i++) {
      File jar=muleJars[i];
      addURL(jar.toURL());
    }
    muleJars=listJars(muleHome,FOLDER_OPT);
    for (int i=0; i < muleJars.length; i++) {
      File jar=muleJars[i];
      addURL(jar.toURL());
    }
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException("Failed to construct a classpath URL",e);
  }
}
