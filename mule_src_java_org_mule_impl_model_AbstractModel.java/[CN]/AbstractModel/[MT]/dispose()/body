{
  fireNotification(new ModelNotification(this,ModelNotification.MODEL_DISPOSING));
  UMOComponent temp=null;
  Object key=null;
  for (Iterator i=components.keySet().iterator(); i.hasNext(); ) {
    try {
      key=i.next();
      temp=(UMOComponent)components.get(key);
      try {
        temp.dispose();
      }
 catch (      Exception e1) {
        logger.warn("Failed to dispose component: " + e1.getMessage());
      }
      logger.info(temp + " has been destroyed successfully");
    }
 catch (    ConcurrentModificationException e) {
      logger.warn("cannot dispose calling component");
    }
  }
  components.clear();
  descriptors.clear();
  components=null;
  descriptors=null;
  fireNotification(new ModelNotification(this,ModelNotification.MODEL_DISPOSED));
}
