{
  CloseableHttpClient httpClient=HttpClients.createDefault();
  try {
    HttpPost httpPost=new HttpPost(getUrl(pathToCall));
    HttpEntity multipart=createHttpEntity(useChunkedMode);
    httpPost.setEntity(multipart);
    final CloseableHttpResponse response=httpClient.execute(httpPost);
    try {
      final MuleMessage receivedMessage=muleContext.getClient().request("test://out",1000);
      assertThat(receivedMessage.getPayload(),instanceOf(HttpRequestAttributes.class));
      Map<String,DataHandler> receivedParts=((HttpRequestAttributes)receivedMessage.getPayload()).getParts();
      assertThat(receivedParts.size(),is(2));
      assertThat(receivedParts.keySet(),hasItem(TEXT_BODY_FIELD_NAME));
      assertThat(new String(((HttpPartDataSource)receivedParts.get(TEXT_BODY_FIELD_NAME).getDataSource()).getContent()),is(TEXT_BODY_FIELD_VALUE));
      assertThat(receivedParts.keySet(),hasItem(FILE_BODY_FIELD_NAME));
      assertThat(new String(((HttpPartDataSource)receivedParts.get(FILE_BODY_FIELD_NAME).getDataSource()).getContent()),Is.<Object>is(FILE_BODY_FIELD_VALUE));
      final String contentType=response.getFirstHeader(HttpHeaders.Names.CONTENT_TYPE).getValue();
      assertThat(contentType,containsString(expectedResponseContentType));
      final Collection<HttpPart> parts=HttpParser.parseMultipartContent(response.getEntity().getContent(),contentType);
      assertThat(parts.size(),is(2));
      Map<String,Part> partsAsMap=convertPartsToMap(parts);
      assertThat(partsAsMap.get(TEXT_BODY_FIELD_NAME),notNullValue());
      assertThat(partsAsMap.get(FILE_BODY_FIELD_NAME),notNullValue());
      assertThat(IOUtils.toString(partsAsMap.get(TEXT_BODY_FIELD_NAME).getInputStream()),is(TEXT_BODY_FIELD_VALUE));
      assertThat(IOUtils.toString(partsAsMap.get(FILE_BODY_FIELD_NAME).getInputStream()),is(FILE_BODY_FIELD_VALUE));
    }
  finally {
      response.close();
    }
  }
  finally {
    httpClient.close();
  }
}
