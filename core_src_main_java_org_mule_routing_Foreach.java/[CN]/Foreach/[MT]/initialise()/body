{
  if (collectionExpression != null) {
    expressionConfig.setExpression(collectionExpression);
    splitter=new ExpressionSplitter(expressionConfig);
    if (expressionConfig.getEvaluator() != null && expressionConfig.getEvaluator().startsWith(XPATH_PREFIX)) {
      xpathCollection=true;
    }
 else     if (expressionConfig.getEvaluator() == null && isXPathExpression(expressionConfig.getExpression())) {
      xpathCollection=true;
    }
  }
 else {
    splitter=new CollectionMapSplitter();
  }
  splitter.setBatchSize(batchSize);
  splitter.setCounterVariableName(counterVariableName);
  splitter.setMuleContext(muleContext);
  ownedMessageProcessors=new ArrayList<>(messageProcessors.size() + 2);
  ownedMessageProcessors.add(splitter);
  ownedMessageProcessors.addAll(messageProcessors);
  ownedMessageProcessors.add(new MessageFilter(new Filter(){
    @Override public boolean accept(    MuleMessage message){
      return false;
    }
  }
));
  try {
    this.ownedRootMessageProcessor=new DefaultMessageProcessorChainBuilder().chain(ownedMessageProcessors).build();
  }
 catch (  MuleException e) {
    throw new InitialisationException(e,this);
  }
  super.initialise();
}
