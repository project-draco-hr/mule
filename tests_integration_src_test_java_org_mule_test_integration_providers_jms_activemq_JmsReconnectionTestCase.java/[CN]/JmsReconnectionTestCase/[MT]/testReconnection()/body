{
  if (!isPrereqsMet("org.mule.test.integration.providers.jms.activemq.JmsReconnectionTestCase.testReconnection()")) {
    return;
  }
  MuleDescriptor d=getTestDescriptor("anOrange",Orange.class.getName());
  UMOComponent component=MuleManager.getInstance().getModel().registerComponent(d);
  UMOEndpoint endpoint=new MuleEndpoint("test",new MuleEndpointURI("jms://my.queue"),connector,null,UMOEndpoint.ENDPOINT_TYPE_SENDER,0,null,new HashMap());
  MuleManager.getInstance().start();
  MuleManager.getInstance().registerListener(this);
  connector.registerListener(component,endpoint);
  long t0, t1;
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionNotification event=(ConnectionNotification)events.poll(TIME_OUT,TimeUnit.MILLISECONDS);
    if (event == null) {
      fail("no notification event was received");
    }
    if (event.getAction() == ConnectionNotification.CONNECTION_FAILED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("No connection attempt");
    }
  }
  ServerTools.launchActiveMq(BROKER_URL);
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionNotification event=(ConnectionNotification)events.poll(TIME_OUT,TimeUnit.MILLISECONDS);
    if (event.getAction() == ConnectionNotification.CONNECTION_CONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have succeeded");
    }
  }
  Thread.sleep(3000);
  MuleClient client=new MuleClient();
  MuleManager.getInstance().registerListener(new FunctionalTestNotificationListener(){
    public void onNotification(    UMOServerNotification notification){
      eventCount++;
    }
  }
);
  client.sendNoReceive("jms://reconnect.queue","test",null);
  Thread.sleep(4000);
  assertEquals(1,eventCount);
  ServerTools.killActiveMq();
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionNotification event=(ConnectionNotification)events.poll(TIME_OUT,TimeUnit.MILLISECONDS);
    if (event.getAction() == ConnectionNotification.CONNECTION_DISCONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have been lost");
    }
  }
  ServerTools.launchActiveMq(BROKER_URL);
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionNotification event=(ConnectionNotification)events.poll(TIME_OUT,TimeUnit.MILLISECONDS);
    if (event.getAction() == ConnectionNotification.CONNECTION_CONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have succeeded");
    }
  }
  client.sendNoReceive("jms://reconnect.queue","test",null);
  Thread.sleep(4000);
  assertEquals(2,eventCount);
  ServerTools.killActiveMq();
}
