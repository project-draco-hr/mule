{
  SOAPService service=new SOAPService(new MuleProvider(this));
  service.setEngine(axisServer);
  UMOEndpointURI uri=receiver.getEndpoint().getEndpointURI();
  String serviceName=receiver.getComponent().getDescriptor().getName();
  String servicePath=uri.getPath();
  service.setOption(serviceName,receiver);
  service.setOption(SERVICE_PROPERTY_SERVICE_PATH,servicePath);
  service.setOption(SERVICE_PROPERTY_COMPONENT_NAME,serviceName);
  service.setName(serviceName);
  Map options=(Map)receiver.getComponent().getDescriptor().getProperties().get("axisOptions");
  if (options != null) {
    Map.Entry entry;
    for (Iterator iterator=options.entrySet().iterator(); iterator.hasNext(); ) {
      entry=(Map.Entry)iterator.next();
      service.setOption(entry.getKey().toString(),entry.getValue());
      if (logger.isDebugEnabled()) {
        logger.debug("Adding Axis option: " + entry);
      }
    }
  }
  Class[] interfaces=ServiceProxy.getInterfacesForComponent(receiver.getComponent());
  if (interfaces.length == 0) {
    throw new InitialisationException(new Message(Messages.X_MUST_IMPLEMENT_AN_INTERFACE,serviceName),receiver.getComponent());
  }
  String methodNames="*";
  String[] methods=ServiceProxy.getMethodNames(interfaces);
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < methods.length; i++) {
    buf.append(methods[i]).append(",");
  }
  String className=interfaces[0].getName();
  methodNames=buf.toString();
  methodNames=methodNames.substring(0,methodNames.length() - 1);
  String namespace=Namespaces.makeNamespace(className);
  setOptionIfNotset(service,RPCProvider.OPTION_WSDL_SERVICEPORT,serviceName);
  setOptionIfNotset(service,RPCProvider.OPTION_CLASSNAME,className);
  setOptionIfNotset(service,RPCProvider.OPTION_SCOPE,"Request");
  setOptionIfNotset(service,RPCProvider.OPTION_WSDL_TARGETNAMESPACE,namespace);
  if (methodNames == null) {
    setOptionIfNotset(service,RPCProvider.OPTION_ALLOWEDMETHODS,"*");
  }
 else {
    setOptionIfNotset(service,RPCProvider.OPTION_ALLOWEDMETHODS,methodNames);
  }
  ServiceDesc sd=service.getInitializedServiceDesc(null);
  sd.setName(serviceName);
  sd.setEndpointURL(uri.getAddress() + "/" + serviceName);
  String style=(String)receiver.getComponent().getDescriptor().getProperties().get("style");
  String use=(String)receiver.getComponent().getDescriptor().getProperties().get("use");
  String doc=(String)receiver.getComponent().getDescriptor().getProperties().get("documentation");
  if (style != null)   sd.setStyle(Style.getStyle(style));
  if (use != null)   sd.setUse(Use.getUse(use));
  sd.setDocumentation(doc);
  TypeMappingRegistryImpl registry=(TypeMappingRegistryImpl)service.getTypeMappingRegistry();
  AxisProperties.setProperty("axis.doAutoTypes","true");
  List types=(List)receiver.getComponent().getDescriptor().getProperties().get("beanTypes");
  registerTypes(registry,types);
  registerTypes(registry,beanTypes);
  service.setName(serviceName);
  this.serverProvider.deployService(serviceName,service);
  MuleDescriptor desc=(MuleDescriptor)receiver.getComponent().getDescriptor();
  desc.addInitialisationCallback(new AxisInitialisationCallback(service));
  registerReceiverWithMuleService(receiver,uri);
}
