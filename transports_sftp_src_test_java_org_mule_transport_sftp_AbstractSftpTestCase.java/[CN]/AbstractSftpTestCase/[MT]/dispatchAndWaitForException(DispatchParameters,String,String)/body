{
  final CountDownLatch latch=new CountDownLatch(1);
  SystemExceptionHandler listener=null;
  MessagingExceptionHandler messagingListener=null;
  SystemExceptionHandler currentExceptionListener=null;
  MessagingExceptionHandler currentMessagingListener=null;
  final ValueHolder<Exception> exceptionHolder=new ValueHolder<Exception>();
  try {
    listener=new SystemExceptionHandler(){
      @Override public void handleException(      Exception e,      RollbackSourceCallback rollbackMethod){
        exceptionHolder.value=e;
        if (logger.isDebugEnabled())         logger.debug("Expected exception occurred: " + e.getMessage() + ", time to countdown the latch");
        latch.countDown();
      }
      @Override public void handleException(      Exception exception){
        handleException(exception,null);
      }
    }
;
    messagingListener=new MessagingExceptionHandler(){
      @Override public MuleEvent handleException(      Exception e,      MuleEvent event){
        exceptionHolder.value=e;
        if (logger.isDebugEnabled())         logger.debug("Expected exception occurred: " + e.getMessage() + ", time to countdown the latch");
        latch.countDown();
        return event;
      }
    }
;
    currentMessagingListener=muleContext.getRegistry().lookupFlowConstruct(serviceName).getExceptionListener();
    ((Flow)muleContext.getRegistry().lookupFlowConstruct(serviceName)).setExceptionListener(messagingListener);
    currentExceptionListener=muleContext.getExceptionListener();
    muleContext.setExceptionListener(listener);
    Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("filename",p.getFilename());
    if (p.getHeaders() != null) {
      headers.putAll(p.getHeaders());
    }
    String connectString=(p.getSftpConnector() == null) ? "" : "?connector=" + p.getSftpConnector();
    org.mule.api.client.MuleClient muleClient=muleContext.getClient();
    muleClient.dispatch(getAddressByEndpoint(p.getInboundEndpoint()) + connectString,TEST_MESSAGE,headers);
    if (logger.isDebugEnabled())     logger.debug("Waiting for an exception to occur...");
    boolean workDone=latch.await(p.getTimeout(),TimeUnit.MILLISECONDS);
    if (logger.isDebugEnabled())     logger.debug((workDone) ? "Exception occurred, continue..." : "No exception, instead a timeout occurred!");
    assertTrue("Test timed out. It took more than " + p.getTimeout() + " milliseconds. If this error occurs the test probably needs a longer time out (on your computer/network)",workDone);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("An unexpected error occurred: " + e.getMessage());
  }
 finally {
    muleContext.setExceptionListener(currentExceptionListener);
    ((Flow)muleContext.getRegistry().lookupFlowConstruct(serviceName)).setExceptionListener(currentMessagingListener);
  }
  return exceptionHolder.value;
}
