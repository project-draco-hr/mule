{
  final CountDownLatch latch=new CountDownLatch(1);
  EndpointMessageNotificationListener listener=null;
  MuleClient muleClient=p.getMuleClient();
  boolean localMuleClient=muleClient == null;
  try {
    if (localMuleClient)     muleClient=new MuleClient(muleContext);
    listener=new EndpointMessageNotificationListener(){
      @Override public void onNotification(      ServerNotification notification){
        if (notification instanceof EndpointMessageNotification) {
          EndpointMessageNotification endpointNotification=(EndpointMessageNotification)notification;
          int action=endpointNotification.getAction();
          String endpoint=endpointNotification.getEndpoint();
          if ((action == MESSAGE_DISPATCHED || action == MESSAGE_SENT) && endpoint.equals(p.getOutboundEndpoint())) {
            if (logger.isDebugEnabled())             logger.debug("Expected notification received on " + p.getOutboundEndpoint() + " (action: "+ action+ "), time to countdown the latch");
            latch.countDown();
          }
        }
      }
    }
;
    muleContext.getNotificationManager().addListener(listener);
    Map<String,Object> headers=new HashMap<String,Object>();
    headers.put("filename",p.getFilename());
    if (p.getHeaders() != null) {
      headers.putAll(p.getHeaders());
    }
    String connectString=(p.getSftpConnector() == null) ? "" : "?connector=" + p.getSftpConnector();
    muleClient.dispatch(getAddressByEndpoint(muleClient,p.getInboundEndpoint()) + connectString,TEST_MESSAGE,headers);
    if (logger.isDebugEnabled())     logger.debug("Waiting for file to be delivered to the endpoint...");
    boolean workDone=latch.await(p.getTimeout(),TimeUnit.MILLISECONDS);
    if (logger.isDebugEnabled())     logger.debug((workDone) ? "File delivered, continue..." : "No file delivered, timeout occurred!");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("An unexpected error occurred: " + e.getMessage());
  }
 finally {
    if (localMuleClient)     muleClient.dispose();
    if (listener != null)     muleContext.getNotificationManager().removeListener(listener);
  }
}
