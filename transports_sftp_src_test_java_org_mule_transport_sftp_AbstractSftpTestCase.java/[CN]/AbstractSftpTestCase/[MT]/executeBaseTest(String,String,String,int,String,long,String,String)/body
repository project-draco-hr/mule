{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicInteger loopCount=new AtomicInteger(0);
  final AtomicInteger totalReceivedSize=new AtomicInteger(0);
  final int testByte=42;
  EventCallback callback=new EventCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      if (logger.isInfoEnabled())       logger.info("called " + loopCount.incrementAndGet() + " times");
      InputStream sftpInputStream=(InputStream)context.getMessage().getPayload();
      BufferedInputStream bif=new BufferedInputStream(sftpInputStream);
      byte[] buffer=new byte[1024 * 4];
      try {
        int n;
        while (-1 != (n=bif.read(buffer))) {
          totalReceivedSize.addAndGet(n);
          for (          byte b : buffer) {
            if (b != testByte) {
              fail("Incorrect received byte (was '" + b + "', expected '"+ testByte+ "'");
            }
          }
        }
      }
  finally {
        bif.close();
      }
      latch.countDown();
    }
  }
;
  getFunctionalTestComponent(receivingTestComponentName).setEventCallback(callback);
  final ValueHolder<Exception> exceptionHolder=new ValueHolder<Exception>();
  if (expectedFailingConnector != null) {
    muleContext.setExceptionListener(new SystemExceptionHandler(){
      @Override public void handleException(      Exception e,      RollbackSourceCallback rollbackMethod){
        if (logger.isInfoEnabled())         logger.info("expected exception occurred: " + e,e);
        exceptionHolder.value=e;
        latch.countDown();
      }
      @Override public void handleException(      Exception exception){
        handleException(exception,null);
      }
    }
);
    if (serviceName != null && !(serviceName.length() == 0)) {
      muleContext.getRegistry().lookupService(serviceName).setExceptionListener(new MessagingExceptionHandler(){
        @Override public MuleEvent handleException(        Exception e,        MuleEvent event){
          if (logger.isInfoEnabled())           logger.info("expected exception occurred: " + e,e);
          exceptionHolder.value=e;
          latch.countDown();
          return event;
        }
      }
);
    }
  }
  InputStream os=new InputStream(){
    int totSize=0;
    @Override public int read() throws IOException {
      totSize++;
      if (totSize <= size) {
        return testByte;
      }
 else {
        return -1;
      }
    }
  }
;
  HashMap<String,Object> props=new HashMap<String,Object>();
  props.put(SftpConnector.PROPERTY_FILENAME,filename);
  props.put(SftpConnector.PROPERTY_ORIGINAL_FILENAME,filename);
  if (logger.isInfoEnabled()) {
    logger.info(StringMessageUtils.getBoilerPlate("Note! If this test fails due to timeout please add '-Dmule.test.timeoutSecs=XX' to the mvn command!"));
  }
  executeBaseAssertionsBeforeCall();
  MuleClient client=muleContext.getClient();
  client.dispatch(sendUrl,os,props);
  boolean workDone=latch.await(timeout,TimeUnit.MILLISECONDS);
  assertTrue("Test timed out. It took more than " + timeout + " milliseconds. If this error occurs the test probably needs a longer time out (on your computer/network)",workDone);
  if (exceptionHolder.value != null) {
    throw exceptionHolder.value;
  }
  executeBaseAssertionsAfterCall(size,totalReceivedSize.intValue());
}
