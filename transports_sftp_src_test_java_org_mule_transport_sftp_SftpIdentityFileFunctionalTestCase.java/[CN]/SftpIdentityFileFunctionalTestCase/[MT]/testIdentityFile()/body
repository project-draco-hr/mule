{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<String> message=new AtomicReference<String>();
  final AtomicInteger loopCount=new AtomicInteger(0);
  EventCallback callback=new EventCallback(){
    @Override public synchronized void eventReceived(    MuleEventContext context,    Object component){
      try {
        logger.info("called " + loopCount.incrementAndGet() + " times");
        if (1 == latch.getCount()) {
          String o=IOUtils.toString((SftpInputStream)context.getMessage().getPayload());
          message.set(o);
          latch.countDown();
        }
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
;
  MuleClient client=new MuleClient(muleContext);
  Map<?,?> properties=new HashMap<Object,Object>();
  Object component=getComponent("testComponent");
  assertTrue("FunctionalTestComponent expected",component instanceof FunctionalTestComponent);
  FunctionalTestComponent ftc=(FunctionalTestComponent)component;
  assertNotNull(ftc);
  ftc.setEventCallback(callback);
  logger.debug("before dispatch");
  client.dispatch(getAddressByEndpoint(client,INBOUND_ENDPOINT_NAME),TEST_MESSAGE,properties);
  logger.debug("before retrieve");
  latch.await(DEFAULT_TIMEOUT,TimeUnit.MILLISECONDS);
  assertEquals(TEST_MESSAGE,message.get());
}
