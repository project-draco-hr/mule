{
  service=new SOAPService(new MuleProvider(connector));
  MuleDescriptor descriptor=(MuleDescriptor)component.getDescriptor();
  service.setEngine(connector.getAxisServer());
  UMOEndpointURI uri=endpoint.getEndpointURI();
  String serviceName=component.getDescriptor().getName();
  String servicePath=uri.getPath();
  service.setOption(serviceName,this);
  service.setOption(AxisConnector.SERVICE_PROPERTY_SERVCE_PATH,servicePath);
  service.setOption(AxisConnector.SERVICE_PROPERTY_COMPONENT_NAME,serviceName);
  service.setName(serviceName);
  Map options=(Map)descriptor.getProperties().get("axisOptions");
  if (options != null) {
    Map.Entry entry;
    for (Iterator iterator=options.entrySet().iterator(); iterator.hasNext(); ) {
      entry=(Map.Entry)iterator.next();
      service.setOption(entry.getKey().toString(),entry.getValue());
      logger.debug("Adding Axis option: " + entry);
    }
  }
  Class[] interfaces=ServiceProxy.getInterfacesForComponent(component);
  if (interfaces.length == 0) {
    throw new InitialisationException(new Message(Messages.X_MUST_IMPLEMENT_AN_INTERFACE,serviceName),component);
  }
  String methodNames="*";
  String[] methods=ServiceProxy.getMethodNames(interfaces);
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < methods.length; i++) {
    buf.append(methods[i]).append(",");
  }
  String className=interfaces[0].getName();
  methodNames=buf.toString();
  methodNames=methodNames.substring(0,methodNames.length() - 1);
  String namespace=Namespaces.makeNamespace(className);
  setOptionIfNotset(service,RPCProvider.OPTION_WSDL_SERVICEPORT,serviceName);
  setOptionIfNotset(service,RPCProvider.OPTION_CLASSNAME,className);
  setOptionIfNotset(service,RPCProvider.OPTION_SCOPE,"Request");
  setOptionIfNotset(service,RPCProvider.OPTION_WSDL_TARGETNAMESPACE,namespace);
  if (methodNames == null) {
    setOptionIfNotset(service,RPCProvider.OPTION_ALLOWEDMETHODS,"*");
  }
 else {
    setOptionIfNotset(service,RPCProvider.OPTION_ALLOWEDMETHODS,methodNames);
  }
  ServiceDesc sd=service.getInitializedServiceDesc(null);
  sd.setName(serviceName);
  sd.setEndpointURL(uri.getAddress() + "/" + serviceName);
  String style=(String)descriptor.getProperties().get("style");
  String use=(String)descriptor.getProperties().get("use");
  String doc=(String)descriptor.getProperties().get("documentation");
  if (style != null) {
    Style s=Style.getStyle(style);
    if (s == null) {
      throw new InitialisationException(new Message(Messages.X_IS_INVALID,"style=" + style),this);
    }
 else {
      sd.setStyle(s);
    }
  }
  if (use != null) {
    Use u=Use.getUse(use);
    if (u == null) {
      throw new InitialisationException(new Message(Messages.X_IS_INVALID,"use=" + use),this);
    }
 else {
      sd.setUse(u);
    }
  }
  sd.setDocumentation(doc);
  TypeMappingRegistryImpl registry=(TypeMappingRegistryImpl)service.getTypeMappingRegistry();
  AxisProperties.setProperty("axis.doAutoTypes","true");
  List types=(List)descriptor.getProperties().get("beanTypes");
  registerTypes(registry,types);
  registerTypes(registry,connector.getBeanTypes());
  service.setName(serviceName);
  service.stop();
  descriptor.addInitialisationCallback(new AxisInitialisationCallback(service));
}
