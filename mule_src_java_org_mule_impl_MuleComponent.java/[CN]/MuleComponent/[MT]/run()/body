{
  MuleEvent event=null;
  MuleProxy proxy=null;
  QueueSession queueSession=null;
  while (!stopped.get()) {
    try {
      paused.whenFalse(null);
      queueSession=MuleManager.getInstance().getQueueManager().getQueueSession();
      if (stopping.get()) {
        if (queueSession.getQueue(descriptor.getName() + ".component").size() == 0) {
          stopping.set(false);
          break;
        }
      }
      event=(MuleEvent)queueSession.getQueue(descriptor.getName() + ".component").take();
      if (stats.isEnabled()) {
        stats.decQueuedEvent();
      }
      if (logger.isDebugEnabled()) {
        logger.debug("Component: " + descriptor.getName() + " dequeued event on: "+ event.getEndpoint().getEndpointURI());
      }
      proxy=(MuleProxy)proxyPool.borrowObject();
      getStatistics().setComponentPoolSize(proxyPool.getSize());
      proxy.setStatistics(getStatistics());
      proxy.start();
      proxy.onEvent(queueSession,event);
      workManager.scheduleWork(proxy,WorkManager.INDEFINITE,null,null);
    }
 catch (    Exception e) {
      if (proxy != null) {
        try {
          proxyPool.returnObject(proxy);
        }
 catch (        Exception e2) {
          logger.info("Failed to return proxy to pool",e2);
        }
      }
      if (e instanceof InterruptedException) {
        break;
      }
 else       if (e instanceof NoSuchElementException) {
        handleException(new ComponentException(new Message(Messages.PROXY_POOL_TIMED_OUT),event.getMessage(),this,e));
      }
 else       if (e instanceof UMOException) {
        handleException(e);
      }
 else       if (e instanceof WorkException) {
        handleException(new ComponentException(new Message(Messages.EVENT_PROCESSING_FAILED_FOR_X,descriptor.getName()),event.getMessage(),this,e));
      }
 else {
        handleException(new ComponentException(new Message(Messages.FAILED_TO_GET_POOLED_OBJECT),event.getMessage(),this,e));
      }
    }
  }
}
