{
  MuleDescriptor desc=getTestDescriptor("unique",UniqueComponent.class.getName());
  ObjectPool pool=createPool(desc,FAIL_WHEN_EXHAUSTED);
  assertNotNull(pool);
  assertEquals(0,pool.getSize());
  Object proxy;
  Object component;
  proxy=pool.borrowObject();
  assertNotNull(proxy);
  assertTrue("Proxy should be of type TestMuleProxy, are you sure you're using the TestSedaModel?",proxy instanceof TestMuleProxy);
  component=((TestMuleProxy)proxy).getComponent();
  assertNotNull(component);
  assertTrue("Component should be of type UniqueComponent",component instanceof UniqueComponent);
  String id1=((UniqueComponent)component).getId();
  assertNotNull(id1);
  proxy=pool.borrowObject();
  assertNotNull(proxy);
  assertTrue("Proxy should be of type TestMuleProxy, are you sure you're using the TestSedaModel?",proxy instanceof TestMuleProxy);
  component=((TestMuleProxy)proxy).getComponent();
  assertNotNull(component);
  assertTrue("Component should be of type UniqueComponent",component instanceof UniqueComponent);
  String id2=((UniqueComponent)component).getId();
  assertNotNull(id2);
  proxy=pool.borrowObject();
  assertNotNull(proxy);
  assertTrue("Proxy should be of type TestMuleProxy, are you sure you're using the TestSedaModel?",proxy instanceof TestMuleProxy);
  component=((TestMuleProxy)proxy).getComponent();
  assertNotNull(component);
  assertTrue("Component should be of type UniqueComponent",component instanceof UniqueComponent);
  String id3=((UniqueComponent)component).getId();
  assertNotNull(id3);
  assertFalse("Component IDs " + id1 + " and "+ id2+ " should be different",id1.equals(id2));
  assertFalse("Component IDs " + id2 + " and "+ id3+ " should be different",id2.equals(id3));
}
