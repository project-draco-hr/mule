{
  typeLoader=ExtensionsTypeLoaderFactory.getDefault().createTypeLoader(Thread.currentThread().getContextClassLoader());
  when(describingContext.getExtensionDeclarer()).thenReturn(extensionDeclarer);
  when(extensionDeclarer.getDeclaration()).thenReturn(extensionDeclaration);
  when(extensionDeclaration.getOperations()).thenReturn(asList(connectedOperation,notConnectedOperation));
  when(extensionDeclaration.getMessageSources()).thenReturn(asList(connectedSource,notConnectedSource));
  when(extensionDeclaration.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(implementingTypeModelProperty));
  when(connectedOperation.getModelProperty(ImplementingMethodModelProperty.class)).thenReturn(Optional.of(connectedImplementingModelProperty));
  when(connectedOperation.getParameters()).thenReturn(emptyList());
  when(connectedOperation.getName()).thenReturn(CONNECTED_OPERATION);
  when(notConnectedOperation.getModelProperty(ImplementingMethodModelProperty.class)).thenReturn(Optional.of(notConnectedImplementingModelProperty));
  when(notConnectedOperation.getName()).thenReturn(NOT_CONNECTED_OPERATION);
  when(connectedSource.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(connectedSourceImplementingTypeModelProperty));
  when(connectedSource.getParameters()).thenReturn(emptyList());
  when(connectedSource.getName()).thenReturn(CONNECTED_SOURCE);
  when(notConnectedSource.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(notConnectedSourceImplementingTypeModelProperty));
  when(notConnectedSource.getParameters()).thenReturn(emptyList());
  when(notConnectedSource.getName()).thenReturn(NOT_CONNECTED_SOURCE);
}
