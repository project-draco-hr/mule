{
  typeLoader=ExtensionsTypeLoaderFactory.getDefault().createTypeLoader(Thread.currentThread().getContextClassLoader());
  connectedOperation=spy(new ExtensionDeclarer().withOperation(CONNECTED_OPERATION).withModelProperty(connectedImplementingModelProperty).getDeclaration());
  notConnectedOperation=spy(new ExtensionDeclarer().withOperation(NOT_CONNECTED_OPERATION).withModelProperty(notConnectedImplementingModelProperty).getDeclaration());
  when(describingContext.getExtensionDeclarer()).thenReturn(extensionDeclarer);
  when(extensionDeclarer.getDeclaration()).thenReturn(extensionDeclaration);
  when(extensionDeclaration.getOperations()).thenReturn(asList(connectedOperation,notConnectedOperation));
  when(extensionDeclaration.getMessageSources()).thenReturn(asList(connectedSource,notConnectedSource));
  when(extensionDeclaration.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(implementingTypeModelProperty));
  when(connectedSource.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(connectedSourceImplementingTypeModelProperty));
  when(connectedSource.getParameters()).thenReturn(emptyList());
  when(connectedSource.getName()).thenReturn(CONNECTED_SOURCE);
  when(notConnectedSource.getModelProperty(ImplementingTypeModelProperty.class)).thenReturn(Optional.of(notConnectedSourceImplementingTypeModelProperty));
  when(notConnectedSource.getParameters()).thenReturn(emptyList());
  when(notConnectedSource.getName()).thenReturn(NOT_CONNECTED_SOURCE);
}
