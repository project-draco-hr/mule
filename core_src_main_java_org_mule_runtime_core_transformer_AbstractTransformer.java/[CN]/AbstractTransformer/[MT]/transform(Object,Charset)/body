{
  Object payload=src;
  if (src instanceof InternalMessage) {
    InternalMessage message=(InternalMessage)src;
    if ((!isSourceDataTypeSupported(DataType.MULE_MESSAGE,true) && !(this instanceof AbstractMessageTransformer))) {
      src=((InternalMessage)src).getPayload().getValue();
      payload=message.getPayload().getValue();
    }
  }
  DataType sourceType=DataType.fromObject(payload);
  if (MultiPartContent.class.isAssignableFrom(sourceType.getType())) {
    I18nMessage msg=createStaticMessage("\"%s\" cannot be transformed to %s.",MultiPartContent.class.getSimpleName(),getReturnDataType().getType().getName());
    throw new TransformerException(msg,this);
  }
  if (!isSourceDataTypeSupported(sourceType)) {
    I18nMessage msg=CoreMessages.transformOnObjectUnsupportedTypeOfEndpoint(getName(),payload.getClass());
    throw new TransformerException(msg,this);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Applying transformer %s (%s)",getName(),getClass().getName()));
    logger.debug(String.format("Object before transform: %s",StringMessageUtils.toString(payload)));
  }
  Object result=doTransform(payload,enc);
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Object after transform: %s",StringMessageUtils.toString(result)));
  }
  TransformerUtils.checkTransformerReturnClass(this,result);
  return result;
}
