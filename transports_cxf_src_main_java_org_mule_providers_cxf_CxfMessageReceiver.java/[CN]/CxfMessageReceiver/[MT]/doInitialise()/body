{
  try {
    Class<?> exposedInterface=getInterface();
    Map endpointProps=getEndpoint().getProperties();
    String wsdlUrl=(String)endpointProps.get(CxfConstants.WSDL_LOCATION);
    String databinding=(String)endpointProps.get(CxfConstants.DATA_BINDING);
    String bindingId=(String)endpointProps.get(CxfConstants.BINDING_ID);
    String frontend=(String)endpointProps.get(CxfConstants.FRONTEND);
    String bridge=(String)endpointProps.get(CxfConstants.BRIDGE);
    if (BooleanUtils.toBoolean(bridge)) {
      exposedInterface=ProviderService.class;
      frontend="jaxws";
    }
    if (StringUtils.isEmpty(frontend)) {
      frontend=connector.getDefaultFrontend();
    }
    ServerFactoryBean sfb=null;
    if (CxfConstants.SIMPLE_FRONTEND.equals(frontend)) {
      sfb=new ServerFactoryBean();
      sfb.setDataBinding(new AegisDatabinding());
    }
 else     if (CxfConstants.JAX_WS_FRONTEND.equals(frontend)) {
      sfb=new JaxWsServerFactoryBean();
    }
 else {
      throw new CreateException(CxfMessages.invalidFrontend(frontend),this);
    }
    if (bindingId != null) {
      sfb.setBindingId(bindingId);
    }
    if (databinding != null) {
      Class<?> c=ClassLoaderUtils.loadClass(databinding,getClass());
      sfb.setDataBinding((DataBinding)c.newInstance());
    }
    sfb.setServiceClass(exposedInterface);
    sfb.setAddress(getEndpointURI().getAddress());
    if (wsdlUrl != null) {
      sfb.setWsdlURL(wsdlUrl);
    }
    ReflectionServiceFactoryBean svcFac=sfb.getServiceFactory();
    addIgnoredMethods(svcFac,Callable.class.getName());
    addIgnoredMethods(svcFac,Initialisable.class.getName());
    addIgnoredMethods(svcFac,Disposable.class.getName());
    String name=(String)endpointProps.get(CxfConstants.NAME);
    String namespace=(String)endpointProps.get(CxfConstants.NAMESPACE);
    initServiceName(exposedInterface,name,namespace,svcFac);
    boolean sync=endpoint.isSynchronous();
    if (endpoint.getEndpointURI().getScheme().startsWith("http") || endpoint.getEndpointURI().getScheme().startsWith("servlet")) {
      sync=true;
    }
    sfb.setInvoker(new MuleInvoker(this,sync));
    sfb.setStart(false);
    Bus bus=connector.getCxfBus();
    sfb.setBus(bus);
    Configurer configurer=bus.getExtension(Configurer.class);
    if (null != configurer) {
      configurer.configureBean(sfb.getServiceFactory().getEndpointName().toString(),sfb);
    }
    server=sfb.create();
  }
 catch (  UMOException e) {
    throw new InitialisationException(e,this);
  }
catch (  ClassNotFoundException e) {
    throw new InitialisationException(e,this);
  }
catch (  Exception e) {
    throw new InitialisationException(e,this);
  }
}
