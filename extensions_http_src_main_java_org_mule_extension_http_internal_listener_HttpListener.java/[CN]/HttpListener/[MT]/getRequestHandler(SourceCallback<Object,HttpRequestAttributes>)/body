{
  return new RequestHandler(){
    @Override public void handleRequest(    HttpRequestContext requestContext,    HttpResponseReadyCallback responseCallback){
      try {
        HttpResponseContext responseContext=new HttpResponseContext();
        final String httpVersion=requestContext.getRequest().getProtocol().asString();
        responseContext.setHttpVersion(httpVersion);
        responseContext.setSupportStreaming(supportsTransferEncoding(httpVersion));
        responseContext.setResponseCallback(responseCallback);
        SourceCallbackContext context=sourceCallback.createContext();
        context.addVariable(RESPONSE_CONTEXT,responseContext);
        sourceCallback.handle(createResult(requestContext),context);
      }
 catch (      HttpRequestParsingException|IllegalArgumentException e) {
        LOGGER.warn("Exception occurred parsing request:",e);
        sendErrorResponse(BAD_REQUEST,e.getMessage(),responseCallback);
      }
catch (      RuntimeException e) {
        LOGGER.warn("Exception occurred processing request:",e);
        sendErrorResponse(INTERNAL_SERVER_ERROR,SERVER_PROBLEM,responseCallback);
      }
 finally {
        setCurrentEvent(null);
      }
    }
    private void sendErrorResponse(    final HttpConstants.HttpStatus status,    String message,    HttpResponseReadyCallback responseCallback){
      responseCallback.responseReady(new HttpResponseBuilder().setStatusCode(status.getStatusCode()).setReasonPhrase(status.getReasonPhrase()).setEntity(new ByteArrayHttpEntity(message.getBytes())).build(),new ResponseStatusCallback(){
        @Override public void responseSendFailure(        Throwable exception){
          LOGGER.warn("Error while sending {} response {}",status.getStatusCode(),exception.getMessage());
          if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Exception thrown",exception);
          }
        }
        @Override public void responseSendSuccessfully(){
        }
      }
);
    }
  }
;
}
