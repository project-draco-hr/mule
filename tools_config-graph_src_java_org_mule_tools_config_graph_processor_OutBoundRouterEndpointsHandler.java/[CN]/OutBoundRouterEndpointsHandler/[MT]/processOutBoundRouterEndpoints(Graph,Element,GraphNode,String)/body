{
  List epList=router.getChildren(MuleTag.ELEMENT_ENDPOINT);
  int x=1;
  for (Iterator iterator=epList.iterator(); iterator.hasNext(); x++) {
    Element outEndpoint=(Element)iterator.next();
    String url=outEndpoint.getAttributeValue(MuleTag.ATTRIBUTE_ADDRESS);
    if (url != null) {
      GraphNode out=(GraphNode)endpointRegistry.getEndpoint(url,componentName);
      if (out == null) {
        out=graph.addNode();
        StringBuffer caption=new StringBuffer();
        caption.append(url).append("\n");
        appendProperties(outEndpoint,caption);
        appendDescription(outEndpoint,caption);
        out.getInfo().setCaption(caption.toString());
        endpointRegistry.addEndpoint(url,out);
        processOutboundFilter(graph,outEndpoint,out,routerNode);
      }
 else {
        GraphEdge e=graph.addEdge(routerNode,out);
        if (epList.size() == 1) {
          e.getInfo().setCaption("out");
        }
 else {
          e.getInfo().setCaption("out (" + x + " of "+ epList.size()+ ")");
        }
        if ("true".equalsIgnoreCase(outEndpoint.getAttributeValue(MuleTag.ATTRIBUTE_SYNCHRONOUS))) {
          e.getInfo().setArrowTailNormal();
        }
      }
    }
    GraphNode[] virtual=endpointRegistry.getVirtualEndpoint(componentName);
    if (virtual.length > 0) {
      for (int i=0; i < virtual.length; i++) {
        graph.addEdge(routerNode,virtual[i]).getInfo().setCaption("out (dynamic)");
      }
    }
  }
}
