{
  TransactionTemplate tt=new TransactionTemplate(endpoint.getTransactionConfig(),connector.getExceptionListener(),connector.getMuleContext());
  if (this.isReceiveMessagesInTransaction()) {
    TransactionCallback cb=new TransactionCallback(){
      public Object doInTransaction() throws Exception {
        if (useStrictConnectDisconnect)         connect();
        try {
          List messages=getMessages();
          if (messages != null && messages.size() > 0) {
            for (Iterator it=messages.iterator(); it.hasNext(); ) {
              TransactedPollingMessageReceiver.this.processMessage(it.next());
            }
          }
        }
  finally {
          if (useStrictConnectDisconnect)           disconnect();
        }
        return null;
      }
    }
;
    tt.execute(cb);
  }
 else {
    if (useStrictConnectDisconnect)     connect();
    try {
      List messages=getMessages();
      if (messages != null && messages.size() > 0) {
        final CountDownLatch countdown=new CountDownLatch(messages.size());
        for (Iterator it=messages.iterator(); it.hasNext(); ) {
          try {
            this.getWorkManager().scheduleWork(new MessageProcessorWorker(tt,countdown,it.next()));
          }
 catch (          Exception e) {
            countdown.countDown();
            throw e;
          }
        }
        countdown.await();
      }
    }
  finally {
      if (useStrictConnectDisconnect)       disconnect();
    }
  }
}
