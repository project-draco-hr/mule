{
  TransactionTemplate<Void> tt=new TransactionTemplate<Void>(endpoint.getTransactionConfig(),connector.getExceptionListener(),connector.getMuleContext());
  if (this.isReceiveMessagesInTransaction()) {
    TransactionCallback<Void> cb=new TransactionCallback<Void>(){
      public Void doInTransaction() throws Exception {
        List<MuleMessage> messages=getMessages();
        if (messages != null && messages.size() > 0) {
          for (          MuleMessage message : messages) {
            TransactedPollingMessageReceiver.this.processMessage(message);
          }
        }
        return null;
      }
    }
;
    tt.execute(cb);
  }
 else {
    List<MuleMessage> messages=getMessages();
    if (messages != null && messages.size() > 0) {
      final CountDownLatch countdown=new CountDownLatch(messages.size());
      for (      MuleMessage message : messages) {
        try {
          this.getWorkManager().scheduleWork(new MessageProcessorWorker<Void,MuleMessage>(tt,countdown,message));
        }
 catch (        Exception e) {
          countdown.countDown();
          throw e;
        }
      }
      countdown.await();
    }
  }
}
