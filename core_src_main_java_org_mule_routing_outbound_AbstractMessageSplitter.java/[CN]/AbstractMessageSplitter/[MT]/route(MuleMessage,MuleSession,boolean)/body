{
  String correlationId=messageInfoMapping.getCorrelationId(message);
  List results=new java.util.ArrayList();
  int correlationSequence=1;
  SplitMessage splitMessage=getMessageParts(message,getEndpoints());
  java.util.Map props=new java.util.HashMap();
  for (Iterator iterator=message.getPropertyNames().iterator(); iterator.hasNext(); ) {
    String propertyKey=(String)iterator.next();
    props.put(propertyKey,message.getProperty(propertyKey));
  }
  for (int i=0; i < splitMessage.size(); i++) {
    SplitMessage.MessagePart part=splitMessage.getPart(i);
    MuleMessage sendMessage;
    if (part.getPart() instanceof MuleMessage) {
      sendMessage=(MuleMessage)part.getPart();
    }
 else {
      sendMessage=new org.mule.DefaultMuleMessage(part.getPart(),props);
    }
    try {
      if (enableCorrelation != ENABLE_CORRELATION_NEVER) {
        boolean correlationSet=message.getCorrelationId() != null;
        if (!correlationSet && (enableCorrelation == ENABLE_CORRELATION_IF_NOT_SET)) {
          sendMessage.setCorrelationId(correlationId);
        }
        sendMessage.setCorrelationGroupSize(splitMessage.size());
        sendMessage.setCorrelationSequence(correlationSequence++);
      }
      if (honorSynchronicity) {
        synchronous=part.getEndpoint().isSynchronous();
        sendMessage.setBooleanProperty(MuleProperties.MULE_REMOTE_SYNC_PROPERTY,part.getEndpoint().isRemoteSync());
      }
      if (synchronous) {
        results.add(send(session,sendMessage,part.getEndpoint()));
      }
 else {
        dispatch(session,sendMessage,part.getEndpoint());
      }
    }
 catch (    MuleException e) {
      throw new CouldNotRouteOutboundMessageException(sendMessage,part.getEndpoint(),e);
    }
  }
  return resultsHandler.aggregateResults(results,message);
}
