{
  addVariableTransformer.setEncoding(null);
  addVariableTransformer.setMimeType(null);
  when(mockEvent.getMessage()).thenReturn(mockMessage);
  when(mockMuleContext.getExpressionManager()).thenReturn(mockExpressionManager);
  when(mockExpressionManager.parse(anyString(),Mockito.any(MuleEvent.class))).thenAnswer(new Answer<String>(){
    @Override public String answer(    InvocationOnMock invocation) throws Throwable {
      return (String)invocation.getArguments()[0];
    }
  }
);
  when(mockExpressionManager.evaluate(EXPRESSION,mockEvent)).thenReturn(EXPRESSION_VALUE);
  TypedValue typedValue=new TypedValue(EXPRESSION_VALUE,DataTypeFactory.STRING);
  when(mockExpressionManager.evaluateTyped(EXPRESSION,mockEvent)).thenReturn(typedValue);
  addVariableTransformer.setMuleContext(mockMuleContext);
  when(mockMessage.getDataType()).thenReturn(new SimpleDataType(String.class));
}
