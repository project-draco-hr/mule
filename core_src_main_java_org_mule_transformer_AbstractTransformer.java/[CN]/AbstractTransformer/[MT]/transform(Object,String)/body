{
  Object payload=src;
  if (src instanceof MuleMessage) {
    MuleMessage message=(MuleMessage)src;
    if ((!isSourceDataTypeSupported(MULE_MESSAGE_DATA_TYPE,true) && !(this instanceof AbstractMessageAwareTransformer))) {
      src=((MuleMessage)src).getPayload();
      payload=message.getPayload();
    }
  }
  DataType sourceType=new DataTypeFactory().create(payload.getClass());
  if (!isSourceDataTypeSupported(sourceType)) {
    if (ignoreBadInput) {
      logger.debug("Source type is incompatible with this transformer and property 'ignoreBadInput' is set to true, so the transformer chain will continue.");
      return payload;
    }
 else {
      throw new TransformerException(CoreMessages.transformOnObjectUnsupportedTypeOfEndpoint(this.getName(),payload.getClass(),endpoint),this);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Applying transformer " + getName() + " ("+ getClass().getName()+ ")");
    logger.debug("Object before transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(payload),DEFAULT_TRUNCATE_LENGTH,false));
  }
  Object result;
  result=doTransform(payload,encoding);
  if (result == null) {
    result=NullPayload.getInstance();
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Object after transform: " + StringMessageUtils.truncate(StringMessageUtils.toString(result),DEFAULT_TRUNCATE_LENGTH,false));
  }
  result=checkReturnClass(result);
  return result;
}
