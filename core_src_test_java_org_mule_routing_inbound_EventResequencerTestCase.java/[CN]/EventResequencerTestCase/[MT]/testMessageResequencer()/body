{
  MuleSession session=getTestSession(getTestService(),muleContext);
  Service testService=getTestService("test",Apple.class);
  assertNotNull(testService);
  TestEventResequencer router=new TestEventResequencer(3);
  router.setMuleContext(muleContext);
  router.initialise();
  MuleMessage message1=new DefaultMuleMessage("test event A",muleContext);
  MuleMessage message2=new DefaultMuleMessage("test event B",muleContext);
  MuleMessage message3=new DefaultMuleMessage("test event C",muleContext);
  message1.setCorrelationId(message1.getUniqueId());
  message2.setCorrelationId(message1.getUniqueId());
  message3.setCorrelationId(message1.getUniqueId());
  ImmutableEndpoint endpoint=getTestOutboundEndpoint(false);
  MuleEvent event1=new DefaultMuleEvent(message1,endpoint,session);
  MuleEvent event2=new DefaultMuleEvent(message2,endpoint,session);
  MuleEvent event3=new DefaultMuleEvent(message3,endpoint,session);
  assertTrue(router.isMatch(event1));
  assertTrue(router.isMatch(event2));
  assertTrue(router.isMatch(event3));
  assertNull(router.process(event2));
  assertNull(router.process(event3));
  MuleEvent[] results=router.process(event1);
  assertNotNull(results);
  assertEquals(3,results.length);
  assertEquals("test event B",results[0].getMessageAsString());
  assertEquals("test event C",results[1].getMessageAsString());
  assertEquals("test event A",results[2].getMessageAsString());
  router=new TestEventResequencer(3);
  router.setMuleContext(muleContext);
  router.setEventComparator(new EventPayloadComparator());
  router.initialise();
  assertNull(router.process(event2));
  assertNull(router.process(event3));
  results=router.process(event1);
  assertNotNull(results);
  assertEquals(3,results.length);
  assertEquals("test event A",results[0].getMessageAsString());
  assertEquals("test event B",results[1].getMessageAsString());
  assertEquals("test event C",results[2].getMessageAsString());
}
