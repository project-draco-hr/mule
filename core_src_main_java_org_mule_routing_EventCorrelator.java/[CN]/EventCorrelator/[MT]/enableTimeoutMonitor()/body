{
  if (timerStarted.get()) {
    return;
  }
  this.context.getWorkManager().scheduleWork(new Work(){
    public void release(){
    }
    public void run(){
      while (true) {
        List<EventGroup> expired=new ArrayList<EventGroup>(1);
        for (        Object o : eventGroups.values()) {
          EventGroup group=(EventGroup)o;
          if ((group.getCreated() + getTimeout() * MILLI_TO_NANO_MULTIPLIER) < Utils.nanoTime()) {
            expired.add(group);
          }
        }
        if (expired.size() > 0) {
          for (          Object anExpired : expired) {
            EventGroup group=(EventGroup)anExpired;
            eventGroups.remove(group.getGroupId());
            locks.remove(group.getGroupId());
            final Service service=group.toArray()[0].getService();
            if (isFailOnTimeout()) {
              context.fireNotification(new RoutingNotification(group.toMessageCollection(),null,RoutingNotification.CORRELATION_TIMEOUT));
              service.getExceptionListener().exceptionThrown(new CorrelationTimeoutException(CoreMessages.correlationTimedOut(group.getGroupId()),group.toMessageCollection()));
            }
 else {
              if (logger.isDebugEnabled()) {
                logger.debug(MessageFormat.format("Aggregator expired, but ''failOnTimeOut'' is false. Forwarding {0} events out of {1} " + "total for group ID: {2}",group.size(),group.expectedSize(),group.getGroupId()));
              }
              try {
                MuleMessage msg=callback.aggregateEvents(group);
                MuleEvent newEvent=new DefaultMuleEvent(msg,group.toArray()[0].getEndpoint(),new DefaultMuleSession(service,context),false);
                service.getComponent().invoke(newEvent);
              }
 catch (              Exception e) {
                service.getExceptionListener().exceptionThrown(e);
              }
            }
          }
        }
        try {
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
          break;
        }
      }
    }
  }
);
}
