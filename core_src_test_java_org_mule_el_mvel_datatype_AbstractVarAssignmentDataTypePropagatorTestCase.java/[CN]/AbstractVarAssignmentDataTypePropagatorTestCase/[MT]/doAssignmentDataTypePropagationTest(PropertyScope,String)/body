{
  final DataType expectedDataType=DataTypeFactory.create(String.class,JSON);
  expectedDataType.setEncoding(CUSTOM_ENCODING);
  MuleEvent testEvent=getTestEvent(TEST_MESSAGE);
  final ParserConfiguration parserConfiguration=MVELExpressionLanguage.createParserConfiguration(Collections.EMPTY_MAP);
  final MVELExpressionLanguageContext context=createMvelExpressionLanguageContext(testEvent,parserConfiguration);
  CompiledExpression compiledExpression=(CompiledExpression)compileExpression(expression,new ParserContext(parserConfiguration));
  MVEL.executeExpression(compiledExpression,context);
  dataTypePropagator.propagate(testEvent.getMessage(),new TypedValue(TEST_MESSAGE,expectedDataType),compiledExpression);
  assertThat(testEvent.getMessage().getPropertyDataType(PROPERTY_NAME,scope),like(String.class,JSON,CUSTOM_ENCODING));
}
