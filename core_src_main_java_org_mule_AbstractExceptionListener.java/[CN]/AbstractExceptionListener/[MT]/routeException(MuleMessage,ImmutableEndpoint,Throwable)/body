{
  List endpoints=getEndpoints(t);
  if (CollectionUtils.isNotEmpty(endpoints)) {
    try {
      logger.error("Message being processed is: " + (message == null ? "null" : message.toString()));
      MuleEventContext ctx=RequestContext.getEventContext();
      String component="Unknown";
      EndpointURI endpointUri=null;
      if (ctx != null) {
        if (ctx.getService() != null) {
          component=ctx.getService().getName();
        }
        endpointUri=ctx.getEndpointURI();
      }
 else       if (failedEndpoint != null) {
        endpointUri=failedEndpoint.getEndpointURI();
      }
      Object payload;
      if (message.getPayload() instanceof Serializable) {
        payload=message.getPayload();
      }
 else {
        payload=message.getPayloadAsString();
      }
      ExceptionMessage msg=new ExceptionMessage(payload,t,component,endpointUri);
      MuleMessage exceptionMessage;
      if (ctx == null) {
        exceptionMessage=new DefaultMuleMessage(msg,muleContext);
      }
 else {
        exceptionMessage=new DefaultMuleMessage(msg,ctx.getMessage(),muleContext);
      }
      for (int i=0; i < endpoints.size(); i++) {
        OutboundEndpoint endpoint=(OutboundEndpoint)endpoints.get(i);
        MuleEvent exceptionEvent=new DefaultMuleEvent(exceptionMessage,endpoint,new DefaultMuleSession(exceptionMessage,new MuleSessionHandler(),muleContext),true);
        exceptionEvent=RequestContext.setEvent(exceptionEvent);
        endpoint.send(exceptionEvent);
        if (logger.isDebugEnabled()) {
          logger.debug("routed Exception message via " + endpoint);
        }
      }
    }
 catch (    Exception e) {
      logFatal(message,e);
      closeStream(message);
    }
  }
 else {
    handleTransaction(t);
    closeStream(message);
  }
}
