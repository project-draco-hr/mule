{
  return new AbstractDataQualifierVisitor(){
    private boolean forceOptional=false;
    @Override public void onList(){
      DataType genericType=parameterModel.getType().getGenericTypes()[0];
      forceOptional=shouldForceOptional(genericType.getRawType());
      defaultOperation();
      if (shouldGenerateDataTypeChildElements(genericType,parameterModel)) {
        generateCollectionElement(all,parameterModel,true);
      }
    }
    @Override public void onMap(){
      DataType genericType=parameterModel.getType().getGenericTypes()[0];
      forceOptional=shouldForceOptional(genericType.getRawType());
      defaultOperation();
      if (shouldGenerateDataTypeChildElements(genericType,parameterModel)) {
        generateMapElement(all,parameterModel,true);
      }
    }
    @Override public void onPojo(){
      forceOptional=shouldForceOptional(parameterModel.getType().getRawType());
      if (TlsContextFactory.class.isAssignableFrom(parameterModel.getType().getRawType())) {
        addTlsSupport(extensionType,all);
        return;
      }
      defaultOperation();
      if (ExpressionSupport.REQUIRED != parameterModel.getExpressionSupport()) {
        if (shouldGeneratePojoChildElements(parameterModel.getType().getRawType())) {
          registerComplexTypeChildElement(all,parameterModel.getName(),parameterModel.getDescription(),parameterModel.getType(),false);
        }
      }
 else {
        registerPojoType(parameterModel.getType(),parameterModel.getDescription());
      }
    }
    @Override protected void defaultOperation(){
      extensionType.getAttributeOrAttributeGroup().add(createAttribute(parameterModel,isRequired(parameterModel,forceOptional)));
    }
    private boolean shouldGenerateDataTypeChildElements(    DataType type,    ParameterModel parameterModel){
      if (type == null) {
        return false;
      }
      boolean isExpressionRequired=ExpressionSupport.REQUIRED == parameterModel.getExpressionSupport();
      boolean isPojo=type.getQualifier().equals(POJO);
      boolean isPrimitive=type.getRawType().isPrimitive() || ClassUtils.isPrimitiveWrapper(type.getRawType());
      return !isExpressionRequired && (isPrimitive || (isPojo && shouldGeneratePojoChildElements(type.getRawType())) || (!isPojo && isInstantiable(type.getRawType())));
    }
    private boolean shouldGeneratePojoChildElements(    Class<?> type){
      return IntrospectionUtils.isInstantiable(type) && !getExposedFields(type).isEmpty();
    }
    private boolean shouldForceOptional(    Class<?> type){
      return !parameterModel.isRequired() || (IntrospectionUtils.isInstantiable(type) && ExpressionSupport.REQUIRED != parameterModel.getExpressionSupport());
    }
  }
;
}
