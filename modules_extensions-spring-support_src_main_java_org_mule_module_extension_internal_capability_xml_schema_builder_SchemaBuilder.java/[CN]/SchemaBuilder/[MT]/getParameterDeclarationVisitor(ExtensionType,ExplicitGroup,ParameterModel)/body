{
  return new AbstractDataQualifierVisitor(){
    private boolean forceOptional=false;
    @Override public void onList(){
      forceOptional=true;
      defaultOperation();
      DataType genericType=parameterModel.getType().getGenericTypes()[0];
      if (genericType != null && shouldGenerateListChildElements(genericType)) {
        generateCollectionElement(all,parameterModel,true);
      }
    }
    @Override public void onMap(){
      forceOptional=true;
      defaultOperation();
      DataType genericType=parameterModel.getType().getGenericTypes()[0];
      if (genericType != null && shouldGenerateListChildElements(genericType)) {
        generateMapElement(all,parameterModel,true);
      }
    }
    @Override public void onPojo(){
      forceOptional=true;
      defaultOperation();
      if (shouldGeneratePojoChildElements(parameterModel.getType().getRawType())) {
        registerComplexTypeChildElement(all,parameterModel.getName(),parameterModel.getDescription(),parameterModel.getType(),false);
      }
    }
    @Override protected void defaultOperation(){
      extensionType.getAttributeOrAttributeGroup().add(createAttribute(parameterModel,isRequired(parameterModel,forceOptional)));
    }
    private boolean shouldGenerateListChildElements(    DataType type){
      boolean isPojo=type.getQualifier().equals(POJO);
      boolean isPrimitive=type.getRawType().isPrimitive() || ClassUtils.isPrimitiveWrapper(type.getRawType());
      return isPrimitive || (isPojo && shouldGeneratePojoChildElements(type.getRawType())) || (!isPojo && isInstantiable(type.getRawType()));
    }
    private boolean shouldGeneratePojoChildElements(    Class<?> type){
      return IntrospectionUtils.isInstantiable(type) && !getExposedFields(type).isEmpty();
    }
  }
;
}
