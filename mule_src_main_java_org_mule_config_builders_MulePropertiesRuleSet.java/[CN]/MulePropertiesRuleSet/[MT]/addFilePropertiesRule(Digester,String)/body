{
  digester.addRule(path,new Rule(){
    public void begin(    String s,    String s1,    Attributes attributes) throws Exception {
      attributes=processor.processAttributes(attributes,s1);
      String location=attributes.getValue("location");
      String temp=attributes.getValue("override");
      boolean override="true".equalsIgnoreCase(temp);
      InputStream is=IOUtils.getResourceAsStream(location,getClass(),true,true);
      if (is == null) {
        throw new ConfigurationException(new Message(Messages.CANT_LOAD_X_FROM_CLASSPATH_FILE,location));
      }
      Properties fileProps=new Properties();
      fileProps.load(is);
      Map digesterProps=(Map)digester.peek();
      if (override) {
        digesterProps.putAll(fileProps);
      }
 else {
        String key;
        for (Iterator iterator=fileProps.keySet().iterator(); iterator.hasNext(); ) {
          key=(String)iterator.next();
          if (!digesterProps.containsKey(key)) {
            digesterProps.put(key,fileProps.getProperty(key));
          }
        }
      }
      if (StringUtils.isNotBlank(MuleServer.getStartupPropertiesFile())) {
        is=IOUtils.getResourceAsStream(MuleServer.getStartupPropertiesFile(),getClass(),true,false);
        if (is != null) {
          Properties startupProps=new Properties();
          startupProps.load(is);
          String key;
          for (Iterator iterator=startupProps.keySet().iterator(); iterator.hasNext(); ) {
            key=(String)iterator.next();
            if (digesterProps.containsKey(key)) {
              digesterProps.put(key,startupProps.getProperty(key));
            }
          }
        }
      }
    }
  }
);
}
