{
  if (logger.isInfoEnabled()) {
    logger.info("Initializing application: " + appName);
  }
  String configBuilderClassName=null;
  try {
    final String builderFromDesc=descriptor.getConfigurationBuilder();
    if ("spring".equalsIgnoreCase(builderFromDesc)) {
      configBuilderClassName=ApplicationDescriptor.CLASSNAME_SPRING_CONFIG_BUILDER;
    }
 else     if (builderFromDesc == null) {
      configBuilderClassName=AutoConfigurationBuilder.class.getName();
    }
 else {
      configBuilderClassName=builderFromDesc;
    }
    ConfigurationBuilder cfgBuilder=(ConfigurationBuilder)ClassUtils.instanciateClass(configBuilderClassName,new Object[]{absoluteResourcePaths},getDeploymentClassLoader());
    if (!cfgBuilder.isConfigured()) {
      List<ConfigurationBuilder> builders=new ArrayList<ConfigurationBuilder>(2);
      final Map<String,String> appProperties=descriptor.getAppProperties();
      if (appProperties != null && !appProperties.isEmpty()) {
        builders.add(new SimpleConfigurationBuilder(appProperties));
      }
      if (ClassUtils.isClassOnPath(MuleServer.CLASSNAME_ANNOTATIONS_CONFIG_BUILDER,getClass())) {
        Object configBuilder=ClassUtils.instanciateClass(MuleServer.CLASSNAME_ANNOTATIONS_CONFIG_BUILDER,ClassUtils.NO_ARGS,getClass());
        builders.add((ConfigurationBuilder)configBuilder);
      }
      builders.add(cfgBuilder);
      DefaultMuleContextFactory muleContextFactory=new DefaultMuleContextFactory();
      this.muleContext=muleContextFactory.createMuleContext(builders,new ApplicationMuleContextBuilder(descriptor));
      if (descriptor.isRedeploymentEnabled()) {
        createRedeployMonitor();
      }
    }
  }
 catch (  Exception e) {
    throw new DeploymentInitException(CoreMessages.failedToLoad(configBuilderClassName),e);
  }
}
