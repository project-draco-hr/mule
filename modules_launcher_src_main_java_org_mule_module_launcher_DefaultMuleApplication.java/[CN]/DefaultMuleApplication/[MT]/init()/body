{
  if (logger.isInfoEnabled()) {
    logger.info("Initializing application: " + appName);
  }
  String configBuilderClassName=null;
  try {
    final String builderFromDesc=descriptor.getConfigurationBuilder();
    if ("spring".equalsIgnoreCase(builderFromDesc)) {
      configBuilderClassName=ApplicationDescriptor.CLASSNAME_SPRING_CONFIG_BUILDER;
    }
 else     if (builderFromDesc == null) {
      configBuilderClassName=AutoConfigurationBuilder.class.getName();
    }
 else {
      configBuilderClassName=builderFromDesc;
    }
    ConfigurationBuilder cfgBuilder=(ConfigurationBuilder)ClassUtils.instanciateClass(configBuilderClassName,new Object[]{configUrl.toExternalForm()},getDeploymentClassLoader());
    if (!cfgBuilder.isConfigured()) {
      DefaultMuleContextFactory muleContextFactory=new DefaultMuleContextFactory();
      this.muleContext=muleContextFactory.createMuleContext(cfgBuilder,new DefaultMuleContextBuilder(){
        @Override protected DefaultMuleConfiguration createMuleConfiguration(){
          final DefaultMuleConfiguration configuration=new DefaultMuleConfiguration(true);
          configuration.setId(appName);
          final String encoding=descriptor.getEncoding();
          if (StringUtils.isNotBlank(encoding)) {
            configuration.setDefaultEncoding(encoding);
          }
          return configuration;
        }
      }
);
      if (redeploymentEnabled) {
        createRedeployMonitor();
      }
    }
  }
 catch (  Exception e) {
    throw new DeploymentInitException(CoreMessages.failedToLoad(configBuilderClassName),e);
  }
}
