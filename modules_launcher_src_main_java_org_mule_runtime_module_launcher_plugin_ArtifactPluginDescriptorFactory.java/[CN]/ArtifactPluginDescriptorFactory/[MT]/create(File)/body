{
  final String pluginName=pluginFolder.getName();
  final ArtifactPluginDescriptor descriptor=new ArtifactPluginDescriptor();
  descriptor.setRootFolder(pluginFolder);
  descriptor.setName(pluginName);
  final File pluginPropsFile=new File(pluginFolder,PLUGIN_PROPERTIES);
  if (pluginPropsFile.exists()) {
    Properties props;
    try {
      props=loadProperties(pluginPropsFile.toURI().toURL());
    }
 catch (    IOException e) {
      throw new ArtifactDescriptorCreateException("Cannot read plugin.properties file",e);
    }
    String exportedClasses=props.getProperty(EXPORTED_CLASS_PACKAGES_PROPERTY);
    String exportedResources=props.getProperty(EXPORTED_RESOURCE_PACKAGES_PROPERTY);
    final ArtifactClassLoaderFilter classLoaderFilter=classLoaderFilterFactory.create(exportedClasses,exportedResources);
    descriptor.setClassLoaderFilter(classLoaderFilter);
  }
  try {
    descriptor.setRuntimeClassesDir(new File(pluginFolder,"classes").toURI().toURL());
    final File libDir=new File(pluginFolder,"lib");
    URL[] urls=new URL[0];
    if (libDir.exists()) {
      final File[] jars=libDir.listFiles((FilenameFilter)new SuffixFileFilter(".jar"));
      urls=new URL[jars.length];
      for (int i=0; i < jars.length; i++) {
        urls[i]=jars[i].toURI().toURL();
      }
    }
    descriptor.setRuntimeLibs(urls);
  }
 catch (  MalformedURLException e) {
    throw new ArtifactDescriptorCreateException("Failed to create plugin descriptor " + pluginFolder);
  }
  return descriptor;
}
