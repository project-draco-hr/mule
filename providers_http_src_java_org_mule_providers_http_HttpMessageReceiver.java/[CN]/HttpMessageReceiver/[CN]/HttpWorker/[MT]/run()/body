{
  try {
    do {
      conn.setKeepAlive(false);
      HttpRequest request=conn.readRequest();
      if (request == null) {
        break;
      }
      Map headers=new HashMap();
      for (int i=0; i < request.getHeaders().length; i++) {
        Header header=request.getHeaders()[i];
        String headerName=header.getName();
        if (headerName.startsWith("X-MULE")) {
          headerName=headerName.replaceAll("X-MULE","MULE");
        }
        if (headerName.equals(HttpConstants.HEADER_COOKIE) && enableCookies) {
          Cookie[] cookies=CookieHelper.parseCookies(header,cookieSpec);
          if (cookies.length > 0) {
            headers.put(HttpConnector.HTTP_COOKIES_PROPERTY,cookies);
          }
        }
        headers.put(headerName,header.getValue());
      }
      headers.put(HttpConnector.HTTP_METHOD_PROPERTY,request.getRequestLine().getMethod());
      headers.put(HttpConnector.HTTP_REQUEST_PROPERTY,request.getRequestLine().getUri());
      headers.put(HttpConnector.HTTP_VERSION_PROPERTY,request.getRequestLine().getHttpVersion().toString());
      headers.put(HttpConnector.HTTP_COOKIE_SPEC_PROPERTY,cookieSpec);
      UMOMessageAdapter adapter;
      Object body=null;
      if (endpoint.isStreaming() && request.getBody() != null) {
        adapter=new StreamMessageAdapter(request.getBody(),conn.getOutputStream());
        for (Iterator iterator=headers.entrySet().iterator(); iterator.hasNext(); ) {
          Map.Entry entry=(Map.Entry)iterator.next();
          adapter.setProperty(entry.getKey(),entry.getValue());
        }
      }
 else {
        body=request.getBodyBytes();
        if (body == null) {
          body=request.getRequestLine().getUri();
        }
        adapter=connector.getMessageAdapter(new Object[]{body,headers});
      }
      UMOMessage message=new MuleMessage(adapter);
      if (logger.isDebugEnabled()) {
        logger.debug(message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
      }
      AbstractMessageReceiver receiver=getTargetReceiver(message,endpoint);
      HttpResponse response=null;
      if (receiver != null) {
        UMOMessage returnMessage=receiver.routeMessage(message,endpoint.isSynchronous(),null);
        Object tempResponse=returnMessage.getPayload();
        if (tempResponse instanceof HttpResponse) {
          response=(HttpResponse)tempResponse;
        }
 else {
          response=(HttpResponse)connector.getDefaultResponseTransformer().transform(tempResponse);
        }
        response.disableKeepAlive(!((HttpConnector)connector).isKeepAlive());
      }
 else {
        String failedPath=endpoint.getEndpointURI().getScheme() + "://" + endpoint.getEndpointURI().getHost()+ ":"+ endpoint.getEndpointURI().getPort()+ getRequestPath(message);
        if (logger.isDebugEnabled()) {
          logger.debug("Failed to bind to " + failedPath);
        }
        response=new HttpResponse();
        response.setStatusLine(request.getRequestLine().getHttpVersion(),HttpConstants.SC_NOT_FOUND);
        response.setBodyString(new Message(Messages.CANNOT_BIND_TO_ADDRESS_X,failedPath).toString());
        response=(HttpResponse)connector.getDefaultResponseTransformer().transform(response);
      }
      conn.writeResponse(response);
    }
 while (conn.isKeepAlive());
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    conn.close();
    conn=null;
  }
}
