{
  boolean keepAlive;
  try {
    dataIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
    dataOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
    do {
      if (disposing.get() || socket.isClosed()) {
        logger.debug("Peer closed connection");
        break;
      }
      Properties headers=new Properties();
      Object payload=parseRequest(dataIn,headers);
      if (payload == null) {
        break;
      }
      UMOMessageAdapter adapter=connector.getMessageAdapter(new Object[]{payload,headers});
      keepAlive=adapter.getBooleanProperty(HttpConstants.HEADER_KEEP_ALIVE,true);
      UMOMessage message=new MuleMessage(adapter);
      if (logger.isDebugEnabled()) {
        logger.debug(message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
      }
      OutputStream os=new ResponseOutputStream(dataOut,socket);
      AbstractMessageReceiver receiver=getTargetReceiver(message,endpoint);
      UMOMessage returnMessage=receiver.routeMessage(message,endpoint.isSynchronous(),os);
      if (returnMessage == null) {
        returnMessage=new MuleMessage("");
      }
      RequestContext.rewriteEvent(returnMessage);
      Object response=responseTransformer.transform(returnMessage.getPayload());
      if (response instanceof byte[]) {
        dataOut.write((byte[])response);
      }
 else {
        dataOut.write(response.toString().getBytes());
      }
      dataOut.flush();
    }
 while (socket.isConnected() && keepAlive);
  }
 catch (  Exception e) {
    keepAlive=false;
    handleException(e);
  }
 finally {
    dispose();
  }
}
