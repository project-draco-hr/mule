{
  try {
    dataIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
    dataOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
    int counter=0;
    while (!socket.isClosed() && !disposing.get()) {
      UMOMessageAdapter adapter=null;
      try {
        adapter=connector.getMessageAdapter(socket.getInputStream());
      }
 catch (      MuleRuntimeException e) {
        logger.debug(e.getMessage());
      }
      if (adapter != null) {
        UMOMessage message=new MuleMessage(adapter);
        if (logger.isDebugEnabled()) {
          logger.debug((String)message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
        }
        OutputStream os=new ResponseOutputStream(dataOut,socket);
        UMOMessage returnMessage=routeMessage(message,connector.isSynchronous(),os);
        if (returnMessage == null) {
          returnMessage=new MuleMessage("",null);
        }
        RequestContext.rewriteEvent(returnMessage);
        String responseText=(String)getResponseTransformer().transform(returnMessage.getPayload());
        dataOut.write(responseText.getBytes());
        dataOut.flush();
        socket.close();
      }
    }
  }
 catch (  Exception e) {
    handleException("Failed to process tcp Request on: " + (socket != null ? socket.getInetAddress().toString() : "null"),e);
  }
 finally {
    dispose();
  }
}
