{
  try {
    int counter=0;
    do {
      if (isServerSide() && ++counter > 500) {
        counter=0;
        Thread.yield();
      }
      if (disposing.get() || socket.isClosed()) {
        logger.debug("Peer closed connection");
        break;
      }
      dataIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
      dataOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
      UMOMessageAdapter adapter=null;
      Properties headers=new Properties();
      byte[] payload=parseRequest(dataIn,headers);
      if (payload == null)       break;
      adapter=connector.getMessageAdapter(new Object[]{payload,headers});
      boolean http11=((String)adapter.getProperty(HttpConnector.HTTP_VERSION_PROPERTY)).equalsIgnoreCase(HttpConstants.HTTP11);
      if (!http11) {
        keepAlive=adapter.getProperty(HttpConstants.HEADER_KEEP_ALIVE) != null;
      }
 else {
        String connection=(String)adapter.getProperty(HttpConstants.HEADER_CONNECTION);
        if (connection != null && connection.equalsIgnoreCase("close")) {
          keepAlive=false;
        }
 else {
          keepAlive=true;
        }
      }
      if (keepAlive && !keepAliveRegistered) {
        keepAliveRegistered=true;
        if (keepAliveMonitor != null) {
          keepAliveMonitor.addExpirable(((HttpConnector)connector).getKeepAliveTimeout(),this);
        }
 else {
          logger.info("Request has Keep alive set but the HttpConnector has keep alive disables");
          keepAlive=false;
        }
      }
      if (adapter != null) {
        UMOMessage message=new MuleMessage(adapter);
        if (logger.isDebugEnabled()) {
          logger.debug((String)message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
        }
        OutputStream os=new ResponseOutputStream(dataOut,socket);
        UMOMessage returnMessage=routeMessage(message,endpoint.isSynchronous(),os);
        if (returnMessage == null) {
          returnMessage=new MuleMessage("",null);
        }
        RequestContext.rewriteEvent(returnMessage);
        String responseText=(String)getResponseTransformer().transform(returnMessage.getPayload());
        dataOut.write(responseText.getBytes());
        dataOut.flush();
        if (keepAliveMonitor != null) {
          keepAliveMonitor.resetExpirable(this);
        }
      }
    }
 while (!socket.isClosed() && keepAlive);
  }
 catch (  Exception e) {
    keepAlive=false;
    handleException("Failed to process tcp Request on: " + (socket != null ? socket.getInetAddress().toString() : "null"),e);
  }
 finally {
    if (keepAliveMonitor != null) {
      keepAliveMonitor.removeExpirable(this);
    }
    dispose();
  }
}
