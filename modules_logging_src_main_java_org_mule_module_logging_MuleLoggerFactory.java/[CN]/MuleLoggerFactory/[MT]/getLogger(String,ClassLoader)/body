{
  ConcurrentMap<String,Logger> loggerMap=repositories.get(classLoader);
  if (loggerMap == null) {
    loggerMap=new ConcurrentHashMap<String,Logger>();
    final ConcurrentMap<String,Logger> previous=repositories.putIfAbsent(classLoader,loggerMap);
    if (previous != null) {
      loggerMap=previous;
    }
  }
  Logger slf4jLogger=loggerMap.get(name);
  if (slf4jLogger == null) {
    org.apache.log4j.Logger log4jLogger;
    if (name.equalsIgnoreCase(Logger.ROOT_LOGGER_NAME)) {
      log4jLogger=LogManager.getRootLogger();
    }
 else {
      log4jLogger=LogManager.getLogger(name);
    }
    slf4jLogger=new DispatchingLogger(new AccessibleLog4jLoggerAdapter(log4jLogger),this);
    final Logger previous=loggerMap.putIfAbsent(name,slf4jLogger);
    if (previous != null) {
      slf4jLogger=previous;
    }
  }
  return slf4jLogger;
}
