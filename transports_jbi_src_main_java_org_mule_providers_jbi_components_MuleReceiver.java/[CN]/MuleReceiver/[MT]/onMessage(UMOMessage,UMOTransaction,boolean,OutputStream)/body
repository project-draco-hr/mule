{
  MessageExchange me=null;
  try {
    if (synchronous) {
      me=exchangeFactory.createInOutExchange();
    }
 else {
      me=exchangeFactory.createInOnlyExchange();
    }
    if (targetService != null) {
      me.setService(targetService);
      ServiceEndpoint endpoint=null;
      ServiceEndpoint[] eps=context.getEndpointsForService(targetService);
      if (eps.length == 0) {
        throw new MessagingException("There are no endpoints registered for targetService: " + targetService);
      }
 else {
        endpoint=eps[0];
      }
      if (logger.isDebugEnabled()) {
        StringBuffer buf=new StringBuffer("Found the following endpoints for: ");
        buf.append(targetService).append(SystemUtils.LINE_SEPARATOR);
        for (int i=0; i < eps.length; i++) {
          ServiceEndpoint ep=eps[i];
          buf.append(ep.getEndpointName()).append(";").append(ep.getServiceName()).append(";").append(ep.getInterfaces()).append(SystemUtils.LINE_SEPARATOR);
        }
        logger.debug(buf.toString());
      }
      logger.debug("Using Jbi Endpoint for targetService: " + targetService + " is: "+ endpoint);
      if (endpoint != null) {
        me.setEndpoint(endpoint);
      }
    }
 else {
      logger.debug("Jbi target service is not set Container will need to resolve target");
    }
    NormalizedMessage nmessage=me.createMessage();
    JbiUtils.populateNormalizedMessage(message,nmessage);
    me.setMessage(nmessage,IN);
    if (synchronous) {
      deliveryChannel.sendSync(me,MuleManager.getConfiguration().getSynchronousEventTimeout());
      NormalizedMessage result=null;
      result=me.getMessage(OUT);
      done(me);
      if (result != null) {
        return new MuleMessage(new JbiMessageAdapter(result));
      }
 else {
        return null;
      }
    }
 else {
      deliveryChannel.send(me);
      return null;
    }
  }
 catch (  MessagingException e) {
    try {
      error(me,e);
      return null;
    }
 catch (    MessagingException e1) {
      handleException(e);
      return null;
    }
  }
}
