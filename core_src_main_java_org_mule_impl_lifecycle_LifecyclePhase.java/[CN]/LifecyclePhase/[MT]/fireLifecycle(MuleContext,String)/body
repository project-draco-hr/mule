{
  if (logger.isDebugEnabled()) {
    logger.debug("Attempting to fire lifecycle phase: " + getName());
  }
  if (currentPhase.equals(name)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Not firing, already in lifecycle phase: " + getName());
    }
    return;
  }
  if (!isPhaseSupported(currentPhase)) {
    throw new IllegalStateException("Lifecycle phase: " + name + " does not support current phase: "+ currentPhase+ ". Phases supported are: "+ StringMessageUtils.toString(supportedPhases));
  }
  boolean fireDefault=true;
  Set called=new HashSet();
  for (Iterator iterator=orderedLifecycleObjects.iterator(); iterator.hasNext(); ) {
    LifecycleObject lo=(LifecycleObject)iterator.next();
    if (lo.getType().equals(getLifecycleClass())) {
      fireDefault=false;
    }
    Collection objects=RegistryContext.getRegistry().lookupObjects(lo.getType(),getRegistryScope());
    if (objects != null && objects.size() > 0) {
      lo.firePreNotification(muleContext);
      for (Iterator iterator1=objects.iterator(); iterator1.hasNext(); ) {
        Object o=iterator1.next();
        if (called.contains(new Integer(o.hashCode()))) {
          continue;
        }
        if (logger.isDebugEnabled()) {
          logger.debug("lifecycle phase: " + getName() + " for object: "+ o);
        }
        applyLifecycle(o);
        called.add(new Integer(o.hashCode()));
      }
      lo.firePostNotification(muleContext);
    }
  }
  if (fireDefault) {
  }
}
