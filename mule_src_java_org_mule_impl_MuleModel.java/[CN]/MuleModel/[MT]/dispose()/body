{
  fireEvent(new ModelEvent(this,ModelEvent.MODEL_DISPOSING));
  UMOComponent temp=null;
  Object key=null;
  for (Iterator i=components.keySet().iterator(); i.hasNext(); ) {
    try {
      key=i.next();
      temp=(UMOComponent)components.get(key);
      try {
        temp.dispose();
      }
 catch (      Exception e1) {
        logger.warn("Failed to dispose component: " + e1.getMessage());
      }
      components.remove(temp.getDescriptor());
      logger.info(temp + " has been destroyed successfully");
    }
 catch (    ConcurrentModificationException e) {
      logger.warn("cannot dispose calling component");
      return;
    }
  }
  fireEvent(new ModelEvent(this,ModelEvent.MODEL_DISPOSED));
}
