{
  String correlationId=originalEvent.getMessage().getCorrelation().getId().orElse(originalEvent.getMessage().getUniqueId());
  List<MuleEvent> resultEvents=new ArrayList<>();
  int correlationSequence=0;
  MessageSequence<?> messageSequence=seq;
  if (batchSize > 1) {
    messageSequence=new PartitionedMessageSequence(seq,batchSize);
  }
  Integer count=messageSequence.size();
  for (; messageSequence.hasNext(); ) {
    MuleEvent event=createEvent(messageSequence.next(),originalEvent);
    correlationSequence++;
    if (counterVariableName != null) {
      originalEvent.setFlowVariable(counterVariableName,correlationSequence);
    }
    final Builder builder=MuleMessage.builder(event.getMessage());
    if (enableCorrelation.doCorrelation(event.getMessage().getCorrelation())) {
      builder.correlationId(correlationId);
    }
    if (enableCorrelation != NEVER) {
      builder.correlationGroupSize(count);
      builder.correlationSequence(correlationSequence);
    }
    builder.rootId(originalEvent.getMessage().getMessageRootId());
    event.setMessage(builder.build());
    setCurrentEvent(event);
    MuleEvent resultEvent=processNext(event);
    if (resultEvent != null && !VoidMuleEvent.getInstance().equals(resultEvent)) {
      resultEvents.add(resultEvent);
    }
  }
  if (correlationSequence == 1) {
    logger.debug("Splitter only returned a single result. If this is not expected, please check your split expression");
  }
  return resultEvents;
}
