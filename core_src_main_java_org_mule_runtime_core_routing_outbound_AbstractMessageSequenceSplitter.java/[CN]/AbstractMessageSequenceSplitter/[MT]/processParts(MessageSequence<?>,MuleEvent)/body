{
  List<MuleEvent> resultEvents=new ArrayList<>();
  int correlationSequence=0;
  MessageSequence<?> messageSequence=seq;
  if (batchSize > 1) {
    messageSequence=new PartitionedMessageSequence(seq,batchSize);
  }
  Integer count=messageSequence.size();
  MuleEvent lastResult=null;
  for (; messageSequence.hasNext(); ) {
    correlationSequence++;
    final Builder builder=MuleEvent.builder(originalEvent);
    propagateFlowVars(lastResult,builder);
    if (counterVariableName != null) {
      builder.addFlowVariable(counterVariableName,correlationSequence);
    }
    builder.correlation(new Correlation(count,correlationSequence));
    initEventBuilder(messageSequence.next(),originalEvent,builder,resolvePropagatedFlowVars(lastResult));
    final MuleEvent event=builder.build();
    ((DefaultMuleEvent)event).setParent(originalEvent);
    MuleEvent resultEvent=processNext(event);
    if (resultEvent != null && !VoidMuleEvent.getInstance().equals(resultEvent)) {
      resultEvents.add(resultEvent);
      lastResult=resultEvent;
    }
  }
  if (correlationSequence == 1) {
    logger.debug("Splitter only returned a single result. If this is not expected, please check your split expression");
  }
  return resultEvents;
}
