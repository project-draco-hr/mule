{
  if (messageInfoMapping == null) {
    messageInfoMapping=originalEvent.getFlowConstruct().getMessageInfoMapping();
  }
  String correlationId=messageInfoMapping.getCorrelationId(originalEvent);
  List<MuleEvent> resultEvents=new ArrayList<MuleEvent>();
  int correlationSequence=0;
  MessageSequence<?> messageSequence=seq;
  if (batchSize > 1) {
    messageSequence=new PartitionedMessageSequence(seq,batchSize);
  }
  int count=messageSequence.size();
  for (; messageSequence.hasNext(); ) {
    MuleEvent event=createEvent(messageSequence.next(),originalEvent);
    correlationSequence++;
    if (counterVariableName != null) {
      originalEvent.setFlowVariable(counterVariableName,correlationSequence);
    }
    if (enableCorrelation != CorrelationMode.NEVER) {
      boolean correlationSet=event.getMessage().getCorrelationId() != null;
      if ((!correlationSet && (enableCorrelation == CorrelationMode.IF_NOT_SET)) || (enableCorrelation == CorrelationMode.ALWAYS)) {
        event.getMessage().setCorrelationId(correlationId);
      }
      event.getMessage().setCorrelationGroupSize(count);
      event.getMessage().setCorrelationSequence(correlationSequence);
    }
    event.getMessage().propagateRootId(originalEvent.getMessage());
    MuleEvent resultEvent=processNext(RequestContext.setEvent(event));
    if (resultEvent != null && !VoidMuleEvent.getInstance().equals(resultEvent)) {
      resultEvents.add(resultEvent);
    }
  }
  if (correlationSequence == 1) {
    logger.debug("Splitter only returned a single result. If this is not expected, please check your split expression");
  }
  return resultEvents;
}
