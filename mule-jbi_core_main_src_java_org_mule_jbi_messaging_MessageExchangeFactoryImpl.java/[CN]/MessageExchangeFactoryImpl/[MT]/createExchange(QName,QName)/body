{
  if (channel.isClosed()) {
    throw new MessagingException("Channel is closed");
  }
  ServiceEndpoint[] endpoints=this.channel.getContainer().getEndpointRegistry().getInternalEndpointsForService(serviceName);
  Set meps=new HashSet();
  for (int i=0; i < endpoints.length; i++) {
    try {
      String name=((AbstractServiceEndpoint)endpoints[i]).getComponent();
      ComponentInfo info=this.channel.getContainer().getComponentRegistry().getComponent(name);
      Document doc=info.getComponent().getServiceDescription(endpoints[i]);
      String uri=doc.getDocumentElement().getNamespaceURI();
      WSDLDescription desc=null;
      if (WSDLConstants.WSDL2_0_NAMESPACE.equals(uri)) {
        throw new NotImplementedException();
      }
 else       if (WSDLConstants.WSDL1_1_NAMESPACE.equals(uri)) {
        WSDLReader reader=WSDLFactory.newInstance().newWSDLReader();
        Definition def=reader.readWSDL(null,doc);
        desc=new WSDLDescriptionImpl();
        WSDLPump pump=new WSDLPump(desc,def);
        pump.pump();
      }
 else {
        throw new UnsupportedOperationException();
      }
      Collection interfaces=desc.getWsdlInterfaces().values();
      for (Iterator iter=interfaces.iterator(); iter.hasNext(); ) {
        WSDLInterface itf=(WSDLInterface)iter.next();
        WSDLOperation op=itf.getOperation(operationName.getLocalPart());
        if (op != null) {
          meps.add(op.getMessageExchangePattern());
        }
      }
    }
 catch (    Exception e) {
    }
  }
  if (meps.size() == 0) {
    throw new MessagingException("Could not determine mep");
  }
  if (meps.size() > 1) {
    throw new MessagingException("More than one mep for this operation");
  }
  MessageExchange me=createExchange(URI.create(meps.iterator().next().toString()));
  init(me);
  me.setService(serviceName);
  me.setOperation(operationName);
  return me;
}
