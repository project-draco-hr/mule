{
  final List<MuleModule> muleModules=new ArrayList<>();
  muleModules.add(new TestModuleBuilder("module1").exportingPackages("org.foo1","org.foo1.bar.").exportingResources("META-INF/foo.txt","META-INF/docs1/foo.txt").build());
  muleModules.add(new TestModuleBuilder("module2").exportingPackages("org.foo2").exportingResources("META-INF/","/META-INF/docs2").build());
  final ClassLoaderFilter classLoaderFilter=factory.create(Collections.emptySet(),muleModules);
  assertThat(classLoaderFilter.exportsClass("org.foo1.Foo"),is(true));
  assertThat(classLoaderFilter.exportsClass("org.foo1.bar.Bar"),is(true));
  assertThat(classLoaderFilter.exportsClass("org.foo2.Foo"),is(true));
  assertThat(classLoaderFilter.exportsClass("org.bar.Bar"),is(false));
  assertThat(classLoaderFilter.exportsClass("org.foo2.bar.Bar"),is(false));
  assertThat(classLoaderFilter.exportsResource("META-INF/foo.txt"),is(true));
  assertThat(classLoaderFilter.exportsResource("META-INF/docs1/foo.txt"),is(true));
  assertThat(classLoaderFilter.exportsResource("META-INF/docs2/foo.txt"),is(true));
  assertThat(classLoaderFilter.exportsResource("/META-INF/docs2/foo.txt"),is(true));
  assertThat(classLoaderFilter.exportsResource("/foo.txt"),is(false));
}
