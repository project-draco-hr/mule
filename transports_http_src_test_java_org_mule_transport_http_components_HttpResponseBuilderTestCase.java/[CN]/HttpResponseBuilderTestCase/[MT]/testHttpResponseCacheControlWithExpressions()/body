{
  HttpResponseBuilder httpResponseBuilder=createHttpResponseBuilder();
  CacheControlHeader cacheControl=new CacheControlHeader();
  cacheControl.setDirective(HEADER_DIRECTIVE);
  cacheControl.setMaxAge(HEADER_MAX_AGE);
  cacheControl.setMustRevalidate(HEADER_MUST_REVALIDATE);
  cacheControl.setNoCache(HEADER_NO_CACHE);
  cacheControl.setNoStore(HEADER_NO_STORE);
  httpResponseBuilder.setCacheControl(cacheControl);
  when(mockExpressionManager.isExpression(HEADER_DIRECTIVE)).thenReturn(true);
  when(mockExpressionManager.evaluate(HEADER_DIRECTIVE,mockMuleMessage)).thenReturn("public");
  when(mockExpressionManager.isExpression(HEADER_MAX_AGE)).thenReturn(true);
  when(mockExpressionManager.evaluate(HEADER_MAX_AGE,mockMuleMessage)).thenReturn(3600);
  when(mockExpressionManager.isExpression(HEADER_MUST_REVALIDATE)).thenReturn(true);
  when(mockExpressionManager.evaluate(HEADER_MUST_REVALIDATE,mockMuleMessage)).thenReturn(true);
  when(mockExpressionManager.isExpression(HEADER_NO_CACHE)).thenReturn(true);
  when(mockExpressionManager.evaluate(HEADER_NO_CACHE,mockMuleMessage)).thenReturn(true);
  when(mockExpressionManager.isExpression(HEADER_NO_STORE)).thenReturn(true);
  when(mockExpressionManager.evaluate(HEADER_NO_STORE,mockMuleMessage)).thenReturn(true);
  HttpResponse response=new HttpResponse();
  httpResponseBuilder.setCacheControl(response,mockMuleMessage);
  assertEquals("public,no-cache,no-store,must-revalidate,max-age=3600",response.getFirstHeader(HttpConstants.HEADER_CACHE_CONTROL).getValue());
}
