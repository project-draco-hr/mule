{
  MuleContext context=mock(MuleContext.class);
  ExpressionManager expressionManager=mock(ExpressionManager.class);
  when(context.getExpressionManager()).thenReturn(expressionManager);
  MuleEvent muleEvent=mock(MuleEvent.class);
  final DbPoolingProfile poolingProfile=mock(DbPoolingProfile.class);
  final String url="url";
  final String password="password";
  final String user="user";
  final int connectionTimeout=10;
  final String driverClassName="driverClassName";
  final int transactionIsolation=1;
  final boolean useXaTransactions=true;
  dataSourceConfig.setMuleContext(context);
  dataSourceConfig.setPoolingProfile(poolingProfile);
  dataSourceConfig.setUrl(url);
  dataSourceConfig.setPassword(password);
  dataSourceConfig.setUser(user);
  dataSourceConfig.setConnectionTimeout(connectionTimeout);
  dataSourceConfig.setDriverClassName(driverClassName);
  dataSourceConfig.setTransactionIsolation(transactionIsolation);
  dataSourceConfig.setUseXaTransactions(useXaTransactions);
  DataSourceConfig resolvedDataSourceConfig=dataSourceConfig.resolve(muleEvent);
  assertThat(resolvedDataSourceConfig.getUrl(),equalTo(url));
  assertThat(resolvedDataSourceConfig.getPassword(),equalTo(password));
  assertThat(resolvedDataSourceConfig.getUser(),equalTo(user));
  assertThat(resolvedDataSourceConfig.getConnectionTimeout(),equalTo(connectionTimeout));
  assertThat(resolvedDataSourceConfig.getDriverClassName(),equalTo(driverClassName));
  assertThat(resolvedDataSourceConfig.getTransactionIsolation(),equalTo(transactionIsolation));
  assertThat(resolvedDataSourceConfig.isUseXaTransactions(),equalTo(useXaTransactions));
}
