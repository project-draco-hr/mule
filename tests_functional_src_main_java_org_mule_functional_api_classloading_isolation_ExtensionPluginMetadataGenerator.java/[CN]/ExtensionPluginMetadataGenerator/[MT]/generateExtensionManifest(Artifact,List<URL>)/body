{
  logger.debug("Scanning plugin '{}' for annotated Extension class",plugin);
  ClassPathScanningCandidateComponentProvider scanner=new ClassPathScanningCandidateComponentProvider(true);
  scanner.addIncludeFilter(new AnnotationTypeFilter(Extension.class));
  scanner.setResourceLoader(new PathMatchingResourcePatternResolver(new URLClassLoader(urls.toArray(new URL[0]),null)));
  Set<BeanDefinition> extensionsAnnotatedClasses=scanner.findCandidateComponents("");
  if (extensionsAnnotatedClasses.size() > 1) {
    throw new IllegalStateException("While scanning class loader on plugin '" + plugin + "' for discovering @Extension classes annotated, more than one found. Only one should be discovered, found: "+ extensionsAnnotatedClasses);
  }
 else   if (extensionsAnnotatedClasses.size() == 1) {
    String extensionClassName=extensionsAnnotatedClasses.iterator().next().getBeanClassName();
    logger.debug("Generating Extension metadata for extension class: '{}'",extensionClassName);
    File generatedResourcesDirectory=new File(generatedResourcesBase,plugin.getArtifactId() + separator + "META-INF");
    generatedResourcesDirectory.mkdirs();
    Class extensionClass;
    try {
      extensionClass=Class.forName(extensionClassName);
    }
 catch (    ClassNotFoundException e) {
      throw new IllegalArgumentException("Cannot load Extension class '" + extensionClassName + "'",e);
    }
    final StaticVersionResolver versionResolver=new StaticVersionResolver(plugin.getVersion());
    extensionsInfrastructure.generateLoaderResources(extensionsInfrastructure.discoverExtension(extensionClass,versionResolver),generatedResourcesDirectory);
    extensionsResourcesFolders.add(generatedResourcesDirectory);
    return generatedResourcesDirectory.getParentFile();
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug("Plugin '{}' not an Extension",plugin);
    }
  }
  return null;
}
