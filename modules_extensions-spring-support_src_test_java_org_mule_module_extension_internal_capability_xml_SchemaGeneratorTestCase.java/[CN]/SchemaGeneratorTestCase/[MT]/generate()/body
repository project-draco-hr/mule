{
  String expectedSchema=IOUtils.getResourceAsString(expectedXSD,getClass());
  Descriptor descriptor=new AnnotationsBasedDescriber(extensionUnderTest).describe(new DefaultDescribingContext()).getRootDeclaration();
  ExtensionModel extensionModel=extensionFactory.createFrom(descriptor);
  XmlModelProperty capability=extensionModel.getModelProperty(XmlModelProperty.KEY);
  String schema=generator.generate(extensionModel,capability);
  XMLUnit.setNormalizeWhitespace(true);
  XMLUnit.setIgnoreWhitespace(true);
  XMLUnit.setIgnoreComments(true);
  XMLUnit.setIgnoreAttributeOrder(true);
  Diff diff=XMLUnit.compareXML(expectedSchema,schema);
  if (!(diff.similar() && diff.identical())) {
    System.out.println(schema);
    DetailedDiff detDiff=new DetailedDiff(diff);
    @SuppressWarnings("rawtypes") List differences=detDiff.getAllDifferences();
    StringBuilder diffLines=new StringBuilder();
    for (    Object object : differences) {
      Difference difference=(Difference)object;
      diffLines.append(difference.toString() + '\n');
    }
    assertEquals(String.format("The Output for extension [%s] schema was not the expected:",extensionUnderTest.getName()),expectedSchema,schema);
  }
}
