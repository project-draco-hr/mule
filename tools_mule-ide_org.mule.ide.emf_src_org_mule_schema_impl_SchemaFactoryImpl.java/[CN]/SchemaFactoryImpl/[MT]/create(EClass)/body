{
switch (eClass.getClassifierID()) {
case SchemaPackage.AGENTS_TYPE:
    return createAgentsType();
case SchemaPackage.AGENT_TYPE:
  return createAgentType();
case SchemaPackage.CATCH_ALL_STRATEGY_TYPE:
return createCatchAllStrategyType();
case SchemaPackage.COMPONENT_FACTORY_TYPE:
return createComponentFactoryType();
case SchemaPackage.COMPONENT_LIFECYCLE_ADAPTER_FACTORY_TYPE:
return createComponentLifecycleAdapterFactoryType();
case SchemaPackage.COMPONENT_POOL_FACTORY_TYPE:
return createComponentPoolFactoryType();
case SchemaPackage.CONNECTION_STRATEGY_TYPE:
return createConnectionStrategyType();
case SchemaPackage.CONNECTOR_TYPE:
return createConnectorType();
case SchemaPackage.CONSTRAINT_TYPE:
return createConstraintType();
case SchemaPackage.CONTAINER_CONTEXT_TYPE:
return createContainerContextType();
case SchemaPackage.CONTAINER_ENTRY_TYPE:
return createContainerEntryType();
case SchemaPackage.CONTAINER_PROPERTY_TYPE:
return createContainerPropertyType();
case SchemaPackage.DOCUMENT_ROOT:
return createDocumentRoot();
case SchemaPackage.ENCRYPTION_STRATEGY_TYPE:
return createEncryptionStrategyType();
case SchemaPackage.ENDPOINT_IDENTIFIERS_TYPE:
return createEndpointIdentifiersType();
case SchemaPackage.ENDPOINT_IDENTIFIER_TYPE:
return createEndpointIdentifierType();
case SchemaPackage.ENDPOINT_TYPE:
return createEndpointType();
case SchemaPackage.ENTRY_POINT_RESOLVER_TYPE:
return createEntryPointResolverType();
case SchemaPackage.ENTRY_TYPE:
return createEntryType();
case SchemaPackage.ENVIRONMENT_PROPERTIES_TYPE:
return createEnvironmentPropertiesType();
case SchemaPackage.EXCEPTION_STRATEGY_TYPE:
return createExceptionStrategyType();
case SchemaPackage.FACTORY_ENTRY_TYPE:
return createFactoryEntryType();
case SchemaPackage.FACTORY_PROPERTY_TYPE:
return createFactoryPropertyType();
case SchemaPackage.FILE_PROPERTIES_TYPE:
return createFilePropertiesType();
case SchemaPackage.FILTER_TYPE:
return createFilterType();
case SchemaPackage.GLOBAL_ENDPOINTS_TYPE:
return createGlobalEndpointsType();
case SchemaPackage.GLOBAL_ENDPOINT_TYPE:
return createGlobalEndpointType();
case SchemaPackage.INBOUND_ROUTER_TYPE:
return createInboundRouterType();
case SchemaPackage.INTERCEPTOR_STACK_TYPE:
return createInterceptorStackType();
case SchemaPackage.INTERCEPTOR_TYPE:
return createInterceptorType();
case SchemaPackage.LEFT_FILTER_TYPE:
return createLeftFilterType();
case SchemaPackage.LIST_TYPE:
return createListType();
case SchemaPackage.MAP_TYPE:
return createMapType();
case SchemaPackage.MODEL_TYPE:
return createModelType();
case SchemaPackage.MULE_CONFIGURATION_TYPE:
return createMuleConfigurationType();
case SchemaPackage.MULE_DESCRIPTOR_TYPE:
return createMuleDescriptorType();
case SchemaPackage.MULE_ENVIRONMENT_PROPERTIES_TYPE:
return createMuleEnvironmentPropertiesType();
case SchemaPackage.OUTBOUND_ROUTER_TYPE:
return createOutboundRouterType();
case SchemaPackage.PERSISTENCE_STRATEGY_TYPE:
return createPersistenceStrategyType();
case SchemaPackage.POOLING_PROFILE_TYPE:
return createPoolingProfileType();
case SchemaPackage.PROPERTIES_TYPE:
return createPropertiesType();
case SchemaPackage.PROPERTY_TYPE:
return createPropertyType();
case SchemaPackage.QUEUE_PROFILE_TYPE:
return createQueueProfileType();
case SchemaPackage.REPLY_TO_TYPE:
return createReplyToType();
case SchemaPackage.RESPONSE_ROUTER_TYPE:
return createResponseRouterType();
case SchemaPackage.RIGHT_FILTER_TYPE:
return createRightFilterType();
case SchemaPackage.ROUTER_TYPE:
return createRouterType();
case SchemaPackage.SECURITY_FILTER_TYPE:
return createSecurityFilterType();
case SchemaPackage.SECURITY_MANAGER_TYPE:
return createSecurityManagerType();
case SchemaPackage.SECURITY_PROVIDER_TYPE:
return createSecurityProviderType();
case SchemaPackage.SYSTEM_ENTRY_TYPE:
return createSystemEntryType();
case SchemaPackage.SYSTEM_PROPERTY_TYPE:
return createSystemPropertyType();
case SchemaPackage.TEXT_PROPERTY_TYPE:
return createTextPropertyType();
case SchemaPackage.THREADING_PROFILE_TYPE:
return createThreadingProfileType();
case SchemaPackage.TRANSACTION_MANAGER_TYPE:
return createTransactionManagerType();
case SchemaPackage.TRANSACTION_TYPE:
return createTransactionType();
case SchemaPackage.TRANSFORMERS_TYPE:
return createTransformersType();
case SchemaPackage.TRANSFORMER_TYPE:
return createTransformerType();
default :
throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
}
}
