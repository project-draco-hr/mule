{
  if (executingPhase != null) {
    if (name.equalsIgnoreCase(executingPhase)) {
      throw new IllegalStateException(getLifecycleManagerId() + "Phase '" + name+ "' is already currently being executed");
    }
 else {
      throw new IllegalStateException(getLifecycleManagerId() + "Currently executing lifecycle phase: " + executingPhase);
    }
  }
  if (name.equalsIgnoreCase(currentPhase)) {
    throw new IllegalStateException(getLifecycleManagerId() + "Already in lifecycle phase '" + name+ "', cannot fire the same phase twice");
  }
  if (currentPhase.equals(Disposable.PHASE_NAME)) {
    throw new IllegalStateException(getLifecycleManagerId() + "Cannot invoke further lifecycle once the dispose phase has been called");
  }
  int phaseIndex=getPhaseIndex(name);
  if (phaseIndex == -1) {
    throw new IllegalStateException(getLifecycleManagerId() + "Phase does not exist: " + name);
  }
 else {
    if (Disposable.PHASE_NAME.equals(name)) {
      return;
    }
    if (index.get(phaseIndex - 1).getName().equals(getCurrentPhase())) {
      return;
    }
    for (    LifecyclePair pair : lifecyclePairs) {
      if (pair.getBegin().getName().equals(name) && pair.getEnd().getName().equals(getCurrentPhase()) || pair.getEnd().getName().equals(name) && pair.getBegin().getName().equals(getCurrentPhase())) {
        return;
      }
    }
    throw new IllegalStateException(getLifecycleManagerId() + "Lifecycle phase: " + currentPhase+ " does not support phase: "+ name);
  }
}
