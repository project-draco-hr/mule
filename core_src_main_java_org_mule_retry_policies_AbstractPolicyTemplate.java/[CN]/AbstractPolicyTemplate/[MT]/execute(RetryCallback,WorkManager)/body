{
  PolicyStatus status=null;
  RetryPolicy policy=createRetryInstance();
  DefaultRetryContext context=new DefaultRetryContext(callback.getWorkDescription());
  if (metaInfo != null) {
    context.setMetaInfo(metaInfo);
  }
  try {
    Exception cause=null;
    do {
      try {
        callback.doWork(context);
        if (notifier != null) {
          notifier.onSuccess(context);
        }
        break;
      }
 catch (      Exception e) {
        cause=e;
        if (logger.isDebugEnabled()) {
          logger.debug(cause);
        }
        if (notifier != null) {
          notifier.onFailure(context,cause);
        }
        if (cause instanceof InterruptedException || cause instanceof InterruptedIOException) {
          logger.error("Process was interrupted (InterruptedException), ceasing process");
          break;
        }
 else {
          status=policy.applyPolicy(cause);
        }
      }
    }
 while (status.isOk());
    if (status == null || status.isOk()) {
      return context;
    }
 else {
      context.setFailed(cause);
      throw new RetryPolicyExhaustedException(cause,callback.getWorkDescription());
    }
  }
  finally {
    if (status != null && status.getThrowable() != null) {
      if (logger.isDebugEnabled()) {
        logger.debug(status.getThrowable());
      }
    }
  }
}
