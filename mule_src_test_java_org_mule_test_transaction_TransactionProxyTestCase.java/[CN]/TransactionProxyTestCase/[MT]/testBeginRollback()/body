{
  Mock trans=getMockTransaction();
  UMOEvent event=getTestEvent("Test");
  trans.expect("begin");
  trans.expectAndReturn("isBegun",true);
  trans.expect("setRollbackOnly");
  trans.expectAndReturn("isRollbackOnly",true);
  trans.expectAndReturn("isRollbackOnly",true);
  trans.expect("rollback");
  trans.expectAndReturn("isRolledBack",true);
  trans.expectAndReturn("isCommitted",false);
  TransactionProxy tp=new TransactionProxy((UMOTransaction)trans.proxy(),null);
  tp.begin();
  assertTrue(tp.isBegun());
  tp.setRollbackOnly();
  assertTrue(tp.isRollbackOnly());
  try {
    tp.commit(event);
    fail("Cant commit when rollback only is set");
  }
 catch (  UMOTransactionException e) {
  }
  tp.rollback();
  assertTrue(tp.isRolledBack());
  assertTrue(!tp.isCommitted());
  trans.verify();
}
