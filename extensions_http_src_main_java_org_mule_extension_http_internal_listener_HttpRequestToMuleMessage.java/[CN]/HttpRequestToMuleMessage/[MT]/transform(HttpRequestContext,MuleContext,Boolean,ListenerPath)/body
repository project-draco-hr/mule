{
  final HttpRequest request=requestContext.getRequest();
  final DataType dataType=buildContentTypeDataType(request.getHeaderValueIgnoreCase(CONTENT_TYPE),getDefaultEncoding(muleContext));
  final Map<String,DataHandler> parts=new HashMap<>();
  Object payload=NullPayload.getInstance();
  DataTypeBuilder dataTypeBuilder=DataType.builder(dataType);
  if (parseRequest) {
    final HttpEntity entity=request.getEntity();
    if (entity != null && !(entity instanceof EmptyHttpEntity)) {
      if (entity instanceof MultipartHttpEntity) {
        parts.putAll(createDataHandlerFrom(((MultipartHttpEntity)entity).getParts()));
      }
 else {
        if (dataType.getMediaType() != null) {
          if (dataType.getMediaType().matches(HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED)) {
            try {
              payload=decodeUrlEncodedBody(IOUtils.toString(((InputStreamHttpEntity)entity).getInputStream()),dataType.getMediaType().getCharset().get());
              dataTypeBuilder.type(ParameterMap.class);
            }
 catch (            IllegalArgumentException e) {
              throw new HttpRequestParsingException("Cannot decode x-www-form-urlencoded payload",e);
            }
          }
 else           if (entity instanceof InputStreamHttpEntity) {
            payload=((InputStreamHttpEntity)entity).getInputStream();
            dataTypeBuilder.type(InputStream.class);
          }
        }
 else         if (entity instanceof InputStreamHttpEntity) {
          payload=((InputStreamHttpEntity)entity).getInputStream();
          dataTypeBuilder.type(InputStream.class);
        }
      }
    }
  }
 else {
    final InputStreamHttpEntity inputStreamEntity=request.getInputStreamEntity();
    if (inputStreamEntity != null) {
      payload=inputStreamEntity.getInputStream();
      dataTypeBuilder.type(InputStream.class);
    }
  }
  HttpRequestAttributes attributes=new HttpRequestAttributesBuilder().setRequestContext(requestContext).setListenerPath(listenerPath).setParts(parts).build();
  return new DefaultMuleMessage(payload,dataTypeBuilder.build(),attributes);
}
