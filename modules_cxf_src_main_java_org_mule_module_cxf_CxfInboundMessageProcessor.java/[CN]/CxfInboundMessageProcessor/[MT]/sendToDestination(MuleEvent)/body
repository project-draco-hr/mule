{
  try {
    final Exchange exchange=new ExchangeImpl();
    if (event.isAllowNonBlocking()) {
      final ReplyToHandler originalReplyToHandler=event.getReplyToHandler();
      event=new DefaultMuleEvent(event,new ReplyToHandler(){
        @Override public void processReplyTo(        MuleEvent event,        MuleMessage returnMessage,        Object replyTo) throws MuleException {
          try {
            originalReplyToHandler.processReplyTo(event,returnMessage,replyTo);
          }
 catch (          Exception e) {
            ExceptionPayload exceptionPayload=new DefaultExceptionPayload(e);
            event.getMessage().setExceptionPayload(exceptionPayload);
            returnMessage.setOutboundProperty(HttpConnector.HTTP_STATUS_PROPERTY,500);
            event.setMessage(returnMessage);
            processExceptionReplyTo(new MessagingException(event,e),replyTo);
          }
        }
        @Override public void processExceptionReplyTo(        MessagingException exception,        Object replyTo){
          originalReplyToHandler.processExceptionReplyTo(exception,replyTo);
        }
      }
);
    }
    MuleEvent responseEvent=sendThroughCxf(event,exchange);
    if (responseEvent == null || !responseEvent.equals(NonBlockingVoidMuleEvent.getInstance())) {
      return processResponse(event,exchange,responseEvent);
    }
    return responseEvent;
  }
 catch (  MuleException e) {
    logger.warn("Could not dispatch message to CXF!",e);
    throw e;
  }
}
