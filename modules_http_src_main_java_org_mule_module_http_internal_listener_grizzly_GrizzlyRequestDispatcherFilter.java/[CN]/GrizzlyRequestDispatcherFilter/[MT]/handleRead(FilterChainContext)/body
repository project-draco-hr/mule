{
  final String hostName=((InetSocketAddress)ctx.getConnection().getLocalAddress()).getHostName();
  final int port=((InetSocketAddress)ctx.getConnection().getLocalAddress()).getPort();
  final HttpContent httpContent=ctx.getMessage();
  final HttpRequestPacket request=(HttpRequestPacket)httpContent.getHttpHeader();
  final BufferInputStream contentInputStream=new BufferInputStream(httpContent.getContent());
  String contentLength=request.getHeader(HttpHeaders.Names.CONTENT_LENGTH);
  int contentLengthAsInt=0;
  if (contentLength != null) {
    contentLengthAsInt=Integer.parseInt(contentLength);
  }
  final GrizzlyHttpRequestAdapter httpRequest=new GrizzlyHttpRequestAdapter(request,contentInputStream,contentLengthAsInt);
  HttpRequestContext requestContext=new HttpRequestContext(httpRequest,(InetSocketAddress)ctx.getConnection().getPeerAddress());
  final RequestHandler requestHandler=requestHandlerProvider.getRequestHandler(hostName,port,httpRequest);
  requestHandler.handleRequest(requestContext,new HttpResponseReadyCallback(){
    @Override public void responseReady(    HttpResponse httpResponse,    ResponseStatusCallback responseStatusCallback){
      try {
        if (httpResponse.getEntity() instanceof InputStreamHttpEntity) {
          new ResponseStreamingCompletionHandler(ctx,request,httpResponse,responseStatusCallback).start();
        }
 else {
          new ResponseCompletionHandler(ctx,request,httpResponse,responseStatusCallback).start();
        }
      }
 catch (      Exception e) {
        responseStatusCallback.responseSendFailure(e);
      }
    }
  }
);
  return ctx.getSuspendAction();
}
