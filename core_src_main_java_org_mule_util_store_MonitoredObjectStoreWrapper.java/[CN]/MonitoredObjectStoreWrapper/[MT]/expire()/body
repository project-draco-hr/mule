{
  try {
    final long now=System.nanoTime();
    List<Serializable> keys=allKeys();
    int excess=(allKeys().size() - maxEntries);
    PriorityQueue<StoredObject<T>> sortedMaxEntries=null;
    if (excess > 0) {
      sortedMaxEntries=new PriorityQueue<StoredObject<T>>(excess,new Comparator<StoredObject<T>>(){
        @Override public int compare(        StoredObject<T> paramT1,        StoredObject<T> paramT2){
          return paramT1.timestamp.compareTo(paramT2.timestamp);
        }
      }
);
    }
    ListableObjectStore<StoredObject<T>> store=getStore();
    for (    Serializable key : keys) {
      StoredObject<T> obj=store.retrieve(key);
      if (entryTTL != UNBOUNDED && TimeUnit.NANOSECONDS.toMillis(now - obj.getTimestamp()) >= entryTTL) {
        remove(key);
        excess--;
      }
 else       if (maxEntries != UNBOUNDED && excess > 0) {
        sortedMaxEntries.offer(obj);
      }
    }
    if (sortedMaxEntries != null) {
      StoredObject<T> obj=sortedMaxEntries.poll();
      while (obj != null && excess > 0) {
        remove(obj.getKey());
        excess--;
        obj=sortedMaxEntries.poll();
      }
    }
  }
 catch (  Exception e) {
    logger.warn("Running expirty on " + baseStore + " threw "+ e+ ":"+ e.getMessage());
  }
}
