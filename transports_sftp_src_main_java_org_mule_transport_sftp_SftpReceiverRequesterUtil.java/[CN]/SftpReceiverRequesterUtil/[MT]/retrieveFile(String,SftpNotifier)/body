{
  SftpClient client=connector.createSftpClient(endpoint,notifier);
  String tmpSendingDir=sftpUtil.getTempDirInbound();
  if (tmpSendingDir != null) {
    boolean addUniqueSuffix=sftpUtil.isUseTempFileTimestampSuffix();
    client.createSftpDirIfNotExists(endpoint,tmpSendingDir);
    String tmpSendingFileName=tmpSendingDir + "/" + fileName;
    if (addUniqueSuffix) {
      tmpSendingFileName=sftpUtil.createUniqueSuffix(tmpSendingFileName);
    }
    String fullTmpSendingPath=endpoint.getEndpointURI().getPath() + "/" + tmpSendingFileName;
    if (logger.isDebugEnabled()) {
      logger.debug("Move " + fileName + " to "+ fullTmpSendingPath);
    }
    client.rename(fileName,fullTmpSendingPath);
    fileName=tmpSendingFileName;
    if (logger.isDebugEnabled()) {
      logger.debug("Move done");
    }
  }
  String archive=sftpUtil.getArchiveDir();
  InputStream fileInputStream=client.retrieveFile(fileName);
  if (!"".equals(archive)) {
    String archiveTmpReceivingDir=sftpUtil.getArchiveTempReceivingDir();
    String archiveTmpSendingDir=sftpUtil.getArchiveTempSendingDir();
    SftpInputStream is=new SftpInputStream(client,fileInputStream,fileName,determineAutoDelete(),endpoint);
    int idx=fileName.lastIndexOf('/');
    String fileNamePart=fileName.substring(idx + 1);
    File archiveFile=FileUtils.newFile(archive,fileNamePart);
    if ("".equals(archiveTmpReceivingDir) || "".equals(archiveTmpSendingDir)) {
      return archiveFile(is,archiveFile);
    }
 else {
      return archiveFileUsingTempDirs(archive,archiveTmpReceivingDir,archiveTmpSendingDir,is,fileNamePart,archiveFile);
    }
  }
  return new SftpInputStream(client,fileInputStream,fileName,determineAutoDelete(),endpoint);
}
