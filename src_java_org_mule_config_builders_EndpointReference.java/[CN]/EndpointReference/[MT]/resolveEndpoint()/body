{
  try {
    UMOEndpoint ep=MuleManager.getInstance().lookupEndpoint(endpointName);
    if (ep == null) {
      throw new InitialisationException(new Message(Messages.X_NOT_REGISTERED_WITH_MANAGER,"Endpoint '" + endpointName + "'"),this);
    }
    if (address != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Overloading endpoint uri for: " + endpointName + " from "+ ep.getEndpointURI().toString()+ " to "+ address);
      }
      ep.setEndpointURI(new MuleEndpointURI(address));
    }
    if (transformer != null) {
      if (logger.isDebugEnabled()) {
        logger.debug("Overloading Transformer for: " + endpointName + " from "+ ep.getTransformer()+ " to "+ transformer);
      }
      UMOTransformer trans=MuleObjectHelper.getTransformer(transformer," ");
      ep.setTransformer(trans);
    }
    if (filter != null)     ep.setFilter(filter);
    if (properties != null)     ep.getProperties().putAll(properties);
    if (transactionConfig != null)     ep.setTransactionConfig(transactionConfig);
    ep.initialise();
    Method m=object.getClass().getMethod(propertyName,new Class[]{UMOEndpoint.class});
    if (m == null) {
      throw new InitialisationException(new Message(Messages.METHOD_X_NOT_FOUND_ON_X,propertyName,object.getClass().getName()),this);
    }
    m.invoke(object,new Object[]{ep});
  }
 catch (  InitialisationException e) {
    throw e;
  }
catch (  Exception e) {
    throw new InitialisationException(new Message(Messages.CANT_SET_PROP_X_ON_X_OF_TYPE_X,propertyName,object.getClass().getName(),UMOEndpoint.class.getName()),e,this);
  }
}
