{
  final MuleEvent mockResultEvent=mock(MuleEvent.class,Answers.RETURNS_DEEP_STUBS.get());
  when(mockMessagingException.getEvent()).thenReturn(mockEvent).thenReturn(mockResultEvent);
  when(mockMessagingExceptionHandler.handleException(mockMessagingException,mockEvent)).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      new DefaultMessagingExceptionStrategy().handleException((Exception)invocationOnMock.getArguments()[0],(MuleEvent)invocationOnMock.getArguments()[1]);
      return mockResultEvent;
    }
  }
);
  return mockResultEvent;
}
