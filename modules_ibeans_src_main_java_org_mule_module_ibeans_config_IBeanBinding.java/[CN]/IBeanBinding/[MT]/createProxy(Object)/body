{
  Map<String,String> evals=new HashMap<String,String>();
  try {
    IBeanInvoker<MuleCallAnnotationHandler,TemplateAnnotationHandler> invoker=plugin.getIBeanInvoker();
    invoker.getCallHandler().setFlow(flow);
    List<AnnotationMetaData> annos=AnnotationUtils.getAllMethodAnnotations(getInterface());
    for (    AnnotationMetaData metaData : annos) {
      if (metaData.getAnnotation() instanceof Call) {
        Collection c=muleContext.getRegistry().lookupObjects(EndpointAnnotationParser.class);
        String scheme;
        boolean http;
        String uri=((Call)metaData.getAnnotation()).uri();
        int i=uri.indexOf(":/");
        if (i == -1) {
          scheme="dynamic";
        }
 else {
          scheme=uri.substring(0,i);
        }
        http=scheme.startsWith("http");
        Map metaInfo=new HashMap();
        metaInfo.put("connectorName",metaData.getClazz().getSimpleName() + "." + scheme);
        for (Iterator iterator=c.iterator(); iterator.hasNext(); ) {
          EndpointAnnotationParser parser=(EndpointAnnotationParser)iterator.next();
          if (parser.supports(metaData.getAnnotation(),metaData.getClazz(),metaData.getMember())) {
            InterfaceBinding binding;
            Method method=(Method)metaData.getMember();
            boolean callChannel=false;
            Annotation ann;
            for (int x=0; x < method.getParameterAnnotations().length; x++) {
              ann=method.getParameterAnnotations()[x][0];
              if (ann.annotationType().equals(Body.class) || ann.annotationType().equals(BodyParam.class) || ann.annotationType().equals(HeaderParam.class)) {
                callChannel=true;
                break;
              }
            }
            if (callChannel || http) {
              OutboundEndpoint endpoint=parser.parseOutboundEndpoint(metaData.getAnnotation(),metaInfo);
              binding=new CallInterfaceBinding(this.flow);
              binding.setEndpoint(endpoint);
            }
 else {
              InboundEndpoint endpoint=parser.parseInboundEndpoint(metaData.getAnnotation(),Collections.EMPTY_MAP);
              binding=new DynamicRequestInterfaceBinding();
              binding.setEndpoint(endpoint);
            }
            if (http) {
              List<AnnotationMetaData> temp=AnnotationUtils.getParamAnnotations(method);
              boolean post=false;
              for (              AnnotationMetaData data : temp) {
                if (data.getAnnotation().annotationType().equals(Body.class) || data.getAnnotation().annotationType().equals(BodyParam.class)) {
                  post=true;
                  break;
                }
              }
              if (!post && binding.getEndpoint().getProperties().get(HTTP.METHOD_KEY) == null) {
                binding.getEndpoint().getProperties().put(HTTP.METHOD_KEY,"GET");
              }
            }
            binding.setInterface(getInterface());
            binding.setMethod(metaData.getMember().toString());
            invoker.getCallHandler().addRouterForInterface(binding);
          }
        }
      }
 else       if (metaData.getAnnotation() instanceof Template) {
        evals.put(metaData.getMember().toString(),((Template)metaData.getAnnotation()).value());
      }
    }
    if (evals.size() > 0) {
      invoker.getTemplateHandler().setEvals(evals);
    }
    Object proxy=Proxy.newProxyInstance(getInterface().getClassLoader(),new Class[]{getInterface()},createInvocationHandler());
    if (logger.isDebugEnabled()) {
      logger.debug("Have proxy?: " + (null != proxy));
    }
    return proxy;
  }
 catch (  Exception e) {
    throw new MuleRuntimeException(CoreMessages.failedToCreateProxyFor(target),e);
  }
}
