{
  final StringBuilder sb=new StringBuilder(120);
  final String nl=System.getProperty("line.separator");
  sb.append(ClassUtils.getSimpleName(this.getClass()));
  sb.append(nl);
  sb.append("{");
  sb.append(nl);
  sb.append("  name=").append(name);
  sb.append(nl);
  sb.append("  lifecycle=").append(lifecycleManager == null ? "<not in lifecycle>" : lifecycleManager.getCurrentPhase());
  sb.append(nl);
  sb.append("  this=").append(Integer.toHexString(System.identityHashCode(this)));
  sb.append(nl);
  sb.append("  numberOfConcurrentTransactedReceivers=").append(numberOfConcurrentTransactedReceivers);
  sb.append(nl);
  sb.append("  createMultipleTransactedReceivers=").append(createMultipleTransactedReceivers);
  sb.append(nl);
  sb.append("  connected=").append(connected);
  sb.append(nl);
  sb.append("  supportedProtocols=").append(supportedProtocols);
  sb.append(nl);
  sb.append("  serviceOverrides=");
  if (serviceOverrides != null) {
    for (    Map.Entry<Object,Object> entry : serviceOverrides.entrySet()) {
      sb.append(nl);
      sb.append("    ").append(String.format("%s=%s",entry.getKey(),entry.getValue()));
    }
  }
 else {
    sb.append("<none>");
  }
  sb.append(nl);
  sb.append('}');
  sb.append(nl);
  return sb.toString();
}
