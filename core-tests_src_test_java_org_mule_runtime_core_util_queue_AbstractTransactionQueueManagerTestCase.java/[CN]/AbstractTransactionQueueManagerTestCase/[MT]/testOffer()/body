{
  final QueueManager mgr=createQueueManager();
  mgr.setDefaultQueueConfiguration(new DefaultQueueConfiguration(1,false));
  try {
    mgr.start();
    QueueSession s=mgr.getQueueSession();
    Queue q=s.getQueue("queue1");
    assertEquals("Queue size",0,q.size());
    assertTrue(q.offer("String1",0L));
    assertEquals("Queue size",1,q.size());
    assertFalse(q.offer("String2",1000));
    assertEquals("Queue size",1,q.size());
    final Latch takeExecutionLatch=new Latch();
    final Thread takeExecutionThread=new Thread(new Runnable(){
      public void run(){
        try {
          takeExecutionLatch.release();
          QueueSession s=mgr.getQueueSession();
          Queue q=s.getQueue("queue1");
          assertEquals("Queue content","String1",q.take());
        }
 catch (        Exception e) {
          logger.warn("Error using queue session",e);
        }
      }
    }
);
    takeExecutionThread.start();
    if (!takeExecutionLatch.await(THREAD_EXECUTION_TIMEOUT,TimeUnit.MILLISECONDS)) {
      fail("Thread executing put over queue was not executed");
    }
    assertTrue(q.offer("String2",1000));
    takeExecutionThread.join(THREAD_EXECUTION_TIMEOUT);
    assertEquals("Queue size",1,q.size());
  }
  finally {
    mgr.stop();
  }
}
