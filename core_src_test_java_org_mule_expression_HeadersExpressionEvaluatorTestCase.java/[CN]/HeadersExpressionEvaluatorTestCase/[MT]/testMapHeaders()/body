{
  MessageHeadersExpressionEvaluator eval=new MessageHeadersExpressionEvaluator();
  MuleMessage message=new DefaultMuleMessage("test",props,muleContext);
  Object result=eval.evaluate("foo, baz",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(2,((Map)result).size());
  assertTrue(((Map)result).values().contains("moo"));
  assertTrue(((Map)result).values().contains("maz"));
  assertFalse(((Map)result).values().contains("mar"));
  result=eval.evaluate("foo?, baz",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(2,((Map)result).size());
  assertTrue(((Map)result).values().contains("moo"));
  assertTrue(((Map)result).values().contains("maz"));
  assertFalse(((Map)result).values().contains("mar"));
  result=eval.evaluate("fool?",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(0,((Map)result).size());
  try {
    eval.evaluate("fool",message);
    fail("required value");
  }
 catch (  Exception e) {
  }
  assertEquals(3,eval.evaluate("{count}",message));
  result=eval.evaluate("*",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(3,((Map)result).size());
  assertTrue(((Map)result).values().contains("moo"));
  assertTrue(((Map)result).values().contains("maz"));
  assertTrue(((Map)result).values().contains("mar"));
}
