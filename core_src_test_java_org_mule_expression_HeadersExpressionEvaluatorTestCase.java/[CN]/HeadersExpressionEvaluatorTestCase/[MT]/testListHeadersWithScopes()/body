{
  MessageHeadersListExpressionEvaluator eval=new MessageHeadersListExpressionEvaluator();
  MuleMessage message=new DefaultMuleMessage("test",props,muleContext);
  message.setProperty("faz","fazvalue",PropertyScope.INVOCATION);
  Object result=eval.evaluate("OUTBOUND:foo, OUTBOUND:baz",message);
  assertNotNull(result);
  assertTrue(result instanceof List);
  assertEquals(2,((List)result).size());
  assertTrue(((List)result).contains("foovalue"));
  assertTrue(((List)result).contains("bazvalue"));
  assertFalse(((List)result).contains("barvalue"));
  result=eval.evaluate("OUTBOUND:foo, baz",message);
  assertNotNull(result);
  assertTrue(result instanceof List);
  assertEquals(2,((List)result).size());
  assertTrue(((List)result).contains("foovalue"));
  assertTrue(((List)result).contains("bazvalue"));
  result=eval.evaluate("OUTBOUND:foo, OUTBOUND:baz, INVOCATION:faz",message);
  assertNotNull(result);
  assertTrue(result instanceof List);
  assertEquals(3,((List)result).size());
  assertTrue(((List)result).contains("foovalue"));
  assertTrue(((List)result).contains("bazvalue"));
  assertTrue(((List)result).contains("fazvalue"));
  try {
    eval.evaluate("OUTBOUND:foo, baz, faz",message);
    fail("faz is not in outbound scope and is not optional");
  }
 catch (  RequiredValueException e) {
  }
  result=eval.evaluate("OUTBOUND:foo, faz?, baz",message);
  assertNotNull(result);
  assertTrue(result instanceof List);
  assertEquals(2,((List)result).size());
  assertTrue(((List)result).contains("foovalue"));
  assertTrue(((List)result).contains("bazvalue"));
}
