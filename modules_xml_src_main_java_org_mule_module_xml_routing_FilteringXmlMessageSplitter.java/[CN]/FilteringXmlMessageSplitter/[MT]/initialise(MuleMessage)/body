{
  if (logger.isDebugEnabled()) {
    if (splitExpression.length() == 0) {
      logger.warn("splitExpression is not specified, no processing will take place");
    }
 else {
      logger.debug("splitExpression is " + splitExpression);
    }
  }
  Object src=message.getPayload();
  Document dom4jDoc;
  try {
    if (validateSchema) {
      dom4jDoc=XMLUtils.toDocument(src,getExternalSchemaLocation());
    }
 else {
      dom4jDoc=XMLUtils.toDocument(src);
    }
    if (dom4jDoc == null) {
      logger.error("Non-XML message payload: " + src.getClass().toString());
      return;
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Failed to initialise the payload: " + ExceptionUtils.getStackTrace(e));
  }
  if (splitExpression.length() > 0) {
    XPath xpath=dom4jDoc.createXPath(splitExpression);
    if (namespaces != null) {
      xpath.setNamespaceURIs(namespaces);
    }
    List foundNodes=xpath.selectNodes(dom4jDoc);
    if (enableCorrelation != ENABLE_CORRELATION_NEVER) {
      message.setCorrelationGroupSize(foundNodes.size());
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Split into " + foundNodes.size());
    }
    List parts=new LinkedList();
    for (Iterator iterator=foundNodes.iterator(); iterator.hasNext(); ) {
      Node node=(Node)iterator.next();
      if (node instanceof Element) {
        node=(Node)node.clone();
        parts.add(DocumentHelper.createDocument((Element)node));
      }
 else {
        logger.warn("Dcoument node: " + node.asXML() + " is not an element and thus is not a valid part");
      }
    }
    nodesContext.set(parts);
  }
  Map theProperties=new HashMap();
  for (Iterator iterator=message.getPropertyNames().iterator(); iterator.hasNext(); ) {
    String propertyKey=(String)iterator.next();
    theProperties.put(propertyKey,message.getProperty(propertyKey));
  }
  propertiesContext.set(theProperties);
}
