{
  Map<String,List<ConfigResource>> configsMap=new LinkedHashMap<String,List<ConfigResource>>();
  for (int i=0; i < resources.length; i++) {
    String configExtension=StringUtils.substringAfterLast((resources[i]).getUrl().getFile(),".");
    List<ConfigResource> configs=configsMap.get(configExtension);
    if (configs == null) {
      configs=new ArrayList<ConfigResource>();
      configsMap.put(configExtension,configs);
    }
    configs.add(resources[i]);
  }
  try {
    Properties props=new Properties();
    props.load(ClassUtils.getResource("configuration-builders.properties",this.getClass()).openStream());
    for (    Map.Entry<String,List<ConfigResource>> e : configsMap.entrySet()) {
      String extension=e.getKey();
      List<ConfigResource> configs=e.getValue();
      String className=(String)props.get(extension);
      if (className == null || !ClassUtils.isClassOnPath(className,this.getClass())) {
        throw new ConfigurationException(CoreMessages.configurationBuilderNoMatching(createConfigResourcesString()));
      }
      ConfigResource[] constructorArg=new ConfigResource[configs.size()];
      System.arraycopy(configs.toArray(),0,constructorArg,0,configs.size());
      ConfigurationBuilder cb=(ConfigurationBuilder)ClassUtils.instanciateClass(className,new Object[]{constructorArg,getArtifactProperties()});
      if (domainContext != null && cb instanceof DomainMuleContextAwareConfigurationBuilder) {
        ((DomainMuleContextAwareConfigurationBuilder)cb).setDomainContext(domainContext);
      }
 else       if (domainContext != null) {
        throw new MuleRuntimeException(CoreMessages.createStaticMessage(String.format("ConfigurationBuilder %s does not support domain context",cb.getClass().getCanonicalName())));
      }
      cb.configure(muleContext);
    }
  }
 catch (  ConfigurationException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConfigurationException(e);
  }
}
