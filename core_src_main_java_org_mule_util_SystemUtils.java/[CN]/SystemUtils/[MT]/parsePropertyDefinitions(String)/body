{
  if (StringUtils.isEmpty(input)) {
    return Collections.EMPTY_MAP;
  }
  final Map result=new HashMap();
  int tokenStart=0;
  findtoken:   while (tokenStart < input.length()) {
    tokenStart=StringUtils.indexOf(input,"-D",tokenStart);
    if (tokenStart == StringUtils.INDEX_NOT_FOUND) {
      break findtoken;
    }
 else {
      tokenStart+=2;
    }
    int keyStart=tokenStart;
    int keyEnd=keyStart;
    if (keyStart == input.length()) {
      break;
    }
    char cursor=input.charAt(keyStart);
    if (cursor == ' ') {
      continue findtoken;
    }
    if (cursor == '=') {
      tokenStart=StringUtils.indexOf(input,' ',tokenStart);
      if (tokenStart != StringUtils.INDEX_NOT_FOUND) {
        continue findtoken;
      }
 else {
        break findtoken;
      }
    }
    findkey:     while (keyEnd < input.length()) {
      cursor=input.charAt(keyEnd);
      if (cursor == ' ') {
        tokenStart=keyEnd;
        break findkey;
      }
      if (cursor == '=') {
        break findkey;
      }
      keyEnd++;
    }
    String key=StringUtils.substring(input,keyStart,keyEnd);
    int valueStart=keyEnd;
    int valueEnd=keyEnd;
    String value="true";
    if (keyEnd < input.length() && cursor != ' ') {
      valueStart=keyEnd + 1;
      valueEnd=valueStart;
      cursor=input.charAt(valueStart);
      if (cursor == '"') {
        valueEnd=StringUtils.indexOf(input,'"',++valueStart);
      }
 else {
        valueEnd=StringUtils.indexOf(input,' ',valueStart);
      }
      if (valueEnd == StringUtils.INDEX_NOT_FOUND) {
        valueEnd=input.length();
      }
      value=StringUtils.substring(input,valueStart,valueEnd);
    }
    result.put(key,value);
    tokenStart=valueEnd;
  }
  return result;
}
