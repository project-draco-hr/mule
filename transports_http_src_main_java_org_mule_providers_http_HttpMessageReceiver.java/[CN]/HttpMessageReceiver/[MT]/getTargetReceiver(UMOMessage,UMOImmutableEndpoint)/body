{
  String path=(String)message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY);
  int i=path.indexOf('?');
  if (i > -1) {
    path=path.substring(0,i);
  }
  StringBuffer requestUri=new StringBuffer(80);
  requestUri.append(endpoint.getProtocol()).append("://");
  requestUri.append(endpoint.getEndpointURI().getHost());
  requestUri.append(':').append(endpoint.getEndpointURI().getPort());
  if (logger.isTraceEnabled()) {
    logger.trace("Looking up receiver on connector: " + connector.getName() + " with URI key: "+ requestUri.toString());
  }
  UMOMessageReceiver receiver=connector.lookupReceiver(requestUri.toString());
  if (receiver == null && !"/".equals(path)) {
    int x=path.lastIndexOf('/');
    if (x > 1 && path.indexOf('.') > x) {
      requestUri.append(path.substring(0,x));
    }
 else {
      requestUri.append(path);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Secondary lookup of receiver on connector: " + connector.getName() + " with URI key: "+ requestUri.toString());
    }
    String uriStr=requestUri.toString();
    receiver=connector.lookupReceiver(uriStr);
    if (receiver == null) {
      receiver=findReceiverByStem(connector.getReceivers(),uriStr);
    }
    if (receiver == null && logger.isWarnEnabled()) {
      logger.warn("No receiver found with secondary lookup on connector: " + connector.getName() + " with URI key: "+ requestUri.toString());
      logger.warn("Receivers on connector are: " + MapUtils.toString(connector.getReceivers(),true));
    }
  }
  return receiver;
}
