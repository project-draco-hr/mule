{
  try {
    do {
      conn.setKeepAlive(false);
      HttpRequest request=conn.readRequest();
      if (request == null) {
        break;
      }
      RequestLine requestLine=request.getRequestLine();
      String method=requestLine.getMethod();
      HttpResponse response;
      if (method.equals(HttpConstants.METHOD_HEAD)) {
        UMOMessage message=new MuleMessage(NullPayload.getInstance());
        UMOEvent event=new MuleEvent(message,endpoint,new MuleSession(message,new NullSessionHandler()),true);
        RequestContext.setEvent(event);
        response=new HttpResponse();
        response.setStatusLine(requestLine.getHttpVersion(),HttpConstants.SC_OK);
        response=(HttpResponse)connector.getDefaultResponseTransformer().transform(response);
      }
 else       if (method.equals(HttpConstants.METHOD_GET) || method.equals(HttpConstants.METHOD_POST)) {
        Map headers=new HashMap();
        for (Iterator rhi=request.getHeaderIterator(); rhi.hasNext(); ) {
          Header header=(Header)rhi.next();
          String headerName=header.getName();
          Object headerValue=header.getValue();
          if (headerName.startsWith("X-MULE")) {
            headerName=headerName.substring(2);
          }
 else           if (headerName.equals(HttpConnector.HTTP_COOKIES_PROPERTY)) {
            if (enableCookies) {
              Cookie[] cookies=CookieHelper.parseCookies(header,cookieSpec);
              if (cookies.length > 0) {
                headerValue=cookies;
              }
 else {
                continue;
              }
            }
 else {
              continue;
            }
          }
          headers.put(headerName,headerValue);
        }
        headers.put(HttpConnector.HTTP_METHOD_PROPERTY,requestLine.getMethod());
        headers.put(HttpConnector.HTTP_REQUEST_PROPERTY,requestLine.getUri());
        headers.put(HttpConnector.HTTP_VERSION_PROPERTY,requestLine.getHttpVersion().toString());
        headers.put(HttpConnector.HTTP_COOKIE_SPEC_PROPERTY,cookieSpec);
        UMOMessageAdapter adapter;
        Object body;
        if (endpoint.isStreaming() && request.getBody() != null) {
          adapter=connector.getStreamMessageAdapter(request.getBody(),conn.getOutputStream());
          for (Iterator iterator=headers.entrySet().iterator(); iterator.hasNext(); ) {
            Map.Entry entry=(Map.Entry)iterator.next();
            adapter.setProperty((String)entry.getKey(),entry.getValue());
          }
        }
 else {
          if (headers.get(HttpConnector.HTTP_VERSION_PROPERTY).equals(HttpConstants.HTTP11)) {
            String expectHeaderValue=ObjectUtils.toString(headers.get(HttpConstants.HEADER_EXPECT)).toLowerCase();
            if (HttpConstants.HEADER_EXPECT_CONTINUE_REQUEST_VALUE.equals(expectHeaderValue)) {
              HttpResponse expected=new HttpResponse();
              expected.setStatusLine(requestLine.getHttpVersion(),HttpConstants.SC_CONTINUE);
              final MuleEvent event=new MuleEvent(new MuleMessage(expected),endpoint,new MuleSession(component),true);
              RequestContext.setEvent(event);
              expected=(HttpResponse)connector.getDefaultResponseTransformer().transform(expected);
              conn.writeResponse(expected);
            }
          }
          body=request.getBodyBytes();
          if (body == null) {
            body=requestLine.getUri();
          }
          adapter=connector.getMessageAdapter(new Object[]{body,headers});
        }
        UMOMessage message=new MuleMessage(adapter);
        if (logger.isDebugEnabled()) {
          logger.debug(message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
        }
        AbstractMessageReceiver receiver=(AbstractMessageReceiver)getTargetReceiver(message,endpoint);
        if (receiver != null) {
          UMOMessage returnMessage=receiver.routeMessage(message,endpoint.isSynchronous(),null);
          Object tempResponse;
          if (returnMessage != null) {
            tempResponse=returnMessage.getPayload();
          }
 else {
            tempResponse=NullPayload.getInstance();
          }
          if (tempResponse instanceof HttpResponse) {
            response=(HttpResponse)tempResponse;
          }
 else {
            response=(HttpResponse)connector.getDefaultResponseTransformer().transform(tempResponse);
          }
          response.disableKeepAlive(!((HttpConnector)connector).isKeepAlive());
        }
 else {
          UMOEndpointURI uri=endpoint.getEndpointURI();
          String failedPath=uri.getScheme() + "://" + uri.getHost()+ ":"+ uri.getPort()+ getRequestPath(message);
          if (logger.isDebugEnabled()) {
            logger.debug("Failed to bind to " + failedPath);
          }
          response=new HttpResponse();
          response.setStatusLine(requestLine.getHttpVersion(),HttpConstants.SC_NOT_FOUND);
          response.setBodyString(new Message(Messages.CANNOT_BIND_TO_ADDRESS_X,failedPath).toString());
          RequestContext.setEvent(new MuleEvent(new MuleMessage(response),endpoint,new MuleSession(component),true));
          response=(HttpResponse)connector.getDefaultResponseTransformer().transform(response);
        }
      }
 else       if (method.equals(HttpConstants.METHOD_OPTIONS) || method.equals(HttpConstants.METHOD_PUT) || method.equals(HttpConstants.METHOD_DELETE)|| method.equals(HttpConstants.METHOD_TRACE)|| method.equals(HttpConstants.METHOD_CONNECT)) {
        UMOMessage message=new MuleMessage(NullPayload.getInstance());
        UMOEvent event=new MuleEvent(message,endpoint,new MuleSession(message,new NullSessionHandler()),true);
        RequestContext.setEvent(event);
        response=new HttpResponse();
        response.setStatusLine(requestLine.getHttpVersion(),HttpConstants.SC_METHOD_NOT_ALLOWED);
        response.setBodyString(new Message("http",12,method).toString() + HttpConstants.CRLF);
        response=(HttpResponse)connector.getDefaultResponseTransformer().transform(response);
      }
 else {
        UMOMessage message=new MuleMessage(NullPayload.getInstance());
        UMOEvent event=new MuleEvent(message,endpoint,new MuleSession(message,new NullSessionHandler()),true);
        RequestContext.setEvent(event);
        response=new HttpResponse();
        response.setStatusLine(requestLine.getHttpVersion(),HttpConstants.SC_BAD_REQUEST);
        response.setBodyString(new Message("http",11).toString() + HttpConstants.CRLF);
        response=(HttpResponse)connector.getDefaultResponseTransformer().transform(response);
      }
      conn.writeResponse(response);
    }
 while (conn.isKeepAlive());
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    conn.close();
    conn=null;
  }
}
