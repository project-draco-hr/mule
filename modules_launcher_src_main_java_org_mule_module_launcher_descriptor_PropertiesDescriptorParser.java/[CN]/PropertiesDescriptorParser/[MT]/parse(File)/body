{
  final Properties p=new Properties();
  p.load(new FileInputStream(descriptor));
  ApplicationDescriptor d=new ApplicationDescriptor();
  d.setEncoding(p.getProperty(PROPERTY_ENCODING));
  d.setConfigurationBuilder(p.getProperty(PROPERTY_CONFIG_BUILDER));
  d.setDomain(p.getProperty(PROPERTY_DOMAIN));
  final File appPropsFile=new File(descriptor.getParent(),ApplicationDescriptor.DEFAULT_APP_PROPERTIES_RESOURCE);
  if (appPropsFile.exists() && appPropsFile.canRead()) {
    final Properties props=PropertiesUtils.loadProperties(appPropsFile.toURI().toURL());
    Map<String,String> m=new HashMap<String,String>(props.size());
    for (    Object key : props.keySet()) {
      m.put(key.toString(),props.getProperty(key.toString()));
    }
    d.setAppProperties(m);
  }
  d.setParentFirstClassLoader(BooleanUtils.toBoolean(p.getProperty(PROPERTY_CLASSLOADER_PARENT_FIRST,Boolean.TRUE.toString())));
  final String resProps=p.getProperty(PROPERTY_CONFIG_RESOURCES);
  String[] urls;
  if (StringUtils.isBlank(resProps)) {
    urls=new String[]{ApplicationDescriptor.DEFAULT_CONFIGURATION_RESOURCE};
  }
 else {
    urls=resProps.split(",");
  }
  d.setConfigResources(urls);
  d.setRedeploymentEnabled(BooleanUtils.toBoolean(p.getProperty(PROPERTY_REDEPLOYMENT_ENABLED,Boolean.TRUE.toString())));
  d.setPriviledged(BooleanUtils.toBoolean(p.getProperty(PROPERTY_PRIVILEDGED,Boolean.FALSE.toString())));
  return d;
}
