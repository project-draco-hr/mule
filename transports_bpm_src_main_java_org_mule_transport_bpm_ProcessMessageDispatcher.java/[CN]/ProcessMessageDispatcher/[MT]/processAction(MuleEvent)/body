{
  Object process;
  Map processVariables=new HashMap();
  if (event != null) {
    populateProcessVariables(event,processVariables,PropertyScope.INVOCATION);
    populateProcessVariables(event,processVariables,PropertyScope.OUTBOUND);
    Object payload=event.transformMessage();
    if (payload != null && !(payload instanceof NullPayload)) {
      processVariables.put(ProcessConnector.PROCESS_VARIABLE_INCOMING,payload);
      String originatingEndpoint=event.getMessage().getStringProperty(MuleProperties.MULE_ORIGINATING_ENDPOINT_PROPERTY,null);
      if (StringUtils.isNotEmpty(originatingEndpoint)) {
        processVariables.put(ProcessConnector.PROCESS_VARIABLE_INCOMING_SOURCE,originatingEndpoint);
      }
    }
  }
  Object processType=event.getMessage().getInvocationProperty(ProcessConnector.PROPERTY_PROCESS_TYPE);
  processVariables.remove(ProcessConnector.PROPERTY_PROCESS_TYPE);
  Object processId;
  String processIdField=connector.getProcessIdField();
  if (StringUtils.isNotEmpty(processIdField)) {
    processId=event.getMessage().getInvocationProperty(processIdField);
  }
  processId=event.getMessage().getInvocationProperty(ProcessConnector.PROPERTY_PROCESS_ID);
  if (processId == null) {
    processId=event.getMessage().getOutboundProperty(ProcessConnector.PROPERTY_PROCESS_ID);
  }
  processVariables.remove(ProcessConnector.PROPERTY_PROCESS_ID);
  String action=event.getMessage().getStringProperty(ProcessConnector.PROPERTY_ACTION,PropertyScope.INVOCATION,ProcessConnector.ACTION_ADVANCE);
  processVariables.remove(ProcessConnector.PROPERTY_ACTION);
  Object transition=event.getMessage().getInvocationProperty(ProcessConnector.PROPERTY_TRANSITION);
  processVariables.remove(ProcessConnector.PROPERTY_TRANSITION);
  String temp;
  temp=event.getEndpoint().getEndpointURI().getHost();
  if (StringUtils.isNotEmpty(temp)) {
    processType=temp;
  }
  temp=event.getEndpoint().getEndpointURI().getPath();
  if (StringUtils.isNotEmpty(temp)) {
    if (temp.startsWith("/")) {
      temp=StringUtils.right(temp,temp.length() - 1);
    }
    if (temp.indexOf("/") != -1) {
      throw new IllegalArgumentException("Unexpected format in the path of the URL: " + temp);
    }
    processId=temp;
  }
  if (processId == null || action.equals(ProcessConnector.ACTION_START)) {
    if (processType != null) {
      process=connector.getBpms().startProcess(processType,transition,processVariables);
      if ((process != null) && logger.isInfoEnabled()) {
        logger.info("New process started, ID = " + connector.getBpms().getId(process));
      }
    }
 else {
      throw new IllegalArgumentException("Process type is missing, cannot start a new process.");
    }
  }
 else   if (action.equals(ProcessConnector.ACTION_UPDATE)) {
    if (processId != null) {
      process=connector.getBpms().updateProcess(processId,processVariables);
      if ((process != null) && logger.isInfoEnabled()) {
        logger.info("Process variables updated, ID = " + connector.getBpms().getId(process));
      }
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot update process.");
    }
  }
 else   if (action.equals(ProcessConnector.ACTION_ABORT)) {
    if (processId != null) {
      connector.getBpms().abortProcess(processId);
      process=NullPayload.getInstance();
      logger.info("Process aborted, ID = " + processId);
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot abort process.");
    }
  }
 else {
    if (processId != null) {
      process=connector.getBpms().advanceProcess(processId,transition,processVariables);
      if ((process != null) && logger.isInfoEnabled()) {
        logger.info("Process advanced, ID = " + connector.getBpms().getId(process) + ", new state = "+ connector.getBpms().getState(process));
      }
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot advance process.");
    }
  }
  return process;
}
