{
  if (src instanceof Node) {
    return (Node)src;
  }
 else   if (src instanceof InputSource) {
    return factory.newDocumentBuilder().parse((InputSource)src);
  }
 else   if (src instanceof org.dom4j.Document) {
    return new DOMWriter().write((org.dom4j.Document)src);
  }
 else   if (src instanceof OutputHandler) {
    OutputHandler handler=((OutputHandler)src);
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    handler.write(event,output);
    InputStream stream=new ByteArrayInputStream(output.toByteArray());
    return factory.newDocumentBuilder().parse(stream);
  }
 else   if (src instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])src);
    return factory.newDocumentBuilder().parse(stream);
  }
 else   if (src instanceof InputStream) {
    return factory.newDocumentBuilder().parse((InputStream)src);
  }
 else   if (src instanceof String) {
    return factory.newDocumentBuilder().parse(new InputSource(new StringReader((String)src)));
  }
 else   if (src instanceof XMLStreamReader) {
    XMLStreamReader xsr=(XMLStreamReader)src;
    if (!xsr.isStartElement() && xsr.getEventType() != XMLStreamConstants.START_DOCUMENT) {
      xsr.nextTag();
    }
    final InputSource is=new InputSource();
    is.setCharacterStream(new StringReader(getOuterXml(xsr)));
    return factory.newDocumentBuilder().parse(is);
  }
 else   if (src instanceof DelayedResult) {
    DelayedResult result=((DelayedResult)src);
    DOMResult domResult=new DOMResult();
    result.write(domResult);
    return domResult.getNode();
  }
 else {
    return null;
  }
}
