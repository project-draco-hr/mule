{
  final ByteArrayOutputStream cache=new ByteArrayOutputStream();
  final DelegatingOutputStream delegating=new DelegatingOutputStream(cache);
  message.setContent(OutputStream.class,delegating);
  message.setContent(DelegatingOutputStream.class,delegating);
  OutputHandler handler=new OutputHandler(){
    public void write(    MuleEvent event,    OutputStream out) throws IOException {
      out.write(cache.toByteArray());
      delegating.setOutputStream(out);
      message.getInterceptorChain().doIntercept(message);
    }
  }
;
  MuleEvent event=(MuleEvent)message.getExchange().get(CxfConstants.MULE_EVENT);
  boolean decoupled=event != null && message.getExchange().getInMessage() != null;
  OutboundEndpoint ep=null;
  if (event == null || decoupled) {
    MuleContext muleContext=configuration.getMuleContext();
    MuleMessage muleMsg=new DefaultMuleMessage(handler,muleContext);
    MuleSession session=new DefaultMuleSession(muleContext);
    String url=setupURL(message);
    try {
      ep=getEndpoint(muleContext,url);
      event=new DefaultMuleEvent(muleMsg,ep.getExchangePattern(),session);
    }
 catch (    Exception e) {
      throw new Fault(e);
    }
  }
 else {
    event.getMessage().setPayload(handler);
  }
  if (!decoupled) {
    message.getExchange().put(CxfConstants.MULE_EVENT,event);
  }
  message.put(CxfConstants.MULE_EVENT,event);
  final MuleEvent finalEvent=event;
  final OutboundEndpoint finalEndpoint=ep;
  AbstractPhaseInterceptor<Message> i=new AbstractPhaseInterceptor<Message>(Phase.PRE_STREAM){
    public void handleMessage(    Message m) throws Fault {
      try {
        dispatchMuleMessage(m,finalEvent,finalEndpoint);
      }
 catch (      IOException e) {
        throw new Fault(e);
      }
    }
  }
;
  message.getInterceptorChain().add(i);
}
