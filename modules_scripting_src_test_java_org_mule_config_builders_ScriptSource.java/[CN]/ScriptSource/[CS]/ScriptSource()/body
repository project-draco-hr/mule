{
  managementContext.setId("GroovyScriptTestCase");
  managementContext.getRegistry().setProperty("doCompression","true");
  managementContext.setTransactionManager(new TestTransactionManagerFactory().create());
  RmiRegistryAgent rmiAgent=new RmiRegistryAgent();
  rmiAgent.setName("rmiAgent");
  managementContext.getRegistry().registerAgent(rmiAgent);
  JmxAgent agent=new JmxAgent();
  agent.setName("jmxAgent");
  agent.setConnectorServerUrl("service:jmx:rmi:///jndi/rmi://localhost:1099/server");
  Map p=new HashMap();
  p.put("jmx.remote.jndi.rebind","true");
  agent.setConnectorServerProperties(p);
  managementContext.getRegistry().registerAgent(agent);
  TestConnector c=new TestConnector();
  c.setName("dummyConnector");
  c.setExceptionListener(new TestExceptionStrategy());
  SimpleRetryConnectionStrategy cs=new SimpleRetryConnectionStrategy();
  cs.setRetryCount(4);
  cs.setFrequency(3000);
  c.setConnectionStrategy(cs);
  managementContext.getRegistry().registerConnector(c);
  TestCompressionTransformer t=new TestCompressionTransformer();
  t.setReturnClass(String.class);
  t.setBeanProperty2(12);
  t.setContainerProperty("");
  t.setBeanProperty1("this was set from the manager properties!");
  managementContext.getRegistry().registerTransformer(t);
  JXPathFilter filter=new JXPathFilter("name");
  filter.setValue("bar");
  Map ns=new HashMap();
  ns.put("foo","http://foo.com");
  filter.setNamespaces(ns);
  builder.registerEndpoint("test://fruitBowlPublishQ","fruitBowlEndpoint",false,null,filter);
  builder.registerEndpoint("test://AppleQueue","appleInEndpoint",true);
  builder.registerEndpoint("test://AppleResponseQueue","appleResponseEndpoint",false);
  builder.registerEndpoint("test://apple.queue","AppleQueue",false);
  builder.registerEndpoint("test://banana.queue","Banana_Queue",false);
  builder.registerEndpoint("test://test.queue","waterMelonEndpoint",false);
  Map props=new HashMap();
  props.put("testGlobal","value1");
  builder.registerEndpoint("test://orangeQ","orangeEndpoint",false,props);
  UMOModel model=new SedaModel();
  model.setName("main");
  TestExceptionStrategy es=new TestExceptionStrategy();
  es.addEndpoint(new MuleEndpoint("test://component.exceptions",false));
  model.setExceptionListener(es);
  model.setLifecycleAdapterFactory(new TestDefaultLifecycleAdapterFactory());
  model.setEntryPointResolver(new TestEntryPointResolver());
  managementContext.getRegistry().registerModel(model);
  UMOEndpoint ep1=managementContext.getRegistry().lookupEndpoint("appleInEndpoint");
  ep1.setTransformer(managementContext.getRegistry().lookupTransformer("TestCompressionTransformer"));
  UMODescriptor d=builder.createDescriptor(Orange.class.getName(),"orangeComponent",null,ep1,props);
  DefaultComponentExceptionStrategy dces=new DefaultComponentExceptionStrategy();
  dces.addEndpoint(new MuleEndpoint("test://orange.exceptions",false));
  d.setExceptionListener(dces);
  UMOInboundRouterCollection inRouter=new InboundRouterCollection();
  inRouter.setCatchAllStrategy(new ForwardingCatchAllStrategy());
  inRouter.getCatchAllStrategy().setEndpoint(new MuleEndpoint("test://catch.all",false));
  UMOEndpoint ep2=builder.createEndpoint("test://orange/","Orange",true,"TestCompressionTransformer");
  ep2.setResponseTransformer(managementContext.getRegistry().lookupTransformer("TestCompressionTransformer"));
  inRouter.addEndpoint(ep2);
  UMOEndpoint ep3=managementContext.getRegistry().lookupEndpoint("orangeEndpoint");
  ep3.setFilter(new PayloadTypeFilter(String.class));
  ep3.setTransformer(managementContext.getRegistry().lookupTransformer("TestCompressionTransformer"));
  Map props2=new HashMap();
  props2.put("testLocal","value1");
  ep3.setProperties(props2);
  inRouter.addEndpoint(ep3);
  d.setInboundRouter(inRouter);
  UMONestedRouterCollection nestedRouter=new NestedRouterCollection();
  NestedRouter nr1=new NestedRouter();
  nr1.setEndpoint(new MuleEndpoint("test://do.wash",false));
  nr1.setInterface(FruitCleaner.class);
  nr1.setMethod("wash");
  nestedRouter.addRouter(nr1);
  NestedRouter nr2=new NestedRouter();
  nr2.setEndpoint(new MuleEndpoint("test://do.polish",false));
  nr2.setInterface(FruitCleaner.class);
  nr2.setMethod("polish");
  nestedRouter.addRouter(nr2);
  d.setNestedRouter(nestedRouter);
  UMOResponseRouterCollection responseRouter=new ResponseRouterCollection();
  responseRouter.addEndpoint(new MuleEndpoint("test://response1",true));
  responseRouter.addEndpoint(managementContext.getRegistry().lookupEndpoint("appleResponseEndpoint"));
  responseRouter.addRouter(new TestResponseAggregator());
  responseRouter.setTimeout(10001);
  d.setResponseRouter(responseRouter);
  Map cprops=new HashMap();
  cprops.put("orange",new Orange());
  cprops.put("brand","Juicy Baby!");
  cprops.put("segments","9");
  cprops.put("radius","4.21");
  Map nested=new HashMap();
  nested.put("prop1","prop1");
  nested.put("prop2","prop2");
  cprops.put("mapProperties",nested);
  List nested2=new ArrayList();
  nested2.add("prop1");
  nested2.add("prop2");
  nested2.add("prop3");
  cprops.put("listProperties",nested2);
  List nested3=new ArrayList();
  nested3.add("prop4");
  nested3.add("prop5");
  nested3.add("prop6");
  cprops.put("arrayProperties",nested3);
  d.setProperties(cprops);
  managementContext.getRegistry().lookupModel("main").registerComponent(d);
}
