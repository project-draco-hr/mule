{
  HelloWorldCookieResource jerseyResource=muleContext.getRegistry().get("jerseyComponent");
  Map<String,Object> props=new HashMap<String,Object>();
  MuleMessage result;
  if (useOldTransport) {
    Cookie[] cookiesObject=new Cookie[]{new Cookie(null,TEST_COOKIE_NAME,TEST_COOKIE_VALUE)};
    props.put(HttpConnector.HTTP_COOKIES_PROPERTY,cookiesObject);
    props.put(HttpConnector.HTTP_METHOD_PROPERTY,HttpConstants.METHOD_POST);
    result=muleContext.getClient().send("http://localhost:" + httpPort.getNumber() + "/helloworld",getTestMessage(props));
  }
 else {
    props.put("Cookie",String.format("%s=%s",TEST_COOKIE_NAME,TEST_COOKIE_VALUE));
    final HttpRequestOptions httpRequestOptions=newOptions().method(org.mule.module.http.api.HttpConstants.Methods.POST.name()).build();
    result=muleContext.getClient().send("http://localhost:" + httpPort.getNumber() + "/helloworld",getTestMessage(props),httpRequestOptions);
  }
  assertThat(HttpStatus.SC_OK,is(equalTo(result.getInboundProperty(HttpConnector.HTTP_STATUS_PROPERTY,0))));
  Map<String,javax.ws.rs.core.Cookie> cookies=jerseyResource.getCookies();
  javax.ws.rs.core.Cookie jerseyCookie=jerseyResource.getCookies().get(TEST_COOKIE_NAME);
  assertThat(1,is(equalTo(cookies.size())));
  assertThat(TEST_COOKIE_NAME,is(equalTo(jerseyCookie.getName())));
  assertThat(TEST_COOKIE_VALUE,is(equalTo(jerseyCookie.getValue())));
  assertThat(TEST_COOKIE_VALUE,is(equalTo(jerseyResource.getTestCookie())));
}
