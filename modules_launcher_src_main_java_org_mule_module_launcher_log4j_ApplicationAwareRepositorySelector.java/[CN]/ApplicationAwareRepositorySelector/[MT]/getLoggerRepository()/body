{
  final ClassLoader ccl=Thread.currentThread().getContextClassLoader();
  LoggerRepository repository=repositoryUnderConstruction.get();
  if (repository != null) {
    return repository;
  }
  repository=cache.getLoggerRepository(ccl);
  if (repository == null) {
    final RootLogger root=new RootLogger(Level.INFO);
    repository=new Hierarchy(root);
    repositoryUnderConstruction.set(repository);
    try {
      ConfigWatchDog configWatchDog=null;
      if (ccl instanceof ApplicationClassLoader) {
        ApplicationClassLoader muleCL=(ApplicationClassLoader)ccl;
        URL appLogConfig=getAppLoggingConfig(muleCL);
        final String appName=muleCL.getAppName();
        if (appLogConfig == null) {
          String logName=String.format("mule-app-%s.log",appName);
          File logDir=new File(MuleContainerBootstrapUtils.getMuleHome(),"logs");
          File logFile=new File(logDir,logName);
          DailyRollingFileAppender fileAppender=new DailyRollingFileAppender(new PatternLayout(PATTERN_LAYOUT),logFile.getAbsolutePath(),"'.'yyyy-MM-dd");
          fileAppender.setAppend(true);
          fileAppender.activateOptions();
          root.addAppender(fileAppender);
        }
 else {
          configureFrom(appLogConfig,repository);
          if (appLogConfig.toExternalForm().startsWith("file:")) {
            configWatchDog=new ConfigWatchDog(ccl,appLogConfig.getFile(),repository);
            configWatchDog.setName(String.format("[%s].log4j.config.monitor",appName));
          }
 else {
            if (logger.isInfoEnabled()) {
              logger.info(String.format("Logging config %s is not an external file, will not be monitored for changes",appLogConfig));
            }
          }
        }
      }
 else {
        File defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.xml");
        if (!defaultSystemLog.exists() && !defaultSystemLog.canRead()) {
          defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.properties");
        }
        configureFrom(defaultSystemLog.toURL(),repository);
        if (ccl instanceof MuleContainerSystemClassLoader) {
          configWatchDog=new ConfigWatchDog(ccl,defaultSystemLog.getAbsolutePath(),repository);
          configWatchDog.setName("Mule.system.log4j.config.monitor");
        }
      }
      final LoggerRepository previous=cache.storeLoggerRepository(ccl,repository);
      if (previous != null) {
        repository=previous;
      }
 else {
        if (configWatchDog != null) {
          configWatchDog.start();
        }
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      repositoryUnderConstruction.remove();
    }
  }
  return repository;
}
