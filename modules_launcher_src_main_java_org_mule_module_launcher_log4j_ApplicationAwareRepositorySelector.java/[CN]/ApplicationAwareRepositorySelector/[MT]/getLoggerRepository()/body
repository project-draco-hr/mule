{
  final ClassLoader ccl=Thread.currentThread().getContextClassLoader();
  LoggerRepository repository=this.repository.get(ccl.hashCode());
  if (repository == null) {
    final RootLogger root=new RootLogger(Level.INFO);
    repository=new Hierarchy(root);
    try {
      if (ccl instanceof MuleApplicationClassLoader) {
        MuleApplicationClassLoader muleCL=(MuleApplicationClassLoader)ccl;
        URL appLogConfig=muleCL.findResource("log4j.xml");
        if (appLogConfig == null) {
          appLogConfig=muleCL.findResource("log4j.properties");
        }
        if (appLogConfig == null) {
          String logName=String.format("mule-app-%s.log",muleCL.getAppName());
          File logDir=new File(MuleContainerBootstrapUtils.getMuleHome(),"logs");
          File logFile=new File(logDir,logName);
          RollingFileAppender fileAppender=new RollingFileAppender(new PatternLayout(PATTERN_LAYOUT),logFile.getAbsolutePath(),true);
          fileAppender.setMaxBackupIndex(100);
          fileAppender.setMaximumFileSize(1000000);
          fileAppender.activateOptions();
          root.addAppender(fileAppender);
        }
 else {
          if (appLogConfig.toExternalForm().endsWith(".xml")) {
            new DOMConfigurator().doConfigure(appLogConfig,repository);
          }
 else {
            new PropertyConfigurator().doConfigure(appLogConfig,repository);
          }
        }
      }
 else {
        File defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.xml");
        if (defaultSystemLog.exists() && defaultSystemLog.canRead()) {
          new DOMConfigurator().doConfigure(defaultSystemLog.getAbsolutePath(),repository);
        }
 else {
          defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.properties");
          new PropertyConfigurator().doConfigure(defaultSystemLog.getAbsolutePath(),repository);
        }
      }
      final LoggerRepository previous=this.repository.putIfAbsent(ccl.hashCode(),repository);
      if (previous != null) {
        repository=previous;
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return repository;
}
