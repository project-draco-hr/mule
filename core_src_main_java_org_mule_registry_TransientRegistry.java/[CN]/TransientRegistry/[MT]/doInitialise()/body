{
  applyProcessors(lookupObjects(Connector.class));
  applyProcessors(lookupObjects(Transformer.class));
  applyProcessors(lookupObjects(ImmutableEndpoint.class));
  applyProcessors(lookupObjects(Agent.class));
  applyProcessors(lookupObjects(Model.class));
  applyProcessors(lookupObjects(Service.class));
  applyProcessors(lookupObjects(Object.class));
synchronized (registry) {
    Collection allObjects=lookupObjects(Object.class);
    Object obj;
    for (Iterator iterator=allObjects.iterator(); iterator.hasNext(); ) {
      obj=iterator.next();
      try {
        applyLifecycle(obj);
      }
 catch (      InitialisationException e) {
        throw e;
      }
catch (      MuleException e) {
        throw new InitialisationException(e,this);
      }
    }
  }
}
