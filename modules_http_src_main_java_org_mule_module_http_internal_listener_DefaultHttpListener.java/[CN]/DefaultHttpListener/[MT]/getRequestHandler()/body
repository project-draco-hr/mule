{
  return new RequestHandler(){
    @Override public void handleRequest(    HttpRequestContext requestContext,    HttpResponseReadyCallback responseCallback){
      try {
        final HttpMessageProcessorTemplate httpMessageProcessorTemplate=new HttpMessageProcessorTemplate(createEvent(requestContext),messageProcessor,responseCallback,responseBuilder,errorResponseBuilder);
        final HttpMessageProcessContext messageProcessContext=new HttpMessageProcessContext(DefaultHttpListener.this,flowConstruct,config.getWorkManager(),muleContext.getExecutionClassLoader());
        messageProcessingManager.processMessage(httpMessageProcessorTemplate,messageProcessContext);
      }
 catch (      HttpRequestParsingException|IllegalArgumentException e) {
        logger.warn("Exception occurred parsing request:",e);
        sendErrorResponse(BAD_REQUEST,e.getMessage(),responseCallback);
      }
catch (      RuntimeException e) {
        logger.warn("Exception occurred processing request:",e);
        sendErrorResponse(INTERNAL_SERVER_ERROR,SERVER_PROBLEM,responseCallback);
      }
 finally {
        RequestContext.clear();
      }
    }
    private void sendErrorResponse(    final HttpStatus status,    String message,    HttpResponseReadyCallback responseCallback){
      responseCallback.responseReady(new org.mule.module.http.internal.domain.response.HttpResponseBuilder().setStatusCode(status.getStatusCode()).setReasonPhrase(status.getReasonPhrase()).setEntity(new ByteArrayHttpEntity(message.getBytes())).build(),new ResponseStatusCallback(){
        @Override public void responseSendFailure(        Throwable exception){
          logger.warn("Error while sending {} response {}",status.getStatusCode(),exception.getMessage());
          if (logger.isDebugEnabled()) {
            logger.debug("Exception thrown",exception);
          }
        }
        @Override public void responseSendSuccessfully(){
        }
      }
);
    }
  }
;
}
