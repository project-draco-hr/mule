{
  String clientClass=(String)endpoint.getProperty(CxfConstants.CLIENT_CLASS);
  proxy=BooleanUtils.toBoolean((String)endpoint.getProperty(CxfConstants.PROXY));
  if (clientClass != null) {
    createClientFromClass(bus,clientClass);
  }
 else   if (proxy) {
    createClientProxy(bus);
  }
 else {
    createClientFromLocalServer(bus);
  }
  addInterceptors(client.getInInterceptors(),(List<Interceptor>)endpoint.getProperty(CxfConstants.IN_INTERCEPTORS));
  addInterceptors(client.getInFaultInterceptors(),(List<Interceptor>)endpoint.getProperty(CxfConstants.IN_FAULT_INTERCEPTORS));
  addInterceptors(client.getOutInterceptors(),(List<Interceptor>)endpoint.getProperty(CxfConstants.OUT_INTERCEPTORS));
  addInterceptors(client.getOutFaultInterceptors(),(List<Interceptor>)endpoint.getProperty(CxfConstants.OUT_FAULT_INTERCEPTORS));
  if (proxy) {
    client.getOutInterceptors().add(new OutputPayloadInterceptor());
    ((MuleUniversalConduit)client.getConduit()).setCloseInput(false);
  }
  List<AbstractFeature> features=(List<AbstractFeature>)endpoint.getProperty(CxfConstants.OUT_FAULT_INTERCEPTORS);
  if (features != null) {
    for (    AbstractFeature f : features) {
      f.initialize(client,bus);
    }
  }
  EndpointImpl ep=(EndpointImpl)client.getEndpoint();
  Object mtomEnabled=endpoint.getProperty(CxfConstants.MTOM_ENABLED);
  if (mtomEnabled != null) {
    HashMap<String,Object> props=new HashMap<String,Object>();
    props.put(Message.MTOM_ENABLED,mtomEnabled);
    ep.setProperties(props);
  }
  addMuleInterceptors();
}
