{
  if (applicationFactory == null) {
    throw new IllegalStateException("There is no application factory");
  }
  if (!url.toString().endsWith(".zip")) {
    throw new IllegalArgumentException("Invalid Mule application archive: " + url);
  }
  final String baseName=FilenameUtils.getBaseName(url.toString());
  if (baseName.contains("%20")) {
    throw new DeploymentInitException(MessageFactory.createStaticMessage("Mule application name may not contain spaces: " + baseName));
  }
  String appName;
  File appDir=null;
  boolean errorEncountered=false;
  try {
    final File appsDir=MuleContainerBootstrapUtils.getMuleAppsDir();
    final String fullPath=url.toURI().toString();
    if (logger.isInfoEnabled()) {
      logger.info("Exploding a Mule application archive: " + fullPath);
    }
    appName=FilenameUtils.getBaseName(fullPath);
    appDir=new File(appsDir,appName);
    final File source=new File(url.toURI());
    FileUtils.unzip(source,appDir);
    if ("file".equals(url.getProtocol())) {
      FileUtils.deleteQuietly(source);
    }
  }
 catch (  URISyntaxException e) {
    errorEncountered=true;
    final IOException ex=new IOException(e.getMessage());
    ex.fillInStackTrace();
    throw ex;
  }
catch (  IOException e) {
    errorEncountered=true;
    throw e;
  }
catch (  Throwable t) {
    errorEncountered=true;
    final String msg="Failed to install app from URL: " + url;
    throw new DeploymentInitException(MessageFactory.createStaticMessage(msg),t);
  }
 finally {
    if (errorEncountered && appDir != null && appDir.exists()) {
      final boolean couldNotDelete=FileUtils.deleteTree(appDir);
    }
  }
  return applicationFactory.createApp(appName);
}
