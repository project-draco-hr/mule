{
  if (!url.toString().endsWith(".zip")) {
    throw new IllegalArgumentException("Only Mule application zips are supported: " + url);
  }
  final ReentrantLock lock=deploymentService.getLock();
  String appName;
  try {
    if (!lock.tryLock(0,TimeUnit.SECONDS)) {
      throw new IOException("Another deployment operation is in progress");
    }
    final File appsDir=MuleContainerBootstrapUtils.getMuleAppsDir();
    final String fullPath=url.toURI().toString();
    if (logger.isInfoEnabled()) {
      logger.info("Exploding a Mule application archive: " + fullPath);
    }
    appName=FilenameUtils.getBaseName(fullPath);
    File appDir=new File(appsDir,appName);
    final File source=new File(url.toURI());
    FileUtils.unzip(source,appDir);
    if ("file".equals(url.getProtocol())) {
      FileUtils.deleteQuietly(source);
    }
  }
 catch (  URISyntaxException e) {
    final IOException ex=new IOException(e.getMessage());
    ex.fillInStackTrace();
    throw ex;
  }
catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new IOException("Install operation has been interrupted");
  }
 finally {
    if (lock.isHeldByCurrentThread()) {
      lock.unlock();
    }
  }
  return deploymentService.getAppFactory().createApp(appName);
}
