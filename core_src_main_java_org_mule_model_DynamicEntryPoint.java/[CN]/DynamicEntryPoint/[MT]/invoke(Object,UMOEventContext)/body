{
  Method method=null;
  Object payload=null;
  boolean ignoreMethod=BooleanUtils.toBoolean((Boolean)context.getMessage().removeProperty(MuleProperties.MULE_IGNORE_METHOD_PROPERTY));
  if (!ignoreMethod) {
    Object methodOverride=context.getMessage().removeProperty(MuleProperties.MULE_METHOD_PROPERTY);
    if (methodOverride instanceof Method) {
      method=(Method)methodOverride;
    }
 else     if (methodOverride != null) {
      payload=context.getTransformedMessage();
      method=ClassUtils.getMethod(methodOverride.toString(),ClassUtils.getClassTypes(payload),component.getClass());
      validateMethod(component,method,methodOverride.toString());
    }
  }
  if (method == null) {
    if (component instanceof Callable) {
      method=Callable.class.getMethods()[0];
      payload=context;
    }
 else {
      method=(Method)entryPoints.get(context.getClass().getName());
      if (method == null) {
        payload=context.getTransformedMessage();
        method=(Method)entryPoints.get(payload.getClass().getName());
        if (method != null) {
          RequestContext.rewriteEvent(new MuleMessage(payload,context.getMessage()));
        }
      }
 else {
        payload=context;
      }
    }
  }
  if (method == null) {
    List methods=ClassUtils.getSatisfiableMethods(component.getClass(),ClassUtils.getClassTypes(context),true,false,ignoredMethods);
    int numMethods=methods.size();
    if (numMethods > 1) {
      TooManySatisfiableMethodsException tmsmex=new TooManySatisfiableMethodsException(component.getClass());
      throw new InvocationTargetException(tmsmex,"There must be only one method accepting " + context.getClass().getName() + " in component "+ component.getClass().getName());
    }
 else     if (numMethods == 1) {
      if (logger.isDebugEnabled()) {
        logger.debug("Dynamic Entrypoint using method: " + component.getClass().getName() + "."+ ((Method)methods.get(0)).getName()+ "("+ context.getClass().getName()+ ")");
      }
      method=(Method)methods.get(0);
      Method previous=(Method)entryPoints.putIfAbsent(context.getClass().getName(),method);
      if (previous != null) {
        method=previous;
      }
      payload=context;
    }
 else {
      payload=context.getTransformedMessage();
      RequestContext.rewriteEvent(new MuleMessage(payload,context.getMessage()));
      methods=ClassUtils.getSatisfiableMethods(component.getClass(),ClassUtils.getClassTypes(payload),true,true,ignoredMethods);
      numMethods=methods.size();
      if (numMethods > 1) {
        throw new TooManySatisfiableMethodsException(component.getClass());
      }
 else       if (numMethods == 1) {
        method=(Method)methods.get(0);
        Method previous=(Method)entryPoints.putIfAbsent(payload.getClass().getName(),method);
        if (previous != null) {
          method=previous;
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Dynamic Entrypoint using method: " + component.getClass().getName() + "."+ method.getName()+ "("+ payload.getClass().getName()+ ")");
        }
      }
 else {
        throw new NoSatisfiableMethodsException(component.getClass(),ClassUtils.getClassTypes(payload));
      }
    }
  }
  currentMethod=method;
  if (payload == null) {
    payload=context.getTransformedMessage();
    RequestContext.rewriteEvent(new MuleMessage(payload,context.getMessage()));
  }
  return this.invokeMethod(component,method,payload);
}
