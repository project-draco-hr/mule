{
  Set<String> packageNames=new HashSet<>();
  try {
    final File libraryFile=new File(URLDecoder.decode(library.getFile(),"UTF-8"));
    if (!libraryFile.exists()) {
      throw new IllegalArgumentException("Library file does not exists: " + library);
    }
    if (libraryFile.isDirectory()) {
      final Collection<File> classFiles=listFiles(libraryFile,new String[]{"class"},true);
      for (      File classFile : classFiles) {
        final String relativePath=classFile.getAbsolutePath().substring(libraryFile.getAbsolutePath().length() + 1);
        final String packageName=getPackageName(relativePath.substring(0,relativePath.length() - CLASS_EXTENSION.length()).replace("/","."));
        packageNames.add(packageName);
      }
    }
 else {
      if (!libraryFile.getName().toLowerCase().endsWith(".jar")) {
        return Collections.EMPTY_SET;
      }
      try (ZipInputStream zip=new ZipInputStream(new FileInputStream(libraryFile))){
        for (ZipEntry entry=zip.getNextEntry(); entry != null; entry=zip.getNextEntry()) {
          if (!entry.isDirectory() && entry.getName().endsWith(CLASS_EXTENSION)) {
            final String packageName=getPackageName(entry.getName().substring(0,entry.getName().length() - CLASS_EXTENSION.length()).replace("/","."));
            packageNames.add(packageName);
          }
        }
      }
     }
  }
 catch (  IOException e) {
    throw new IllegalStateException("Cannot explore URL: " + library,e);
  }
  return packageNames;
}
