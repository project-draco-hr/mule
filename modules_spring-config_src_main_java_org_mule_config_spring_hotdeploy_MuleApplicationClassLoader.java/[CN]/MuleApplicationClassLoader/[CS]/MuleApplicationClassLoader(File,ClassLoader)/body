{
  super(CLASSPATH_EMPTY,parentCl);
  try {
    this.monitoredResource=monitoredResource;
    File parentFile=monitoredResource.getParentFile();
    File classesDir=new File(parentFile,PATH_CLASSES);
    addURL(classesDir.toURI().toURL());
    File libDir=new File(parentFile,PATH_LIBRARY);
    if (logger.isInfoEnabled()) {
      logger.info("Library directory: " + libDir);
    }
    if (libDir.exists() && libDir.canRead()) {
      Collection<File> jars=FileUtils.listFiles(libDir,new String[]{"jar"},false);
      if (!jars.isEmpty() && logger.isInfoEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append("Updating the following jars:").append(SystemUtils.LINE_SEPARATOR);
        sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
        for (        File jar : jars) {
          sb.append(jar.toURI().toURL()).append(SystemUtils.LINE_SEPARATOR);
        }
        sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
        logger.info(sb.toString());
      }
      for (      File jar : jars) {
        addURL(jar.toURI().toURL());
      }
    }
  }
 catch (  IOException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(e);
    }
  }
}
