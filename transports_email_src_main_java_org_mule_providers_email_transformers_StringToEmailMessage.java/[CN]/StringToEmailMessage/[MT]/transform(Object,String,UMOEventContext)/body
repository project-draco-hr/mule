{
  String endpointAddress=endpoint.getEndpointURI().getAddress();
  SmtpConnector connector=(SmtpConnector)endpoint.getConnector();
  UMOMessage eventMsg=context.getMessage();
  String to=eventMsg.getStringProperty(MailProperties.TO_ADDRESSES_PROPERTY,endpointAddress);
  String cc=eventMsg.getStringProperty(MailProperties.CC_ADDRESSES_PROPERTY,connector.getCcAddresses());
  String bcc=eventMsg.getStringProperty(MailProperties.BCC_ADDRESSES_PROPERTY,connector.getBccAddresses());
  String from=eventMsg.getStringProperty(MailProperties.FROM_ADDRESS_PROPERTY,connector.getFromAddress());
  String replyTo=eventMsg.getStringProperty(MailProperties.REPLY_TO_ADDRESSES_PROPERTY,connector.getReplyToAddresses());
  String subject=eventMsg.getStringProperty(MailProperties.SUBJECT_PROPERTY,connector.getSubject());
  String contentType=eventMsg.getStringProperty(MailProperties.CONTENT_TYPE_PROPERTY,connector.getContentType());
  Properties headers=new Properties();
  Properties customHeaders=connector.getCustomHeaders();
  if (customHeaders != null && !customHeaders.isEmpty()) {
    headers.putAll(customHeaders);
  }
  Properties otherHeaders=(Properties)eventMsg.getProperty(MailProperties.CUSTOM_HEADERS_MAP_PROPERTY);
  if (otherHeaders != null && !otherHeaders.isEmpty()) {
    try {
      final UMOManagementContext mc=context.getManagementContext();
      for (Iterator iterator=eventMsg.getPropertyNames().iterator(); iterator.hasNext(); ) {
        String propertyKey=(String)iterator.next();
        mc.getRegistry().registerObject(propertyKey,eventMsg.getProperty(propertyKey),mc);
      }
      headers.putAll(templateParser.parse(new TemplateParser.TemplateCallback(){
        public Object match(        String token){
          return mc.getRegistry().lookupObject(token);
        }
      }
,otherHeaders));
    }
 catch (    RegistrationException e) {
      throw new TransformerException(this,e);
    }
  }
  if (logger.isDebugEnabled()) {
    StringBuffer buf=new StringBuffer();
    buf.append("Constructing email using:\n");
    buf.append("To: ").append(to);
    buf.append("From: ").append(from);
    buf.append("CC: ").append(cc);
    buf.append("BCC: ").append(bcc);
    buf.append("Subject: ").append(subject);
    buf.append("ReplyTo: ").append(replyTo);
    buf.append("Content type: ").append(contentType);
    buf.append("Payload type: ").append(src.getClass().getName());
    buf.append("Custom Headers: ").append(MapUtils.toString(headers,false));
    logger.debug(buf.toString());
  }
  try {
    Message email=new MimeMessage(((SmtpConnector)endpoint.getConnector()).getSessionDetails(endpoint).getSession());
    email.setRecipients(Message.RecipientType.TO,MailUtils.stringToInternetAddresses(to));
    email.setSentDate(Calendar.getInstance().getTime());
    if (StringUtils.isNotBlank(from)) {
      email.setFrom(MailUtils.stringToInternetAddresses(from)[0]);
    }
    if (StringUtils.isNotBlank(cc)) {
      email.setRecipients(Message.RecipientType.CC,MailUtils.stringToInternetAddresses(cc));
    }
    if (StringUtils.isNotBlank(bcc)) {
      email.setRecipients(Message.RecipientType.BCC,MailUtils.stringToInternetAddresses(bcc));
    }
    if (StringUtils.isNotBlank(replyTo)) {
      email.setReplyTo(MailUtils.stringToInternetAddresses(replyTo));
    }
    email.setSubject(subject);
    for (Iterator iterator=headers.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      email.setHeader(entry.getKey().toString(),entry.getValue().toString());
    }
    setContent(src,email,contentType,context);
    return email;
  }
 catch (  Exception e) {
    throw new TransformerException(this,e);
  }
}
