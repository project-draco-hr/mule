{
  QueueSession mock=mock(QueueSession.class);
  when(mock.createProducer(any(Destination.class))).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return createProducerMock();
    }
  }
);
  when(mock.createConsumer(any(Destination.class))).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return mock(MessageConsumer.class);
    }
  }
);
  when(mock.createTextMessage(anyString())).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      ActiveMQTextMessage msg=new ActiveMQTextMessage();
      msg.setText((String)invocation.getArguments()[0]);
      return msg;
    }
  }
);
  return mock;
}
