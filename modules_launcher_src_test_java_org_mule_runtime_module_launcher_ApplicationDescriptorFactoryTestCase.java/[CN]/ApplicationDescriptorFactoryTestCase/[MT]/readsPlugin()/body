{
  File pluginDir=getAppPluginsFolder(APP_NAME);
  pluginDir.mkdirs();
  final File pluginFile=new ArtifactPluginFileBuilder("plugin").usingLibrary("lib/echo-test.jar").getArtifactFile();
  copyFile(pluginFile,new File(pluginDir,"plugin1.zip"));
  copyFile(pluginFile,new File(pluginDir,"plugin2.zip"));
  final ArtifactPluginDescriptorFactory pluginDescriptorFactory=mock(ArtifactPluginDescriptorFactory.class);
  final ApplicationDescriptorFactory applicationDescriptorFactory=new ApplicationDescriptorFactory(new ArtifactPluginDescriptorLoader(pluginDescriptorFactory),applicationPluginRepository);
  final ArtifactPluginDescriptor expectedPluginDescriptor1=mock(ArtifactPluginDescriptor.class);
  when(expectedPluginDescriptor1.getName()).thenReturn("plugin1");
  when(expectedPluginDescriptor1.getClassLoaderFilter()).thenReturn(ArtifactClassLoaderFilter.NULL_CLASSLOADER_FILTER);
  final ArtifactPluginDescriptor expectedPluginDescriptor2=mock(ArtifactPluginDescriptor.class);
  when(expectedPluginDescriptor2.getName()).thenReturn("plugin2");
  when(expectedPluginDescriptor2.getClassLoaderFilter()).thenReturn(ArtifactClassLoaderFilter.NULL_CLASSLOADER_FILTER);
  when(pluginDescriptorFactory.create(any())).thenReturn(expectedPluginDescriptor1).thenReturn(expectedPluginDescriptor2);
  ApplicationDescriptor desc=applicationDescriptorFactory.create(getAppFolder(APP_NAME));
  Set<ArtifactPluginDescriptor> plugins=desc.getPlugins();
  assertThat(plugins.size(),equalTo(2));
  assertThat(plugins,hasItem(equalTo(expectedPluginDescriptor1)));
  assertThat(plugins,hasItem(equalTo(expectedPluginDescriptor2)));
}
