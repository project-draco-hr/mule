{
  if (StringUtils.isEmpty(resourceBase)) {
    throw new ConfigurationException(HttpMessages.noResourceBaseDefined());
  }
  String path=event.getMessage().getInboundProperty(HttpConnector.HTTP_REQUEST_PATH_PROPERTY);
  String contextPath=event.getMessage().getInboundProperty(org.mule.runtime.module.http.api.HttpConstants.RequestProperties.HTTP_LISTENER_PATH);
  if (contextPath == null) {
    contextPath=event.getMessage().getInboundProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY);
  }
 else {
    if (contextPath.equals(ANY_PATH)) {
      contextPath=ROOT_PATH;
    }
    if (contextPath.endsWith(ANY_PATH)) {
      contextPath=StringUtils.removeEnd(contextPath,ANY_PATH);
    }
  }
  if (!ROOT_PATH.equals(contextPath)) {
    path=path.substring(contextPath.length());
  }
  File file=new File(resourceBase + path);
  MuleEvent resultEvent=event;
  if (file.isDirectory() && path.endsWith("/")) {
    file=new File(resourceBase + path + defaultFile);
  }
 else   if (file.isDirectory()) {
    MuleMessage message=MuleMessage.builder().payload(NullPayload.getInstance()).addOutboundProperty(HTTP_STATUS_PROPERTY,valueOf(SC_MOVED_TEMPORARILY)).addOutboundProperty(HEADER_CONTENT_LENGTH,0).addOutboundProperty(HEADER_LOCATION,event.getMessage().getInboundProperty(HTTP_REQUEST_PATH_PROPERTY) + "/").build();
    resultEvent=new DefaultMuleEvent(message,event);
    return resultEvent;
  }
  InputStream in=null;
  try {
    in=new FileInputStream(file);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    IOUtils.copyLarge(in,baos);
    byte[] buffer=baos.toByteArray();
    String mimetype=mimeTypes.getContentType(file);
    if (mimetype == null) {
      mimetype=DEFAULT_MIME_TYPE;
    }
    MuleMessage message=MuleMessage.builder().payload(buffer).addOutboundProperty(HTTP_STATUS_PROPERTY,valueOf(SC_OK)).addOutboundProperty(HEADER_CONTENT_TYPE,mimetype).addOutboundProperty(HEADER_CONTENT_LENGTH,buffer.length).build();
    resultEvent=new DefaultMuleEvent(message,event);
  }
 catch (  IOException e) {
    throw new ResourceNotFoundException(HttpMessages.fileNotFound(resourceBase + path),event,this);
  }
 finally {
    IOUtils.closeQuietly(in);
  }
  return resultEvent;
}
