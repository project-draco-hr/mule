{
  ImmutableEndpoint serverEndpoint=null;
  if (synchronous) {
    serverEndpoint=syncServerEndpoint;
  }
 else {
    serverEndpoint=asyncServerEndpoint;
  }
  updateContext(new DefaultMuleMessage(action),serverEndpoint,synchronous);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  wireFormat.write(out,action,serverEndpoint.getEncoding());
  byte[] payload=out.toByteArray();
  MuleMessage message=action.getMessage();
  if (message == null) {
    message=new DefaultMuleMessage(payload);
  }
 else {
    message=new DefaultMuleMessage(payload,message);
  }
  message.addProperties(action.getProperties());
  DefaultMuleSession session=new DefaultMuleSession(message,((AbstractConnector)serverEndpoint.getConnector()).getSessionHandler());
  MuleEvent event=new DefaultMuleEvent(message,serverEndpoint,session,true);
  event.setTimeout(timeout);
  if (logger.isDebugEnabled()) {
    logger.debug("MuleClient sending remote call to: " + action.getResourceIdentifier() + ". At "+ serverEndpoint.toString()+ " . MuleEvent is: "+ event);
  }
  MuleMessage result;
  try {
    if (synchronous) {
      result=serverEndpoint.send(event);
    }
 else {
      serverEndpoint.dispatch(event);
      return null;
    }
    if (result != null) {
      if (result.getPayload() != null) {
        Object response;
        if (result.getPayload() instanceof InputStream) {
          response=wireFormat.read((InputStream)result.getPayload());
        }
 else {
          ByteArrayInputStream in=new ByteArrayInputStream(result.getPayloadAsBytes());
          response=wireFormat.read(in);
        }
        if (response instanceof AdminNotification) {
          response=((AdminNotification)response).getMessage();
        }
        return (MuleMessage)response;
      }
    }
  }
 catch (  Exception e) {
    throw new DispatchException(event.getMessage(),event.getEndpoint(),e);
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Result of MuleClient remote call is: " + (result == null ? "null" : result.getPayload()));
  }
  return result;
}
