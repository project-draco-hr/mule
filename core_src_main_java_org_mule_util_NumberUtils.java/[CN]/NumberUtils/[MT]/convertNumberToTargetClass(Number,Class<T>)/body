{
  if (targetClass.isInstance(number)) {
    return (T)number;
  }
 else   if (targetClass.equals(Byte.class)) {
    long value=number.longValue();
    if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)new Byte(number.byteValue());
  }
 else   if (targetClass.equals(Short.class)) {
    long value=number.longValue();
    if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)new Short(number.shortValue());
  }
 else   if (targetClass.equals(Integer.class)) {
    long value=number.longValue();
    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {
      raiseOverflowException(number,targetClass);
    }
    return (T)new Integer(number.intValue());
  }
 else   if (targetClass.equals(Long.class)) {
    return (T)new Long(number.longValue());
  }
 else   if (targetClass.equals(BigInteger.class)) {
    if (number instanceof BigDecimal) {
      return (T)((BigDecimal)number).toBigInteger();
    }
 else {
      return (T)BigInteger.valueOf(number.longValue());
    }
  }
 else   if (targetClass.equals(Float.class)) {
    return (T)new Float(number.floatValue());
  }
 else   if (targetClass.equals(Double.class)) {
    return (T)new Double(number.doubleValue());
  }
 else   if (targetClass.equals(BigDecimal.class)) {
    return (T)new BigDecimal(number.toString());
  }
 else {
    throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to unknown target class ["+ targetClass.getName()+ "]");
  }
}
