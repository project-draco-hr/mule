{
  if (!path.endsWith("environment-properties")) {
    path+="/properties";
  }
  digester.addRule(path,new ObjectCreateRule(path,HashMap.class){
    public void end(    String string,    String string1) throws Exception {
      Map props=(Map)digester.peek();
      if (props.containsKey(MuleConfiguration.USE_MANAGER_PROPERTIES)) {
        props.putAll(MuleManager.getInstance().getProperties());
        props.remove(MuleConfiguration.USE_MANAGER_PROPERTIES);
      }
      super.end(string,string1);
      String trans=(String)props.remove("transformer");
      if (setAsBeanProperties) {
        org.mule.util.BeanUtils.populateWithoutFail(digester.peek(),props,true);
      }
 else {
        BeanUtils.setProperty(digester.peek(),string1,props);
      }
      if (trans != null) {
        addTransformerReference("transformer",trans,digester.peek());
      }
    }
  }
);
  digester.addCallMethod(path + "/property","put",2);
  digester.addRule(path + "/property",new CallParamRule(0,"name"){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  digester.addRule(path + "/property",new CallParamRule(1,"value"){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  addPropertyFactoryRule(digester,path + "/factory-property");
  addSystemPropertyRule(digester,path + "/system-property");
  addFilePropertiesRule(digester,path + "/file-properties");
  addContainerPropertyRule(digester,path + "/container-property",setAsBeanProperties);
  digester.addObjectCreate(path + "/map",HashMap.class);
  digester.addCallMethod(path + "/map/property","put",2);
  digester.addRule(path + "/map/property",new CallParamRule(0,"name"){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  digester.addRule(path + "/map/property",new CallParamRule(1,"value"){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  addPropertyFactoryRule(digester,path + "/map/factory-property");
  addSystemPropertyRule(digester,path + "/map/system-property");
  addFilePropertiesRule(digester,path + "/map/file-properties");
  addContainerPropertyRule(digester,path + "/map/container-property",false);
  digester.addRule(path + "/map",new CallMethodRule("put",2){
    public void end(    String string,    String string1) throws Exception {
      Map props=(Map)digester.peek();
      if (props.containsKey(MuleConfiguration.USE_MANAGER_PROPERTIES)) {
        props.putAll(MuleManager.getInstance().getProperties());
        props.remove(MuleConfiguration.USE_MANAGER_PROPERTIES);
      }
      Object o=digester.peek(1);
      digester.push(o);
      super.end(string,string1);
      o=digester.pop();
    }
  }
);
  digester.addCallParam(path + "/map",0,"name");
  digester.addCallParam(path + "/map",1,true);
  digester.addObjectCreate(path + "/list",ArrayList.class);
  digester.addRule(path + "/list/entry",new CallMethodRule("add",1){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  digester.addRule(path + "/list/entry",new CallParamRule(0,"value"){
    public void begin(    String endpointName,    String endpointName1,    Attributes attributes) throws Exception {
      attributes=processAttributes(attributes,endpointName1);
      super.begin(endpointName,endpointName1,attributes);
    }
  }
);
  addPropertyFactoryRule(digester,path + "/list/factory-entry");
  addSystemPropertyRule(digester,path + "/list/system-entry");
  addContainerPropertyRule(digester,path + "/list/container-entry",false);
  digester.addRule(path + "/list",new CallMethodRule("put",2){
    public void end(    String string,    String string1) throws Exception {
      Object o=digester.peek(1);
      digester.push(o);
      super.end(string,string1);
      o=digester.pop();
    }
  }
);
  digester.addCallParam(path + "/list",0,"name");
  digester.addCallParam(path + "/list",1,true);
}
