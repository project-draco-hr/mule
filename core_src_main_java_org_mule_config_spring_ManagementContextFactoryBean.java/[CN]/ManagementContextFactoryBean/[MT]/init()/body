{
  try {
    Map temp;
    if (ClassUtils.isClassOnPath(LEGACY_MANAGER_PLACEHOLDER_CLASS,getClass())) {
      try {
        Class clazz=ClassUtils.loadClass(LEGACY_MANAGER_PLACEHOLDER_CLASS,getClass());
        temp=context.getBeansOfType(clazz);
        if (temp.size() > 0) {
          try {
            setLegacyProperties((Map)context.getBean(MuleProperties.OBJECT_MULE_APPLICATION_PROPERTIES,Map.class));
          }
 catch (          BeansException e) {
          }
        }
      }
 catch (      ClassNotFoundException e) {
      }
    }
    temp=context.getBeansOfType(UMOTransactionManagerFactory.class,true,false);
    if (temp.size() > 0) {
      transactionManager=(((UMOTransactionManagerFactory)temp.values().iterator().next()).create());
    }
 else {
      temp=context.getBeansOfType(TransactionManager.class,true,false);
      if (temp.size() > 0) {
        transactionManager=(((TransactionManager)temp.values().iterator().next()));
      }
    }
    temp=context.getBeansOfType(UMOSecurityManager.class,true,false);
    if (temp.size() > 0) {
      securityManager=((UMOSecurityManager)temp.values().iterator().next());
    }
    temp=context.getBeansOfType(ServiceNotificationManager.class,true,false);
    if (temp.size() > 0) {
      notificationManager=((ServiceNotificationManager)temp.values().iterator().next());
    }
    temp=context.getBeansOfType(UMOWorkManager.class,true,false);
    if (temp.size() > 0) {
      workManager=((UMOWorkManager)temp.values().iterator().next());
    }
    temp=context.getBeansOfType(QueueManager.class,true,false);
    if (temp.size() > 0) {
      queueManager=((QueueManager)temp.values().iterator().next());
    }
  }
 catch (  Exception e) {
    throw new BeanInitializationException("Failed to wire MuleManager together: " + e.getMessage(),e);
  }
}
