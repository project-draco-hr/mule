{
  try {
    PGPCryptInfo pgpCryptInfo;
    KeyBundle publicKey;
    if (cryptInfo == null) {
      MuleEvent event=RequestContext.getEvent();
      publicKey=keyManager.getKeyBundle((String)credentialsAccessor.getCredentials(event));
      pgpCryptInfo=new PGPCryptInfo(publicKey,false);
    }
 else {
      pgpCryptInfo=(PGPCryptInfo)cryptInfo;
      publicKey=pgpCryptInfo.getKeyBundle();
    }
    LiteralMessageBuilder lmb=LiteralMessageBuilder.getInstance("OpenPGP");
    lmb.init(data);
    Message msg=lmb.build();
    if (pgpCryptInfo.isSignRequested()) {
      SignedMessageBuilder smb=SignedMessageBuilder.getInstance("OpenPGP");
      smb.init(msg);
      smb.addSigner(keyManager.getSecretKeyBundle(),keyManager.getSecretPassphrase().toCharArray());
      msg=smb.build();
    }
    EncryptedMessageBuilder emb=EncryptedMessageBuilder.getInstance("OpenPGP");
    emb.init(msg);
    emb.addRecipient(publicKey);
    msg=emb.build();
    return new PGPArmouredMessage(msg).getEncoded();
  }
 catch (  Exception e) {
    throw new CryptoFailureException(this,e);
  }
}
