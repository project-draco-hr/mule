{
switch (property) {
case SESSIONID:
    return (session != null) ? session.getId() : null;
case SESSIONCREATED:
  return (session != null) ? new Date(session.getCreationTime()) : null;
case SESSIONACCESSED:
return (session != null) ? new Date(session.getLastAccessedTime()) : null;
case SESSIONTIMEOUT:
return (session != null) ? session.getMaxInactiveInterval() : -1;
case CHARACTERENCODING:
return request.getEncoding();
case LOCALES:
return null;
case PROTOCOL:
return request.getProperty(HttpConnector.HTTP_VERSION_PROPERTY);
case REMOTEADDRESS:
return null;
case REMOTEHOST:
return baseIri.getHost();
case REMOTEUSER:
return baseIri.getUserInfo();
case SCHEME:
return baseIri.getScheme();
case PRINCIPAL:
return null;
case AUTHTYPE:
return null;
case CONTENTLENGTH:
return request.getProperty(HttpConstants.HEADER_CONTENT_LENGTH);
case CONTENTTYPE:
return request.getProperty(HttpConstants.HEADER_CONTENT_TYPE);
case CONTEXTPATH:
return "";
case LOCALADDR:
return "";
case LOCALNAME:
return "";
case SERVERNAME:
return "";
case SERVERPORT:
return "";
default :
throw new UnsupportedOperationException("Property " + property.name() + " is not supported.");
}
}
