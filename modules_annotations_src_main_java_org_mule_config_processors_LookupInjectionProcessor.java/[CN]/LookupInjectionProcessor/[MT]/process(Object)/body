{
  Field[] fields;
  try {
    fields=object.getClass().getDeclaredFields();
  }
 catch (  NoClassDefFoundError e) {
    if (logger.isDebugEnabled()) {
      logger.warn(e.toString());
    }
    return object;
  }
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    if (field.isAnnotationPresent(Lookup.class)) {
      try {
        field.setAccessible(true);
        Object value;
        String name=field.getAnnotation(Lookup.class).value();
        boolean optional=field.getAnnotation(Lookup.class).optional();
        if (StringUtils.isBlank(name)) {
          value=context.getRegistry().lookupObject(field.getType());
        }
 else {
          value=context.getRegistry().lookupObject(name);
        }
        if (value == null && !optional) {
          throw new RequiredValueException(AnnotationsMessages.lookupNotFoundInRegistry(field.getType(),name,object.getClass()));
        }
        field.set(object,value);
      }
 catch (      RequiredValueException e) {
        throw e;
      }
catch (      Exception e) {
        throw new RequiredValueException(AnnotationsMessages.lookupFailedSeePreviousException(object),e);
      }
    }
  }
  return object;
}
