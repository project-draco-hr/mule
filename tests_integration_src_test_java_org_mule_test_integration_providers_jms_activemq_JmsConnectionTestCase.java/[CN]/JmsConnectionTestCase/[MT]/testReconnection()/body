{
  MuleDescriptor d=getTestDescriptor("anOrange",Orange.class.getName());
  UMOComponent component=MuleManager.getInstance().getModel().registerComponent(d);
  UMOEndpoint endpoint=new MuleEndpoint("test",new MuleEndpointURI("jms://my.queue"),connector,null,UMOEndpoint.ENDPOINT_TYPE_SENDER,0,new HashMap());
  MuleManager.getInstance().start();
  MuleManager.getInstance().registerListener(this);
  connector.registerListener(component,endpoint);
  long t0, t1;
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionEvent event=(ConnectionEvent)events.take();
    if (event.getAction() == ConnectionEvent.CONNECTION_FAILED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("No connection attempt");
    }
  }
  ServerTools.launchActiveMq(BROKER_URL);
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionEvent event=(ConnectionEvent)events.take();
    if (event.getAction() == ConnectionEvent.CONNECTION_CONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have succeeded");
    }
  }
  Thread.sleep(3000);
  MuleClient client=new MuleClient();
  UMOMessage m=client.send("jms://reconnect.queue","test",null);
  Thread.sleep(200000);
  assertNotNull(m);
  assertEquals("Received: test",m.getPayloadAsString());
  ServerTools.killActiveMq();
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionEvent event=(ConnectionEvent)events.take();
    if (event.getAction() == ConnectionEvent.CONNECTION_DISCONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have been lost");
    }
  }
  ServerTools.launchActiveMq(BROKER_URL);
  t0=System.currentTimeMillis();
  while (true) {
    ConnectionEvent event=(ConnectionEvent)events.take();
    if (event.getAction() == ConnectionEvent.CONNECTION_CONNECTED) {
      break;
    }
    t1=System.currentTimeMillis() - t0;
    if (t1 > TIME_OUT) {
      fail("Connection should have succeeded");
    }
  }
  m=client.send("jms://reconnect.queue","test",null);
  assertNotNull(m);
  assertEquals("Received: test",m.getPayloadAsString());
  ServerTools.killActiveMq();
}
