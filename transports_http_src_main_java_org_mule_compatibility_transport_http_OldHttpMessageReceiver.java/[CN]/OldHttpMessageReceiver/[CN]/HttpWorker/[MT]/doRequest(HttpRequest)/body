{
  sendExpect100(request);
  final MuleMessage message=createMuleMessage(request);
  String path=message.getInboundProperty(HTTP_REQUEST_PROPERTY);
  int i=path.indexOf('?');
  if (i > -1) {
    path=path.substring(0,i);
  }
  message.setInboundProperty(HTTP_REQUEST_PATH_PROPERTY,path);
  if (logger.isDebugEnabled()) {
    logger.debug(message.getInboundProperty(HTTP_REQUEST_PROPERTY));
  }
  final MessageReceiver receiver=getTargetReceiver(message,endpoint);
  HttpResponse response;
  if (receiver != null) {
    String contextPath=HttpConnector.normalizeUrl(receiver.getEndpointURI().getPath());
    message.setInboundProperty(HTTP_CONTEXT_PATH_PROPERTY,contextPath);
    message.setInboundProperty(HTTP_CONTEXT_URI_PROPERTY,receiver.getEndpointURI().getAddress());
    message.setInboundProperty(HTTP_RELATIVE_PATH_PROPERTY,processRelativePath(contextPath,path));
    ExecutionTemplate<MuleEvent> executionTemplate=createExecutionTemplate();
    MuleEvent returnEvent;
    try {
      returnEvent=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
        @Override public MuleEvent process() throws Exception {
          preRouteMessage(message);
          return receiver.routeMessage(message);
        }
      }
);
    }
 catch (    MuleException e) {
      throw e;
    }
catch (    IOException e) {
      throw e;
    }
catch (    Exception e) {
      throw new DefaultMuleException(e);
    }
    MuleMessage returnMessage=returnEvent == null ? null : returnEvent.getMessage();
    Object tempResponse;
    if (returnMessage != null) {
      tempResponse=returnMessage.getPayload();
    }
 else {
      tempResponse=NullPayload.getInstance();
    }
    if (tempResponse instanceof HttpResponse) {
      response=(HttpResponse)tempResponse;
    }
 else {
      response=transformResponse(returnMessage,returnEvent);
    }
    response.setupKeepAliveFromRequestVersion(request.getRequestLine().getHttpVersion());
    HttpConnector httpConnector=(HttpConnector)connector;
    response.disableKeepAlive(!httpConnector.isKeepAlive());
    Header connectionHeader=request.getFirstHeader("Connection");
    if (connectionHeader != null) {
      String value=connectionHeader.getValue();
      boolean endpointOverride=getEndpointKeepAliveValue(endpoint);
      if ("keep-alive".equalsIgnoreCase(value) && endpointOverride) {
        response.setKeepAlive(true);
        if (response.getHttpVersion().equals(HTTP_1_0)) {
          connectionHeader=new Header(HEADER_CONNECTION,"Keep-Alive");
          response.setHeader(connectionHeader);
        }
      }
 else       if ("close".equalsIgnoreCase(value)) {
        response.setKeepAlive(false);
      }
    }
  }
 else {
    EndpointURI uri=endpoint.getEndpointURI();
    String failedPath=String.format("%s://%s:%d%s",uri.getScheme(),uri.getHost(),uri.getPort(),message.getInboundProperty(HTTP_REQUEST_PATH_PROPERTY));
    response=buildFailureResponse(request.getRequestLine().getHttpVersion(),SC_NOT_FOUND,HttpMessages.cannotBindToAddress(failedPath).toString());
  }
  return response;
}
