{
  MuleResponseMessage result=(MuleResponseMessage)invocationContext.getResponse();
  if (result == null || result.getPayload() == null || invocationContext.getMethod().getReturnType().equals(Void.TYPE)) {
    return;
  }
  Object finalResult;
  Method method=invocationContext.getMethod();
  if (method.getName().startsWith("ibean")) {
    invocationContext.setResult(result.getPayload());
    return;
  }
  DataType requiredType=DataTypeConverter.convertIBeansToMule(invocationContext.getReturnType());
  if (method.getAnnotation(Return.class) != null) {
    String returnExpression=method.getAnnotation(Return.class).value();
    finalResult=handleReturnAnnotation(returnExpression,result,invocationContext);
    DataType finalType=DataTypeFactory.createFromObject(finalResult);
    if (!requiredType.isCompatibleWith(finalType)) {
      Transformer transformer=muleContext.getRegistry().lookupTransformer(finalType,requiredType);
      finalResult=transformer.transform(finalResult);
    }
  }
 else {
    if (requiredType.getType().equals(MuleMessage.class)) {
      finalResult=result.getMessage();
    }
 else     if (requiredType.getType().equals(Response.class)) {
      finalResult=result;
    }
 else {
      Transformer transformer=muleContext.getRegistry().lookupTransformer(DataTypeFactory.createFromObject(result.getMessage()),requiredType);
      finalResult=transformer.transform(result.getPayload());
    }
  }
  invocationContext.setResult(finalResult);
}
