{
  containerClassLoader=new ContainerClassLoaderFactory().createContainerClassLoader(getClass().getClassLoader());
  artifactClassLoaderManager=new DefaultClassLoaderManager();
  domainManager=new DefaultDomainManager();
  this.domainClassLoaderFactory=trackDeployableArtifactClassLoaderFactory(new DomainClassLoaderFactory(containerClassLoader.getClassLoader()));
  this.artifactPluginClassLoaderFactory=trackArtifactClassLoaderFactory(new ArtifactPluginClassLoaderFactory());
  artifactPluginDescriptorFactory=new ArtifactPluginDescriptorFactory(new ArtifactClassLoaderFilterFactory());
  artifactPluginRepository=new DefaultArtifactPluginRepository(artifactPluginDescriptorFactory);
  final ApplicationDescriptorFactory applicationDescriptorFactory=new ApplicationDescriptorFactory(artifactPluginDescriptorFactory,artifactPluginRepository);
  DeployableArtifactClassLoaderFactory<ApplicationDescriptor> applicationClassLoaderFactory=trackDeployableArtifactClassLoaderFactory(new MuleApplicationClassLoaderFactory(new DefaultNativeLibraryFinderFactory()));
  ApplicationClassLoaderBuilderFactory applicationClassLoaderBuilderFactory=new ApplicationClassLoaderBuilderFactory(applicationClassLoaderFactory,artifactPluginRepository,this.artifactPluginClassLoaderFactory);
  ArtifactClassLoaderFactory<ServiceDescriptor> serviceClassLoaderFactory=new ServiceClassLoaderFactory();
  serviceManager=new MuleServiceManager(new DefaultServiceDiscoverer(new FileSystemServiceProviderDiscoverer(containerClassLoader,trackArtifactClassLoaderFactory(serviceClassLoaderFactory)),new ReflectionServiceResolver(new ReflectionServiceProviderResolutionHelper())));
  domainFactory=new DefaultDomainFactory(this.domainClassLoaderFactory,domainManager,containerClassLoader,artifactClassLoaderManager,serviceManager);
  applicationFactory=new DefaultApplicationFactory(applicationClassLoaderBuilderFactory,applicationDescriptorFactory,artifactPluginRepository,domainManager,serviceManager,artifactClassLoaderManager);
  temporaryApplicationFactory=new TemporaryApplicationFactory(applicationClassLoaderBuilderFactory,new TemporaryApplicationDescriptorFactory(artifactPluginDescriptorFactory,artifactPluginRepository),artifactPluginRepository,domainManager,serviceManager,artifactClassLoaderManager);
  temporaryArtifactClassLoaderBuilderFactory=new TemporaryArtifactClassLoaderBuilderFactory(artifactPluginRepository,null);
}
