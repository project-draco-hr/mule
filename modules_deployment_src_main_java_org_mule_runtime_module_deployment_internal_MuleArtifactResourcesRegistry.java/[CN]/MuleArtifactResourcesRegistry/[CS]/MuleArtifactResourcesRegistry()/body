{
  containerClassLoader=new ContainerClassLoaderFactory().createContainerClassLoader(getClass().getClassLoader());
  domainManager=new DefaultDomainManager();
  domainClassLoaderFactory=new DomainClassLoaderFactory(containerClassLoader.getClassLoader());
  domainFactory=new DefaultDomainFactory(domainClassLoaderFactory,domainManager,containerClassLoader);
  artifactPluginClassLoaderFactory=new ArtifactPluginClassLoaderFactory();
  final ArtifactPluginDescriptorFactory artifactPluginDescriptorFactory=new ArtifactPluginDescriptorFactory(new ArtifactClassLoaderFilterFactory());
  artifactPluginRepository=new DefaultArtifactPluginRepository(artifactPluginDescriptorFactory);
  artifactPluginDescriptorLoader=new ArtifactPluginDescriptorLoader(artifactPluginDescriptorFactory);
  final ApplicationDescriptorFactory applicationDescriptorFactory=new ApplicationDescriptorFactory(artifactPluginDescriptorLoader,artifactPluginRepository);
  MuleApplicationClassLoaderFactory applicationClassLoaderFactory=new MuleApplicationClassLoaderFactory(new DefaultNativeLibraryFinderFactory());
  ApplicationClassLoaderBuilderFactory applicationClassLoaderBuilderFactory=new ApplicationClassLoaderBuilderFactory(applicationClassLoaderFactory,artifactPluginRepository,artifactPluginClassLoaderFactory);
  serviceManager=new MuleServiceManager(new DefaultServiceDiscoverer(new FileSystemServiceProviderDiscoverer(containerClassLoader,new ServiceClassLoaderFactory()),new ReflectionServiceResolver(new ReflectionServiceProviderResolutionHelper())));
  applicationFactory=new DefaultApplicationFactory(applicationClassLoaderBuilderFactory,applicationDescriptorFactory,artifactPluginRepository,domainManager,serviceManager);
  temporaryArtifactClassLoaderBuilderFactory=new TemporaryArtifactClassLoaderBuilderFactory(artifactPluginRepository,null);
}
