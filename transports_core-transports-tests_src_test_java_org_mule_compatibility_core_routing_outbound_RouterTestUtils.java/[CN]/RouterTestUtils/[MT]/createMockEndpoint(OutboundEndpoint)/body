{
  OutboundEndpoint endpoint=mock(OutboundEndpoint.class);
  when(endpoint.getEndpointURI()).thenReturn(toMock.getEndpointURI());
  when(endpoint.getAddress()).thenReturn(toMock.getAddress());
  when(endpoint.toString()).thenReturn(toMock.toString());
  when(endpoint.getExchangePattern()).thenReturn(toMock.getExchangePattern());
  when(endpoint.getProperties()).thenReturn(toMock.getProperties());
  when(endpoint.getFilter()).thenReturn(toMock.getFilter());
  when(endpoint.filterAccepts(any(MuleMessage.class),any(MuleEvent.Builder.class))).thenAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      return toMock.filterAccepts((MuleMessage)invocation.getArguments()[0],mock(MuleEvent.Builder.class));
    }
  }
);
  when(endpoint.getName()).thenReturn(toMock.getName());
  when(endpoint.getResponseMessageProcessors()).thenReturn(toMock.getResponseMessageProcessors());
  return endpoint;
}
