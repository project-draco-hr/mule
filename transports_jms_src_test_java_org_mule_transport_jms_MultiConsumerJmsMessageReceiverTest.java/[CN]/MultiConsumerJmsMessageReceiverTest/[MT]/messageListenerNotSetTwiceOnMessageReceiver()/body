{
  when(mockJmsConnector.getTopicResolver().isTopic(mockInboundEndpoint,true)).thenReturn(false);
  when(mockJmsConnector.getNumberOfConsumers()).thenReturn(1);
  MessageConsumer mockMessageConsumer=mock(TestMessageConsumer.class,CALLS_REAL_METHODS);
  when(mockJmsConnector.getJmsSupport().createConsumer(any(Session.class),any(Destination.class),anyString(),anyBoolean(),anyString(),anyBoolean(),any(InboundEndpoint.class))).thenReturn(mockMessageConsumer);
  when(mockInboundEndpoint.getConnector()).thenReturn(mockJmsConnector);
  when(mockInboundEndpoint.getMuleContext().getRegistry().get(MuleProperties.OBJECT_DEFAULT_MESSAGE_PROCESSING_MANAGER)).thenReturn(mock(MessageProcessingManager.class));
  SimpleRetryPolicyTemplate retryPolicyTemplate=new SimpleRetryPolicyTemplate();
  retryPolicyTemplate.setMuleContext(mockJmsConnector.getMuleContext());
  when(mockInboundEndpoint.getRetryPolicyTemplate()).thenReturn(retryPolicyTemplate);
  when(mockInboundEndpoint.getProperties().get(JmsConstants.DURABLE_PROPERTY)).thenReturn("false");
  when(mockInboundEndpoint.getProperties().get(JmsConstants.DURABLE_NAME_PROPERTY)).thenReturn(null);
  MultiConsumerJmsMessageReceiver messageReceiver=new MultiConsumerJmsMessageReceiver(mockJmsConnector,mockFlowConstruct,mockInboundEndpoint);
  messageReceiver.initialise();
  messageReceiver.doStart();
  verify(mockMessageConsumer).setMessageListener(any(MessageListener.class));
  reset(mockMessageConsumer);
  messageReceiver.startSubReceivers();
  verify(mockMessageConsumer,never()).setMessageListener(any(MessageListener.class));
}
