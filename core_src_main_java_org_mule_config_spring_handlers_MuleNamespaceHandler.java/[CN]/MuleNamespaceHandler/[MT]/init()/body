{
  registerIgnoredElement("mule");
  registerIgnoredElement("description");
  registerBeanDefinitionParser("configuration",new ConfigurationDefinitionParser());
  registerBeanDefinitionParser("environment-property",new EnvironmentPropertyDefinitionParser());
  registerBeanDefinitionParser("admin-agent",new MuleAdminAgentDefinitionParser());
  registerBeanDefinitionParser("default-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleConfiguration.DEFAULT_THREADING_PROFILE));
  registerBeanDefinitionParser("default-dispatcher-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleConfiguration.DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-receiver-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleConfiguration.DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("default-component-threading-profile",new DefaultThreadingProfileDefinitionParser(MuleConfiguration.DEFAULT_COMPONENT_THREADING_PROFILE));
  registerBeanDefinitionParser("default-dispatcher-connection-strategy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("default-receiver-connection-strategy",new ConnectionStrategyDefinitionParser());
  registerBeanDefinitionParser("component-threading-profile",new ThreadingProfileDefinitionParser("threadingProfile",MuleConfiguration.DEFAULT_COMPONENT_THREADING_PROFILE));
  registerBeanDefinitionParser("custom-exception-strategy",new ChildDefinitionParser("exceptionListener",null));
  registerBeanDefinitionParser("default-service-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultComponentExceptionStrategy.class));
  registerBeanDefinitionParser("default-connector-exception-strategy",new ChildDefinitionParser("exceptionListener",DefaultExceptionStrategy.class));
  registerBeanDefinitionParser("pooling-profile",new PoolingProfileDefinitionParser());
  registerBeanDefinitionParser("queue-profile",new ChildDefinitionParser("queueProfile",QueueProfile.class));
  registerBeanDefinitionParser("notifications",new NamedDefinitionParser(ManagementContext.NOTIFICATION_MANAGER).addAlias("dynamic","notificationDynamic"));
  registerBeanDefinitionParser("notification",new NotificationDefinitionParser());
  registerBeanDefinitionParser("disable-notification",new NotificationDisableDefinitionParser());
  registerBeanDefinitionParser("notification-listener",new ChildDefinitionParser("allListenerSubscriptionPair",ListenerSubscriptionPair.class).addAlias("ref","listener").addReference("listener"));
  registerBeanDefinitionParser("dispatcher-threading-profile",new ThreadingProfileDefinitionParser("dispatcherThreadingProfile",MuleConfiguration.DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("receiver-threading-profile",new ThreadingProfileDefinitionParser("receiverThreadingProfile",MuleConfiguration.DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("dispatcher-connection-strategy",new ConnectionStrategyDefinitionParser("dispatcherConnectionStrategy"));
  registerBeanDefinitionParser("receiver-connection-straqtegy",new ConnectionStrategyDefinitionParser("receiverConnectionStrategy"));
  registerBeanDefinitionParser("service-overrides",new ServiceOverridesDefinitionParser());
  registerBeanDefinitionParser("custom-connector",new MuleOrphanDefinitionParser(true));
  registerBeanDefinitionParser("transformers",new ParentDefinitionParser());
  registerBeanDefinitionParser("responseTransformers",new ParentDefinitionParser().addAlias("transformer","responseTransformer"));
  registerBeanDefinitionParser("transformer",new TransformerRefDefinitionParser());
  registerBeanDefinitionParser("custom-transformer",new TransformerDefinitionParser());
  registerBeanDefinitionParser("transformer-no-action",new TransformerDefinitionParser(NoActionTransformer.class));
  registerBeanDefinitionParser("transformer-message-properties",new TransformerDefinitionParser(MessagePropertiesTransformer.class));
  registerBeanDefinitionParser("transformer-base64-encoder",new TransformerDefinitionParser(Base64Encoder.class));
  registerBeanDefinitionParser("transformer-base64-decoder",new TransformerDefinitionParser(Base64Decoder.class));
  registerBeanDefinitionParser("transformer-xml-entity-encoder",new TransformerDefinitionParser(XmlEntityEncoder.class));
  registerBeanDefinitionParser("transformer-xml-entity-decoder",new TransformerDefinitionParser(XmlEntityDecoder.class));
  registerBeanDefinitionParser("transformer-gzip-compress",new TransformerDefinitionParser(GZipCompressTransformer.class));
  registerBeanDefinitionParser("transformer-gzip-uncompress",new TransformerDefinitionParser(GZipUncompressTransformer.class));
  registerBeanDefinitionParser("transformer-encrypt",new TransformerDefinitionParser(EncryptionTransformer.class));
  registerBeanDefinitionParser("transformer-decrypt",new TransformerDefinitionParser(DecryptionTransformer.class));
  registerBeanDefinitionParser("transformer-byte-array-to-hex-string",new TransformerDefinitionParser(ByteArrayToHexString.class));
  registerBeanDefinitionParser("transformer-hex-sting-to-byte-array",new TransformerDefinitionParser(HexStringToByteArray.class));
  registerBeanDefinitionParser("transformer-byte-array-to-object",new TransformerDefinitionParser(ByteArrayToObject.class));
  registerBeanDefinitionParser("transformer-object-to-byte-array",new TransformerDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("transformer-object-to-string",new TransformerDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("transformer-byte-array-to-serializable",new TransformerDefinitionParser(ByteArrayToSerializable.class));
  registerBeanDefinitionParser("transformer-serializable-to-byte-array",new TransformerDefinitionParser(SerializableToByteArray.class));
  registerBeanDefinitionParser("transformer-byte-array-to-string",new TransformerDefinitionParser(ObjectToString.class));
  registerBeanDefinitionParser("transformer-string-to-byte-array",new TransformerDefinitionParser(ObjectToByteArray.class));
  registerBeanDefinitionParser("transformer-append-string",new TransformerDefinitionParser(StringAppendTransformer.class));
  registerBeanDefinitionParser("custom-transaction-manager",new TransactionManagerDefinitionParser());
  registerBeanDefinitionParser("transaction-manager-jndi",new TransactionManagerDefinitionParser(GenericTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("transaction-manager-weblogic",new TransactionManagerDefinitionParser(WeblogicTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("transaction-manager-jboss",new TransactionManagerDefinitionParser(JBossTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("transaction-manager-jrun",new TransactionManagerDefinitionParser(JRunTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("transaction-manager-resin",new TransactionManagerDefinitionParser(Resin3TransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("transaction-manager-websphere",new TransactionManagerDefinitionParser(WebsphereTransactionManagerLookupFactory.class));
  registerBeanDefinitionParser("endpoint",new OrphanEndpointDefinitionParser(EndpointURIEndpointBuilder.class));
  registerBeanDefinitionParser("inbound-endpoint",new GenericEndpointDefinitionParser(InboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("outbound-endpoint",new GenericEndpointDefinitionParser(OutboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("transaction",new TransactionConfigDefinitionParser());
  registerBeanDefinitionParser("custom-transaction-factory",new TransactionFactoryDefinitionParser());
  registerBeanDefinitionParser("transaction-factory",new ParentDefinitionParser().addAlias("ref","factory"));
  registerBeanDefinitionParser("custom-container",new MuleOrphanDefinitionParser(true));
  registerBeanDefinitionParser("rmi-container",new MuleOrphanDefinitionParser(RmiContainerContext.class,true));
  registerBeanDefinitionParser("jndi-container",new MuleOrphanDefinitionParser(JndiContainerContext.class,true));
  registerBeanDefinitionParser("properties-container",new MuleOrphanDefinitionParser(PropertiesContainerContext.class,true));
  registerBeanDefinitionParser("model",new InheritDefinitionParser(new OrphanDefinitionParser(SedaModel.class,true),new NamedDefinitionParser()));
  registerBeanDefinitionParser("seda-model",new InheritDefinitionParser(new OrphanDefinitionParser(SedaModel.class,true),new NamedDefinitionParser()));
  registerBeanDefinitionParser("custom-entrypoint-resolver",new ChildDefinitionParser("entryPointResolverSet",null));
  registerBeanDefinitionParser("seda-component",new ServiceDefinitionParser(SedaComponent.class));
  registerBeanDefinitionParser("service",new ServiceDefinitionParser(SedaComponent.class));
  registerBeanDefinitionParser("component",new ComponentDefinitionParser());
  registerBeanDefinitionParser("binding",new BindingDefinitionParser("nestedRouter.routers",NestedRouter.class).addCollection("nestedRouter.routers"));
  registerBeanDefinitionParser("bridge-component",new SimplePojoServiceDefinitionParser(PassThroughComponent.class));
  registerBeanDefinitionParser("pass-through-component",new SimplePojoServiceDefinitionParser(PassThroughComponent.class));
  registerBeanDefinitionParser("log-component",new SimplePojoServiceDefinitionParser(LogComponent.class));
  registerBeanDefinitionParser("echo-component",new SimplePojoServiceDefinitionParser(EchoComponent.class));
  registerBeanDefinitionParser("null-component",new SimplePojoServiceDefinitionParser(NullComponent.class));
  registerBeanDefinitionParser("no-args-call-component",new SimplePojoServiceDefinitionParser(NoArgsCallWrapper.class));
  registerBeanDefinitionParser("singleton-object",new PojoComponentDefinitionParser(SingletonObjectFactory.class));
  registerBeanDefinitionParser("prototype-object",new PojoComponentDefinitionParser(PrototypeObjectFactory.class));
  registerBeanDefinitionParser("pooled-object",new PojoComponentDefinitionParser(PooledObjectFactory.class));
  registerBeanDefinitionParser("inbound-router",new ChildDefinitionParser("inboundRouter",InboundRouterCollection.class));
  registerBeanDefinitionParser("outbound-router",new ChildDefinitionParser("outboundRouter",OutboundRouterCollection.class));
  registerBeanDefinitionParser("async-reply-router",new ChildDefinitionParser("responseRouter",ResponseRouterCollection.class));
  registerBeanDefinitionParser("delegateClass",new AttributeMapDefinitionParser("properties").addAlias("class","delegateClass").addAlias("method","delegateMethod"));
  registerBeanDefinitionParser("delegateInstance",new AttributeMapDefinitionParser("properties").addAlias("ref","delegateInstance").addAlias("method","delegateMethod"));
  registerBeanDefinitionParser("forwarding-router",new ForwardingRouterDefinitionParser());
  registerBeanDefinitionParser("inbound-pass-through-router",new RouterDefinitionParser("router",InboundPassThroughRouter.class));
  registerBeanDefinitionParser("idempotent-receiver-router",new RouterDefinitionParser("router",IdempotentReceiver.class));
  registerBeanDefinitionParser("idempotent-secure-hash-receiver-router",new RouterDefinitionParser("router",IdempotentSecureHashReceiver.class));
  registerBeanDefinitionParser("selective-consumer-router",new RouterDefinitionParser("router",SelectiveConsumer.class));
  registerBeanDefinitionParser("wire-tap-router",new RouterDefinitionParser("router",WireTap.class));
  registerBeanDefinitionParser("correlation-aggregator-router",new RouterDefinitionParser("router"));
  registerBeanDefinitionParser("message-chunking-aggregator-router",new RouterDefinitionParser("router",MessageChunkingAggregator.class));
  registerBeanDefinitionParser("correlation-resequencer-router",new RouterDefinitionParser("router",CorrelationEventResequencer.class));
  registerBeanDefinitionParser("custom-inbound-router",new RouterDefinitionParser("router",null));
  registerBeanDefinitionParser("outbound-pass-through-router",new RouterDefinitionParser("router",OutboundPassThroughRouter.class));
  registerBeanDefinitionParser("filtering-router",new RouterDefinitionParser("router",FilteringOutboundRouter.class));
  registerBeanDefinitionParser("chaining-router",new RouterDefinitionParser("router",ChainingRouter.class));
  registerBeanDefinitionParser("endpoint-selector-router",new RouterDefinitionParser("router",EndpointSelector.class));
  registerBeanDefinitionParser("exception-based-router",new RouterDefinitionParser("router",ExceptionBasedRouter.class));
  registerBeanDefinitionParser("list-message-splitter-router",new RouterDefinitionParser("router",FilteringListMessageSplitter.class));
  registerBeanDefinitionParser("message-chunking-router",new RouterDefinitionParser("router",MessageChunkingRouter.class));
  registerBeanDefinitionParser("multicasting-router",new RouterDefinitionParser("router",MulticastingRouter.class));
  registerBeanDefinitionParser("static-recipient-list-router",new RouterDefinitionParser("router",StaticRecipientList.class));
  registerBeanDefinitionParser("recipients",new ChildListDefinitionParser("recipients"));
  registerBeanDefinitionParser("template-endpoint-router",new RouterDefinitionParser("router",TemplateEndpointRouter.class));
  registerBeanDefinitionParser("custom-outbound-router",new RouterDefinitionParser("router",null));
  registerBeanDefinitionParser("reply-to",new ParentDefinitionParser().addAlias("address","replyTo"));
  registerBeanDefinitionParser("custom-async-reply-router",new RouterDefinitionParser("router",null));
  registerBeanDefinitionParser("single-async-reply-router",new RouterDefinitionParser("router",SingleResponseRouter.class));
  registerBeanDefinitionParser("function-property-extractor",new ChildDefinitionParser("propertyExtractor",FunctionPropertyExtractor.class));
  registerBeanDefinitionParser("correlation-property-extractor",new ChildDefinitionParser("propertyExtractor",CorrelationPropertiesExtractor.class));
  registerBeanDefinitionParser("custom-property-extractor",new ChildDefinitionParser("propertyExtractor"));
  registerBeanDefinitionParser("map-property-extractor",new ChildDefinitionParser("propertyExtractor",MapPayloadPropertyExtractor.class));
  registerBeanDefinitionParser("message-property-extractor",new ChildDefinitionParser("propertyExtractor",MessageHeaderPropertyExtractor.class));
  registerBeanDefinitionParser("logging-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",LoggingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerBeanDefinitionParser("forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",ForwardingCatchAllStrategy.class));
  registerBeanDefinitionParser("custom-forwarding-catch-all-strategy",new ChildDefinitionParser("catchAllStrategy",null));
  registerBeanDefinitionParser("filter",new ParentDefinitionParser().addAlias("ref","filter"));
  registerBeanDefinitionParser("and-filter",new FilterDefinitionParser(AndFilter.class));
  registerBeanDefinitionParser("or-filter",new FilterDefinitionParser(OrFilter.class));
  registerBeanDefinitionParser("not-filter",new FilterDefinitionParser(NotFilter.class));
  registerBeanDefinitionParser("regex-filter",new FilterDefinitionParser(RegExFilter.class));
  registerBeanDefinitionParser("exception-type-filter",new FilterDefinitionParser(ExceptionTypeFilter.class));
  registerBeanDefinitionParser("message-property-filter",new FilterDefinitionParser(MessagePropertyFilter.class));
  registerBeanDefinitionParser("payload-type-filter",new FilterDefinitionParser(PayloadTypeFilter.class));
  registerBeanDefinitionParser("wildcard-filter",new FilterDefinitionParser(WildcardFilter.class));
  registerBeanDefinitionParser("equals-filter",new FilterDefinitionParser(EqualsFilter.class));
  registerBeanDefinitionParser("custom-filter",new FilterDefinitionParser());
  registerBeanDefinitionParser("retry-connection-strategy",new ChildDefinitionParser("connectionStrategy",SimpleRetryConnectionStrategy.class));
  registerBeanDefinitionParser("properties",new ChildMapDefinitionParser("properties"));
  registerBeanDefinitionParser("add-properties",new ChildMapDefinitionParser("addProperties"));
  registerBeanDefinitionParser("delete-properties",new ChildListDefinitionParser("deleteProperties"));
  registerBeanDefinitionParser("jndi-provider-properties",new ChildMapDefinitionParser("jndiProviderProperties"));
  registerBeanDefinitionParser("environment",new ChildMapDefinitionParser("environment"));
  registerBeanDefinitionParser("security-manager",new NamedDefinitionParser(MuleProperties.OBJECT_SECURITY_MANAGER).addIgnored("type").addIgnored("name"));
  registerBeanDefinitionParser("custom-security-provider",new NameTransferDefinitionParser("providers"));
  registerBeanDefinitionParser("custom-encryption-strategy",new NameTransferDefinitionParser("encryptionStrategies").addAlias("strategy","encryptionStrategy"));
  registerBeanDefinitionParser("password-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",PasswordBasedEncryptionStrategy.class));
  registerBeanDefinitionParser("secret-key-encryption-strategy",new ChildDefinitionParser("encryptionStrategy",SecretKeyEncryptionStrategy.class));
  registerBeanDefinitionParser("encryption-security-filter",new ChildDefinitionParser("securityFilter",MuleEncryptionEndpointSecurityFilter.class));
}
