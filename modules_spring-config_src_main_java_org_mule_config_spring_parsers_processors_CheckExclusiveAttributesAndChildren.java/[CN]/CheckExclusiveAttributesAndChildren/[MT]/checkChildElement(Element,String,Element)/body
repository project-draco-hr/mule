{
  checkAttributeNameMatch(element,attributeName,child);
  for (  final ChildType childrenType : childrenTypes) {
    final TypeInfo typeInfo=(TypeInfo)child;
    if (((childrenType.ns.equals(typeInfo.getTypeNamespace()) && childrenType.name.equals(typeInfo.getTypeName()))) || typeInfo.isDerivedFrom(childrenType.ns,childrenType.name,TypeInfo.DERIVATION_EXTENSION)) {
      throw new CheckExclusiveAttributesAndChildrenException("Element " + SpringXMLUtils.elementToString(element) + " can't contain child of type "+ childrenType+ " because it defines attribute "+ attributeName);
    }
  }
}
