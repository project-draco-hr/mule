{
  int size=0;
  StringBuffer buf=new StringBuffer(messages.size() * maxlength);
  int trimLength=maxlength - 4;
  for (int i=0; i < messages.size(); i++) {
    size=messages.get(i).toString().length();
    if (size > trimLength) {
      String temp=messages.get(i).toString();
      int k=i;
      int x;
      int len;
      messages.remove(i);
      while (temp.length() > 0) {
        len=(trimLength < temp.length() ? trimLength : temp.length());
        String msg=temp.substring(0,len);
        x=msg.indexOf((char)Character.LINE_SEPARATOR);
        if (x > -1) {
          msg=msg.substring(0,x);
          len=x + 1;
        }
 else {
          x=msg.lastIndexOf(" ");
          if (x > -1 && len == trimLength) {
            msg=msg.substring(0,x);
            len=x + 1;
          }
        }
        if (msg.startsWith(" "))         msg=msg.substring(1);
        temp=temp.substring(len);
        messages.add(k,msg);
        k++;
      }
    }
  }
  buf.append((char)Character.LINE_SEPARATOR);
  buf.append(charString(c,maxlength));
  for (int i=0; i < messages.size(); i++) {
    buf.append((char)Character.LINE_SEPARATOR);
    buf.append(c);
    buf.append(" ");
    buf.append(messages.get(i));
    int padding=trimLength - messages.get(i).toString().length();
    if (padding > 0) {
      buf.append(charString(' ',padding));
    }
    buf.append(" ");
    buf.append(c);
  }
  buf.append((char)Character.LINE_SEPARATOR);
  buf.append(charString(c,maxlength));
  return buf.toString();
}
