{
  final DataType expectedDataType=DataTypeFactory.create(String.class,JSON);
  expectedDataType.setEncoding(CUSTOM_ENCODING);
  MVELExpressionLanguage expressionLanguage=(MVELExpressionLanguage)muleContext.getExpressionLanguage();
  final CompiledExpression compiledExpression=(CompiledExpression)compileExpression("foo = 'unused'",new ParserContext(expressionLanguage.getParserConfiguration()));
  MuleEvent testEvent=getTestEvent(TEST_MESSAGE);
  testEvent.getMessage().setProperty("foo","bar",scope);
  dataTypePropagator.propagate(testEvent.getMessage(),new TypedValue(TEST_MESSAGE,expectedDataType),compiledExpression);
  assertThat(testEvent.getMessage().getPropertyDataType("foo",scope),like(String.class,JSON,CUSTOM_ENCODING));
}
