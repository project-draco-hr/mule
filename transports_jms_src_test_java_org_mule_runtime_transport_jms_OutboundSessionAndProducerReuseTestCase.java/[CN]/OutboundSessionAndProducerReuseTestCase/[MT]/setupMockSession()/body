{
  when(connection.createSession(false,1)).then(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return createSessionMock();
    }
  }
);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      connectionExceptionListener=(ExceptionListener)invocation.getArguments()[0];
      return null;
    }
  }
).when(connection).setExceptionListener(any(ExceptionListener.class));
  when(connection.getExceptionListener()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return connectionExceptionListener;
    }
  }
);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      connectionClientId=(String)invocation.getArguments()[0];
      return null;
    }
  }
).when(connection).setClientID(any(String.class));
  when(connection.getClientID()).thenAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return connectionClientId;
    }
  }
);
}
