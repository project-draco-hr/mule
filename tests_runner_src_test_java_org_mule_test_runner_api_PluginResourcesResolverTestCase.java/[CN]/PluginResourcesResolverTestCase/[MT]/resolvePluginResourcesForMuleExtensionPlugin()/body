{
  ExtensionManifestBuilder builder=new ExtensionManifestBuilder().setName(MULE_PLUGIN).setDescription(JUNIT_MOCK_EXTENSION_MANIFEST_DESCRIPTION).setMinMuleVersion(new MuleVersion(VERSION)).setVersion(SNAPSHOT_VERSION).addExportedPackages(newArrayList(ORG_MULE_TEST_RUNNER,ORG_MULE_TEST_RUNNER_API)).addExportedResources(newArrayList(META_INF_RESOURCE_PROPERTIES,META_INF_ANOTHER_RESOURCE_PROPERTIES));
  builder.withDescriber().setId(MULE_PLUGIN);
  ExtensionManifest extensionManifest=builder.build();
  String manifestXml=new ExtensionManifestXmlSerializer().serialize(extensionManifest);
  File manifestFile=new File(temporaryFolder.getRoot(),"META-INF/" + EXTENSION_MANIFEST_FILE_NAME);
  write(manifestFile,manifestXml);
  URL classPathUrl=manifestFile.getParentFile().getParentFile().toURI().toURL();
  List<URL> urls=newArrayList(classPathUrl);
  PluginUrlClassification extensionPluginClassification=newPluginUrlClassification(urls);
  PluginResourcesResolver resolver=new PluginResourcesResolver(extensionManager);
  URL manifestUrl=manifestFile.toURI().toURL();
  when(extensionManager.parseExtensionManifestXml(manifestUrl)).thenReturn(extensionManifest);
  PluginUrlClassification result=resolver.resolvePluginResourcesFor(extensionPluginClassification);
  verify(extensionManager).parseExtensionManifestXml(manifestUrl);
  assertResolvedResources(extensionPluginClassification,result);
}
