{
  MuleEvent mockEvent=mock(MuleEvent.class);
  final MuleEvent mockResponse=mock(MuleEvent.class);
  MuleEventKeyGenerator keyGenerator=mock(MuleEventKeyGenerator.class);
  when(keyGenerator.generateKey(mockEvent)).thenReturn(OBJECT_KEY);
  ResponseGenerator responseGenerator=mock(ResponseGenerator.class);
  when(responseGenerator.create(mockEvent,mockResponse)).thenReturn(mockResponse);
  ObjectStore<MuleEvent> objectStore=mock(ObjectStore.class);
  Filter consumablePayloadFilter=mock(Filter.class);
  when(consumablePayloadFilter.accept(Mockito.<MuleMessage>any())).thenReturn(true).thenReturn(false);
  ObjectStoreCachingStrategy cachingStrategy=new ObjectStoreCachingStrategy();
  cachingStrategy.setKeyGenerator(keyGenerator);
  cachingStrategy.setResponseGenerator(responseGenerator);
  cachingStrategy.setStore(objectStore);
  cachingStrategy.setConsumableFilter(consumablePayloadFilter);
  MessageProcessor cachedMessageProcessor=mock(MessageProcessor.class);
  when(cachedMessageProcessor.process(mockEvent)).thenReturn(mockResponse);
  MuleEvent response=cachingStrategy.process(mockEvent,cachedMessageProcessor);
  assertSame(mockResponse,response);
  Mockito.verify(objectStore,Mockito.times(0)).store(OBJECT_KEY,mockResponse);
}
