{
  MuleEvent mockEvent=mock(MuleEvent.class);
  final MuleEvent mockResponse=mock(MuleEvent.class);
  MuleEventKeyGenerator keyGenerator=mock(MuleEventKeyGenerator.class);
  when(keyGenerator.generateKey(mockEvent)).thenThrow(new IllegalArgumentException());
  Filter consumablePayloadFilter=mock(Filter.class);
  when(consumablePayloadFilter.accept(Mockito.<MuleMessage>any())).thenReturn(true);
  ObjectStore<MuleEvent> objectStore=mock(ObjectStore.class);
  ObjectStoreCachingStrategy cachingStrategy=new ObjectStoreCachingStrategy();
  cachingStrategy.setKeyGenerator(keyGenerator);
  cachingStrategy.setStore(objectStore);
  cachingStrategy.setConsumableFilter(consumablePayloadFilter);
  MessageProcessor cachedMessageProcessor=mock(MessageProcessor.class);
  when(cachedMessageProcessor.process(mockEvent)).thenReturn(mockResponse);
  MuleEvent response=cachingStrategy.process(mockEvent,cachedMessageProcessor);
  assertSame(mockResponse,response);
  verify(cachedMessageProcessor,times(1)).process(mockEvent);
  Mockito.verify(objectStore,Mockito.times(0)).retrieve(any(Serializable.class));
  Mockito.verify(objectStore,Mockito.times(0)).store(any(Serializable.class),Matchers.<MuleEvent>any(MuleEvent.class));
}
