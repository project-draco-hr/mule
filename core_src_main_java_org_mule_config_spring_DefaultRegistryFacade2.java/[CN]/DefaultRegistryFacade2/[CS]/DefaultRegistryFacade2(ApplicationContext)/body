{
  if (config == null) {
    config=new MuleConfiguration();
  }
  StaticApplicationContext ctx=new StaticApplicationContext(context);
  ctx.getBeanFactory().addBeanPostProcessor(new BeanPostProcessor(){
    public Object postProcessBeforeInitialization(    Object bean,    String beanName) throws BeansException {
      return bean;
    }
    public Object postProcessAfterInitialization(    Object bean,    String beanName) throws BeansException {
      if (initialised.get() || initialising.get()) {
        if (bean instanceof Initialisable) {
          try {
            ((Initialisable)bean).initialise();
          }
 catch (          InitialisationException e) {
            throw new BeanCreationException("Failed to initialise Bean: " + e.getMessage(),e);
          }
        }
      }
      if ((started.get() || starting.get())) {
        if (bean instanceof Startable) {
          try {
            ((Startable)bean).start();
          }
 catch (          UMOException e) {
            throw new BeanCreationException("Failed to start Bean: " + e.getMessage(),e);
          }
        }
      }
      return bean;
    }
  }
);
  containerContext=new MultiContainerContext();
  SpringContainerContext registryContainer=new SpringContainerContext();
  registryContainer.setName("registry");
  registryContainer.setExternalBeanFactory(ctx);
  containerContext.addContainer(registryContainer);
}
