{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference message=new AtomicReference();
  EventCallback callback=new EventCallback(){
    public synchronized void eventReceived(    MuleEventContext context,    Object component){
      try {
        FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)component;
        message.set(ftc.getSummary());
        latch.countDown();
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
;
  MuleClient client=new MuleClient();
  Object ftc=getPojoServiceForComponent("testComponent");
  assertTrue("FunctionalStreamingTestComponent expected",ftc instanceof FunctionalStreamingTestComponent);
  assertNotNull(ftc);
  ((FunctionalStreamingTestComponent)ftc).setEventCallback(callback,size);
  Runtime runtime=Runtime.getRuntime();
  runtime.gc();
  long freeStart=runtime.freeMemory();
  long maxStart=runtime.maxMemory();
  long timeStart=System.currentTimeMillis();
  BigInputStream stream=new BigInputStream(size,MESSAGES);
  DefaultMessageAdapter adapter=new DefaultMessageAdapter(stream);
  client.dispatch(endpoint,new DefaultMuleMessage(adapter));
  long pause=Math.max(size / ONE_MB,60 * 10) + 10;
  logger.info("Waiting for up to " + pause + " seconds");
  latch.await(pause,TimeUnit.SECONDS);
  assertEquals(stream.summary(),message.get());
  long freeEnd=runtime.freeMemory();
  long delta=freeStart - freeEnd;
  long timeEnd=System.currentTimeMillis();
  double speed=size / (double)(timeEnd - timeStart) * 1000 / ONE_MB;
  logger.info("Transfer speed " + speed + " MB/s ("+ size+ " B in "+ (timeEnd - timeStart)+ " ms)");
  double usePercent=100.0 * delta / size;
  logger.info("Memory delta " + delta + " B = "+ usePercent+ "%");
  assertTrue("Memory used too high",usePercent < 10);
  long maxEnd=runtime.maxMemory();
  assertEquals("Max memory shifted",0,maxEnd - maxStart);
}
