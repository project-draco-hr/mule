{
  String method=(String)event.getProperty(HttpConnector.HTTP_METHOD_PROPERTY,HttpConstants.METHOD_POST);
  URI uri=event.getEndpoint().getEndpointURI().getUri();
  HttpMethod httpMethod=null;
  Object body=event.getTransformedMessage();
  if (body instanceof HttpMethod) {
    httpMethod=(HttpMethod)body;
  }
 else   if ("GET".equals(method) || body instanceof NullPayload) {
    httpMethod=new GetMethod(uri.toString());
  }
 else {
    PostMethod postMethod=new PostMethod(uri.toString());
    if (body instanceof String) {
      postMethod.setRequestBody(body.toString());
      postMethod.setRequestContentLength(body.toString().length());
      httpMethod=postMethod;
    }
 else     if (body instanceof HttpMethod) {
      httpMethod=(HttpMethod)body;
    }
 else {
      byte[] buffer=event.getTransformedMessageAsBytes();
      postMethod.setRequestBody(new ByteArrayInputStream(buffer));
      postMethod.setRequestContentLength(buffer.length);
      httpMethod=postMethod;
    }
  }
  HttpConnection connection=null;
  try {
    connection=getConnection(uri);
    if (connection.isProxied() && connection.isSecure()) {
      httpMethod=new ConnectMethod(httpMethod);
    }
    httpMethod.execute(state,connection);
    if (httpMethod.getStatusCode() < 400) {
      return new MuleMessage(httpMethod.getResponseBodyAsString(),null);
    }
 else {
      throw new MuleException("HTTP request failed with return code: " + httpMethod.getStatusLine().toString());
    }
  }
 catch (  MuleException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MuleException("HTTP endpoint failed to make request: " + e,e);
  }
 finally {
    if (httpMethod != null)     httpMethod.releaseConnection();
  }
}
