{
  String method=(String)event.getProperty(HttpConnector.HTTP_METHOD_PROPERTY,HttpConstants.METHOD_POST);
  URI uri=event.getEndpoint().getEndpointURI().getUri();
  HttpMethod httpMethod=null;
  Object body=event.getTransformedMessage();
  if (body instanceof HttpMethod) {
    httpMethod=(HttpMethod)body;
  }
 else   if ("GET".equals(method) || body instanceof NullPayload) {
    httpMethod=new GetMethod(uri.toString());
  }
 else {
    PostMethod postMethod=new PostMethod(uri.toString());
    if (body instanceof String) {
      ObjectToHttpClientMethodRequest trans=new ObjectToHttpClientMethodRequest();
      httpMethod=(HttpMethod)trans.transform(body.toString());
    }
 else     if (body instanceof HttpMethod) {
      httpMethod=(HttpMethod)body;
    }
 else {
      byte[] buffer=event.getTransformedMessageAsBytes();
      postMethod.setRequestBody(new ByteArrayInputStream(buffer));
      postMethod.setRequestContentLength(buffer.length);
      httpMethod=postMethod;
    }
  }
  HttpConnection connection=null;
  try {
    connection=getConnection(uri);
    if (connection.isProxied() && connection.isSecure()) {
      httpMethod=new ConnectMethod(httpMethod);
    }
    httpMethod.setDoAuthentication(true);
    httpMethod.execute(state,connection);
    Properties h=new Properties();
    Header[] headers=httpMethod.getRequestHeaders();
    for (int i=0; i < headers.length; i++) {
      h.setProperty(headers[i].getName(),headers[i].getValue());
    }
    String status=String.valueOf(httpMethod.getStatusCode());
    h.setProperty(HttpConnector.HTTP_STATUS_PROPERTY,status);
    logger.debug("Http response is: " + status);
    return new MuleMessage(httpMethod.getResponseBodyAsString(),h);
  }
 catch (  Exception e) {
    throw new MuleException("HTTP endpoint failed to make request: " + e,e);
  }
 finally {
    if (httpMethod != null)     httpMethod.releaseConnection();
  }
}
