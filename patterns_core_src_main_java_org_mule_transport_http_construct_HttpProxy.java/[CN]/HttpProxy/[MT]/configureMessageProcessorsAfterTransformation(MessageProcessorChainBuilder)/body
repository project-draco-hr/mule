{
  final TransformerTemplate copyInboundToOutboundPropertiesTransformer=new TransformerTemplate(new CopyInboundToOutboundPropertiesTransformerCallback());
  builder.chain(copyInboundToOutboundPropertiesTransformer);
  builder.chain(new ResponseMessageProcessorAdapter(copyInboundToOutboundPropertiesTransformer));
  if (cachingMessageProcessor != null) {
    builder.chain(cachingMessageProcessor);
  }
  if (outboundEndpoint instanceof DynamicURIOutboundEndpoint) {
    builder.chain(outboundEndpoint);
  }
 else {
    builder.chain(new TransformerTemplate(new TransformerCallback(){
      public Object doTransform(      final MuleMessage message) throws Exception {
        final String pathExtension=StringUtils.substringAfter((String)message.getInboundProperty("http.request"),(String)message.getInboundProperty("http.context.path"));
        message.setInvocationProperty("http.path.extension",StringUtils.defaultString(pathExtension));
        return message;
      }
    }
));
    logger.error("Endpoint: " + outboundEndpoint);
    final DynamicOutboundEndpoint dynamicOutboundEndpoint;
    if (outboundEndpoint instanceof DynamicOutboundEndpoint) {
      dynamicOutboundEndpoint=(DynamicOutboundEndpoint)outboundEndpoint;
    }
 else {
      final String uriTemplate=outboundEndpoint.getEndpointURI().getUri().toString() + "#[variable:http.path.extension]";
      dynamicOutboundEndpoint=new DynamicOutboundEndpoint(new EndpointURIEndpointBuilder(outboundEndpoint),uriTemplate);
    }
    builder.chain(dynamicOutboundEndpoint);
  }
}
