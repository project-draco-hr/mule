{
  URL[] urls=new URL[descriptor.getRuntimeLibs().length + 1];
  urls[0]=descriptor.getRuntimeClassesDir();
  arraycopy(descriptor.getRuntimeLibs(),0,urls,1,descriptor.getRuntimeLibs().length);
  Map<String,ClassLoaderLookupStrategy> pluginsLookupPolicies=new HashMap<>();
  for (  ArtifactPluginDescriptor dependencyPluginDescriptor : descriptor.getArtifactPluginDescriptors()) {
    if (dependencyPluginDescriptor.getName().equals(descriptor.getName())) {
      continue;
    }
    final ClassLoaderLookupStrategy parentFirst=getClassLoaderLookupStrategy(descriptor,dependencyPluginDescriptor);
    for (    String exportedPackage : dependencyPluginDescriptor.getClassLoaderFilter().getExportedClassPackages()) {
      pluginsLookupPolicies.put(exportedPackage,parentFirst);
    }
  }
  final ClassLoaderLookupPolicy lookupPolicy=parent.getClassLoaderLookupPolicy().extend(pluginsLookupPolicies);
  return new MuleArtifactClassLoader(descriptor.getName(),urls,parent.getClassLoader(),lookupPolicy);
}
