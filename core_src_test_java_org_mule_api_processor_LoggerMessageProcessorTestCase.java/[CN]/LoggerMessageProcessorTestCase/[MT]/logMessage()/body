{
  MuleEvent muleEvent=buildMuleEvent();
  LoggerMessageProcessor loggerMessageProcessor=buildLoggerMessageProcessorWithLevel("ERROR");
  loggerMessageProcessor.setMessage("some expression");
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,times(1)).error("text to log");
  verify(loggerMessageProcessor.expressionManager,times(1)).parse("some expression",muleEvent);
  loggerMessageProcessor.logger=buildMockLogger();
  when(loggerMessageProcessor.logger.isErrorEnabled()).thenReturn(false);
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,never()).error("text to log");
  verify(loggerMessageProcessor.expressionManager,never()).parse("some expression",muleEvent);
  loggerMessageProcessor.setLevel("WARN");
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,times(1)).warn("text to log");
  verify(loggerMessageProcessor.expressionManager,times(1)).parse("some expression",muleEvent);
  loggerMessageProcessor.logger=buildMockLogger();
  when(loggerMessageProcessor.logger.isWarnEnabled()).thenReturn(false);
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,never()).warn("text to log");
  verify(loggerMessageProcessor.expressionManager,never()).parse("some expression",muleEvent);
  loggerMessageProcessor.setLevel("INFO");
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,times(1)).info("text to log");
  verify(loggerMessageProcessor.expressionManager,times(1)).parse("some expression",muleEvent);
  loggerMessageProcessor.logger=buildMockLogger();
  when(loggerMessageProcessor.logger.isInfoEnabled()).thenReturn(false);
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,never()).info("text to log");
  verify(loggerMessageProcessor.expressionManager,never()).parse("some expression",muleEvent);
  loggerMessageProcessor.setLevel("DEBUG");
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,times(1)).debug("text to log");
  verify(loggerMessageProcessor.expressionManager,times(1)).parse("some expression",muleEvent);
  loggerMessageProcessor.logger=buildMockLogger();
  when(loggerMessageProcessor.logger.isDebugEnabled()).thenReturn(false);
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,never()).debug("text to log");
  verify(loggerMessageProcessor.expressionManager,never()).parse("some expression",muleEvent);
  loggerMessageProcessor.setLevel("TRACE");
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,times(1)).trace("text to log");
  verify(loggerMessageProcessor.expressionManager,times(1)).parse("some expression",muleEvent);
  loggerMessageProcessor.logger=buildMockLogger();
  when(loggerMessageProcessor.logger.isTraceEnabled()).thenReturn(false);
  loggerMessageProcessor.expressionManager=buildExpressionManager();
  loggerMessageProcessor.log(muleEvent);
  verify(loggerMessageProcessor.logger,never()).trace("text to log");
  verify(loggerMessageProcessor.expressionManager,never()).parse("some expression",muleEvent);
}
