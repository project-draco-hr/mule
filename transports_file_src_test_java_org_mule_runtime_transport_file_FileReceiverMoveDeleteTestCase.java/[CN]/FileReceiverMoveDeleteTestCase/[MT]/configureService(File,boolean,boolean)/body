{
  Flow flow=new Flow("moveDeleteBridgeService",muleContext);
  String url=fileToUrl(inFile.getParentFile()) + "?connector=moveDeleteConnector";
  Transformer transformer=null;
  if (streaming) {
    if (filePayload) {
      fail("Inconsistant test case: streaming and file payload are not compatible");
    }
 else {
      transformer=new FileMessageFactoryAssertingTransformer(ReceiverFileInputStream.class);
    }
  }
 else {
    if (filePayload) {
      transformer=new FileMessageFactoryAssertingTransformer(File.class);
    }
 else {
      transformer=new FileMessageFactoryAssertingTransformer(byte[].class);
    }
  }
  EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(url,muleContext);
  endpointBuilder.addMessageProcessor(transformer);
  if (filePayload) {
    endpointBuilder.addMessageProcessor(new NoActionTransformer());
  }
  InboundEndpoint endpoint=getEndpointFactory().getInboundEndpoint(endpointBuilder);
  flow.setMessageSource(endpoint);
  final Latch latch=new Latch();
  FunctionalTestComponent testComponent=new FunctionalTestComponent();
  testComponent.setMuleContext(muleContext);
  testComponent.setEventCallback(new EventCallback(){
    @Override public void eventReceived(    final MuleEventContext context,    final Object message) throws Exception {
      assertEquals(1,latch.getCount());
      assertEquals(TEST_MESSAGE,context.transformMessageToString());
      latch.countDown();
    }
  }
);
  testComponent.initialise();
  final DefaultJavaComponent component=new DefaultJavaComponent(new SingletonObjectFactory(testComponent));
  component.setMuleContext(muleContext);
  flow.setMessageProcessors(new ArrayList<MessageProcessor>());
  flow.getMessageProcessors().add(component);
  muleContext.getRegistry().registerFlowConstruct(flow);
  return latch;
}
