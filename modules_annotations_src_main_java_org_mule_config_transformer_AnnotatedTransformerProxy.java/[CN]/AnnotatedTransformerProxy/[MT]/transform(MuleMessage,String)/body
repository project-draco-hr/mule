{
  Object firstArg=null;
  Object[] params=new Object[transformMethod.getParameterTypes().length];
  int paramCounter=0;
  if (paramTransformer != null) {
    Object paramArgs=paramTransformer.transform(message,outputEncoding);
    if (paramArgs != null && paramArgs.getClass().isArray()) {
      Object[] temp=(Object[])paramArgs;
      if (!sourceAnnotated) {
        paramCounter++;
      }
      for (int i=0; i < temp.length; i++) {
        params[paramCounter++]=temp[i];
      }
    }
 else {
      if (!sourceAnnotated) {
        paramCounter++;
      }
      params[paramCounter++]=paramArgs;
    }
  }
  if (messageAware) {
    firstArg=message;
  }
 else   if (!sourceAnnotated) {
    firstArg=message.getPayload(transformMethod.getParameterTypes()[0]);
  }
  if (!sourceAnnotated) {
    params[0]=firstArg;
    if (paramCounter == 0) {
      paramCounter++;
    }
  }
  if (paramCounter < transformMethod.getParameterTypes().length) {
    for (int i=paramCounter; i < transformMethod.getParameterTypes().length; i++) {
      Object o;
      Class<?> type=transformMethod.getParameterTypes()[i];
      o=cachedObjects.get(type);
      if (o != null) {
        params[paramCounter++]=o;
        continue;
      }
      DataType<?> source=DataTypeFactory.createFromParameterType(transformMethod,0);
      for (      TransformerArgumentResolver resolver : resolvers) {
        try {
          o=resolver.resolve(type,source,this.returnType,muleContext);
          if (o != null) {
            params[paramCounter++]=o;
            cachedObjects.put(type,o);
            break;
          }
        }
 catch (        Exception e) {
          throw new TransformerException(this,e);
        }
      }
      if (o == null) {
        throw new IllegalArgumentException("Failed to find resolver for object type: " + type + " for transform method: "+ transformMethod);
      }
    }
  }
  try {
    return transformMethod.invoke(proxy,params);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new TransformerException(this,e);
  }
}
