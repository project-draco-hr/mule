{
  if (!artifactFolder.exists()) {
    throw new IllegalArgumentException(format("Application directory does not exist: '%s'",artifactFolder));
  }
  final String appName=artifactFolder.getName();
  ApplicationDescriptor desc;
  try {
    final File deployPropertiesFile=getDeploymentFile(artifactFolder);
    if (deployPropertiesFile != null) {
      final PropertiesDescriptorParser descriptorParser=new PropertiesDescriptorParser();
      desc=descriptorParser.parse(artifactFolder,deployPropertiesFile,appName);
    }
 else {
      desc=new EmptyApplicationDescriptor(artifactFolder);
    }
    final File appPropsFile=new File(artifactFolder,DEFAULT_APP_PROPERTIES_RESOURCE);
    setApplicationProperties(desc,appPropsFile);
    final Set<ArtifactPluginDescriptor> plugins=parsePluginDescriptors(artifactFolder,desc);
    verifyPluginExportedPackages(getAllApplicationPlugins(plugins));
    desc.setPlugins(plugins);
    File appClassesFolder=getAppClassesFolder(desc);
    URL[] libraries=findLibraries(desc);
    URL[] sharedLibraries=findSharedLibraries(desc);
    List<URL> urls=getApplicationResourceUrls(appClassesFolder.toURI().toURL(),libraries,sharedLibraries);
    if (!urls.isEmpty() && logger.isInfoEnabled()) {
      logArtifactRuntimeUrls(appName,urls);
    }
    ClassLoaderModel.ClassLoaderModelBuilder classLoaderModelBuilder=new ClassLoaderModel.ClassLoaderModelBuilder();
    for (    URL url : urls) {
      classLoaderModelBuilder.containing(url);
    }
    JarInfo jarInfo=findApplicationResources(desc,sharedLibraries);
    classLoaderModelBuilder.exportingPackages(jarInfo.getPackages()).exportingResources(jarInfo.getResources());
    desc.setClassLoaderModel(classLoaderModelBuilder.build());
  }
 catch (  IOException e) {
    throw new ArtifactDescriptorCreateException("Unable to create application descriptor",e);
  }
  return desc;
}
