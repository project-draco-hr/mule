{
  final MuleEvent newEvent=new DefaultMuleEvent(event,this);
  RequestContext.setEvent(newEvent);
  try {
    ProcessingTemplate<MuleEvent> exceptionHandlingProcessingTemplate=ErrorHandlingProcessingTemplate.createErrorHandlingProcessingTemplate(muleContext,getExceptionListener());
    MuleEvent result=exceptionHandlingProcessingTemplate.execute(new ProcessingCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        MuleEvent result=pipeline.process(newEvent);
        if (result != null) {
          result.getMessage().release();
        }
        return result;
      }
    }
);
    if (result != null) {
      result=new DefaultMuleEvent(result,event.getFlowConstruct());
    }
    return result;
  }
 catch (  MessagingException e) {
    e.setProcessedEvent(new DefaultMuleEvent(e.getEvent(),event.getFlowConstruct()));
    throw e;
  }
catch (  Exception e) {
    throw new DefaultMuleException(CoreMessages.createStaticMessage("Flow execution exception"),e);
  }
 finally {
    RequestContext.setEvent(event);
    event.getMessage().release();
  }
}
