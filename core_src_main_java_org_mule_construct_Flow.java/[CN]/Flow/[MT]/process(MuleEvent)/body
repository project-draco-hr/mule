{
  Object replyToDestination=event.getReplyToDestination();
  ReplyToHandler replyToHandler=event.getReplyToHandler();
  final MuleEvent newEvent=new DefaultMuleEvent(event,this,null,null);
  RequestContext.setEvent(newEvent);
  try {
    ExecutionTemplate<MuleEvent> executionTemplate=ErrorHandlingExecutionTemplate.createErrorHandlingExecutionTemplate(muleContext,getExceptionListener());
    MuleEvent result=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        MuleEvent result=pipeline.process(newEvent);
        if (result != null && !VoidMuleEvent.getInstance().equals(result)) {
          result.getMessage().release();
        }
        return result;
      }
    }
);
    if (result != null && !VoidMuleEvent.getInstance().equals(result)) {
      result=new DefaultMuleEvent(result,event.getFlowConstruct(),replyToHandler,replyToDestination);
    }
    return result;
  }
 catch (  MessagingException e) {
    e.setProcessedEvent(new DefaultMuleEvent(e.getEvent(),event.getFlowConstruct()));
    throw e;
  }
catch (  Exception e) {
    throw new DefaultMuleException(CoreMessages.createStaticMessage("Flow execution exception"),e);
  }
 finally {
    RequestContext.setEvent(event);
    event.getMessage().release();
  }
}
