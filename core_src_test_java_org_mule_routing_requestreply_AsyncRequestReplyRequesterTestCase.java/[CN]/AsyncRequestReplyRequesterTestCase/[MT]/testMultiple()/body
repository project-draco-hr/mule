{
  asyncReplyMP=new TestAsyncRequestReplyRequester(muleContext);
  SensingNullMessageProcessor target=getSensingNullMessageProcessor();
  target.setWaitTime(50);
  LaxAsyncInterceptingMessageProcessor asyncMP=new LaxAsyncInterceptingMessageProcessor(new WorkManagerSource(){
    public WorkManager getWorkManager() throws MuleException {
      return muleContext.getWorkManager();
    }
  }
);
  asyncMP.setListener(target);
  asyncReplyMP.setListener(asyncMP);
  asyncReplyMP.setReplySource(target.getMessageSource());
  final InboundEndpoint inboundEndpoint=getTestInboundEndpoint(MessageExchangePattern.ONE_WAY);
  final Service service=getTestService();
  final AtomicInteger count=new AtomicInteger();
  for (int i=0; i < 500; i++) {
    muleContext.getWorkManager().scheduleWork(new Work(){
      public void run(){
        MuleEvent event;
        try {
          event=getTestEvent(TEST_MESSAGE,service,inboundEndpoint);
          MuleEvent resultEvent=asyncReplyMP.process(event);
          assertEquals(event.getMessageAsString(),resultEvent.getMessageAsString());
          assertEquals(event.getMessage().getUniqueId(),resultEvent.getMessage().getUniqueId());
          count.incrementAndGet();
          logger.debug("Finished " + count.get());
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
      public void release(){
      }
    }
);
  }
  while (count.get() < 500) {
    Thread.sleep(10);
  }
}
