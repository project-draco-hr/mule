{
  final Latch fakeLatch=new Latch(){
    @Override public void await() throws InterruptedException {
      throw new InterruptedException();
    }
  }
;
  asyncReplyMP=new TestAsyncRequestReplyRequester(muleContext){
    @Override protected Latch createEventLock(){
      return fakeLatch;
    }
  }
;
  final MuleEvent event=getTestEvent(TEST_MESSAGE,getTestService(),getTestInboundEndpoint(MessageExchangePattern.ONE_WAY));
  final CountDownLatch processingLatch=new CountDownLatch(1);
  MessageProcessor target=mock(MessageProcessor.class);
  asyncReplyMP.setListener(target);
  MessageSource messageSource=mock(MessageSource.class);
  asyncReplyMP.setReplySource(messageSource);
  final boolean[] exceptionThrown=new boolean[1];
  final Object[] responseEvent=new Object[1];
  Thread thread=new Thread(new Runnable(){
    public void run(){
      try {
        responseEvent[0]=asyncReplyMP.process(event);
      }
 catch (      MuleException e) {
        exceptionThrown[0]=true;
      }
 finally {
        processingLatch.countDown();
      }
    }
  }
);
  thread.start();
  assertTrue(processingLatch.await(RECEIVE_TIMEOUT,TimeUnit.MILLISECONDS));
  assertFalse(exceptionThrown[0]);
  assertNull(responseEvent[0]);
}
