{
  definitionBuilder.withIdentifier(name).withNamespace(namespace).withTypeDefinition(fromType(ValueResolver.class)).withObjectFactoryType(TopLevelParameterObjectFactory.class).withConstructorParameterDefinition(fromFixedValue(type).build()).withConstructorParameterDefinition(fromFixedValue(classLoader).build());
  for (  ObjectFieldType objectField : type.getFields()) {
    final MetadataType fieldType=objectField.getValue();
    final String fieldName=objectField.getKey().getName().getLocalPart();
    final boolean acceptsReferences=acceptsReferences(objectField);
    final Object defaultValue=getDefaultValue(fieldType).orElse(null);
    final ExpressionSupport expressionSupport=getExpressionSupport(fieldType);
    final DslElementSyntax childDsl=typeDsl.getChild(fieldName).orElse(dslSyntaxResolver.resolve(fieldType));
    fieldType.accept(new MetadataTypeVisitor(){
      @Override protected void defaultVisit(      MetadataType metadataType){
        parseAttributeParameter(fieldName,fieldName,metadataType,defaultValue,expressionSupport,false);
      }
      @Override public void visitObject(      ObjectType objectType){
        if (!parsingContext.isRegistered(childDsl.getElementName(),childDsl.getElementNamespace())) {
          parsingContext.registerObjectType(name,namespace,type);
          parseObjectParameter(fieldName,fieldName,objectType,defaultValue,expressionSupport,false,acceptsReferences,childDsl);
        }
 else {
          parseObject(fieldName,fieldName,objectType,defaultValue,expressionSupport,false,acceptsReferences,childDsl);
        }
      }
      @Override public void visitArrayType(      ArrayType arrayType){
        parseCollectionParameter(fieldName,fieldName,arrayType,defaultValue,expressionSupport,false,childDsl);
      }
      @Override public void visitDictionary(      DictionaryType dictionaryType){
        parseMapParameters(fieldName,fieldName,dictionaryType,defaultValue,expressionSupport,false,childDsl);
      }
    }
);
  }
}
