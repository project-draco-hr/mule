{
  Map headers=parseHeaders(request);
  MessageAdapter adapter=buildStandardAdapter(request,headers);
  MuleMessage message=new DefaultMuleMessage(adapter);
  if (logger.isDebugEnabled()) {
    logger.debug(message.getProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
  }
  MessageReceiver receiver=getTargetReceiver(message,endpoint);
  HttpResponse response;
  if (receiver != null) {
    preRouteMessage(message);
    MuleMessage returnMessage=receiver.routeMessage(message,endpoint.isSynchronous(),null);
    Object tempResponse;
    if (returnMessage != null) {
      tempResponse=returnMessage.getPayload();
    }
 else {
      tempResponse=NullPayload.getInstance();
    }
    if (tempResponse instanceof HttpResponse) {
      response=(HttpResponse)tempResponse;
    }
 else {
      response=transformResponse(returnMessage);
    }
    response.disableKeepAlive(!((HttpConnector)connector).isKeepAlive());
    response.removeHeaders("Connection");
    boolean endpointOverride=Boolean.parseBoolean((String)endpoint.getProperty("keepAlive"));
    Header connectionHeader=request.getFirstHeader("Connection");
    if (connectionHeader != null) {
      if ("keep-alive".equalsIgnoreCase(connectionHeader.getValue()) && ((HttpConnector)connector).isKeepAlive() && !endpointOverride) {
        Header header=new Header(HttpConstants.HEADER_CONNECTION,"keep-alive");
        response.addHeader(header);
        header=new Header(HttpConstants.HEADER_KEEP_ALIVE,"timeout=" + ((HttpConnector)connector).getKeepAliveTimeout());
        response.addHeader(header);
      }
 else {
        Header header=new Header(HttpConstants.HEADER_CONNECTION,"close");
        response.addHeader(header);
      }
    }
  }
 else {
    response=buildFailureResponse(requestLine,message);
  }
  return response;
}
