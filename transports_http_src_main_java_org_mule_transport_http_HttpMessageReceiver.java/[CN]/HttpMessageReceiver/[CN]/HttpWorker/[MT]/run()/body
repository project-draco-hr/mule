{
  long keepAliveTimeout=((TcpConnector)connector).getKeepAliveTimeout();
  try {
    do {
      conn.setKeepAlive(false);
      if (keepAliveTimeout > 0) {
        ((HttpConnector)connector).getKeepAliveMonitor().addExpirable(keepAliveTimeout,TimeUnit.MILLISECONDS,this);
      }
      final HttpRequest request=conn.readRequest();
      if (request == null) {
        break;
      }
      try {
        HttpResponse httpResponse=processRequest(request);
        conn.writeResponse(httpResponse);
      }
 catch (      Exception e) {
        MuleEvent response=null;
        if (e instanceof MessagingException) {
          response=((MessagingException)e).getEvent();
        }
 else {
          getConnector().getMuleContext().getExceptionListener().handleException(e);
        }
        if (response != null && response.getMessage().getExceptionPayload() != null && response.getMessage().getExceptionPayload().getException() instanceof MessagingException) {
          e=(Exception)response.getMessage().getExceptionPayload().getException();
        }
        String temp=ExceptionHelper.getErrorMapping(connector.getProtocol(),e.getClass());
        int httpStatus=Integer.valueOf(temp);
        if (e instanceof MessagingException) {
          MuleEvent event=((MessagingException)e).getEvent();
          conn.writeResponse(buildFailureResponse(event,e.getMessage(),httpStatus));
        }
 else {
          conn.writeResponse(buildFailureResponse(request.getRequestLine().getHttpVersion(),httpStatus,e.getMessage()));
        }
        break;
      }
 finally {
        ((HttpConnector)connector).getKeepAliveMonitor().removeExpirable(this);
        if (request.getBody() != null) {
          request.getBody().close();
        }
      }
    }
 while (conn.isKeepAlive());
  }
 catch (  Exception e) {
    getConnector().getMuleContext().getExceptionListener().handleException(e);
  }
 finally {
    logger.debug("Closing HTTP connection.");
    if (conn.isOpen()) {
      conn.close();
      conn=null;
    }
  }
}
