{
  try {
    final HttpRequest request=conn.readRequest();
    if (request == null) {
      throw new EmptyRequestException();
    }
    try {
      HttpResponse httpResponse=processRequest(request);
      conn.writeResponse(httpResponse);
    }
 catch (    Exception e) {
      MuleEvent response=null;
      if (e instanceof MessagingException) {
        response=((MessagingException)e).getEvent();
      }
 else {
        getConnector().getMuleContext().getExceptionListener().handleException(e);
      }
      if (response != null && response.getMessage().getExceptionPayload() != null && response.getMessage().getExceptionPayload().getException() instanceof MessagingException) {
        e=(Exception)response.getMessage().getExceptionPayload().getException();
      }
      String temp=ExceptionHelper.getErrorMapping(connector.getProtocol(),e.getClass(),flowConstruct.getMuleContext());
      int httpStatus=Integer.valueOf(temp);
      if (e instanceof MessagingException) {
        MuleEvent event=((MessagingException)e).getEvent();
        httpStatus=event.getMessage().getOutboundProperty(HttpConnector.HTTP_STATUS_PROPERTY) != null ? Integer.valueOf(event.getMessage().getOutboundProperty(HttpConnector.HTTP_STATUS_PROPERTY).toString()) : httpStatus;
        conn.writeResponse(buildFailureResponse(event,e.getMessage(),httpStatus));
      }
 else {
        conn.writeFailureResponse(httpStatus,e.getMessage());
      }
      throw new FailureProcessingRequestException();
    }
 finally {
      if (request.getBody() != null) {
        request.getBody().close();
      }
    }
  }
 catch (  EmptyRequestException e) {
    throw e;
  }
catch (  FailureProcessingRequestException e) {
    throw e;
  }
catch (  Exception e) {
    getConnector().getMuleContext().getExceptionListener().handleException(e);
  }
}
