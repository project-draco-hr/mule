{
  sendExpect100(request);
  final MuleMessage message=createMuleMessage(request);
  String path=message.getInboundProperty(HttpConnector.HTTP_REQUEST_PROPERTY);
  int i=path.indexOf('?');
  if (i > -1) {
    path=path.substring(0,i);
  }
  message.setProperty(HttpConnector.HTTP_REQUEST_PATH_PROPERTY,path,PropertyScope.INBOUND);
  if (logger.isDebugEnabled()) {
    logger.debug(message.getInboundProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
  }
  HttpResponse response;
  String contextPath=HttpConnector.normalizeUrl(getEndpointURI().getPath());
  message.setProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY,contextPath,PropertyScope.INBOUND);
  message.setProperty(HttpConnector.HTTP_CONTEXT_URI_PROPERTY,getEndpointURI().getAddress(),PropertyScope.INBOUND);
  message.setProperty(HttpConnector.HTTP_RELATIVE_PATH_PROPERTY,processRelativePath(contextPath,path),PropertyScope.INBOUND);
  ExecutionTemplate<MuleEvent> executionTemplate=createExecutionTemplate();
  MuleEvent returnEvent;
  try {
    returnEvent=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        preRouteMessage(message);
        return routeMessage(message);
      }
    }
);
  }
 catch (  MuleException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new DefaultMuleException(e);
  }
  MuleMessage returnMessage=returnEvent == null ? null : returnEvent.getMessage();
  Object tempResponse;
  if (returnMessage != null) {
    tempResponse=returnMessage.getPayload();
  }
 else {
    tempResponse=NullPayload.getInstance();
  }
  if (tempResponse instanceof HttpResponse) {
    response=(HttpResponse)tempResponse;
  }
 else {
    response=transformResponse(returnMessage);
  }
  response.setupKeepAliveFromRequestVersion(request.getRequestLine().getHttpVersion());
  HttpConnector httpConnector=(HttpConnector)connector;
  response.disableKeepAlive(!httpConnector.isKeepAlive());
  Header connectionHeader=request.getFirstHeader("Connection");
  if (connectionHeader != null) {
    String value=connectionHeader.getValue();
    boolean endpointOverride=getEndpointKeepAliveValue(endpoint);
    if ("keep-alive".equalsIgnoreCase(value) && endpointOverride) {
      response.setKeepAlive(true);
      if (response.getHttpVersion().equals(HttpVersion.HTTP_1_0)) {
        connectionHeader=new Header(HttpConstants.HEADER_CONNECTION,"Keep-Alive");
        response.setHeader(connectionHeader);
      }
    }
 else     if ("close".equalsIgnoreCase(value)) {
      response.setKeepAlive(false);
    }
  }
  return response;
}
