{
  Hashtable<String,Object> props=new Hashtable<String,Object>();
  props.put(BUFFER_OUTPUT,bufferOutput);
  props.put(SYNC_WRITES,Boolean.toString(syncWrites));
  props.put(SYNC_BATCH_SIZE,Integer.toString(syncBatchSize));
  props.put(SYNC_TIME,Integer.toString(syncTime));
  props.put(GLOBAL_STORE_CAPACITY,Integer.toString(globalStoreCapacity));
  props.put(MAX_UNACKED_SIZE,Integer.toString(maxUnackedSize));
  props.put(USE_JMS_ENGINE,Boolean.toString(useJMSEngine));
  props.put(QUEUE_WINDOW_SIZE,Integer.toString(queueWindowSize));
  props.put(AUTO_ACK_COUNT,Integer.toString(autoAckCount));
  props.put(ENABLE_SHARED_DURABLE,Boolean.toString(enableSharedDurable));
  props.put(RANDOMISE_R_NAMES,Boolean.toString(randomiseRNames));
  props.put(MAX_REDELIVERY,Integer.toString(muleMqMaxRedelivery));
  props.put(MESSAGE_THREAD_POOL_SIZE,Integer.toString(messageThreadPoolSize));
  props.put(DISC_ON_CLUSTER_FAILURE,Boolean.toString(discOnClusterFailure));
  props.put(INITIAL_RETRY_COUNT,Integer.toString(initialRetryCount));
  props.put(RETRY_COMMIT,Boolean.toString(retryCommit));
  props.put(ENABLE_MULTIPLEXED_CONNECTIONS,Boolean.toString(enableMultiplexedConnections));
  Map<String,Object> connectionFactoryProperties=getConnectionFactoryProperties();
  if (connectionFactoryProperties != null) {
    props.putAll(connectionFactoryProperties);
  }
  try {
    Method setPropertiesMethod=connectionFactory.getClass().getMethod("setProperties",Hashtable.class);
    setPropertiesMethod.invoke(connectionFactory,props);
  }
 catch (  Exception e) {
    logger.error("Can not set properties on the MuleMQ connection factory " + e);
  }
}
