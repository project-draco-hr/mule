{
  stats=createStatistics();
  stats.setEnabled(muleContext.getStatistics().isEnabled());
  muleContext.getStatistics().add(stats);
  RouterStatistics routerStatistics=null;
  if (outboundRouter instanceof OutboundRouterCollection) {
    routerStatistics=((OutboundRouterCollection)outboundRouter).getRouterStatistics();
  }
  if (routerStatistics == null) {
    routerStatistics=new RouterStatistics(RouterStatistics.TYPE_OUTBOUND);
  }
  stats.setOutboundRouterStat(routerStatistics);
  if (outboundRouter != null && outboundRouter instanceof RouterStatisticsRecorder) {
    ((RouterStatisticsRecorder)outboundRouter).setRouterStatistics(routerStatistics);
  }
  RouterStatistics inboundRouterStatistics=new RouterStatistics(RouterStatistics.TYPE_INBOUND);
  stats.setInboundRouterStat(inboundRouterStatistics);
  if (messageSource instanceof RouterStatisticsRecorder) {
    ((RouterStatisticsRecorder)messageSource).setRouterStatistics(inboundRouterStatistics);
  }
  stats.setComponentStat(component.getStatistics());
  try {
    buildServiceMessageProcessorChain();
  }
 catch (  MuleException e) {
    throw new InitialisationException(e,this);
  }
  messageSource.setListener(new AbstractInterceptingMessageProcessor(){
    public MuleEvent process(    MuleEvent event) throws MuleException {
      return messageProcessorChain.process(event);
    }
  }
);
  initialiseIfInitialisable(component);
  initialiseIfInitialisable(messageProcessorChain);
  initialiseIfInitialisable(messageSource);
  initialiseIfInitialisable(exceptionListener);
  if (asyncReplyMessageSource.getEndpoints().size() > 0) {
    asyncReplyMessageSource.initialise();
  }
}
