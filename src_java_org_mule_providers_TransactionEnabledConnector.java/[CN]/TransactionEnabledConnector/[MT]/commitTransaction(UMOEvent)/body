{
  TransactionProxy trans=TransactionCoordination.getInstance().getTransactionProxy();
  if (trans != null && trans.isRollbackOnly()) {
    rollbackTransaction(event);
    return;
  }
  logger.info("Committing transaction on endpoint: " + event.getEndpoint().getEndpointURI());
  UMOEndpoint endpoint=event.getEndpoint();
  byte action=endpoint.getTransactionConfig().getCommitAction();
  if ((action == UMOTransactionConfig.ACTION_NONE || action == UMOTransactionConfig.ACTION_COMMIT_IF_POSSIBLE) && trans == null) {
    return;
  }
 else   if (action == UMOTransactionConfig.ACTION_NONE && trans != null) {
    throw new IllegalTransactionStateException("A transaction is available for this session, but transaction action is NONE");
  }
 else   if ((action == UMOTransactionConfig.ACTION_ALWAYS_COMMIT && trans == null)) {
    throw new IllegalTransactionStateException("There isn't a transaction is available for this session, but transaction action is ALWAYS_COMMIT");
  }
 else   if (trans == null && (action != UMOTransactionConfig.ACTION_NONE)) {
    throw new TransactionNotInProgressException("There is no transaction associated with the session");
  }
 else   if (trans != null && trans.isCommitted()) {
    throw new TransactionNotInProgressException("The current transaction has already been committed");
  }
 else {
    trans.commit(event);
  }
}
