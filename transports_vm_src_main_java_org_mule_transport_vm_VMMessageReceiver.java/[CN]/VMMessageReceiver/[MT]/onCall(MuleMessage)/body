{
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(endpoint.getMuleContext().getExecutionClassLoader());
    final MuleMessage messageToRoute=new DefaultMuleMessage(message.getPayload(),message,endpoint.getMuleContext());
    ExecutionTemplate<MuleEvent> executionTemplate=createExecutionTemplate();
    MuleEvent resultEvent=executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        MuleEvent event=routeMessage(messageToRoute);
        MuleMessage returnedMessage=event == null ? null : event.getMessage();
        if (returnedMessage != null) {
          returnedMessage.release();
        }
        return event;
      }
    }
);
    return resultEvent != null ? new DefaultMuleMessage(resultEvent.getMessage().getPayload(),resultEvent.getMessage(),message.getMuleContext()) : null;
  }
 catch (  MessagingException e) {
    return e.getMuleMessage();
  }
catch (  MuleException e) {
    endpoint.getMuleContext().getExceptionListener().handleException(e);
    throw e;
  }
catch (  Exception e) {
    endpoint.getMuleContext().getExceptionListener().handleException(e);
    throw new DefaultMuleException(e);
  }
 finally {
    message.release();
    Thread.currentThread().setContextClassLoader(originalClassLoader);
  }
}
