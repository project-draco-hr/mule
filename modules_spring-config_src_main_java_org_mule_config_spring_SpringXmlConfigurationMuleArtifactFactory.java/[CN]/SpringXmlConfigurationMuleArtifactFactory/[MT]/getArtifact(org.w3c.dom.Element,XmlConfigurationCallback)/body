{
  ConfigResource config=null;
  Document document=DocumentHelper.createDocument();
  Element rootElement=document.addElement("mule","http://www.mulesoft.org/schema/mule/core");
  try {
    rootElement.add(convert(element));
    addSchemaLocation(rootElement,element,callback);
    for (int i=0; i < element.getAttributes().getLength(); i++) {
      String attributeName=element.getAttributes().item(i).getLocalName();
      if (attributeName != null && attributeName.endsWith("-ref")) {
        org.w3c.dom.Element depenedantElement=callback.getGlobalElement(element.getAttributes().item(i).getNodeValue());
        if (depenedantElement != null) {
          if ("http://www.springframework.org/schema/beans".equals(depenedantElement.getNamespaceURI())) {
            String namespaceUri=depenedantElement.getNamespaceURI();
            Namespace namespace=new Namespace(depenedantElement.getPrefix(),namespaceUri);
            Element beans=rootElement.element(new QName("beans",namespace));
            if (beans == null) {
              beans=rootElement.addElement("beans",namespaceUri);
            }
            beans.add(convert(depenedantElement));
          }
 else {
            rootElement.add(convert(depenedantElement));
            addSchemaLocation(rootElement,depenedantElement,callback);
          }
        }
 else {
          throw new MuleArtifactFactoryException("Missing dependent xml element " + element.getAttributes().item(i).getLocalName() + " with name/id: "+ element.getAttributes().item(i).getNodeValue());
        }
      }
    }
    config=new ConfigResource("",new StringBufferInputStream(document.asXML()));
  }
 catch (  MuleArtifactFactoryException e) {
    throw e;
  }
catch (  Exception e) {
    throw new MuleArtifactFactoryException("Error parsing XML",e);
  }
  MuleContext muleContext=null;
  SpringXmlConfigurationBuilder builder=null;
  try {
    MuleContextFactory factory=new DefaultMuleContextFactory();
    builder=new SpringXmlConfigurationBuilder(new ConfigResource[]{config});
    muleContext=factory.createMuleContext(builder);
    muleContext.start();
    MuleArtifact artifact=new DefaultMuleArtifact(muleContext.getRegistry().lookupObject(element.getAttribute("name")));
    builders.put(artifact,builder);
    contexts.put(artifact,muleContext);
    return artifact;
  }
 catch (  Exception e) {
    dispose(builder,muleContext);
    throw new MuleArtifactFactoryException("Error initializing",e);
  }
}
