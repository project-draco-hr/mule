{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference message=new AtomicReference();
  EventCallback callback=new EventCallback(){
    public synchronized void eventReceived(    UMOEventContext context,    Object component){
      try {
        FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)component;
        message.set(ftc.getSummary());
        latch.countDown();
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
;
  MuleClient client=new MuleClient();
  UMOModel model=managementContext.getRegistry().lookupModel("echoModel");
  FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)model.getComponent("testComponent").getInstance();
  assertNotNull(ftc);
  ftc.setEventCallback(callback,size);
  Runtime runtime=Runtime.getRuntime();
  runtime.gc();
  long freeStart=runtime.freeMemory();
  long maxStart=runtime.maxMemory();
  long timeStart=System.currentTimeMillis();
  BigInputStream stream=new BigInputStream(size,MESSAGES);
  UMOStreamMessageAdapter adapter=new StreamMessageAdapter(stream);
  client.dispatchStream(endpoint,adapter);
  int pause=(int)Math.max(size / ONE_MB,10);
  logger.info("Waiting for up to " + pause + " seconds");
  latch.await(pause,TimeUnit.SECONDS);
  assertEquals(stream.summary(),message.get());
  long freeEnd=runtime.freeMemory();
  long delta=freeStart - freeEnd;
  long timeEnd=System.currentTimeMillis();
  double speed=size / (double)(timeEnd - timeStart) * 1000 / ONE_MB;
  logger.info("Transfer speed " + speed + " MB/s ("+ size+ " B in "+ (timeEnd - timeStart)+ " ms)");
  double usePercent=100.0 * delta / ((double)size);
  logger.info("Memory delta " + delta + " B = "+ usePercent+ "%");
  assertTrue("Memory used too high",usePercent < 10);
  long maxEnd=runtime.maxMemory();
  assertEquals("Max memory shifted",0,maxEnd - maxStart);
}
