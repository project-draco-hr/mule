{
  AxisProperties.setProperty("axis.doAutoTypes",String.valueOf(connector.isDoAutoTypes()));
  MuleDescriptor descriptor=(MuleDescriptor)component.getDescriptor();
  String style=(String)descriptor.getProperties().get("style");
  if (style != null && style.equalsIgnoreCase("message")) {
    logger.debug("Creating Message Provider");
    service=new SOAPService(new MuleMsgProvider(connector));
  }
 else {
    logger.debug("Creating RPC Provider");
    service=new SOAPService(new MuleProvider(connector));
  }
  service.setEngine(connector.getAxisServer());
  UMOEndpointURI uri=endpoint.getEndpointURI();
  String serviceName=component.getDescriptor().getName();
  String servicePath=uri.getPath();
  service.setOption(serviceName,this);
  service.setOption(AxisConnector.SERVICE_PROPERTY_SERVCE_PATH,servicePath);
  service.setOption(AxisConnector.SERVICE_PROPERTY_COMPONENT_NAME,serviceName);
  service.setName(serviceName);
  Map options=(Map)descriptor.getProperties().get("axisOptions");
  if (options != null) {
    Map.Entry entry;
    for (Iterator iterator=options.entrySet().iterator(); iterator.hasNext(); ) {
      entry=(Map.Entry)iterator.next();
      service.setOption(entry.getKey().toString(),entry.getValue());
      logger.debug("Adding Axis option: " + entry);
    }
  }
  Class[] interfaces=ServiceProxy.getInterfacesForComponent(component);
  if (interfaces.length == 0) {
    throw new InitialisationException(new Message(Messages.X_MUST_IMPLEMENT_AN_INTERFACE,serviceName),component);
  }
  String methodNames="*";
  if (endpoint.getProperties().get("soapMethods") != null) {
    Map methods=(Map)endpoint.getProperties().get("soapMethods");
    Iterator i=methods.keySet().iterator();
    StringBuffer buf=new StringBuffer();
    while (i.hasNext()) {
      String name=(String)i.next();
      SoapMethod method=new SoapMethod(name,(String)methods.get(name));
      List namedParameters=method.getNamedParameters();
      ParameterDesc[] parameters=new ParameterDesc[namedParameters.size()];
      for (int j=0; j < namedParameters.size(); j++) {
        NamedParameter parameter=(NamedParameter)namedParameters.get(j);
        byte mode=ParameterDesc.INOUT;
        if (parameter.getMode().equals(ParameterMode.IN)) {
          mode=ParameterDesc.IN;
        }
 else         if (parameter.getMode().equals(ParameterMode.OUT)) {
          mode=ParameterDesc.OUT;
        }
        parameters[j]=new ParameterDesc(parameter.getName(),mode,parameter.getType());
      }
      service.getServiceDescription().addOperationDesc(new OperationDesc(name,parameters,method.getReturnType()));
      buf.append(name + ",");
    }
    methodNames=buf.toString();
    methodNames=methodNames.substring(0,methodNames.length() - 1);
  }
 else {
    String[] methods=ServiceProxy.getMethodNames(interfaces);
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < methods.length; i++) {
      buf.append(methods[i]).append(",");
    }
    methodNames=buf.toString();
    methodNames=methodNames.substring(0,methodNames.length() - 1);
  }
  String className=interfaces[0].getName();
  String namespace=Namespaces.makeNamespace(className);
  setOptionIfNotset(service,JavaProvider.OPTION_WSDL_SERVICEPORT,serviceName);
  setOptionIfNotset(service,JavaProvider.OPTION_CLASSNAME,className);
  setOptionIfNotset(service,JavaProvider.OPTION_SCOPE,"Request");
  setOptionIfNotset(service,JavaProvider.OPTION_WSDL_TARGETNAMESPACE,namespace);
  if (methodNames == null) {
    setOptionIfNotset(service,JavaProvider.OPTION_ALLOWEDMETHODS,"*");
  }
 else {
    setOptionIfNotset(service,JavaProvider.OPTION_ALLOWEDMETHODS,methodNames);
  }
  String use=(String)descriptor.getProperties().get("use");
  String doc=(String)descriptor.getProperties().get("documentation");
  if (style != null) {
    Style s=Style.getStyle(style);
    if (s == null) {
      throw new InitialisationException(new Message(Messages.VALUE_X_IS_INVALID_FOR_X,style,"style"),this);
    }
 else {
      service.setStyle(s);
    }
  }
  if (use != null) {
    Use u=Use.getUse(use);
    if (u == null) {
      throw new InitialisationException(new Message(Messages.VALUE_X_IS_INVALID_FOR_X,use,"use"),this);
    }
 else {
      service.setUse(u);
    }
  }
  service.getServiceDescription().setDocumentation(doc);
  TypeMappingRegistryImpl registry=(TypeMappingRegistryImpl)service.getTypeMappingRegistry();
  AxisProperties.setProperty("axis.doAutoTypes",String.valueOf(connector.isDoAutoTypes()));
  List types=(List)descriptor.getProperties().get("beanTypes");
  connector.registerTypes(registry,types);
  service.setName(serviceName);
  descriptor.addInitialisationCallback(new AxisInitialisationCallback(service));
  if (uri.getScheme().equalsIgnoreCase("servlet")) {
    connector.addServletService(service);
    String endpointUrl=uri.getAddress() + "/" + serviceName;
    endpointUrl.replaceFirst("servlet:","http:");
    service.getServiceDescription().setEndpointURL(endpointUrl);
  }
 else {
    service.getServiceDescription().setEndpointURL(uri.getAddress() + "/" + serviceName);
  }
  service.stop();
}
