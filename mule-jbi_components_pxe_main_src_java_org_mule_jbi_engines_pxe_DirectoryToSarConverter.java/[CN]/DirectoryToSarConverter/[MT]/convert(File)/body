{
  HashMap resources=new HashMap();
  HashMap wsdls=new HashMap();
  ArrayList bpels=new ArrayList();
  ArrayList sysDescs=new ArrayList();
  File[] files=directory.listFiles();
  for (int i=0; i < files.length; i++) {
    File entry=files[i];
    if (entry.getName().startsWith("META-INF/")) {
      continue;
    }
    if (entry.isDirectory()) {
      String msg="Expected flat archive structure with all resources in the root; resources may overlap, resulting in unexpected results.";
      __log.error(msg);
      return null;
    }
    String name=entry.getName();
    String url=entry.toURL().toString();
    if (name.toLowerCase().endsWith(".wsdl")) {
      __log.info("Found WSDL with name " + name);
      wsdls.put(name,url);
    }
 else     if (name.toLowerCase().endsWith(".bpel")) {
      __log.info("Found BPEL process with name " + name);
      bpels.add(url);
    }
 else     if (name.toLowerCase().equals("pxe-system.xml")) {
      __log.info("Found PXE system descriptor with name " + name);
      sysDescs.add(url);
    }
 else {
      resources.put(name,url);
    }
  }
  if (wsdls.size() == 0) {
    __log.error("No WSDL found; at least one *.wsdl file must be included.");
  }
 else   if (wsdls.size() != 1) {
    if (wsdls.get("main.wsdl") == null) {
      __log.error("Archive contains multiple WSDL files but none named \"main.wsdl\".");
      return null;
    }
  }
  if (bpels.size() > 1) {
    __log.error("Archive must contain at most one *.bpel file.");
    return null;
  }
  if (sysDescs.size() != 1) {
    __log.error("Expected exactly one system descriptor in the archive; " + "instead, found " + sysDescs.size() + ".");
    return null;
  }
  URL descUrl=new URL((String)sysDescs.get(0));
  URL wsdlUrl=new URL((String)(wsdls.size() != 1 ? (wsdls.get("main.wsdl")) : (wsdls.get(wsdls.keySet().iterator().next()))));
  URL bpelUrl=new URL((String)bpels.get(0));
  LoggingErrorHandler leh=new LoggingErrorHandler(__log);
  SystemDescriptor sd=SystemDescriptorFactory.parseDescriptor(descUrl,leh,null,true);
  sd.setWsdlUri(new URI(wsdlUrl.toExternalForm()));
  File tmpBar=TempFileManager.getTemporaryFile("bpel-compile");
  WsdlCacheRr cacheGenerator=new WsdlCacheRr();
  cacheGenerator.addWSDL(wsdlUrl);
  if (!cacheGenerator.containsResource("file:main.wsdl")) {
    cacheGenerator.aliasUri(wsdlUrl.toExternalForm(),"file:main.wsdl");
  }
  ExplodedSarFile sf=new ExplodedSarFile();
  sf.setCommonResourceRepository(cacheGenerator);
  BpelC bc=BpelC.newBpelCompiler();
  bc.setProcessWSDL(new URI(wsdlUrl.toExternalForm()));
  bc.setOutputFile(tmpBar);
  bc.compile(bpelUrl);
  sf.setSystemDescriptor(sd);
  sf.addResource("a.cbp",tmpBar);
  for (Iterator it=resources.keySet().iterator(); it.hasNext(); ) {
    String name=(String)it.next();
    sf.addResource(name,new URL((String)resources.get(name)));
  }
  sf.validate();
  return sf;
}
