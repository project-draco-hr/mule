{
  TestArtifactClassLoader classLoader=new TestArtifactClassLoader(new TestArtifactClassLoader(Thread.currentThread().getContextClassLoader()));
  String resourceReleaserClassLocation="/".concat(DefaultResourceReleaser.class.getName().replace(".","/")).concat(".class");
  classLoader.setResourceReleaserClassLocation(resourceReleaserClassLocation);
  Field cacheListField=ResourceBundle.class.getDeclaredField("cacheList");
  cacheListField.setAccessible(true);
  ((Map)cacheListField.get(null)).clear();
  try {
    ResourceBundle.getBundle("aBundle",getDefault(),classLoader);
    fail("Found a bundle that is not supposed to present for this test");
  }
 catch (  MissingResourceException e) {
  }
  classLoader.dispose();
  Map actualCacheList=(Map)cacheListField.get(null);
  assertThat(actualCacheList.size(),equalTo(0));
  Field nonExistentBundleField=ResourceBundle.class.getDeclaredField("NONEXISTENT_BUNDLE");
  nonExistentBundleField.setAccessible(true);
  ResourceBundle nonExistentBundle=(ResourceBundle)nonExistentBundleField.get(null);
  Field cacheKeyField=ResourceBundle.class.getDeclaredField("cacheKey");
  cacheKeyField.setAccessible(true);
  assertThat(cacheKeyField.get(nonExistentBundle),is(nullValue()));
}
