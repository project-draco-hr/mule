{
  HttpResponse response=new HttpResponse();
  Object tmp=msg.getOutboundProperty(HttpConnector.HTTP_STATUS_PROPERTY);
  int status=HttpConstants.SC_OK;
  if (tmp != null) {
    status=Integer.valueOf(tmp.toString());
  }
 else   if (msg.getExceptionPayload() != null) {
    status=HttpConstants.SC_INTERNAL_SERVER_ERROR;
  }
  String version=msg.getInboundProperty(HttpConnector.HTTP_VERSION_PROPERTY);
  if (version == null) {
    version=HttpConstants.HTTP11;
  }
  String date=new SimpleDateFormat(HttpConstants.DATE_FORMAT,Locale.US).format(new Date());
  String contentType=msg.getInboundProperty(HttpConstants.HEADER_CONTENT_TYPE);
  if (contentType == null) {
    contentType=msg.getInvocationProperty(HttpConstants.HEADER_CONTENT_TYPE);
  }
  response.setStatusLine(HttpVersion.parse(version),status);
  if (contentType != null) {
    response.setHeader(new Header(HttpConstants.HEADER_CONTENT_TYPE,contentType));
  }
  response.setHeader(new Header(HttpConstants.HEADER_DATE,date));
  response.setHeader(new Header(HttpConstants.HEADER_SERVER,server));
  if (msg.getOutboundProperty(HttpConstants.HEADER_EXPIRES) == null) {
    response.setHeader(new Header(HttpConstants.HEADER_EXPIRES,date));
  }
  String etag=msg.getOutboundProperty(HttpConstants.HEADER_ETAG);
  if (etag != null) {
    response.setHeader(new Header(HttpConstants.HEADER_ETAG,etag));
  }
  response.setFallbackCharset(encoding);
  @SuppressWarnings("unchecked") Collection<String> headerNames=HttpConstants.RESPONSE_HEADER_NAMES.values();
  for (  String headerName : headerNames) {
    String value=msg.getInvocationProperty(headerName);
    if (value == null) {
      value=msg.getStringProperty(headerName,PropertyScope.OUTBOUND,null);
    }
    if (value != null) {
      response.setHeader(new Header(headerName,value));
    }
  }
  Map customHeaders=msg.getOutboundProperty(HttpConnector.HTTP_CUSTOM_HEADERS_MAP_PROPERTY);
  if (customHeaders != null) {
    Map.Entry entry;
    for (Iterator iterator=customHeaders.entrySet().iterator(); iterator.hasNext(); ) {
      entry=(Map.Entry)iterator.next();
      if (entry.getValue() != null) {
        response.setHeader(new Header(entry.getKey().toString(),entry.getValue().toString()));
      }
    }
  }
  for (  String headerName : msg.getPropertyNames(PropertyScope.OUTBOUND)) {
    Object v=msg.getOutboundProperty(headerName);
    if (v != null) {
      response.setHeader(new Header(headerName,v.toString()));
    }
  }
  String user=msg.getStringProperty(MuleProperties.MULE_USER_PROPERTY,PropertyScope.OUTBOUND,null);
  if (user != null) {
    response.setHeader(new Header(CUSTOM_HEADER_PREFIX + MuleProperties.MULE_USER_PROPERTY,user));
  }
  if (msg.getCorrelationId() != null) {
    response.setHeader(new Header(CUSTOM_HEADER_PREFIX + MuleProperties.MULE_CORRELATION_ID_PROPERTY,msg.getCorrelationId()));
    response.setHeader(new Header(CUSTOM_HEADER_PREFIX + MuleProperties.MULE_CORRELATION_GROUP_SIZE_PROPERTY,String.valueOf(msg.getCorrelationGroupSize())));
    response.setHeader(new Header(CUSTOM_HEADER_PREFIX + MuleProperties.MULE_CORRELATION_SEQUENCE_PROPERTY,String.valueOf(msg.getCorrelationSequence())));
  }
  if (msg.getReplyTo() != null) {
    response.setHeader(new Header(CUSTOM_HEADER_PREFIX + MuleProperties.MULE_REPLY_TO_PROPERTY,msg.getReplyTo().toString()));
  }
  response.setBody(msg);
  return response;
}
