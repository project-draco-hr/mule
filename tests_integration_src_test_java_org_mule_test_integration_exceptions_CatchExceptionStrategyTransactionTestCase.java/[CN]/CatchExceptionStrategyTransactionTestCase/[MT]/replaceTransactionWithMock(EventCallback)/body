{
  when(mockTransaction.supports(anyObject(),anyObject())).thenReturn(true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      TransactionCoordination.getInstance().unbindTransaction(mockTransaction);
      throw new RuntimeException();
    }
  }
).when(mockTransaction).commit();
  return new EventCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      context.getCurrentTransaction().rollback();
      TransactionCoordination.getInstance().bindTransaction(mockTransaction);
      processEventCallback.eventReceived(context,component);
    }
  }
;
}
