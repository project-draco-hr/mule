{
  Object result=null;
  try {
    if (source instanceof ObjectMessage) {
      result=((ObjectMessage)source).getObject();
    }
 else     if (source instanceof MapMessage) {
      Hashtable map=new Hashtable();
      MapMessage m=(MapMessage)source;
      for (Enumeration e=m.getMapNames(); e.hasMoreElements(); ) {
        String name=(String)e.nextElement();
        Object obj=m.getObject(name);
        map.put(name,obj);
      }
      result=map;
    }
 else     if (source instanceof javax.jms.BytesMessage) {
      javax.jms.BytesMessage bm=(javax.jms.BytesMessage)source;
      java.io.ByteArrayOutputStream baos=new java.io.ByteArrayOutputStream();
      byte[] buffer=new byte[1024 * 4];
      int len=0;
      bm.reset();
      while ((len=bm.readBytes(buffer)) != -1) {
        baos.write(buffer,0,len);
      }
      baos.flush();
      result=baos.toByteArray();
      baos.close();
      if (result != null) {
        if (logger.isDebugEnabled())         logger.debug("JMSToObject: extracted " + ((byte[])result).length + " bytes from JMS BytesMessage");
      }
    }
 else     if (source instanceof TextMessage) {
      result=((TextMessage)source).getText();
    }
 else     if (source instanceof BytesMessage) {
      byte[] bytes=getBytesFromMessage(source);
      return CompressionHelper.uncompressByteArray(bytes);
    }
 else     if (source instanceof StreamMessage) {
      StreamMessage sm=(javax.jms.StreamMessage)source;
      result=new java.util.Vector();
      try {
        Object obj=null;
        while ((obj=sm.readObject()) != null) {
          ((java.util.Vector)result).addElement(obj);
        }
      }
 catch (      MessageEOFException eof) {
      }
catch (      Exception e) {
        throw new JMSException("Failed to extract information from JMS Stream Message: " + e);
      }
    }
 else {
      result=source;
    }
  }
 catch (  Exception e) {
    throw new JMSException("Failed to transform message: " + e.getMessage());
  }
  return result;
}
