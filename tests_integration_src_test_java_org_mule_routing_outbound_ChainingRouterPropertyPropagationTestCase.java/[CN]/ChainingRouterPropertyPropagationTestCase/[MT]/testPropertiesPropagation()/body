{
  FunctionalTestComponent2 hop1=(FunctionalTestComponent2)getComponent(muleContext.getRegistry().lookupService("hop1Service"));
  FunctionalTestComponent2 hop2=(FunctionalTestComponent2)getComponent(muleContext.getRegistry().lookupService("hop2Service"));
  assertNotNull(hop1);
  final AtomicBoolean hop1made=new AtomicBoolean(false);
  EventCallback callback1=new EventCallback(){
    public void eventReceived(    final MuleEventContext context,    final Object component) throws Exception {
      assertTrue(hop1made.compareAndSet(false,true));
      FunctionalTestComponent2 ftc=(FunctionalTestComponent2)component;
      ftc.setReturnData("Hop1 ACK");
    }
  }
;
  final AtomicBoolean hop2made=new AtomicBoolean(false);
  EventCallback callback2=new EventCallback(){
    public void eventReceived(    final MuleEventContext context,    final Object component) throws Exception {
      MuleMessage msg=context.getMessage();
      assertTrue(hop2made.compareAndSet(false,true));
      assertEquals("Property not propagated from the first hop.","hop1",msg.getProperty("TICKET"));
      FunctionalTestComponent2 ftc=(FunctionalTestComponent2)component;
      ftc.setReturnData(msg.getPayload() + " Hop2 ACK");
    }
  }
;
  hop1.setEventCallback(callback1);
  hop2.setEventCallback(callback2);
  MuleClient client=new MuleClient();
  DefaultMuleMessage request=new DefaultMuleMessage("payload");
  MuleMessage reply=client.send("inboundEndpoint",request);
  assertNotNull(reply);
  assertTrue("First callback never fired",hop1made.get());
  assertTrue("Second callback never fired",hop2made.get());
  assertEquals("Hop1 ACK Hop2 ACK",reply.getPayload());
  assertEquals("hop1",reply.getProperty("TICKET"));
  assertEquals("10000",reply.getProperty("TTL"));
}
