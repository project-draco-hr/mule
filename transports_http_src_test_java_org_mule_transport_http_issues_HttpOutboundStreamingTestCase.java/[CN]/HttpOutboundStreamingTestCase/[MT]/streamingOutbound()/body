{
  final String payload=RandomStringUtils.randomAlphabetic(4096 * 10);
  final CountDownLatch latch=new CountDownLatch(1);
  InputStream stream=new InputStream(){
    private int index=0;
    @Override public int available() throws IOException {
      return payload.length() - index;
    }
    @Override public int read() throws IOException {
      if (index == payload.length()) {
        return -1;
      }
      int value=payload.charAt(index);
      this.index++;
      if (index == 5000) {
        try {
          latch.await();
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
      return value;
    }
  }
;
  MuleMessage responseMessage=null;
  try {
    MuleClient client=muleContext.getClient();
    client.dispatch("vm://send",getTestEvent(stream,MessageExchangePattern.ONE_WAY).getMessage());
    responseMessage=client.request("vm://callback",10000);
  }
  finally {
    latch.countDown();
  }
  Assert.assertNotNull("there was no streaming",responseMessage);
}
