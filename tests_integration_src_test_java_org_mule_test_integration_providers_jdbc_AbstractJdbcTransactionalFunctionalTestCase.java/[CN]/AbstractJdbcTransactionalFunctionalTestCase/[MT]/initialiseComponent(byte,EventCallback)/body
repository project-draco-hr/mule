{
  UMOComponent component=new SedaComponent();
  component.setExceptionListener(new DefaultExceptionStrategy());
  component.setName("testComponent");
  component.setServiceFactory(new SimpleObjectFactory(JdbcFunctionalTestComponent.class));
  UMOTransactionFactory tf=getTransactionFactory();
  UMOTransactionConfig txConfig=new MuleTransactionConfig();
  txConfig.setFactory(tf);
  txConfig.setAction(txBeginAction);
  UMOEndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(getInDest(),managementContext);
  endpointBuilder.setName("testIn");
  endpointBuilder.setConnector(connector);
  endpointBuilder.setTransactionConfig(txConfig);
  UMOImmutableEndpoint endpoint=managementContext.getRegistry().lookupEndpointFactory().getInboundEndpoint(endpointBuilder);
  UMOEndpointBuilder endpointBuilder2=new EndpointURIEndpointBuilder(getOutDest(),managementContext);
  endpointBuilder2.setName("testOut");
  endpointBuilder2.setConnector(connector);
  UMOImmutableEndpoint outProvider=managementContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint(endpointBuilder2);
  component.setOutboundRouter(new OutboundRouterCollection());
  OutboundPassThroughRouter router=new OutboundPassThroughRouter();
  router.addEndpoint(outProvider);
  component.getOutboundRouter().addRouter(router);
  component.setInboundRouter(new InboundRouterCollection());
  component.getInboundRouter().addEndpoint(endpoint);
  HashMap props=new HashMap();
  props.put("eventCallback",callback);
  component.setProperties(props);
  component.setModel(model);
  managementContext.getRegistry().registerComponent(component);
  return component;
}
