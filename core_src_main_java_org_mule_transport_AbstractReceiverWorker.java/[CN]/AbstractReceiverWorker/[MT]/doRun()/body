{
  final MuleContext muleContext=receiver.getConnector().getMuleContext();
  TransactionTemplate tt=new TransactionTemplate(endpoint.getTransactionConfig(),endpoint.getConnector().getExceptionListener(),muleContext);
  TransactionCallback cb=new TransactionCallback(){
    public Object doInTransaction() throws Exception {
      Transaction tx=TransactionCoordination.getInstance().getTransaction();
      if (tx != null) {
        bindTransaction(tx);
      }
      List results=new ArrayList(messages.size());
      for (Iterator iterator=messages.iterator(); iterator.hasNext(); ) {
        Object payload=iterator.next();
        payload=preProcessMessage(payload);
        if (payload != null) {
          MuleMessage muleMessage=receiver.createMuleMessage(payload,endpoint.getEncoding());
          preRouteMuleMessage(muleMessage);
          SessionHandler handler;
          if (endpoint.getConnector() instanceof AbstractConnector) {
            handler=((AbstractConnector)endpoint.getConnector()).getSessionHandler();
          }
 else {
            handler=new MuleSessionHandler();
          }
          MuleSession session;
          try {
            session=handler.retrieveSessionInfoFromMessage(muleMessage);
          }
 catch (          SerializationException e) {
            session=new LegacySessionHandler().retrieveSessionInfoFromMessage(muleMessage);
          }
          MuleMessage result;
          if (session != null) {
            result=receiver.routeMessage(muleMessage,session,tx,tx != null || endpoint.isSynchronous(),out);
          }
 else {
            result=receiver.routeMessage(muleMessage,tx,tx != null || endpoint.isSynchronous(),out);
          }
          if (result != null) {
            payload=postProcessMessage(result);
            if (payload != null) {
              results.add(payload);
            }
          }
        }
      }
      return results;
    }
  }
;
  try {
    List results=(List)tt.execute(cb);
    handleResults(results);
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    messages.clear();
  }
}
