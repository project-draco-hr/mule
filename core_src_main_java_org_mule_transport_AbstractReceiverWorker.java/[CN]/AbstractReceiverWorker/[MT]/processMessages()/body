{
  TransactionTemplate<List<MuleEvent>> tt=TransactionTemplateFactory.<List<MuleEvent>>createNestedTransactionTemplate(endpoint.getTransactionConfig(),receiver.getConnector().getMuleContext());
  TransactionCallback<List<MuleEvent>> cb=new TransactionCallback<List<MuleEvent>>(){
    public List<MuleEvent> doInTransaction() throws Exception {
      final Transaction tx=TransactionCoordination.getInstance().getTransaction();
      if (tx != null) {
        bindTransaction(tx);
      }
      List<MuleEvent> results=new ArrayList<MuleEvent>(messages.size());
      for (      final Object payload : messages) {
        TransactionTemplate<MuleEvent> exceptionHandlingTransactionTemplate=TransactionTemplateFactory.<MuleEvent>createExceptionHandlingTransactionTemplate(endpoint.getMuleContext());
        MuleEvent resultEvent=null;
        try {
          resultEvent=exceptionHandlingTransactionTemplate.execute(new TransactionCallback<MuleEvent>(){
            @Override public MuleEvent doInTransaction() throws Exception {
              Object preProcessedPayload=preProcessMessage(payload);
              if (preProcessedPayload != null) {
                final MuleMessage muleMessage=receiver.createMuleMessage(preProcessedPayload,endpoint.getEncoding());
                preRouteMuleMessage(muleMessage);
                SessionHandler handler;
                if (endpoint.getConnector() instanceof AbstractConnector) {
                  handler=((AbstractConnector)endpoint.getConnector()).getSessionHandler();
                }
 else {
                  handler=new MuleSessionHandler();
                }
                MuleSession session;
                try {
                  session=handler.retrieveSessionInfoFromMessage(muleMessage);
                }
 catch (                SerializationException e) {
                  session=new LegacySessionHandler().retrieveSessionInfoFromMessage(muleMessage);
                }
                MuleEvent resultEvent;
                if (session != null) {
                  resultEvent=receiver.routeMessage(muleMessage,session,tx,out);
                }
 else {
                  resultEvent=receiver.routeMessage(muleMessage,tx,out);
                }
                return resultEvent;
              }
 else {
                return null;
              }
            }
          }
);
        }
 catch (        MessagingException e) {
          if (e.getEvent().getMessage().getExceptionPayload() != null) {
            throw e;
          }
          resultEvent=e.getEvent();
        }
        if (resultEvent != null) {
          results.add(resultEvent);
        }
      }
      return results;
    }
  }
;
  try {
    List<MuleEvent> results=tt.execute(cb);
    handleResults(handleEventResults(results));
  }
  finally {
    messages.clear();
  }
}
