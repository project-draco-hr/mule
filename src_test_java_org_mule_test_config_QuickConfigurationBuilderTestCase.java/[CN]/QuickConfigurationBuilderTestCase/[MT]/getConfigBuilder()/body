{
  QuickConfigurationBuilder builder=new QuickConfigurationBuilder();
  UMOManager m=builder.getManager();
  try {
    m.setProperty("doCompression","true");
    m.setTransactionManager(new TestTransactionManagerFactory().create());
    UMOAgent agent=new JmxAgent();
    agent.setName("jmxAgent");
    m.registerAgent(agent);
    TestConnector c=new TestConnector();
    c.setName("dummyConnector");
    c.setExceptionListener(new TestExceptionStrategy());
    SimpleRetryConnectionStrategy cs=new SimpleRetryConnectionStrategy();
    cs.setRetryCount(4);
    cs.setFrequency(3000);
    c.setConnectionStrategy(cs);
    m.registerConnector(c);
    m.registerEndpointIdentifier("AppleQueue","test://apple.queue");
    m.registerEndpointIdentifier("Banana_Queue","test://banana.queue");
    m.registerEndpointIdentifier("Test Queue","test://test.queue");
    TestCompressionTransformer t=new TestCompressionTransformer();
    t.setReturnClass(String.class);
    t.setBeanProperty2(12);
    t.setContainerProperty("");
    t.setBeanProperty1("this was set from the manager properties!");
    m.registerTransformer(t);
    DefaultTransformer t2=new DefaultTransformer();
    t2.setReturnClass(byte[].class);
    m.registerTransformer(t2);
    JXPathFilter filter=new JXPathFilter("name");
    filter.setValue("bar");
    Map ns=new HashMap();
    ns.put("foo","http://foo.com");
    filter.setNamespaces(ns);
    builder.registerEndpoint("test://fruitBowlPublishQ","fruitBowlEndpoint",false,null,filter);
    builder.registerEndpoint("Test Queue","waterMelonEndpoint",false);
    builder.registerEndpoint("test://AppleQueue","appleInEndpoint",true);
    builder.registerEndpoint("test://AppleResponseQueue","appleResponseEndpoint",false);
    Map props=new HashMap();
    props.put("testGlobal","value1");
    builder.registerEndpoint("test://orangeQ","orangeEndpoint",false,props);
    InterceptorStack stack=new InterceptorStack();
    List interceptors=new ArrayList();
    interceptors.add(new LoggingInterceptor());
    interceptors.add(new TimerInterceptor());
    stack.setInterceptors(interceptors);
    m.registerInterceptorStack("default",stack);
    UMOModel model=new MuleModel();
    model.setName("test-model");
    TestExceptionStrategy es=new TestExceptionStrategy();
    es.addEndpoint(new MuleEndpoint("test://component.exceptions",false));
    model.setExceptionListener(es);
    model.setLifecycleAdapterFactory(new TestDefaultLifecycleAdapterFactory());
    model.setEntryPointResolver(new TestEntryPointResolver());
    m.setModel(model);
    UMOEndpoint ep1=m.lookupEndpoint("appleInEndpoint");
    ep1.setTransformer(m.lookupTransformer("TestCompressionTransformer"));
    UMODescriptor d=builder.createDescriptor("local:orange","orangeComponent",null,ep1,props);
    DefaultComponentExceptionStrategy dces=new DefaultComponentExceptionStrategy();
    dces.addEndpoint(new MuleEndpoint("test://orange.exceptions",false));
    d.setExceptionListener(dces);
    UMOInboundMessageRouter inRouter=new InboundMessageRouter();
    inRouter.setCatchAllStrategy(new ForwardingCatchAllStrategy());
    inRouter.getCatchAllStrategy().setEndpoint(new MuleEndpoint("test://catch.all",false));
    UMOEndpoint ep2=builder.createEndpoint("test://orange/","Orange",true,"TestCompressionTransformer");
    inRouter.addEndpoint(ep2);
    UMOEndpoint ep3=m.lookupEndpoint("orangeEndpoint");
    ep3.setFilter(new PayloadTypeFilter(String.class));
    ep3.setTransformer(m.lookupTransformer("TestCompressionTransformer"));
    Map props2=new HashMap();
    props2.put("testLocal","value1");
    ep3.setProperties(props2);
    inRouter.addEndpoint(ep3);
    d.setInboundRouter(inRouter);
    UMOResponseMessageRouter responseRouter=new ResponseMessageRouter();
    responseRouter.addEndpoint(new MuleEndpoint("test://response1",true));
    responseRouter.addEndpoint(m.lookupEndpoint("appleResponseEndpoint"));
    responseRouter.addRouter(new TestResponseAggregator());
    responseRouter.setTransformer(m.lookupTransformer("TestCompressionTransformer"));
    d.setResponseRouter(responseRouter);
    UMOInterceptorStack stack2=m.lookupInterceptorStack("default");
    d.setInterceptors(new ArrayList(stack2.getInterceptors()));
    d.getInterceptors().add(new TimerInterceptor());
    Map cprops=new HashMap();
    cprops.put("orange",new Orange());
    cprops.put("brand","Juicy Baby!");
    cprops.put("segments","9");
    cprops.put("radius","4.21");
    Map nested=new HashMap();
    nested.put("prop1","prop1");
    nested.put("prop2","prop2");
    cprops.put("mapProperties",nested);
    List nested2=new ArrayList();
    nested2.add("prop1");
    nested2.add("prop2");
    nested2.add("prop3");
    cprops.put("listProperties",nested2);
    List nested3=new ArrayList();
    nested3.add("prop4");
    nested3.add("prop5");
    nested3.add("prop6");
    cprops.put("arrayProperties",nested3);
    d.setProperties(cprops);
    m.getModel().registerComponent(d);
    m.start();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  return builder;
}
