{
  Artifact archetypeArtifact=artifactFactory.createArtifact(archetypeGroupId,archetypeArtifactId,archetypeVersion,Artifact.SCOPE_RUNTIME,"jar");
  try {
    artifactResolver.resolve(archetypeArtifact,remoteRepositories,localRepository);
  }
 catch (  ArtifactResolutionException e) {
    throw new ArchetypeDescriptorException("Error attempting to download archetype: " + e.getMessage(),e);
  }
  BobberArchetypeXpp3Reader builder=new BobberArchetypeXpp3Reader();
  com.javaforge.bobber.archetype.model.BobberArchetype archetype;
  JarFile archetypeJarFile;
  try {
    archetypeJarFile=new JarFile(archetypeArtifact.getFile());
    final ZipEntry zipEntry=archetypeJarFile.getEntry(ARCHETYPE_DESCRIPTOR);
    InputStream is=archetypeJarFile.getInputStream(zipEntry);
    if (is == null) {
      throw new ArchetypeDescriptorException("The " + ARCHETYPE_DESCRIPTOR + " descriptor cannot be found.");
    }
    archetype=builder.read(new InputStreamReader(is));
    archetypeJarFile.close();
  }
 catch (  IOException e) {
    throw new ArchetypeDescriptorException("Error reading the " + ARCHETYPE_DESCRIPTOR + " descriptor.",e);
  }
catch (  XmlPullParserException e) {
    throw new ArchetypeDescriptorException("Error reading the " + ARCHETYPE_DESCRIPTOR + " descriptor.",e);
  }
  String basedir=(String)parameters.get("basedir");
  String artifactId=(String)parameters.get("artifactId");
  File pomFile=new File(basedir,ARCHETYPE_POM);
  File outputDirectoryFile;
  if (pomFile.exists() && archetype.isAllowPartial()) {
    outputDirectoryFile=new File(basedir);
  }
 else {
    outputDirectoryFile=new File(basedir,artifactId);
    if (!archetype.isAllowPartial() && outputDirectoryFile.exists() && outputDirectoryFile.listFiles().length > 0) {
      throw new ArchetypeTemplateProcessingException(outputDirectoryFile.getName() + " already exists - please run from a clean directory");
    }
    outputDirectoryFile.mkdir();
  }
  String outputDirectory=outputDirectoryFile.getAbsolutePath();
  VelocityContext context=new VelocityContext();
  String packageName=(String)parameters.get("package");
  context.put("package",packageName);
  context.put("packagePath",StringUtils.replace(packageName,".","/"));
  for (Iterator iterator=parameters.keySet().iterator(); iterator.hasNext(); ) {
    String key=(String)iterator.next();
    Object value=parameters.get(key);
    context.put(key,value);
  }
  boolean inInteractiveMode=false;
  try {
    inInteractiveMode=settingsBuilder.buildSettings().getInteractiveMode().booleanValue();
  }
 catch (  Exception ie) {
    throw new ArchetypeTemplateProcessingException("unable to read settings ",ie);
  }
  if (inInteractiveMode) {
    getLogger().info("Please enter the values for the following archetype variables:");
  }
  final List variables=archetype.getVariables();
  processVariables(variables.iterator(),context,inInteractiveMode);
  if (getLogger().isInfoEnabled()) {
    Object[] keys=context.getKeys();
    if (keys.length > 0) {
      getLogger().info("----------------------------------------------------------------------------");
      getLogger().info("Using following parameters for creating Archetype: " + archetypeArtifactId + ":"+ archetypeVersion);
      getLogger().info("----------------------------------------------------------------------------");
      for (int i=0; i < keys.length; i++) {
        String parameterName=(String)keys[i];
        Object parameterValue=context.get(parameterName);
        getLogger().info("Parameter: " + parameterName + " = "+ parameterValue);
      }
    }
 else {
      getLogger().info("No Parameters found for creating Archetype");
    }
  }
  try {
    archetypeJarFile=new JarFile(archetypeArtifact.getFile());
    Enumeration entries=archetypeJarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=(JarEntry)entries.nextElement();
      String path=entry.getName();
      if (!path.startsWith(ARCHETYPE_RESOURCES) || path.endsWith(".vm")) {
        continue;
      }
      File t=new File(outputDirectory,path.substring(19));
      if (entry.isDirectory()) {
        getLogger().debug("Extracting directory: " + entry.getName() + " to "+ t.getAbsolutePath());
        t.mkdir();
        continue;
      }
      getLogger().debug("Extracting file: " + entry.getName() + " to "+ t.getAbsolutePath());
      t.createNewFile();
      IOUtil.copy(archetypeJarFile.getInputStream(entry),new FileOutputStream(t));
    }
    archetypeJarFile.close();
    File t=new File(outputDirectory,ARCHETYPE_DESCRIPTOR);
    t.delete();
  }
 catch (  IOException ioe) {
    throw new ArchetypeTemplateProcessingException("Error extracting archetype",ioe);
  }
  ClassLoader old=Thread.currentThread().getContextClassLoader();
  try {
    URL[] urls=new URL[1];
    urls[0]=archetypeArtifact.getFile().toURI().toURL();
    URLClassLoader archetypeJarLoader=new URLClassLoader(urls);
    Thread.currentThread().setContextClassLoader(archetypeJarLoader);
    for (Iterator i=archetype.getTemplates().iterator(); i.hasNext(); ) {
      final Template template=(Template)i.next();
      boolean shouldProcess=true;
      String condition=template.getDependsOnVar();
      String requiredValue=null;
      List options=new ArrayList();
      if (StringUtils.isNotEmpty(condition)) {
        boolean not=false;
        int x=condition.indexOf("!=");
        getLogger().debug("Processing Condition : " + condition);
        if (x > -1) {
          not=true;
          requiredValue=condition.substring(x + 2).trim();
          options=getListOfValues(requiredValue);
          condition=condition.substring(0,x).trim();
        }
 else {
          x=condition.indexOf("=");
          if (x > -1) {
            requiredValue=condition.substring(x + 1);
            options=getListOfValues(requiredValue);
            condition=condition.substring(0,x);
          }
        }
        getLogger().debug("Not Expr: " + not);
        getLogger().debug("Condition Value: '" + condition + "'");
        getLogger().debug("Required Value: '" + requiredValue + "'");
        final Variable var=(Variable)findVariable(condition,variables);
        if (var != null) {
          final String strValue=(String)context.get(var.getName());
          getLogger().debug("Variable Value is: '" + strValue + "'");
          if (requiredValue == null) {
            if (!Boolean.valueOf(strValue).booleanValue()) {
              shouldProcess=false;
            }
          }
 else {
            if (!options.contains(strValue)) {
              shouldProcess=false;
            }
          }
        }
 else {
          getLogger().debug("Variable Value is: null");
          shouldProcess=false;
        }
        if (not) {
          shouldProcess=!shouldProcess;
        }
      }
      if (shouldProcess) {
        processTemplate(template,outputDirectory,context);
      }
 else {
        getLogger().debug("Condition not met, skipping " + template.getOutput());
      }
    }
  }
 catch (  MalformedURLException mfe) {
    throw new ArchetypeTemplateProcessingException("Error loading archetype resources into the classpath",mfe);
  }
 finally {
    Thread.currentThread().setContextClassLoader(old);
  }
  if (getLogger().isInfoEnabled()) {
    getLogger().info("Archetype created in dir: " + outputDirectory);
  }
}
