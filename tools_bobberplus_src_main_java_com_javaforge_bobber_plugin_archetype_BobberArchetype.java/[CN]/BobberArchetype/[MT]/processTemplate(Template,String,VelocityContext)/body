{
  File outFile;
  try {
    StringWriter wout=new StringWriter();
    velocity.getEngine().evaluate(context,wout,"output value",template.getOutput());
    outFile=new File(outputDirectory,wout.toString());
    getLogger().debug(outFile.getAbsolutePath());
    FileUtils.forceMkdir(outFile.getParentFile());
    getLogger().debug("Created directory: " + outFile.getParentFile() + ", Dir exists = "+ outFile.getParentFile().exists());
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new ArchetypeTemplateProcessingException("error evaluating output file name " + template.getOutput(),e);
  }
  Writer writer=null;
  try {
    getLogger().info("Processing Template: " + template.getFile());
    String templateLocation=ARCHETYPE_RESOURCES + "/" + template.getFile();
    writer=new FileWriter(outFile);
    velocity.getEngine().mergeTemplate(templateLocation,context,writer);
    writer.flush();
  }
 catch (  Exception e) {
    throw new ArchetypeTemplateProcessingException("Error merging velocity templates",e);
  }
 finally {
    IOUtil.close(writer);
    getLogger().info("Written Template to: " + outFile + ", file exists = "+ outFile.exists());
  }
  try {
    final File templateFile=new File(outputDirectory,template.getFile());
    final String templateDir=FileUtils.dirname(templateFile.getCanonicalPath());
    final String outputDir=FileUtils.dirname(outFile.getCanonicalPath());
    if (getLogger().isDebugEnabled()) {
      getLogger().debug("TemplateDir=" + templateDir);
      getLogger().debug("OutputDir=" + outputDir);
    }
    if (!outputDir.startsWith(templateDir)) {
      getLogger().debug("Deleting Template Dir:" + templateDir);
      FileUtils.forceDelete(templateDir);
    }
  }
 catch (  IOException e) {
    throw new ArchetypeTemplateProcessingException("Failed to cleanup the working dir.",e);
  }
}
