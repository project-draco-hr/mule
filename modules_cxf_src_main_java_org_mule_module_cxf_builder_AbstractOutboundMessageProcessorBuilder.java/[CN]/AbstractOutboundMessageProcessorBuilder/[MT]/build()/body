{
  if (muleContext == null) {
    throw new IllegalStateException("MuleContext must be supplied.");
  }
  if (configuration == null) {
    configuration=CxfConfiguration.getConfiguration(muleContext);
  }
  BusFactory.setThreadDefaultBus(getBus());
  try {
    client=createClient();
  }
 catch (  Exception e) {
    throw new DefaultMuleException(e);
  }
  addInterceptors(client.getInInterceptors(),inInterceptors);
  addInterceptors(client.getInFaultInterceptors(),inFaultInterceptors);
  addInterceptors(client.getOutInterceptors(),outInterceptors);
  addInterceptors(client.getOutFaultInterceptors(),outFaultInterceptors);
  client.setThreadLocalRequestContext(true);
  configureClient(client);
  if (features != null) {
    for (    AbstractFeature f : features) {
      f.initialize(client,getBus());
    }
  }
  if (mtomEnabled) {
    client.getEndpoint().put(Message.MTOM_ENABLED,mtomEnabled);
  }
  addMuleInterceptors();
  CxfOutboundMessageProcessor processor=createMessageProcessor();
  processor.setOperation(operation);
  configureMessageProcessor(processor);
  processor.setPayloadToArguments(payloadToArguments);
  if (decoupledEndpoint != null) {
    processor.setDecoupledEndpoint(decoupledEndpoint);
    CxfInboundMessageProcessor cxfInboundMP=new CxfInboundMessageProcessor();
    cxfInboundMP.setMuleContext(muleContext);
    cxfInboundMP.setBus(getBus());
    List<MessageProcessor> mps=new ArrayList<MessageProcessor>();
    mps.add(cxfInboundMP);
    EndpointBuilder ep=muleContext.getEndpointFactory().getEndpointBuilder(decoupledEndpoint);
    SimpleFlowConstruct flow=new SimpleFlowConstruct("decoupled-" + ep.toString(),muleContext);
    flow.setMessageProcessors(mps);
    flow.setMessageSource(ep.buildInboundEndpoint());
    muleContext.getRegistry().registerObject(flow.getName(),flow);
  }
  return processor;
}
