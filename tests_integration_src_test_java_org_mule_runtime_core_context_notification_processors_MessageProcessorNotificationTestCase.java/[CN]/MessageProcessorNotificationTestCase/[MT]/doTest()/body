{
  List<String> testList=Arrays.asList("test","with","collection");
  assertNotNull(flowRunner("singleMP").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("processorChain").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("customProcessor").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("choice").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("scatterGather").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("foreach").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("enricher").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("filters").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("idempotent-msg-filter").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("idempotent-secure-hash-msg-filter").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("subflow").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("catch-es").withPayload(TEST_PAYLOAD).run());
  expectedException.expect(ComponentException.class);
  flowRunner("rollback-es").withPayload(TEST_PAYLOAD).run();
  assertNotNull(flowRunner("choice-es").withPayload(TEST_PAYLOAD).run());
  CompositeMessageSource composite=(CompositeMessageSource)((Flow)muleContext.getRegistry().lookupFlowConstruct("composite-source")).getMessageSource();
  assertNotNull(((TestMessageSource)composite.getSources().get(0)).fireEvent(getTestEvent(TEST_PAYLOAD)));
  assertNotNull(((TestMessageSource)composite.getSources().get(1)).fireEvent(getTestEvent(TEST_PAYLOAD)));
  assertNotNull(flowRunner("first-successful").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("round-robin").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("collectionAggregator").withPayload(testList).run());
  assertNotNull(flowRunner("customAggregator").withPayload(testList).run());
  assertNotNull(flowRunner("chunkAggregator").withPayload(TEST_PAYLOAD).run());
  assertNotNull(flowRunner("wire-tap").withPayload(TEST_PAYLOAD).run());
}
