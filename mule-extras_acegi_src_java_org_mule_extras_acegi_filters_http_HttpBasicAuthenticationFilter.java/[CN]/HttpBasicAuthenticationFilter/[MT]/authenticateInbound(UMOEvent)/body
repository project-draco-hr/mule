{
  String header=(String)event.getProperty(HttpConstants.HEADER_AUTHORIZATION);
  if (logger.isDebugEnabled()) {
    logger.debug("Authorization header: " + header);
  }
  if ((header != null) && header.startsWith("Basic ")) {
    String base64Token=header.substring(6);
    String token=new String(Base64.decodeBase64(base64Token.getBytes()));
    String username="";
    String password="";
    int delim=token.indexOf(":");
    if (delim != -1) {
      username=token.substring(0,delim);
      password=token.substring(delim + 1);
    }
    UsernamePasswordAuthenticationToken authRequest=new UsernamePasswordAuthenticationToken(username,password);
    authRequest.setDetails(event.getProperty(MuleProperties.MULE_ENDPOINT_PROPERTY));
    UMOAuthentication authResult;
    UMOAuthentication umoAuthentication=new AcegiAuthenticationAdapter(authRequest);
    try {
      authResult=getSecurityManager().authenticate(umoAuthentication);
    }
 catch (    AuthenticationException e) {
      if (logger.isDebugEnabled()) {
        logger.debug("Authentication request for user: " + username + " failed: "+ e.toString());
      }
      setUnauthenticated(event);
      throw new UnauthorisedException(new Message(Messages.AUTH_FAILED_FOR_USER_X,username),e);
    }
    if (logger.isDebugEnabled()) {
      logger.debug("Authentication success: " + authResult.toString());
    }
    UMOSecurityContext context=getSecurityManager().createSecurityContext(authResult);
    event.getSession().setSecurityContext(context);
  }
 else   if (header == null) {
    setUnauthenticated(event);
    throw new UnauthorisedException(event.getMessage(),event.getSession().getSecurityContext(),getEndpoint(),this);
  }
 else {
    setUnauthenticated(event);
    throw new UnsupportedAuthenticationSchemeException(new Message("acegi",1,header),event.getMessage());
  }
}
