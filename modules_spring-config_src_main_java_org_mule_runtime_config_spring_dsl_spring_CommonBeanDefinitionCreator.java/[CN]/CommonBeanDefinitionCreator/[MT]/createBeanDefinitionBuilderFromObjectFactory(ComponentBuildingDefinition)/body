{
  BeanDefinitionBuilder beanDefinitionBuilder;
  Class<?> objectFactoryType=componentBuildingDefinition.getObjectFactoryType();
  Enhancer enhancer=new Enhancer();
  enhancer.setInterfaces(new Class[]{FactoryBean.class});
  enhancer.setSuperclass(objectFactoryType);
  enhancer.setCallbackType(MethodInterceptor.class);
  Class factoryBeanClass=enhancer.createClass();
  Enhancer.registerStaticCallbacks(factoryBeanClass,new Callback[]{new MethodInterceptor(){
    @Override public Object intercept(    Object obj,    Method method,    Object[] args,    MethodProxy proxy) throws Throwable {
      if (method.getName().equals("isSingleton")) {
        return !componentBuildingDefinition.isPrototype();
      }
      if (method.getName().equals("getObjectType")) {
        return null;
      }
      return proxy.invokeSuper(obj,args);
    }
  }
});
  beanDefinitionBuilder=BeanDefinitionBuilder.rootBeanDefinition(factoryBeanClass);
  return beanDefinitionBuilder;
}
