{
  processObjectConstructionParameters(componentModel,componentBuildingDefinition,new BeanDefinitionBuilderHelper(beanDefinitionBuilder));
  processSpringOrMuleProperties(componentModel,beanDefinitionBuilder);
  if (componentBuildingDefinition.isPrototype()) {
    beanDefinitionBuilder.setScope(SPRING_PROTOTYPE_OBJECT);
  }
  AbstractBeanDefinition originalBeanDefinition=beanDefinitionBuilder.getBeanDefinition();
  AbstractBeanDefinition wrappedBeanDefinition=adaptFilterBeanDefinitions(parentComponentModel,originalBeanDefinition);
  if (originalBeanDefinition != wrappedBeanDefinition) {
    componentModel.setType(wrappedBeanDefinition.getBeanClass());
  }
  beanDefinitionPostProcessor.postProcess(componentModel,wrappedBeanDefinition);
  componentModel.setBeanDefinition(wrappedBeanDefinition);
}
