{
  Object payload=muleEvent.getMessage().getPayload().getValue();
  if (!muleEvent.getMessage().getOutboundAttachmentNames().isEmpty() || payload instanceof MultiPartContent) {
    try {
      return createMultiPart(muleEvent.getMessage());
    }
 catch (    IOException e) {
      throw new MessagingException(muleEvent,e);
    }
  }
  if (doStreaming(requestBuilder,muleEvent)) {
    if (payload instanceof InputStream) {
      return new InputStreamHttpEntity((InputStream)payload);
    }
 else {
      try {
        return new InputStreamHttpEntity(new ByteArrayInputStream(muleEvent.getMessageAsBytes(muleContext)));
      }
 catch (      Exception e) {
        throw new MessagingException(muleEvent,e);
      }
    }
  }
 else {
    String contentType=requestBuilder.getHeaders().get(CONTENT_TYPE);
    if (contentType == null || contentType.startsWith(APPLICATION_X_WWW_FORM_URLENCODED.toRfcString()) || contentType.startsWith(APPLICATION_JAVA)) {
      if (muleEvent.getMessage().getPayload().getValue() instanceof Map) {
        String body=HttpParser.encodeString(muleEvent.getMessage().getPayload().getDataType().getMediaType().getCharset().orElse(getDefaultEncoding(muleContext)),(Map)payload);
        requestBuilder.addHeader(CONTENT_TYPE,APPLICATION_X_WWW_FORM_URLENCODED.toRfcString());
        return new ByteArrayHttpEntity(body.getBytes());
      }
    }
    try {
      return new ByteArrayHttpEntity(muleEvent.getMessageAsBytes(muleContext));
    }
 catch (    Exception e) {
      throw new MessagingException(muleEvent,e);
    }
  }
}
