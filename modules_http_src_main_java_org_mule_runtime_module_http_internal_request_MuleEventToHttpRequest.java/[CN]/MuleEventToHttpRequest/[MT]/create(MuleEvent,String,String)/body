{
  HttpRequesterRequestBuilder requestBuilder=requester.getRequestBuilder();
  HttpRequestBuilder builder=new HttpRequestBuilder();
  builder.setUri(resolvedUri);
  builder.setMethod(resolvedMethod);
  builder.setHeaders(requestBuilder.getHeaders(event));
  builder.setQueryParams(requestBuilder.getQueryParams(event));
  for (  String outboundProperty : event.getMessage().getOutboundPropertyNames()) {
    if (isNotIgnoredProperty(outboundProperty)) {
      builder.addHeader(outboundProperty,event.getMessage().getOutboundProperty(outboundProperty).toString());
    }
  }
  if (!event.getMessage().getOutboundPropertyNames().contains(MuleProperties.CONTENT_TYPE_PROPERTY)) {
    DataType<?> dataType=event.getMessage().getDataType();
    if (!MimeTypes.ANY.equals(dataType.getMimeType())) {
      builder.addHeader(MuleProperties.CONTENT_TYPE_PROPERTY,DataTypeUtils.getContentType(dataType));
    }
  }
  if (requester.getConfig().isEnableCookies()) {
    try {
      Map<String,List<String>> headers=requester.getConfig().getCookieManager().get(URI.create(resolvedUri),Collections.<String,List<String>>emptyMap());
      List<String> cookies=headers.get(COOKIE);
      if (cookies != null) {
        for (        String cookie : cookies) {
          builder.addHeader(COOKIE,cookie);
        }
      }
    }
 catch (    IOException e) {
      logger.warn("Error reading cookies for URI " + resolvedUri,e);
    }
  }
  builder.setEntity(createRequestEntity(builder,event,resolvedMethod));
  return builder;
}
