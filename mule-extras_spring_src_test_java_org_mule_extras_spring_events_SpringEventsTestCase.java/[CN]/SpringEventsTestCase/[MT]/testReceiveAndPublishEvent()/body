{
  TestSubscriptionEventBean bean1=(TestSubscriptionEventBean)context.getBean("testSubscribingEventBean1");
  assertNotNull(bean1);
  EventCallback callback=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object o) throws Exception {
      eventCount++;
      MuleApplicationEvent returnEvent=new MuleApplicationEvent("Event from a spring bean","vm://testBean2");
      MuleApplicationEvent e=(MuleApplicationEvent)o;
      e.getApplicationContext().publishEvent(returnEvent);
    }
  }
;
  bean1.setEventCallback(callback);
  TestSubscriptionEventBean bean2=(TestSubscriptionEventBean)context.getBean("testSubscribingEventBean2");
  assertNotNull(bean2);
  EventCallback callback2=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object o) throws Exception {
      eventCount2++;
      if (eventCount2 == NUMBER_OF_MESSAGES) {
synchronized (lock) {
          lock.notifyAll();
        }
      }
    }
  }
;
  bean2.setEventCallback(callback2);
  MuleClient client=new MuleClient();
  for (int i=0; i < NUMBER_OF_MESSAGES; i++) {
    client.send("vm://event.multicaster","Test Spring Event",null);
  }
synchronized (lock) {
    lock.wait(3000);
  }
  assertEquals(NUMBER_OF_MESSAGES,eventCount);
  assertEquals(NUMBER_OF_MESSAGES,eventCount2);
}
