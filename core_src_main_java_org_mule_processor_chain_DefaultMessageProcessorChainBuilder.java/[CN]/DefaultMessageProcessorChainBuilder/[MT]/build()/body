{
  LinkedList<MessageProcessor> tempList=new LinkedList<MessageProcessor>();
  for (int i=processors.size() - 1; i >= 0; i--) {
    MessageProcessor processor=initializeMessageProcessor(processors.get(i));
    if (processor instanceof InterceptingMessageProcessor) {
      InterceptingMessageProcessor interceptingProcessor=(InterceptingMessageProcessor)processor;
      if (i + 1 < processors.size()) {
        if (tempList.isEmpty()) {
          interceptingProcessor.setListener(initializeMessageProcessor(processors.get(i + 1)));
        }
 else         if (tempList.size() == 1) {
          interceptingProcessor.setListener(tempList.get(0));
        }
 else {
          final DefaultMessageProcessorChain chain=new DefaultMessageProcessorChain("(inner iterating chain) of " + name,new ArrayList<MessageProcessor>(tempList));
          interceptingProcessor.setListener(chain);
        }
      }
      tempList=new LinkedList<MessageProcessor>(Collections.singletonList(processor));
    }
 else {
      tempList.addFirst(initializeMessageProcessor(processor));
    }
  }
  final DefaultMessageProcessorChain chain=new DefaultMessageProcessorChain(name,new ArrayList<MessageProcessor>(tempList));
  return new InterceptingChainLifecycleWrapper(chain,processors,"wrapper for " + name);
}
