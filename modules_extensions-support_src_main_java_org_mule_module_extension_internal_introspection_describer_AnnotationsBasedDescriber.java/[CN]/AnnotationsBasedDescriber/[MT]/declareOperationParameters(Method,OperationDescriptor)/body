{
  List<ParsedParameter> descriptors=MuleExtensionAnnotationParser.parseParameters(method,typeLoader);
  checkAnnotationIsNotUsedMoreThanOnce(method,operation,UseConfig.class);
  checkAnnotationIsNotUsedMoreThanOnce(method,operation,Connection.class);
  for (  ParsedParameter parsedParameter : descriptors) {
    if (parsedParameter.isAdvertised()) {
      ParameterDescriptor parameter=parsedParameter.isRequired() ? operation.with().requiredParameter(parsedParameter.getName()) : operation.with().optionalParameter(parsedParameter.getName()).defaultingTo(parsedParameter.getDefaultValue());
      parameter.withExpressionSupport(IntrospectionUtils.getExpressionSupport(parsedParameter.getAnnotation(Expression.class)));
      parameter.describedAs(EMPTY).ofType(parsedParameter.getType());
      addTypeRestrictions(parameter,parsedParameter);
      DisplayModelProperty displayModelProperty=parseDisplayAnnotations(parsedParameter,parsedParameter.getName());
      if (displayModelProperty != null) {
        parameter.withModelProperty(displayModelProperty);
      }
      parseMetadataAnnotations(parsedParameter,parameter);
    }
    Connection connectionAnnotation=parsedParameter.getAnnotation(Connection.class);
    if (connectionAnnotation != null) {
      operation.withModelProperty(new ConnectionTypeModelProperty(getType(parsedParameter.getType(),typeLoader.getClassLoader())));
    }
    UseConfig useConfig=parsedParameter.getAnnotation(UseConfig.class);
    if (useConfig != null) {
      operation.withModelProperty(new ConfigTypeModelProperty(getType(parsedParameter.getType())));
    }
  }
}
