{
  Flow flow=getTestFlow(muleContext);
  flow.start();
  try {
    connector.registerListener(getTestInboundEndpoint("in","test://in"),getSensingNullMessageProcessor(),flow);
    assertEquals(1,connector.receivers.size());
    assertFalse((connector.receivers.get("in")).isConnected());
    assertFalse(((AbstractMessageReceiver)connector.receivers.get("in")).isStarted());
    connector.start();
    assertTrue((connector.receivers.get("in")).isConnected());
    assertTrue(((AbstractMessageReceiver)connector.receivers.get("in")).isStarted());
    connector.registerListener(getTestInboundEndpoint("in2","test://in2"),getSensingNullMessageProcessor(),flow);
    assertEquals(2,connector.receivers.size());
    assertTrue((connector.receivers.get("in")).isConnected());
    assertTrue(((AbstractMessageReceiver)connector.receivers.get("in")).isStarted());
    assertTrue((connector.receivers.get("in2")).isConnected());
    assertTrue(((AbstractMessageReceiver)connector.receivers.get("in2")).isStarted());
    connector.stop();
    assertEquals(2,connector.receivers.size());
    assertTrue((connector.receivers.get("in")).isConnected());
    assertFalse(((AbstractMessageReceiver)connector.receivers.get("in")).isStarted());
    assertTrue((connector.receivers.get("in2")).isConnected());
    assertFalse(((AbstractMessageReceiver)connector.receivers.get("in2")).isStarted());
    connector.disconnect();
    assertEquals(2,connector.receivers.size());
    assertFalse((connector.receivers.get("in")).isConnected());
    assertFalse((connector.receivers.get("in2")).isConnected());
    connector.start();
    assertEquals(2,connector.receivers.size());
    assertTrue((connector.receivers.get("in")).isConnected());
    assertTrue(((AbstractMessageReceiver)connector.receivers.get("in")).isStarted());
    assertTrue((connector.receivers.get("in2")).isConnected());
    assertTrue(((AbstractMessageReceiver)connector.receivers.get("in2")).isStarted());
    connector.dispose();
    assertEquals(0,connector.receivers.size());
  }
  finally {
    flow.dispose();
  }
}
