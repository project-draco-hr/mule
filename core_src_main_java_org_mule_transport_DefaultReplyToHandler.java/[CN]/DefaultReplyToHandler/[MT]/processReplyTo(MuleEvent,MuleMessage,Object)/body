{
  if (logger.isDebugEnabled()) {
    logger.debug("sending reply to: " + replyTo);
  }
  String replyToEndpoint=replyTo.toString();
  OutboundEndpoint endpoint=getEndpoint(event,replyToEndpoint);
  returnMessage.removeProperty(MuleProperties.MULE_REPLY_TO_PROPERTY);
  returnMessage.removeProperty(MuleProperties.MULE_REMOTE_SYNC_PROPERTY);
  returnMessage=new DefaultMuleMessage(returnMessage.getPayload(),returnMessage,muleContext);
  MuleEvent replyToEvent=new DefaultMuleEvent(returnMessage,event);
  List<String> responseProperties=endpoint.getResponseProperties();
  for (  String propertyName : responseProperties) {
    Object propertyValue=event.getMessage().getInboundProperty(propertyName);
    if (propertyValue != null) {
      replyToEvent.getMessage().setOutboundProperty(propertyName,propertyValue);
    }
  }
  try {
    if (event.getFlowConstruct() instanceof Service) {
      ServiceStatistics stats=((Service)event.getFlowConstruct()).getStatistics();
      if (stats.isEnabled()) {
        stats.incSentReplyToEvent();
      }
    }
    endpoint.process(replyToEvent);
    if (logger.isInfoEnabled()) {
      logger.info("reply to sent: " + endpoint);
    }
  }
 catch (  Exception e) {
    throw new DispatchException(CoreMessages.failedToDispatchToReplyto(endpoint),replyToEvent,endpoint,e);
  }
}
