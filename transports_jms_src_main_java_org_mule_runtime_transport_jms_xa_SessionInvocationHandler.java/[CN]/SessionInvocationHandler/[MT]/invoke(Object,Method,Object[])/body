{
  if (logger.isDebugEnabled()) {
    logger.debug(this + " Invoking " + method);
  }
  if (XaTransaction.MuleXaObject.DELIST_METHOD_NAME.equals(method.getName())) {
    return delist();
  }
 else   if (XaTransaction.MuleXaObject.ENLIST_METHOD_NAME.equals(method.getName())) {
    return enlist();
  }
 else   if (XaTransaction.MuleXaObject.SET_REUSE_OBJECT_METHOD_NAME.equals(method.getName())) {
    reuseObject=(Boolean)args[0];
    return null;
  }
 else   if (XaTransaction.MuleXaObject.IS_REUSE_OBJECT_METHOD_NAME.equals(method.getName())) {
    return reuseObject;
  }
 else   if (XaTransaction.MuleXaObject.GET_TARGET_OBJECT_METHOD_NAME.equals(method.getName())) {
    return getTargetObject();
  }
 else   if (XaTransaction.MuleXaObject.CLOSE_METHOD_NAME.equals(method.getName())) {
    try {
      session.close();
      xaSession.close();
    }
 catch (    Exception ex) {
      if (logger.isDebugEnabled()) {
        logger.debug("Closing the session and the xaSession failed",ex);
      }
    }
    return null;
  }
  Object result=method.invoke(session,args);
  if (result instanceof TopicSubscriber) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{TopicSubscriber.class},new ConsumerProducerInvocationHandler(this,result));
  }
 else   if (result instanceof QueueReceiver) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{QueueReceiver.class},new ConsumerProducerInvocationHandler(this,result));
  }
 else   if (result instanceof MessageConsumer) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{MessageConsumer.class},new ConsumerProducerInvocationHandler(this,result));
  }
 else   if (result instanceof TopicPublisher) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{TopicPublisher.class},new ConsumerProducerInvocationHandler(this,result));
  }
 else   if (result instanceof QueueSender) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{QueueSender.class},new ConsumerProducerInvocationHandler(this,result));
  }
 else   if (result instanceof MessageProducer) {
    result=Proxy.newProxyInstance(Session.class.getClassLoader(),new Class[]{MessageProducer.class},new ConsumerProducerInvocationHandler(this,result));
  }
  return result;
}
