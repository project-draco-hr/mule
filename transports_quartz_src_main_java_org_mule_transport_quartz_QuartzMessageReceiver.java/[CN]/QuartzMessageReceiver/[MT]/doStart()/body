{
  try {
    Scheduler scheduler=connector.getQuartzScheduler();
    JobConfig jobConfig=(JobConfig)endpoint.getProperty(QuartzConnector.PROPERTY_JOB_CONFIG);
    if (jobConfig == null) {
      throw new IllegalArgumentException(CoreMessages.objectIsNull(QuartzConnector.PROPERTY_JOB_CONFIG).getMessage());
    }
    Class<? extends Job> jobClass=jobConfig.getJobClass();
    JobBuilder jobBuilder=newJob(jobClass);
    isStateful=StatefulJob.class.isAssignableFrom(jobClass);
    JobDataMap jobDataMap=new JobDataMap();
    jobDataMap.put(QUARTZ_RECEIVER_PROPERTY,this.getReceiverKey());
    jobDataMap.put(QUARTZ_CONNECTOR_PROPERTY,this.connector.getName());
    jobDataMap.putAll(endpoint.getProperties());
    if (jobConfig instanceof EventGeneratorJobConfig) {
      jobDataMap.put(QuartzConnector.PROPERTY_PAYLOAD,((EventGeneratorJobConfig)jobConfig).getPayload());
    }
    jobDataMap.put(QuartzConnector.PROPERTY_JOB_CONFIG,jobConfig);
    Job job=null;
    if (jobConfig instanceof CustomJobConfig) {
      job=((CustomJobConfig)jobConfig).getJob();
    }
    if (job != null) {
      jobDataMap.put(QuartzConnector.PROPERTY_JOB_OBJECT,job);
    }
    jobBuilder.usingJobData(jobDataMap);
    String cronExpression=(String)endpoint.getProperty(QuartzConnector.PROPERTY_CRON_EXPRESSION);
    String repeatInterval=(String)endpoint.getProperty(QuartzConnector.PROPERTY_REPEAT_INTERVAL);
    String repeatCount=(String)endpoint.getProperty(QuartzConnector.PROPERTY_REPEAT_COUNT);
    String startDelay=(String)endpoint.getProperty(QuartzConnector.PROPERTY_START_DELAY);
    String groupName=jobConfig.getGroupName();
    String jobGroupName=jobConfig.getJobGroupName();
    if (groupName == null) {
      groupName=QuartzConnector.DEFAULT_GROUP_NAME;
    }
    if (jobGroupName == null) {
      jobGroupName=groupName;
    }
    jobBuilder.withIdentity(endpoint.getEndpointURI().getAddress(),groupName);
    TriggerBuilder triggerBuilder=newTrigger().withIdentity(endpoint.getEndpointURI().getAddress(),groupName).forJob(endpoint.getEndpointURI().getAddress(),jobGroupName);
    if (cronExpression != null) {
      triggerBuilder.withSchedule(cronSchedule(cronExpression));
    }
 else     if (repeatInterval != null) {
      triggerBuilder.withSchedule(simpleSchedule().withIntervalInMilliseconds(Long.parseLong(repeatInterval)).withRepeatCount(repeatCount != null ? Integer.parseInt(repeatCount) : SimpleTrigger.REPEAT_INDEFINITELY));
    }
 else {
      throw new IllegalArgumentException(QuartzMessages.cronExpressionOrIntervalMustBeSet().getMessage());
    }
    long start=System.currentTimeMillis();
    if (startDelay != null) {
      start+=Long.parseLong(startDelay);
    }
    triggerBuilder.startAt(new Date(start));
    try {
      scheduler.scheduleJob(jobBuilder.build(),triggerBuilder.build());
    }
 catch (    ObjectAlreadyExistsException oaee) {
      logger.warn("A quartz Job with name: " + endpoint.getEndpointURI().getAddress() + " has already been registered. Cannot register again");
    }
  }
 catch (  Exception e) {
    throw new EndpointException(CoreMessages.failedToStart("Quartz receiver"),e);
  }
}
