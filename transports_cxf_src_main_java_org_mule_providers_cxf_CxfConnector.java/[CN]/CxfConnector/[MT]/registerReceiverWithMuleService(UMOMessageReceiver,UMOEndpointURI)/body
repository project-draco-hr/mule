{
  CxfMessageReceiver cxfReceiver=(CxfMessageReceiver)receiver;
  Server server=cxfReceiver.getServer();
  SedaComponent c=new SedaComponent();
  c.setName(CXF_SERVICE_COMPONENT_NAME + server.getEndpoint().getService().getName());
  c.setModel(managementContext.getRegistry().lookupSystemModel());
  CxfServiceComponent svcComponent=new CxfServiceComponent((CxfMessageReceiver)receiver);
  svcComponent.setBus(bus);
  SingletonObjectFactory of=new SingletonObjectFactory(svcComponent);
  of.setComponent(c);
  of.initialise();
  c.setServiceFactory(of);
  String endpoint=receiver.getEndpointURI().getAddress();
  String scheme=ep.getScheme().toLowerCase();
  boolean sync=receiver.getEndpoint().isSynchronous();
  if (scheme.equals("http") || scheme.equals("https") || scheme.equals("ssl")|| scheme.equals("tcp")|| scheme.equals("servlet")) {
    receiver.getEndpoint().getProperties().put(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
    receiver.getEndpoint().getProperties().put(HttpConstants.HEADER_CONTENT_TYPE,"text/xml");
    if (!receiver.getEndpoint().isSynchronousSet()) {
      sync=true;
    }
  }
  QName serviceName=server.getEndpoint().getEndpointInfo().getName();
  UMOEndpointBuilder builder=new EndpointURIEndpointBuilder(endpoint,managementContext);
  builder.setSynchronous(sync);
  builder.setName(ep.getScheme() + ":" + serviceName);
  builder.setTransformers(receiver.getEndpoint().getTransformers());
  ((MuleEndpoint)receiver.getEndpoint()).setTransformers(new LinkedList());
  builder.setResponseTransformers(receiver.getEndpoint().getResponseTransformers());
  ((MuleEndpoint)receiver.getEndpoint()).setResponseTransformers(new LinkedList());
  builder.setFilter(receiver.getEndpoint().getFilter());
  ((MuleEndpoint)receiver.getEndpoint()).setFilter(null);
  builder.setSecurityFilter(receiver.getEndpoint().getSecurityFilter());
  ((MuleEndpoint)receiver.getEndpoint()).setSecurityFilter(null);
  UMOImmutableEndpoint serviceEndpoint=managementContext.getRegistry().lookupEndpointFactory().getInboundEndpoint(builder,managementContext);
  c.setInboundRouter(new InboundRouterCollection());
  c.getInboundRouter().addEndpoint(serviceEndpoint);
  components.add(c);
}
