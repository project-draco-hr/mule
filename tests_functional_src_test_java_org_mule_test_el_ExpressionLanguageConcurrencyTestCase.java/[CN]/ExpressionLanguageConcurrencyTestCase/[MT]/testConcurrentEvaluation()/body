{
  final int N=100;
  final CountDownLatch start=new CountDownLatch(1);
  final CountDownLatch end=new CountDownLatch(N);
  final AtomicInteger errors=new AtomicInteger(0);
  for (int i=0; i < N; i++) {
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          start.await();
          System.out.println(String.format(">>>>>>>> before thread %s -> %s",Thread.currentThread().getName(),new Date()));
          testFlow("slowRequestHandler",getTestEvent("foo"));
          System.out.println(String.format("+++++++++ after thread %s -> %s",Thread.currentThread().getName(),new Date()));
        }
 catch (        Exception e) {
          e.printStackTrace();
          errors.incrementAndGet();
          System.out.println("\n\n incremented error count to " + errors.get());
        }
 finally {
          end.countDown();
        }
      }
    }
,"thread-eval-" + i).start();
  }
  start.countDown();
  end.await();
  System.out.println(String.format("end loop -> %s",new Date()));
  System.out.println("\n\n final error count " + errors.get());
  if (errors.get() > 0) {
    fail();
  }
}
