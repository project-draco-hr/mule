{
  final int countDownInitialCount=2;
  final CountDownLatch countDown=new CountDownLatch(countDownInitialCount);
  UMODescriptor descriptor=getDescriptor("testComponent",FunctionalTestComponent.class.getName());
  EventCallback callback=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object Component) throws Exception {
      callbackCalled=true;
      currentTx=context.getCurrentTransaction();
      assertNotNull(currentTx);
      assertTrue(currentTx.isBegun());
      System.out.println("@@@@ Rolling back transaction @@@@");
      currentTx.setRollbackOnly();
      countDown.countDown();
    }
  }
;
  initialiseComponent(descriptor,UMOTransactionConfig.ACTION_ALWAYS_BEGIN,callback);
  UMOManager manager=managementContext;
  addResultListener(getOutDest().getAddress(),countDown);
  UMOConnector umoCnn=managementContext.getRegistry().lookupConnector(CONNECTOR_NAME);
  umoCnn.setExceptionListener(new RollbackExceptionListener(countDown));
  managementContext.start();
  send(DEFAULT_MESSAGE,false,Session.AUTO_ACKNOWLEDGE);
  afterInitialise();
  countDown.tryLock(LOCK_WAIT,TimeUnit.MILLISECONDS);
  assertTrue("Only " + (countDownInitialCount - countDown.getCount()) + " of "+ countDownInitialCount+ " checkpoints hit",countDown.tryLock());
  afterInitialise();
  assertNull(currentMsg);
  assertTrue(callbackCalled);
  assertTrue(currentTx.isRolledBack());
  assertNull(receive(getInDest().getAddress(),2000));
}
