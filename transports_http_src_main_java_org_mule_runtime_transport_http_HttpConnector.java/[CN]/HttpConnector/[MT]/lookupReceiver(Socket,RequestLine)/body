{
  int port=((InetSocketAddress)socket.getLocalSocketAddress()).getPort();
  String host=null;
  for (  MessageReceiver messageReceiver : receivers.values()) {
    if (messageReceiver.getEndpointURI().getPort() == port) {
      host=messageReceiver.getEndpointURI().getHost();
      if (!BIND_TO_ALL_INTERFACES_IP.equals(host)) {
        break;
      }
    }
  }
  if (host == null) {
    String url=requestLine.getUrlWithoutParams();
    throw new NoReceiverForEndpointException(HttpMessages.noReceiverFoundForUrl(url));
  }
  String requestUriWithoutParams=requestLine.getUrlWithoutParams();
  StringBuilder requestUri=new StringBuilder(80);
  if (requestUriWithoutParams.indexOf("://") == -1) {
    requestUri.append(getProtocol()).append("://").append(host).append(':').append(port);
    if (!ROOT_PATH.equals(requestUriWithoutParams)) {
      requestUri.append(requestUriWithoutParams);
    }
  }
  String uriStr=requestUri.toString();
  if (logger.isTraceEnabled()) {
    logger.trace(String.format(LOOKUP_DEBUG_MESSAGE_FORMAT,"Primary",getName(),uriStr));
  }
  HttpMessageReceiver receiver=(HttpMessageReceiver)lookupReceiver(uriStr);
  if (receiver == null && !ROOT_PATH.equals(requestUriWithoutParams)) {
    if (logger.isDebugEnabled()) {
      logger.debug(String.format(LOOKUP_DEBUG_MESSAGE_FORMAT,"Secondary",getName(),uriStr));
    }
    receiver=(HttpMessageReceiver)findReceiverByStemConsideringMatchingHost(getReceivers(),uriStr);
    if (receiver == null && logger.isWarnEnabled()) {
      logger.warn(String.format(LOOKUP_DEBUG_MESSAGE_FORMAT,"No receiver found on secondary",getName(),uriStr));
      logger.warn("Receivers on connector are: " + MapUtils.toString(getReceivers(),true));
    }
  }
  if (receiver == null) {
    throw new NoReceiverForEndpointException(HttpMessages.noReceiverFoundForUrl(requestUriWithoutParams));
  }
  return receiver;
}
