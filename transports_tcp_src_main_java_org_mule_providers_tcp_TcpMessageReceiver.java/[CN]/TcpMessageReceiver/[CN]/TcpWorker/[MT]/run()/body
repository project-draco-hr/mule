{
  try {
    dataIn=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
    dataOut=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
    if (endpoint.isStreaming()) {
      CountDownLatch latch;
      if (endpoint.isSynchronous()) {
        latch=new CountDownLatch(2);
        dataOut=new CloseCountDownOutputStream(dataOut,latch);
      }
 else {
        latch=new CountDownLatch(2);
      }
      dataIn=new CloseCountDownInputStream(dataIn,latch);
      UMOMessageAdapter adapter=connector.getStreamMessageAdapter(dataIn,dataOut);
      routeMessage(new MuleMessage(adapter),endpoint.isSynchronous(),null);
      latch.await();
    }
 else {
      while (!socket.isClosed() && !disposing.get()) {
        try {
          Object readMsg=protocol.read(dataIn);
          if (readMsg == null) {
            break;
          }
          Object result=processData(readMsg);
          if (result != null) {
            protocol.write(dataOut,result);
          }
          dataOut.flush();
        }
 catch (        SocketTimeoutException e) {
          if (!socket.getKeepAlive()) {
            break;
          }
        }
      }
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
 finally {
    dispose();
  }
}
