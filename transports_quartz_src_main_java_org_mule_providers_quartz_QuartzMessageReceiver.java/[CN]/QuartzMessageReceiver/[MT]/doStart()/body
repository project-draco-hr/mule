{
  try {
    Scheduler scheduler=connector.getScheduler();
    JobDetail jobDetail=new JobDetail();
    jobDetail.setName(endpoint.getEndpointURI().toString());
    jobDetail.setJobClass(MuleReceiverJob.class);
    JobDataMap jobDataMap=new JobDataMap();
    jobDataMap.put(QUARTZ_RECEIVER_PROPERTY,this.getReceiverKey());
    jobDataMap.put(QUARTZ_CONNECTOR_PROPERTY,this.connector.getName());
    jobDataMap.putAll(endpoint.getProperties());
    jobDetail.setJobDataMap(jobDataMap);
    Trigger trigger=null;
    String cronExpression=jobDataMap.getString(QuartzConnector.PROPERTY_CRON_EXPRESSION);
    String repeatInterval=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_INTERVAL);
    String repeatCount=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_COUNT);
    String startDelay=jobDataMap.getString(QuartzConnector.PROPERTY_START_DELAY);
    String groupName=jobDataMap.getString(QuartzConnector.PROPERTY_GROUP_NAME);
    String jobGroupName=jobDataMap.getString(QuartzConnector.PROPERTY_JOB_GROUP_NAME);
    if (groupName == null) {
      groupName=QuartzConnector.DEFAULT_GROUP_NAME;
    }
    if (jobGroupName == null) {
      jobGroupName=groupName;
    }
    jobDetail.setGroup(groupName);
    if (cronExpression != null) {
      CronTrigger ctrigger=new CronTrigger();
      ctrigger.setCronExpression(cronExpression);
      trigger=ctrigger;
    }
 else     if (repeatInterval != null) {
      SimpleTrigger strigger=new SimpleTrigger();
      strigger.setRepeatInterval(Long.parseLong(repeatInterval));
      if (repeatCount != null) {
        strigger.setRepeatCount(Integer.parseInt(repeatCount));
      }
 else {
        strigger.setRepeatCount(-1);
      }
      trigger=strigger;
    }
 else {
      throw new IllegalArgumentException(new Message("quartz",1).getMessage());
    }
    long start=System.currentTimeMillis();
    if (startDelay != null) {
      start+=Long.parseLong(startDelay);
    }
    trigger.setStartTime(new Date(start));
    trigger.setName(endpoint.getEndpointURI().toString());
    trigger.setGroup(groupName);
    trigger.setJobName(endpoint.getEndpointURI().toString());
    trigger.setJobGroup(jobGroupName);
    try {
      scheduler.scheduleJob(jobDetail,trigger);
    }
 catch (    ObjectAlreadyExistsException oaee) {
    }
    scheduler.start();
  }
 catch (  Exception e) {
    throw new EndpointException(new Message(Messages.FAILED_TO_START_X,"Quartz receiver"),e);
  }
}
