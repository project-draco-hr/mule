{
  UMOTransaction tx=TransactionCoordination.getInstance().getTransaction();
  XaTransaction xaTransaction=null;
  if (tx instanceof XaTransaction) {
    xaTransaction=(XaTransaction)tx;
    session=connector.getSession(false);
    xaTransaction.enlistResource(((XASession)session).getXAResource());
  }
 else   if (tx instanceof JmsTransaction) {
    session=(Session)tx.getResource();
  }
 else   if (session == null) {
    session=connector.getSession(false);
  }
  boolean syncReceive=event.getBooleanProperty(MuleProperties.MULE_SYNCHRONOUS_RECEIVE_PROPERTY,MuleManager.getConfiguration().isSynchronousReceive());
  MessageConsumer replyToConsumer=null;
  UMOEndpointURI endpointUri=event.getEndpoint().getEndpointURI();
  boolean topic=false;
  String resourceInfo=endpointUri.getResourceInfo();
  topic=(resourceInfo != null && "topic".equalsIgnoreCase(resourceInfo));
  Destination dest=connector.getJmsSupport().createDestination(session,endpointUri.getAddress(),topic);
  Object message=event.getTransformedMessage();
  if (message instanceof Message) {
    Message msg=(Message)message;
    Destination replyTo=null;
    Object tempReplyTo=event.removeProperty("JMSReplyTo");
    if (tempReplyTo != null) {
      if (tempReplyTo instanceof Destination) {
        replyTo=(Destination)tempReplyTo;
      }
 else {
        boolean replyToTopic=false;
        String reply=tempReplyTo.toString();
        int i=reply.indexOf(":");
        if (i > -1) {
          String qtype=reply.substring(0,i);
          replyToTopic="topic".equalsIgnoreCase(qtype);
          reply=reply.substring(i + 1);
        }
        replyTo=connector.getJmsSupport().createDestination(session,reply,replyToTopic);
      }
      msg.setJMSReplyTo(replyTo);
    }
    if (syncReceive && replyTo == null) {
      replyTo=connector.getJmsSupport().createTemporaryDestination(session,topic);
      msg.setJMSReplyTo(replyTo);
    }
    if (replyTo != null) {
      replyToConsumer=connector.getJmsSupport().createConsumer(session,replyTo);
    }
    if (producer == null) {
      producer=connector.getJmsSupport().createProducer(session,dest);
    }
    String ttlString=(String)event.removeProperty("TimeToLive");
    String priorityString=(String)event.removeProperty("Priority");
    String deliveryModeString=(String)event.removeProperty("DeliveryMode");
    if (ttlString == null && priorityString == null && deliveryModeString == null) {
      connector.getJmsSupport().send(producer,msg);
    }
 else {
      long ttl=Message.DEFAULT_TIME_TO_LIVE;
      int priority=Message.DEFAULT_PRIORITY;
      int deliveryMode=Message.DEFAULT_DELIVERY_MODE;
      if (ttlString != null)       ttl=Long.parseLong(ttlString);
      if (priorityString != null)       priority=Integer.parseInt(priorityString);
      if (deliveryModeString != null)       deliveryMode=Integer.parseInt(deliveryModeString);
      connector.getJmsSupport().send(producer,msg,deliveryMode,priority,ttl);
    }
    if (xaTransaction != null) {
      xaTransaction.delistResource(((XASession)session).getXAResource(),XAResource.TMSUCCESS);
    }
    connector.commitTransaction(event);
    if (replyToConsumer != null && event.isSynchronous()) {
      try {
        int timeout=event.getTimeout();
        logger.debug("Waiting for return event for: " + timeout + " ms");
        Message result=replyToConsumer.receive(timeout);
        if (result == null) {
          logger.debug("No message was returned via replyTo destination");
          return null;
        }
 else {
          Object resultObject=JmsMessageUtils.getObjectForMessage(result);
          return new MuleMessage(resultObject,null);
        }
      }
  finally {
        replyToConsumer.close();
      }
    }
    return null;
  }
 else {
    throw new MuleException("Message is not a JMS message, it is of type: " + message.getClass().getName() + ". Check the transformer for this Connector: "+ connector.getName());
  }
}
