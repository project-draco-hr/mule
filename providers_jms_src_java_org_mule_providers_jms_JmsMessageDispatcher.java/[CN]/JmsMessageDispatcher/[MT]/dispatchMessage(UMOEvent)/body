{
  if (logger.isDebugEnabled()) {
    logger.debug("dispatching on endpoint: " + event.getEndpoint().getEndpointURI() + ". Event id is: "+ event.getId());
  }
  UMOTransaction tx=TransactionCoordination.getInstance().getTransaction();
  boolean transacted=false;
  if (tx == null) {
    transacted=event.getEndpoint().getTransactionConfig() != null;
  }
 else {
    transacted=(tx instanceof XaTransaction);
  }
  Session session=connector.getSession(tx != null);
  boolean syncReceive=event.getBooleanProperty(MuleProperties.MULE_SYNCHRONOUS_RECEIVE_PROPERTY,MuleManager.getConfiguration().isSynchronousReceive());
  if (tx != null && syncReceive) {
    throw new IllegalTransactionStateException("Jms connector does not support synchronous receive in transacted mode");
  }
  MessageConsumer replyToConsumer=null;
  UMOEndpointURI endpointUri=event.getEndpoint().getEndpointURI();
  boolean topic=false;
  String resourceInfo=endpointUri.getResourceInfo();
  topic=(resourceInfo != null && "topic".equalsIgnoreCase(resourceInfo));
  Destination dest=connector.getJmsSupport().createDestination(session,endpointUri.getAddress(),topic);
  Object message=event.getTransformedMessage();
  if (!(message instanceof Message)) {
    throw new MuleException("Message is not a JMS message, it is of type: " + message.getClass().getName() + ". Check the transformer for this Connector: "+ connector.getName());
  }
  Message msg=(Message)message;
  if (event.getMessage().getCorrelationId() != null) {
    msg.setJMSCorrelationID(event.getMessage().getCorrelationId());
  }
  Destination replyTo=null;
  Object tempReplyTo=event.removeProperty("JMSReplyTo");
  if (tempReplyTo != null) {
    if (tempReplyTo instanceof Destination) {
      replyTo=(Destination)tempReplyTo;
    }
 else {
      boolean replyToTopic=false;
      String reply=tempReplyTo.toString();
      int i=reply.indexOf(":");
      if (i > -1) {
        String qtype=reply.substring(0,i);
        replyToTopic="topic".equalsIgnoreCase(qtype);
        reply=reply.substring(i + 1);
      }
      replyTo=connector.getJmsSupport().createDestination(session,reply,replyToTopic);
    }
    msg.setJMSReplyTo(replyTo);
  }
  if (syncReceive && replyTo == null) {
    replyTo=connector.getJmsSupport().createTemporaryDestination(session,topic);
    msg.setJMSReplyTo(replyTo);
  }
  if (replyTo != null) {
    replyToConsumer=connector.getJmsSupport().createConsumer(session,replyTo);
  }
  if (producer == null) {
    producer=connector.getJmsSupport().createProducer(session,dest);
  }
  String ttlString=(String)event.removeProperty("TimeToLive");
  String priorityString=(String)event.removeProperty("Priority");
  String persistentDeliveryString=(String)event.removeProperty("PersistentDelivery");
  if (ttlString == null && priorityString == null && persistentDeliveryString == null) {
    connector.getJmsSupport().send(producer,msg);
  }
 else {
    long ttl=Message.DEFAULT_TIME_TO_LIVE;
    int priority=Message.DEFAULT_PRIORITY;
    boolean persistent=Message.DEFAULT_DELIVERY_MODE == DeliveryMode.PERSISTENT;
    if (ttlString != null)     ttl=Long.parseLong(ttlString);
    if (priorityString != null)     priority=Integer.parseInt(priorityString);
    if (persistentDeliveryString != null)     persistent=Boolean.valueOf(persistentDeliveryString).booleanValue();
    connector.getJmsSupport().send(producer,msg,persistent,priority,ttl);
  }
  if (replyToConsumer != null && event.isSynchronous()) {
    try {
      int timeout=event.getTimeout();
      logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
      Message result=replyToConsumer.receive(timeout);
      if (result == null) {
        logger.debug("No message was returned via replyTo destination");
        return null;
      }
 else {
        Object resultObject=JmsMessageUtils.getObjectForMessage(result);
        return new MuleMessage(resultObject,null);
      }
    }
  finally {
      replyToConsumer.close();
    }
  }
  return null;
}
