{
  if (logger.isDebugEnabled()) {
    logger.debug("dispatching on endpoint: " + event.getEndpoint().getEndpointURI() + ". Event id is: "+ event.getId());
  }
  Session txSession=null;
  Session session=null;
  MessageProducer producer=null;
  MessageConsumer consumer=null;
  try {
    txSession=connector.getCurrentSession();
    cacheSession=PropertiesHelper.getBooleanProperty(event.getProperties(),JmsConstants.CACHE_JMS_SESSIONS_PROPERTY,connector.isCacheJmsSessions());
    if (txSession != null) {
      cacheSession=false;
    }
    if (cacheSession) {
      if (cachedSession == null) {
        cachedSession=connector.getSession(event.getEndpoint());
      }
      session=cachedSession;
    }
 else {
      session=connector.getSession(event.getEndpoint());
    }
    boolean remoteSync=useRemoteSync(event);
    if (txSession != null && remoteSync) {
      throw new IllegalTransactionStateException(new org.mule.config.i18n.Message("jms",2));
    }
    UMOEndpointURI endpointUri=event.getEndpoint().getEndpointURI();
    boolean topic=false;
    String resourceInfo=endpointUri.getResourceInfo();
    topic=(resourceInfo != null && "topic".equalsIgnoreCase(resourceInfo));
    if (!topic) {
      topic=PropertiesHelper.getBooleanProperty(event.getEndpoint().getProperties(),"topic",false);
    }
    Destination dest=connector.getJmsSupport().createDestination(session,endpointUri.getAddress(),topic);
    producer=connector.getJmsSupport().createProducer(session,dest);
    Object message=event.getTransformedMessage();
    if (!(message instanceof Message)) {
      throw new DispatchException(new org.mule.config.i18n.Message(Messages.MESSAGE_NOT_X_IT_IS_TYPE_X_CHECK_TRANSFORMER_ON_X,"JMS message",message.getClass().getName(),connector.getName()),event.getMessage(),event.getEndpoint());
    }
    Message msg=(Message)message;
    if (event.getMessage().getCorrelationId() != null) {
      msg.setJMSCorrelationID(event.getMessage().getCorrelationId());
    }
    Destination replyTo=null;
    if (connector.getJmsSupport().supportsProperty(JmsConstants.JMS_REPLY_TO)) {
      Object tempReplyTo=event.removeProperty(JmsConstants.JMS_REPLY_TO);
      if (tempReplyTo != null) {
        if (tempReplyTo instanceof Destination) {
          replyTo=(Destination)tempReplyTo;
        }
 else {
          boolean replyToTopic=false;
          String reply=tempReplyTo.toString();
          int i=reply.indexOf(":");
          if (i > -1) {
            String qtype=reply.substring(0,i);
            replyToTopic="topic".equalsIgnoreCase(qtype);
            reply=reply.substring(i + 1);
          }
          replyTo=connector.getJmsSupport().createDestination(session,reply,replyToTopic);
        }
      }
      if (remoteSync && replyTo == null) {
        replyTo=connector.getJmsSupport().createTemporaryDestination(session,topic);
      }
      if (replyTo != null) {
        msg.setJMSReplyTo(replyTo);
      }
      if (remoteSync) {
        consumer=connector.getJmsSupport().createConsumer(session,replyTo);
      }
    }
    String ttlString=(String)event.removeProperty(JmsConstants.TIME_TO_LIVE_PROPERTY);
    String priorityString=(String)event.removeProperty(JmsConstants.PRIORITY_PROPERTY);
    String persistentDeliveryString=(String)event.removeProperty(JmsConstants.PERSISTENT_DELIVERY_PROPERTY);
    long ttl=Message.DEFAULT_TIME_TO_LIVE;
    int priority=Message.DEFAULT_PRIORITY;
    boolean persistent=Message.DEFAULT_DELIVERY_MODE == DeliveryMode.PERSISTENT;
    if (ttlString != null) {
      ttl=Long.parseLong(ttlString);
    }
    if (priorityString != null) {
      priority=Integer.parseInt(priorityString);
    }
    if (persistentDeliveryString != null) {
      persistent=Boolean.valueOf(persistentDeliveryString).booleanValue();
    }
    if (consumer != null && topic) {
      Latch l=new Latch();
      ReplyToListener listener=new ReplyToListener(l);
      consumer.setMessageListener(listener);
      connector.getJmsSupport().send(producer,msg,persistent,priority,ttl);
      int timeout=event.getTimeout();
      logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
      l.await(timeout,TimeUnit.MILLISECONDS);
      consumer.setMessageListener(null);
      listener.release();
      Message result=listener.getMessage();
      if (result == null) {
        logger.debug("No message was returned via replyTo destination");
        return null;
      }
 else {
        Object resultObject=JmsMessageUtils.getObjectForMessage(result);
        return new MuleMessage(resultObject);
      }
    }
 else {
      connector.getJmsSupport().send(producer,msg,persistent,priority,ttl);
      if (consumer != null) {
        int timeout=event.getTimeout();
        logger.debug("Waiting for return event for: " + timeout + " ms on "+ replyTo);
        Message result=consumer.receive(timeout);
        if (result == null) {
          logger.debug("No message was returned via replyTo destination");
          return null;
        }
 else {
          Object resultObject=JmsMessageUtils.getObjectForMessage(result);
          return new MuleMessage(resultObject);
        }
      }
    }
    return null;
  }
  finally {
    JmsUtils.closeQuietly(consumer);
    JmsUtils.closeQuietly(producer);
    if (session != null && session != txSession) {
      JmsUtils.closeQuietly(session);
    }
  }
}
