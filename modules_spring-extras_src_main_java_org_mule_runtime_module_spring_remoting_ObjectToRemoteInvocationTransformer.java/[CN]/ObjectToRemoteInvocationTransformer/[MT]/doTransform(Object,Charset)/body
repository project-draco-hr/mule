{
  if (src instanceof RemoteInvocation) {
    return src;
  }
  Object o=null;
  if (src instanceof InputStream) {
    try (ObjectInputStream ois=new ClassLoaderObjectInputStream(currentThread().getContextClassLoader(),(InputStream)src)){
      o=ois.readObject();
    }
 catch (    Exception e) {
      throw new TransformerException(this,e);
    }
  }
 else {
    byte[] data=(byte[])src;
    ByteArrayInputStream bais=new ByteArrayInputStream(data);
    try (ObjectInputStream ois=new ClassLoaderObjectInputStream(currentThread().getContextClassLoader(),bais)){
      o=ois.readObject();
    }
 catch (    Exception e) {
      throw new TransformerException(this,e);
    }
  }
  RemoteInvocation ri=(RemoteInvocation)o;
  if (logger.isDebugEnabled()) {
    logger.debug("request to execute " + ri.getMethodName());
    for (int i=0; i < ri.getArguments().length; i++) {
      Object currentArgument=ri.getArguments()[i];
      StringBuilder buf=new StringBuilder(64);
      buf.append("with argument (");
      buf.append(currentArgument == null ? "<null>" : currentArgument.toString());
      buf.append(")");
      logger.debug(buf.toString());
    }
  }
  return ri;
}
