{
  Map map=new HashMap(1);
  map.put("foo","far");
  map.put("boo","bar");
  map.put("zoo","zar");
  MuleMessage message=new DefaultMuleMessage(map,muleContext);
  assertTrue(muleContext.getExpressionManager().isValidExpression("#[mule:message.map-payload(foo)]"));
  Object result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(foo)]",message);
  assertNotNull(result);
  assertEquals("far",result);
  result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(foot?)]",message);
  assertNull(result);
  try {
    result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(fool)]",message);
    fail("Map payload does not contain property 'fool' but it is required");
  }
 catch (  ExpressionRuntimeException e) {
  }
  result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(foo, boo)]",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(2,((Map)result).size());
  result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(fool?, boo)]",message);
  assertNotNull(result);
  assertTrue(result instanceof Map);
  assertEquals(1,((Map)result).size());
  try {
    result=muleContext.getExpressionManager().evaluate("#[mule:message.map-payload(fool, boo)]",message);
    fail("Map payload does not contain property 'fool' but it is required");
  }
 catch (  ExpressionRuntimeException e) {
  }
}
