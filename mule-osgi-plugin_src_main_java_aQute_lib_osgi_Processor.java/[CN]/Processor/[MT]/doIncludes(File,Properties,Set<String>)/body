{
  String includes=p.getProperty(INCLUDE);
  if (includes != null) {
    includes=getReplacer().process(includes);
    p.remove(INCLUDE);
    Collection<String> clauses=parseHeader(includes).keySet();
    for (    String value : clauses) {
      boolean fileMustExist=true;
      boolean overwrite=true;
      while (true) {
        if (value.startsWith("-")) {
          fileMustExist=false;
          value=value.substring(1).trim();
        }
 else         if (value.startsWith("~")) {
          overwrite=false;
          value=value.substring(1).trim();
        }
 else         break;
      }
      try {
        File file=getFile(ubase,value).getAbsoluteFile();
        if (file.isFile()) {
          if (included != null && included.contains(file)) {
            error("Cyclic include of " + file);
          }
 else {
            addIncluded(file);
            updateModified(file.lastModified(),"Include " + value);
            InputStream in=new FileInputStream(file);
            Properties sub;
            if (file.getName().toLowerCase().endsWith(".mf")) {
              sub=getManifestAsProperties(in);
            }
 else             sub=loadProperties(in,file.getAbsolutePath());
            in.close();
            doIncludes(file.getParentFile(),sub,done);
            if (!overwrite)             sub.keySet().removeAll(p.keySet());
            p.putAll(sub);
          }
        }
 else {
          if (fileMustExist)           error("Included file " + file + (file.exists() ? " does not exist" : " is directory"));
        }
      }
 catch (      IOException e) {
        if (fileMustExist)         error("Error in processing included file: " + value,e);
      }
    }
  }
}
