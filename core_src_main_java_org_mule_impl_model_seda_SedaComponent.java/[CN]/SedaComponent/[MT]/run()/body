{
  MuleEvent event=null;
  MuleProxy proxy=null;
  QueueSession queueSession=managementContext.getQueueManager().getQueueSession();
  while (!stopped.get()) {
    try {
      paused.whenFalse(null);
      if (stopping.get()) {
        if (queueSession == null || queueSession.getQueue(descriptorQueueName).size() == 0) {
          stopping.set(false);
          break;
        }
      }
      event=(MuleEvent)dequeue();
      if (event != null) {
        if (stats.isEnabled()) {
          stats.decQueuedEvent();
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Component: " + descriptor.getName() + " dequeued event on: "+ event.getEndpoint().getEndpointURI());
        }
        if (proxyPool != null) {
          proxy=(MuleProxy)proxyPool.borrowObject();
          ((SedaComponentStatistics)getStatistics()).setComponentPoolSize(proxyPool.getSize());
        }
 else         if (componentPerRequest) {
          proxy=createComponentProxy();
        }
 else {
          proxy=componentProxy;
        }
        proxy.setStatistics(getStatistics());
        proxy.start();
        proxy.onEvent(queueSession,event);
        workManager.scheduleWork(proxy,WorkManager.INDEFINITE,null,this);
      }
    }
 catch (    Exception e) {
      if (isStopped() || isStopping()) {
        break;
      }
      if (proxy != null && proxyPool != null) {
        try {
          proxyPool.returnObject(proxy);
        }
 catch (        Exception e2) {
          logger.info("Failed to return proxy to pool",e2);
        }
      }
      if (e instanceof InterruptedException) {
        stopping.set(false);
        break;
      }
 else       if (e instanceof NoSuchElementException) {
        handleException(new ComponentException(new Message(Messages.PROXY_POOL_TIMED_OUT),(event == null ? null : event.getMessage()),this,e));
      }
 else       if (e instanceof UMOException) {
        handleException(e);
      }
 else       if (e instanceof WorkException) {
        handleException(new ComponentException(new Message(Messages.EVENT_PROCESSING_FAILED_FOR_X,descriptor.getName()),(event == null ? null : event.getMessage()),this,e));
      }
 else {
        handleException(new ComponentException(new Message(Messages.FAILED_TO_GET_POOLED_OBJECT),(event == null ? null : event.getMessage()),this,e));
      }
    }
 finally {
      stopping.set(false);
      if (proxy != null && componentPerRequest) {
        proxy.dispose();
      }
    }
  }
}
