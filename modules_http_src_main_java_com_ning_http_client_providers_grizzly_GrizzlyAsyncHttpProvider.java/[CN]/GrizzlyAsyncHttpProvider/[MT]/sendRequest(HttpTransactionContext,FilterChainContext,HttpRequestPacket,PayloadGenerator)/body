{
  final Connection connection=httpTxCtx.getConnection();
  final Request request=httpTxCtx.getAhcRequest();
  final AsyncHandler h=httpTxCtx.getAsyncHandler();
  final HttpContext httpCtx=new AhcHttpContext(connection,connection,connection,requestPacket,httpTxCtx);
  HttpTransactionContext.bind(httpCtx,httpTxCtx);
  requestPacket.getProcessingState().setHttpContext(httpCtx);
  httpCtx.attach(ctx);
  if (h instanceof TransferCompletionHandler) {
    final FluentCaseInsensitiveStringsMap map=new FluentCaseInsensitiveStringsMap(request.getHeaders());
    TransferCompletionHandler.class.cast(h).headers(map);
  }
  requestPacket.setConnection(ctx.getConnection());
  boolean isWriteComplete=true;
  if (payloadGenerator != null) {
    httpTxCtx.payloadGenerator=payloadGenerator;
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("REQUEST: " + requestPacket.toString());
    }
    isWriteComplete=payloadGenerator.generate(ctx,request,requestPacket);
  }
 else {
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("REQUEST: " + requestPacket.toString());
    }
    ctx.write(requestPacket,ctx.getTransportContext().getCompletionHandler());
  }
  return isWriteComplete;
}
