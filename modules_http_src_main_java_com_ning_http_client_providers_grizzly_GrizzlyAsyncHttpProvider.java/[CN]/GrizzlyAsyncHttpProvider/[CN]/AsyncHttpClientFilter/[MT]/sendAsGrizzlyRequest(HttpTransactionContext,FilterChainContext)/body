{
  final Connection connection=ctx.getConnection();
  final Request ahcRequest=httpTxCtx.getAhcRequest();
  if (isUpgradeRequest(httpTxCtx.getAsyncHandler()) && isWSRequest(httpTxCtx.requestUri)) {
    httpTxCtx.isWSRequest=true;
    convertToUpgradeRequest(httpTxCtx);
  }
  final Request req=httpTxCtx.getAhcRequest();
  final Method method=Method.valueOf(ahcRequest.getMethod());
  final Uri uri=req.getUri();
  boolean secure="https".equals(uri.getScheme());
  final ProxyServer proxy=ProxyUtils.getProxyServer(config,ahcRequest);
  final boolean useProxy=proxy != null;
  final boolean isEstablishingConnectTunnel=useProxy && (secure || httpTxCtx.isWSRequest) && !httpTxCtx.isTunnelEstablished(connection);
  if (isEstablishingConnectTunnel) {
    return establishConnectTunnel(proxy,httpTxCtx,uri,ctx);
  }
  final HttpRequestPacket.Builder builder=HttpRequestPacket.builder().protocol(Protocol.HTTP_1_1).method(method);
  if (useProxy) {
    if (secure || httpTxCtx.isWSRequest) {
      if (config.isUseRelativeURIsWithConnectProxies()) {
        builder.uri(getNonEmptyPath(uri));
        builder.query(uri.getQuery());
      }
 else {
        builder.uri(uri.toUrl());
      }
    }
 else {
      builder.uri(uri.toUrl());
    }
  }
 else {
    builder.uri(getNonEmptyPath(uri));
    builder.query(uri.getQuery());
  }
  HttpRequestPacket requestPacket;
  final PayloadGenerator payloadGenerator=isPayloadAllowed(method) ? PayloadGenFactory.getPayloadGenerator(ahcRequest) : null;
  if (payloadGenerator != null) {
    final long contentLength=ahcRequest.getContentLength();
    if (contentLength >= 0) {
      builder.contentLength(contentLength);
      builder.chunked(false);
    }
 else {
      builder.chunked(true);
    }
  }
  if (httpTxCtx.isWSRequest) {
    try {
      final URI wsURI=httpTxCtx.wsRequestURI.toJavaNetURI();
      secure="wss".equalsIgnoreCase(wsURI.getScheme());
      httpTxCtx.protocolHandler=Version.RFC6455.createHandler(true);
      httpTxCtx.handshake=httpTxCtx.protocolHandler.createClientHandShake(wsURI);
      requestPacket=(HttpRequestPacket)httpTxCtx.handshake.composeHeaders().getHttpHeader();
    }
 catch (    URISyntaxException e) {
      throw new IllegalArgumentException("Invalid WS URI: " + httpTxCtx.wsRequestURI);
    }
  }
 else {
    requestPacket=builder.build();
  }
  requestPacket.setSecure(secure);
  ctx.notifyDownstream(new SSLSwitchingEvent(secure,connection));
  copyHeaders(ahcRequest,requestPacket);
  addCookies(ahcRequest,requestPacket);
  addHostHeaderIfNeeded(ahcRequest,uri,requestPacket);
  addServiceHeaders(requestPacket);
  addAcceptHeaders(requestPacket);
  addAuthorizationHeader(connection,getRealm(ahcRequest),requestPacket);
  if (useProxy) {
    addProxyHeaders(proxy,requestPacket);
  }
  return sendRequest(httpTxCtx,ctx,requestPacket,wrapWithExpectHandlerIfNeeded(payloadGenerator,requestPacket));
}
