{
  final CountDownLatch messageProcessedLatch=new CountDownLatch(3);
  FunctionalTestComponent ftc=getFunctionalTestComponent("RouteByExceptionType");
  ftc.setEventCallback(new EventCallback(){
    public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      messageProcessedLatch.countDown();
      throw new RuntimeException();
    }
  }
);
  LocalMuleClient client=muleContext.getClient();
  client.dispatch("jms://in3?connector=jmsConnector",MESSAGE_TO_SEND,null);
  if (!messageProcessedLatch.await(TIMEOUT,java.util.concurrent.TimeUnit.MILLISECONDS)) {
    fail("Message never received by mule");
  }
  MuleMessage response=client.request("jms://dead.letter3?connector=jmsConnector",TIMEOUT);
  assertThat(response,IsNull.<Object>notNullValue());
  assertThat(response.getPayloadAsString(),is(MESSAGE_TO_SEND));
  assertThat(client.request("jms://exceptions?connector=jmsConnector",TIMEOUT),IsNull.<Object>notNullValue());
  assertThat(client.request("jms://exceptions?connector=jmsConnector",TIMEOUT),IsNull.notNullValue());
  MuleMessage exceptionResponse=client.request("jms://exceptions?connector=jmsConnector",TIMEOUT);
  assertThat(exceptionResponse,IsNull.<Object>notNullValue());
  assertThat(exceptionResponse.getPayload(),instanceOf(ExceptionMessage.class));
}
