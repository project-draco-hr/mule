{
  List results=new ArrayList();
  String fileName=env.getConfig().getOutputFilename();
  SAXBuilder builder=new SAXBuilder();
  builder.setValidation(true);
  builder.setEntityResolver(new MuleDtdResolver());
  Graph graph=GraphFactory.newGraph();
  builder.setIgnoringElementContentWhitespace(true);
  MuleParser muleParser=new MuleParser(env,builder);
  for (Iterator iterator=files.iterator(); iterator.hasNext(); ) {
    Object o=iterator.next();
    File myFile=null;
    if (o instanceof String) {
      myFile=new File(o.toString());
    }
 else     if (o instanceof File) {
      myFile=(File)o;
    }
    if (myFile != null) {
      env.log("**************** processing " + i + " of "+ files.size()+ 1+ " : "+ myFile.getCanonicalPath());
      if (fileName == null) {
        fileName=myFile.getName();
      }
      muleParser.parseMuleConfig(myFile,graph);
    }
 else     if (o instanceof InputStream) {
      muleParser.parseMuleConfig((InputStream)o,graph);
    }
 else     if (o instanceof Document) {
      muleParser.parseMuleConfig((Document)o,graph);
    }
 else {
      throw new IllegalArgumentException("Object cannot be processed, unrecognised format: " + o.getClass());
    }
    if (fileName == null) {
      fileName="mule-visualised";
    }
    if (files.size() > 1) {
      if (caption == null) {
        caption="(no caption set)";
      }
      graph.getInfo().setCaption(caption);
    }
    if (!env.getConfig().isCombineFiles()) {
      muleParser.finalise(graph);
      results.add(graphRenderer.saveGraph(graph,fileName,outputDir));
    }
  }
  if (env.getConfig().isCombineFiles()) {
    muleParser.finalise(graph);
    results=new ArrayList(1);
    results.add(graphRenderer.saveGraph(graph,fileName,outputDir));
  }
  return results;
}
