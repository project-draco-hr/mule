{
  String flowName="OAuthCallbackUrlFlow";
  final HttpListenerBuilder httpListenerBuilder=new HttpListenerBuilder(getMuleContext());
  if (getOauthConfig().getLocalCallbackUrl() != null) {
    flowName=flowName + getOauthConfig().getLocalCallbackUrl();
    try {
      httpListenerBuilder.setUrl(new URL(getOauthConfig().getLocalCallbackUrl()));
    }
 catch (    MalformedURLException e) {
      logger.warn("Could not parse provided url %s. Validate that the url is correct",getOauthConfig().getLocalCallbackUrl());
      throw new DefaultMuleException(e);
    }
  }
 else   if (getOauthConfig().getLocalCallbackConfig() != null) {
    flowName=flowName + getOauthConfig().getLocalCallbackConfig().getName() + "_"+ getOauthConfig().getLocalCallbackConfigPath();
    httpListenerBuilder.setListenerConfig(getOauthConfig().getLocalCallbackConfig()).setPath(getOauthConfig().getLocalCallbackConfigPath());
  }
  final Flow redirectUrlFlow=DynamicFlowFactory.createDynamicFlow(getMuleContext(),flowName,Arrays.asList(createRedirectUrlProcessor()));
  httpListenerBuilder.setFlow(redirectUrlFlow);
  if (getOauthConfig().getTlsContext() != null) {
    httpListenerBuilder.setTlsContextFactory(getOauthConfig().getTlsContext());
  }
  this.redirectUrlListener=httpListenerBuilder.build();
  this.redirectUrlListener.initialise();
  this.redirectUrlListener.start();
}
