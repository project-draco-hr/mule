{
  List<URL> urls;
  try {
    List<Dependency> managedDependencies=dependencyResolver.readArtifactDescriptor(pluginArtifact).getManagedDependencies();
    final DependencyFilter dependencyFilter=orFilter(classpathFilter(COMPILE),new PatternExclusionsDependencyFilter(context.getExcludedArtifacts()));
    urls=toUrl(dependencyResolver.resolveDependencies(new Dependency(pluginArtifact,COMPILE),Collections.<Dependency>emptyList(),managedDependencies,dependencyFilter));
  }
 catch (  Exception e) {
    throw new IllegalStateException("Couldn't resolve dependencies for plugin: '" + pluginArtifact + "' classification",e);
  }
  if (context.isExtensionMetadataGenerationEnabled()) {
    File generatedMetadataFolder=extensionPluginGenerator.generateExtensionManifest(pluginArtifact,urls);
    if (generatedMetadataFolder != null) {
      URL generatedTestResources=toUrl(generatedMetadataFolder);
      if (generatedTestResources != null) {
        List<URL> appendedTestResources=newArrayList(generatedTestResources);
        appendedTestResources.addAll(urls);
        urls=appendedTestResources;
      }
    }
  }
  return new PluginUrlClassification(toId(pluginArtifact),urls,newArrayList(context.getExportPluginClasses()));
}
