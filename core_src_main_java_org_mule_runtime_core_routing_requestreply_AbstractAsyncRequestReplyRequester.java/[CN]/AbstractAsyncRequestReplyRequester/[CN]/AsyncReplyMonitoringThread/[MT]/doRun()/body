{
  try {
    List<Serializable> ids=store.allKeys();
    logger.debug("Found " + ids.size() + " objects in store");
    for (    Serializable id : ids) {
      try {
        boolean deleteEvent=false;
        String correlationId=(String)id;
        if (isAlreadyProcessed(correlationId)) {
          deleteEvent=true;
          MuleEvent event=(MuleEvent)store.retrieve(correlationId);
          if (logger.isDebugEnabled()) {
            logger.debug("An event was received for an event group that has already been processed, " + "this is probably because the async-reply timed out. Correlation Id is: " + correlationId + ". Dropping event");
          }
          muleContext.fireNotification(new RoutingNotification(event.getMessage(),event.getMessageSourceURI().toString(),RoutingNotification.MISSED_ASYNC_REPLY));
        }
 else {
          Latch l=locks.get(correlationId);
          if (l != null) {
            MuleEvent event=retrieveEvent(correlationId);
            MuleEvent previousResult=responseEvents.putIfAbsent(correlationId,event);
            if (previousResult != null) {
              throw new IllegalStateException("Detected duplicate result message with id: " + correlationId);
            }
            addProcessed(correlationId);
            deleteEvent=true;
            l.countDown();
          }
        }
        if (deleteEvent) {
          store.remove(correlationId);
        }
      }
 catch (      Exception ex) {
        logger.debug("Error processing async replies",ex);
      }
    }
  }
 catch (  Exception ex) {
    logger.debug("Error processing async replies",ex);
  }
}
