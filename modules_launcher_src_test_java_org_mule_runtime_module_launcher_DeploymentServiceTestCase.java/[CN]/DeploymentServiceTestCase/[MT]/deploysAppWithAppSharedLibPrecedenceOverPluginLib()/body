{
  final ApplicationPluginFileBuilder echoPlugin1WithLib2=new ApplicationPluginFileBuilder("echoPlugin1").configuredWith(EXPORTED_CLASS_PACKAGES_PROPERTY,"org.foo").containingClass("org/foo/Plugin1Echo.clazz").usingLibrary("lib/bar-2.0.jar");
  final ApplicationFileBuilder sharedLibPluginAppPrecedenceFileBuilder=new ApplicationFileBuilder("shared-plugin-lib-precedence-app").definedBy("app-shared-lib-precedence-config.xml").containingPlugin(echoPlugin1WithLib2).sharingLibrary("lib/bar-1.0.jar");
  addPackedAppFromBuilder(sharedLibPluginAppPrecedenceFileBuilder);
  deploymentService.start();
  assertApplicationDeploymentSuccess(applicationDeploymentListener,sharedLibPluginAppPrecedenceFileBuilder.getId());
  assertAppsDir(NONE,new String[]{sharedLibPluginAppPrecedenceFileBuilder.getId()},true);
  assertApplicationAnchorFileExists(sharedLibPluginAppPrecedenceFileBuilder.getId());
  Application application=deploymentService.getApplications().get(0);
  Flow mainFlow=(Flow)application.getMuleContext().getRegistry().lookupFlowConstruct("main");
  MuleMessage muleMessage=MuleMessage.builder().payload(TEST_MESSAGE).build();
  mainFlow.process(new DefaultMuleEvent(muleMessage,MessageExchangePattern.REQUEST_RESPONSE,mainFlow));
}
