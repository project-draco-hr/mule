{
  if (object instanceof Message) {
    return (Message)object;
  }
 else   if (object instanceof String) {
    return session.createTextMessage((String)object);
  }
 else   if (object instanceof Map<?,?> && validateMapMessageType((Map<?,?>)object)) {
    MapMessage mMsg=session.createMapMessage();
    Map<?,?> src=(Map<?,?>)object;
    for (Iterator<?> i=src.entrySet().iterator(); i.hasNext(); ) {
      Map.Entry<?,?> entry=(Map.Entry<?,?>)i.next();
      mMsg.setObject(entry.getKey().toString(),entry.getValue());
    }
    return mMsg;
  }
 else   if (object instanceof InputStream) {
    StreamMessage streamMessage=session.createStreamMessage();
    InputStream temp=(InputStream)object;
    byte[] buffer=new byte[4096];
    int len;
    try {
      while ((len=temp.read(buffer)) != -1) {
        streamMessage.writeBytes(buffer,0,len);
      }
    }
 catch (    IOException e) {
      throw new JMSException("Failed to read input stream to create a stream message: " + e);
    }
 finally {
      IOUtils.closeQuietly(temp);
    }
    return streamMessage;
  }
 else   if (object instanceof List<?>) {
    StreamMessage sMsg=session.createStreamMessage();
    List<?> list=(List<?>)object;
    for (Iterator<?> iter=list.iterator(); iter.hasNext(); ) {
      Object o=iter.next();
      if (validateStreamMessageType(o)) {
        sMsg.writeObject(o);
      }
 else {
        throw new MessageFormatException(String.format("Invalid type passed to StreamMessage: %s . Allowed types are: " + "Boolean, Byte, Short, Character, Integer, Long, Float, Double," + "String and byte[]",ClassUtils.getShortClassName(o,"null")));
      }
    }
    return sMsg;
  }
 else   if (object instanceof byte[]) {
    BytesMessage bMsg=session.createBytesMessage();
    bMsg.writeBytes((byte[])object);
    return bMsg;
  }
 else   if (object instanceof Serializable) {
    ObjectMessage oMsg=session.createObjectMessage();
    oMsg.setObject((Serializable)object);
    return oMsg;
  }
 else   if (object instanceof OutputHandler) {
    ByteArrayOutputStream output=new ByteArrayOutputStream();
    try {
      ((OutputHandler)object).write(null,output);
    }
 catch (    IOException e) {
      JMSException j=new JMSException("Could not serialize OutputHandler.");
      j.initCause(e);
      throw j;
    }
    BytesMessage bMsg=session.createBytesMessage();
    bMsg.writeBytes(output.toByteArray());
    return bMsg;
  }
 else {
    throw new JMSException("Source was not of a supported type, data must be Serializable, String, byte[], Map or InputStream, " + "but was " + ClassUtils.getShortClassName(object,"<null>"));
  }
}
