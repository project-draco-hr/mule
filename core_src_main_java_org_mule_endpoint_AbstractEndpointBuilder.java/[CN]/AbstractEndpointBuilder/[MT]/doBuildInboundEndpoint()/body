{
  String uri=uriBuilder.getConstructor();
  if (muleContext.getExpressionManager().isExpression(uri)) {
    throw new MalformedEndpointException(CoreMessages.dynamicEndpointURIsCannotBeUsedOnInbound(),uri);
  }
  prepareToBuildEndpoint();
  EndpointURI endpointURI=uriBuilder.getEndpoint();
  endpointURI.initialise();
  List<MessageProcessor> mergedProcessors=addTransformerProcessors(endpointURI);
  List<MessageProcessor> mergedResponseProcessors=addResponseTransformerProcessors(endpointURI);
  Connector connector=getConnector();
  if (connector != null && !connector.supportsProtocol(endpointURI.getFullScheme())) {
    throw new IllegalArgumentException(CoreMessages.connectorSchemeIncompatibleWithEndpointScheme(connector.getProtocol(),endpointURI).getMessage());
  }
  checkInboundExchangePattern();
  for (  MessageProcessor mp : messageProcessors) {
    if (mp instanceof MessageFilter) {
      ((MessageFilter)mp).setThrowOnUnaccepted(true);
    }
  }
  DefaultInboundEndpoint inboundEndpoint=new DefaultInboundEndpoint(connector,endpointURI,getName(endpointURI),getProperties(),getTransactionConfig(),getDefaultDeleteUnacceptedMessages(connector),messageExchangePattern,getResponseTimeout(connector),getInitialState(connector),getEndpointEncoding(connector),name,muleContext,getRetryPolicyTemplate(connector),getRedeliveryPolicy(),getMessageProcessorsFactory(),mergedProcessors,mergedResponseProcessors,isDisableTransportTransformer(),mimeType);
  inboundEndpoint.setAnnotations(getAnnotations());
  return inboundEndpoint;
}
