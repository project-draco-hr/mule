{
  return new EventCorrelatorCallback(){
    public boolean shouldAggregateEvents(    EventGroup events){
      eventCount++;
      if (eventCount == eventThreshold) {
        eventCount=0;
        return true;
      }
      return false;
    }
    public EventGroup createEventGroup(    MuleEvent event,    Object groupId){
      return new EventGroup(groupId,muleContext,eventThreshold,false,this.getClass().getName());
    }
    public MuleEvent aggregateEvents(    EventGroup events) throws AggregationException {
      if (events.size() != eventThreshold) {
        throw new IllegalStateException("eventThreshold not yet reached?");
      }
      StringBuffer newPayload=new StringBuffer(80);
      try {
        for (Iterator iterator=events.iterator(false); iterator.hasNext(); ) {
          MuleEvent event=(MuleEvent)iterator.next();
          try {
            newPayload.append(event.getMessageAsString()).append(" ");
          }
 catch (          MuleException e) {
            throw new AggregationException(events,next,e);
          }
        }
      }
 catch (      ObjectStoreException e) {
        throw new AggregationException(events,next,e);
      }
      return new DefaultMuleEvent(new DefaultMuleMessage(newPayload.toString(),muleContext),events.getMessageCollectionEvent());
    }
  }
;
}
