{
  Service testService=getTestService("test",Apple.class);
  MuleSession session=getTestSession(testService,muleContext);
  TestEventAggregator router=new TestEventAggregator(3);
  router.setMuleContext(muleContext);
  router.setFlowConstruct(testService);
  router.initialise();
  MuleMessage message1=new DefaultMuleMessage("test event A",muleContext);
  MuleMessage message2=new DefaultMuleMessage("test event B",muleContext);
  MuleMessage message3=new DefaultMuleMessage("test event C",muleContext);
  message1.setCorrelationId(message1.getUniqueId());
  message2.setCorrelationId(message1.getUniqueId());
  message3.setCorrelationId(message1.getUniqueId());
  InboundEndpoint endpoint=MuleTestUtils.getTestInboundEndpoint(MessageExchangePattern.ONE_WAY,muleContext);
  MuleEvent event1=new DefaultMuleEvent(message1,endpoint,testService,session);
  MuleEvent event2=new DefaultMuleEvent(message2,endpoint,testService,session);
  MuleEvent event3=new DefaultMuleEvent(message3,endpoint,testService,session);
  assertNull(router.process(event1));
  assertNull(router.process(event2));
  MuleEvent result=router.process(event3);
  assertNotNull(result);
  assertTrue(result.getMessageAsString().contains("test event A"));
  assertTrue(result.getMessageAsString().contains("test event B"));
  assertTrue(result.getMessageAsString().contains("test event C"));
  assertTrue(result.getMessageAsString().matches("test event [A,B,C] test event [A,B,C] test event [A,B,C] "));
}
