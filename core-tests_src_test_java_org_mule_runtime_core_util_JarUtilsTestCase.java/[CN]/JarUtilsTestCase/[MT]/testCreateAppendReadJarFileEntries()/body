{
  File jarFile=null;
  File jarEntryFile=null;
  try {
    String jarEntryString="testString";
    jarEntryFile=File.createTempFile("test","file");
    byte[] jarEntryBytes=jarEntryString.getBytes();
    LinkedHashMap jarEntries=new LinkedHashMap();
    jarEntries.put("META-INF/string",jarEntryString);
    jarEntries.put("META-INF/file",jarEntryFile);
    jarEntries.put("META-INF/byte",jarEntryBytes);
    jarFile=File.createTempFile("test",".jar");
    assertTrue(jarFile.delete());
    JarUtils.createJarFileEntries(jarFile,jarEntries);
    LinkedHashMap additionalJarEntries=new LinkedHashMap();
    additionalJarEntries.put("META-INF/append/string",jarEntryString);
    jarEntries.put("META-INF/append/string",jarEntryString);
    JarUtils.appendJarFileEntries(jarFile,additionalJarEntries);
    LinkedHashMap readJarEntries=JarUtils.readJarFileEntries(jarFile);
    assertEquals(jarEntries.size(),readJarEntries.size());
    Iterator jarEntryIter=jarEntries.keySet().iterator();
    Iterator readJarEntryIter=readJarEntries.keySet().iterator();
    while (jarEntryIter.hasNext()) {
      String jarEntryPath=(String)jarEntryIter.next();
      String readJarEntryPath=(String)readJarEntryIter.next();
      assertNotNull(jarEntryPath);
      assertNotNull(readJarEntryPath);
      assertEquals(jarEntryPath,readJarEntryPath);
      Object jarEntry=jarEntries.get(jarEntryPath);
      Object readJarEntry=jarEntries.get(readJarEntryPath);
      if (jarEntry instanceof String || jarEntry instanceof File) {
        assertEquals(jarEntry,readJarEntry);
      }
 else       if (jarEntry instanceof byte[]) {
        assertTrue(Arrays.equals((byte[])jarEntry,(byte[])readJarEntry));
      }
 else {
        fail("Unsupported jar entry read for " + jarEntryPath);
      }
    }
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
 finally {
    if (jarFile != null) {
      jarFile.delete();
    }
    if (jarEntryFile != null) {
      jarEntryFile.delete();
    }
  }
}
