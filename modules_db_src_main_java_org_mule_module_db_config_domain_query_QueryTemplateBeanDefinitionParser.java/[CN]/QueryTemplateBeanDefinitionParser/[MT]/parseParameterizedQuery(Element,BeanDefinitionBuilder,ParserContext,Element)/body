{
  NodeList childNodes=sqlElem.getChildNodes();
  String sqlText;
  boolean hasFileAttribute=sqlElem.hasAttribute(FILE_ATTRIBUTE);
  boolean hasTextContent=!element.getTextContent().isEmpty();
  if (hasFileAttribute && hasTextContent) {
    throw new IllegalArgumentException(String.format("Element %s cannot contain attribute file and text content simultaneously",element.getTagName()));
  }
  if (hasFileAttribute) {
    String fileName=sqlElem.getAttribute(FILE_ATTRIBUTE);
    try {
      sqlText=IOUtils.getResourceAsString(fileName,getClass());
    }
 catch (    IOException e) {
      throw new IllegalStateException("Unable to read query from file: " + fileName);
    }
  }
 else {
    sqlText=childNodes.item(0).getNodeValue();
  }
  SimpleQueryTemplateParser simpleQueryParser=new SimpleQueryTemplateParser();
  QueryTemplate queryTemplate=simpleQueryParser.parse(sqlText);
  if (queryTemplate.getParams().size() > 0 && !queryTemplate.usesNamedParameters()) {
    throw new IllegalArgumentException("Templates do not support inline parameters");
  }
 else {
    builder.addConstructorArgValue(queryTemplate.getSqlText());
    builder.addConstructorArgValue(queryTemplate.getType());
    element.removeChild(sqlElem);
    List<Object> params=new ManagedList<Object>();
    List<Element> childElementsByTagName=DomUtils.getChildElementsByTagName(element,IN_PARAM_ELEMENT);
    if (queryTemplate.usesNamedParameters()) {
      for (      InputQueryParam inputSqlParam : queryTemplate.getInputParams()) {
        Element param=findOverriddenParamElement(inputSqlParam.getName(),childElementsByTagName);
        if (param == null) {
          params.add(inputSqlParam);
        }
 else {
          BeanDefinition paramBean=parseParameter(nestedCtx,param);
          params.add(paramBean);
        }
      }
    }
 else {
      for (      Element param : childElementsByTagName) {
        BeanDefinition paramBean=parseParameter(nestedCtx,param);
        params.add(paramBean);
      }
    }
    builder.addConstructorArgValue(params);
  }
}
