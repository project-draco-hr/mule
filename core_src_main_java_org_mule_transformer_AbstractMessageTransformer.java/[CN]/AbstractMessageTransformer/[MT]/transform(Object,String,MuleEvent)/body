{
  DataType<?> sourceType=DataTypeFactory.create(src.getClass());
  if (!isSourceDataTypeSupported(sourceType)) {
    if (isIgnoreBadInput()) {
      logger.debug("Source type is incompatible with this transformer and property 'ignoreBadInput' is set to true, so the transformer chain will continue.");
      return src;
    }
 else {
      Message msg=CoreMessages.transformOnObjectUnsupportedTypeOfEndpoint(getName(),src.getClass(),endpoint);
      throw new TransformerMessagingException(msg,event,this);
    }
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Applying transformer %s (%s)",getName(),getClass().getName()));
    logger.debug(String.format("Object before transform: %s",StringMessageUtils.toString(src)));
  }
  MuleMessage message;
  if (src instanceof MuleMessage) {
    message=(MuleMessage)src;
  }
 else   if (muleContext.getConfiguration().isAutoWrapMessageAwareTransform()) {
    message=new DefaultMuleMessage(src,muleContext);
  }
 else {
    if (event == null) {
      throw new TransformerMessagingException(CoreMessages.noCurrentEventForTransformer(),event,this);
    }
    message=event.getMessage();
    if (!message.getPayload().equals(src)) {
      throw new IllegalStateException("Transform payload does not match current event");
    }
  }
  Object result=transformMessage(message,enc,event);
  if (result == null) {
    result=NullPayload.getInstance();
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format("Object after transform: %s",StringMessageUtils.toString(result)));
  }
  result=checkReturnClass(result,event);
  return result;
}
