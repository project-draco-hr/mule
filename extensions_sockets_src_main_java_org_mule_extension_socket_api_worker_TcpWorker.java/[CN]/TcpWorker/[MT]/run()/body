{
  while (hasMoreMessages()) {
    InputStream content;
    try {
      content=getNextMessage();
    }
 catch (    IOException e) {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("An error occurred while reading from the TCP Worker connection",e);
      }
      moreMessages.set(false);
      break;
    }
    if (content == null) {
      moreMessages.set(false);
      break;
    }
    SocketAttributes attributes=new ImmutableSocketAttributes(socket);
    messageHandler.handle(createMuleMessage(content,attributes),new CompletionHandler<MuleEvent,Exception,MuleEvent>(){
      @Override public void onCompletion(      MuleEvent muleEvent,      ExceptionCallback<MuleEvent,Exception> exceptionCallback){
        try {
          protocol.write(dataOut,muleEvent.getMessage().getPayload().getValue(),encoding);
          dataOut.flush();
        }
 catch (        IOException e) {
          exceptionCallback.onException(new IOException(format("An error occurred while sending TCP response to address '%s'",socket.getRemoteSocketAddress().toString(),e)));
        }
      }
      @Override public void onFailure(      Exception e){
        LOGGER.error("TCP worker will not answer back due an exception was received",e);
        moreMessages.set(false);
      }
    }
);
  }
}
