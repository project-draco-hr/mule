{
  MuleSession session=new DefaultMuleSession();
  Flow flow=getTestFlowWithComponent("test",Apple.class);
  assertNotNull(flow);
  TestEventResequencer router=new TestEventResequencer(3);
  router.setMuleContext(muleContext);
  router.setFlowConstruct(flow);
  router.initialise();
  EventContext context=DefaultEventContext.create(flow,TEST_CONNECTOR,"foo");
  InternalMessage message1=InternalMessage.builder().payload("test event A").build();
  InternalMessage message2=InternalMessage.builder().payload("test event B").build();
  InternalMessage message3=InternalMessage.builder().payload("test event C").build();
  Event event1=Event.builder(context).message(message1).flow(getTestFlow(muleContext)).session(session).build();
  Event event2=Event.builder(context).message(message2).flow(getTestFlow(muleContext)).session(session).build();
  Event event3=Event.builder(context).message(message3).flow(getTestFlow(muleContext)).session(session).build();
  assertNull(router.process(event2));
  assertNull(router.process(event3));
  Event resultEvent=router.process(event1);
  assertNotNull(resultEvent);
  InternalMessage resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  assertTrue(getPayloadAsString(resultMessage).equals("test event A") || getPayloadAsString(resultMessage).equals("test event B") || getPayloadAsString(resultMessage).equals("test event C"));
}
