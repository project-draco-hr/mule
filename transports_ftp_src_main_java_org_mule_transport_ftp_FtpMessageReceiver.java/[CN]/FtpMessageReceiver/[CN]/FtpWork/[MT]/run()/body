{
  FTPClient client=null;
  MuleMessage muleMessage=null;
  try {
    client=connector.createFtpClient(endpoint);
    final FTPClient finalClient=client;
    currentFiles.add(name);
    if (!connector.validateFile(file)) {
      return;
    }
    FtpMuleMessageFactory muleMessageFactory=createMuleMessageFactory(finalClient);
    final MuleMessage finalMessage=muleMessageFactory.create(file,endpoint.getEncoding());
    muleMessage=finalMessage;
    ProcessingTemplate<MuleEvent> processingTemplate=createProcessingTemplate();
    processingTemplate.execute(new ProcessingCallback<MuleEvent>(){
      @Override public MuleEvent process() throws Exception {
        routeMessage(finalMessage);
        return null;
      }
    }
);
    postProcess(finalClient,file,finalMessage);
  }
 catch (  MessagingException e) {
    if (!e.isCauseRollback()) {
      try {
        postProcess(client,file,muleMessage);
      }
 catch (      Exception e1) {
        logger.error(e);
      }
    }
  }
catch (  Exception e) {
    getConnector().getMuleContext().getExceptionListener().handleException(e);
  }
 finally {
    if (client != null) {
      try {
        connector.releaseFtp(endpoint.getEndpointURI(),client);
      }
 catch (      Exception e) {
        logger.error(e);
      }
    }
    currentFiles.remove(name);
    scheduledFiles.remove(name);
  }
}
