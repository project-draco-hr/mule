{
  String json="{\n" + "  \"cust:customer\" : {\n" + "    \"@xmlns:cust\" : \"http:customer.com\",\n"+ "    \"cust:id\" : \"112\",\n"+ "    \"cust:first-name\" : \"Jane\",\n"+ "    \"cust:last-name\" : \"Doe\",\n"+ "    \"cust:address\" : {\n"+ "      \"cust:street\" : \"123 A Street\"\n"+ "    },\n"+ "    \"cust:phone-number\" : [ {\n"+ "      \"@type\" : \"work\",\n"+ "      \"$\" : \"555-1111\"\n"+ "    }, {\n"+ "      \"@type\" : \"cell\",\n"+ "      \"$\" : \"555-2222\"\n"+ "    } ]\n"+ "  }\n"+ "}";
  String badJson="{\n" + "  \"cust:customer\" : {\n" + "    \"@xmlns:cust\" : \"http:customer.com\",\n"+ "    \"cust:ID\" : \"112\",\n"+ "    \"cust:first-name\" : \"Jane\",\n"+ "    \"cust:last-name\" : \"Doe\",\n"+ "    \"cust:address\" : {\n"+ "      \"cust:street\" : \"123 A Street\"\n"+ "    },\n"+ "    \"cust:phone-number\" : [ {\n"+ "      \"@type\" : \"work\",\n"+ "      \"$\" : \"555-1111\"\n"+ "    }, {\n"+ "      \"@type\" : \"cell\",\n"+ "      \"$\" : \"555-2222\"\n"+ "    } ]\n"+ "  }\n"+ "}";
  String xml="<?xml version=\"1.0\" ?>\n" + "<cust:customer xmlns:cust=\"http:customer.com\">\n" + "\t<cust:id>112</cust:id>\n"+ "\t<cust:first-name>Jane</cust:first-name>\n"+ "\t<cust:last-name>Doe</cust:last-name>\n"+ "\t<cust:address>\n"+ "\t\t<cust:street>123 A Street</cust:street>\n"+ "\t</cust:address>\n"+ "\t<cust:phone-number type=\"work\">555-1111</cust:phone-number>\n"+ "\t<cust:phone-number type=\"cell\">555-2222</cust:phone-number>\n"+ "</cust:customer>\n";
  XmlToJson xToJ=new XmlToJson();
  String jsonResponse=(String)xToJ.transform(xml);
  jsonResponse=jsonResponse.replaceAll("\r\n","\n");
  assertEquals(json,jsonResponse);
  JsonSchemaValidationFilter filter=new JsonSchemaValidationFilter();
  filter.setSchemaLocations("customer.xsd");
  filter.setErrorHandler(new ErrorHandler(){
    @Override public void warning(    SAXParseException exception) throws SAXException {
    }
    @Override public void error(    SAXParseException exception) throws SAXException {
      numErrors++;
    }
    @Override public void fatalError(    SAXParseException exception) throws SAXException {
      numErrors++;
    }
  }
);
  filter.setResourceResolver(new Resolver());
  filter.setReturnResult(true);
  filter.setMuleContext(muleContext);
  filter.initialise();
  MuleMessage msg=new DefaultMuleMessage(json,muleContext);
  boolean accepted=filter.accept(msg);
  assertTrue(accepted);
  assertEquals(json,((String)msg.getPayload()).replaceAll("\r\n","\n"));
  msg=new DefaultMuleMessage(new StringReader(json),muleContext);
  accepted=filter.accept(msg);
  assertTrue(accepted);
  assertEquals(json,((String)msg.getPayload()).replaceAll("\r\n","\n"));
  msg=new DefaultMuleMessage(json.getBytes(),muleContext);
  accepted=filter.accept(msg);
  assertTrue(accepted);
  assertEquals(json,((String)msg.getPayload()).replaceAll("\r\n","\n"));
  msg=new DefaultMuleMessage(new ByteArrayInputStream(json.getBytes()),muleContext);
  accepted=filter.accept(msg);
  assertTrue(accepted);
  assertEquals(json,((String)msg.getPayload()).replaceAll("\r\n","\n"));
  msg=new DefaultMuleMessage(badJson,muleContext);
  accepted=filter.accept(msg);
  assertTrue(!accepted);
}
