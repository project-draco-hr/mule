{
  Session session=null;
  MessageConsumer consumer=null;
  try {
    final boolean topic=connector.getTopicResolver().isTopic(endpoint);
    JmsSupport support=connector.getJmsSupport();
    session=connector.getSession(false,topic);
    Destination dest=support.createDestination(session,endpoint.getEndpointURI().getAddress(),topic);
    String selector=null;
    if (endpoint.getFilter() != null && endpoint.getFilter() instanceof JmsSelectorFilter) {
      selector=((JmsSelectorFilter)endpoint.getFilter()).getExpression();
    }
 else     if (endpoint.getProperties() != null) {
      selector=(String)endpoint.getProperties().get(JmsConstants.JMS_SELECTOR_PROPERTY);
    }
    String tempDurable=(String)endpoint.getProperties().get(JmsConstants.DURABLE_PROPERTY);
    boolean durable=connector.isDurable();
    if (tempDurable != null) {
      durable=Boolean.valueOf(tempDurable).booleanValue();
    }
    String durableName=(String)endpoint.getProperties().get(JmsConstants.DURABLE_NAME_PROPERTY);
    if (durableName == null && durable && topic) {
      durableName="mule." + connector.getName() + "."+ endpoint.getEndpointURI().getAddress();
      if (logger.isDebugEnabled()) {
        logger.debug("Jms Connector for this receiver is durable but no durable name has been specified. Defaulting to: " + durableName);
      }
    }
    consumer=support.createConsumer(session,dest,selector,connector.isNoLocal(),durableName,topic);
    try {
      Message message;
      if (timeout == JmsMessageDispatcher.RECEIVE_NO_WAIT) {
        message=consumer.receiveNoWait();
      }
 else       if (timeout == JmsMessageDispatcher.RECEIVE_WAIT_INDEFINITELY) {
        message=consumer.receive();
      }
 else {
        message=consumer.receive(timeout);
      }
      if (message == null) {
        return null;
      }
      message=connector.preProcessMessage(message,session);
      return new DefaultMuleMessage(connector.getMessageAdapter(message));
    }
 catch (    Exception e) {
      connector.handleException(e);
      return null;
    }
  }
  finally {
    connector.closeQuietly(consumer);
    connector.closeQuietly(session);
  }
}
