{
  Session session=null;
  MessageConsumer consumer=null;
  boolean cleanupListenerRegistered=false;
  try {
    final boolean topic=connector.getTopicResolver().isTopic(endpoint);
    JmsSupport support=connector.getJmsSupport();
    final TransactionConfig transactionConfig=endpoint.getTransactionConfig();
    final Transaction tx=TransactionCoordination.getInstance().getTransaction();
    boolean transacted=transactionConfig != null && transactionConfig.isTransacted();
    session=connector.getSession(transacted,topic);
    if (transacted && !tx.isXA()) {
      final Session finalSession=session;
      getConnector().getMuleContext().registerListener(new TransactionNotificationListener<TransactionNotification>(){
        public void onNotification(        TransactionNotification txNotification){
          final int txAction=txNotification.getAction();
          final String txId=txNotification.getTransactionStringId();
          if ((txAction == TransactionNotification.TRANSACTION_COMMITTED || txAction == TransactionNotification.TRANSACTION_ROLLEDBACK) && txId.equals(tx.getId())) {
            connector.closeQuietly(finalSession);
          }
        }
      }
,tx.getId());
      cleanupListenerRegistered=true;
    }
    Destination dest=support.createDestination(session,endpoint);
    String selector=null;
    if (endpoint.getFilter() != null && endpoint.getFilter() instanceof JmsSelectorFilter) {
      final String expressionTemplate=((JmsSelectorFilter)endpoint.getFilter()).getExpression();
      if (StringUtils.isNotBlank(expressionTemplate)) {
        selector=connector.getMuleContext().getExpressionManager().parse(expressionTemplate,null);
      }
    }
 else     if (endpoint.getProperties() != null) {
      final String expressionTemplate=(String)endpoint.getProperty(JmsConstants.JMS_SELECTOR_PROPERTY);
      if (StringUtils.isNotBlank(expressionTemplate)) {
        selector=connector.getMuleContext().getExpressionManager().parse(expressionTemplate,null);
      }
    }
    String tempDurable=(String)endpoint.getProperties().get(JmsConstants.DURABLE_PROPERTY);
    boolean durable=connector.isDurable();
    if (tempDurable != null) {
      durable=Boolean.valueOf(tempDurable);
    }
    String durableName=(String)endpoint.getProperties().get(JmsConstants.DURABLE_NAME_PROPERTY);
    if (durableName == null && durable && topic) {
      durableName="mule." + connector.getName() + "."+ endpoint.getEndpointURI().getAddress();
      if (logger.isDebugEnabled()) {
        logger.debug("Jms Connector for this receiver is durable but no durable name has been specified. Defaulting to: " + durableName);
      }
    }
    consumer=support.createConsumer(session,dest,selector,connector.isNoLocal(),durableName,topic);
    try {
      Message message;
      if (timeout == JmsMessageDispatcher.RECEIVE_NO_WAIT) {
        message=consumer.receiveNoWait();
      }
 else       if (timeout == JmsMessageDispatcher.RECEIVE_WAIT_INDEFINITELY) {
        message=consumer.receive();
      }
 else {
        message=consumer.receive(timeout);
      }
      if (message == null) {
        return null;
      }
      message=connector.preProcessMessage(message,session);
      return new DefaultMuleMessage(connector.getMessageAdapter(message),connector.getMuleContext());
    }
 catch (    Exception e) {
      connector.handleException(e);
      return null;
    }
  }
  finally {
    if (!cleanupListenerRegistered) {
      connector.closeQuietly(consumer);
      connector.closeQuietly(session);
    }
  }
}
