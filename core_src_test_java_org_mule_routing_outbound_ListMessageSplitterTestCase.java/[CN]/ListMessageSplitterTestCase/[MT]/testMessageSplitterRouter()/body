{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getFlowConstruct",null);
  session.matchAndReturn("setFlowConstruct",RouterTestUtils.getArgListCheckerFlowConstruct(),null);
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1endpoint","test://endpointUri.1",null,new PayloadTypeFilter(Apple.class),null);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Endpoint","test://endpointUri.2",null,new PayloadTypeFilter(Orange.class),null);
  OutboundEndpoint endpoint3=getTestOutboundEndpoint("Test3Endpoint","test://endpointUri.3");
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  Mock mockendpoint3=RouterTestUtils.getMockEndpoint(endpoint3);
  OutboundEndpoint endpoint4=getTestOutboundEndpoint("Test4endpoint","test://endpointUri.4?synchronous=true",null,new PayloadTypeFilter(Apple.class),null);
  OutboundEndpoint endpoint5=getTestOutboundEndpoint("Test5Endpoint","test://endpointUri.5?synchronous=true",null,new PayloadTypeFilter(Orange.class),null);
  OutboundEndpoint endpoint6=getTestOutboundEndpoint("Test6Endpoint","test://endpointUri.6?synchronous=true");
  Mock mockendpoint4=RouterTestUtils.getMockEndpoint(endpoint4);
  Mock mockendpoint5=RouterTestUtils.getMockEndpoint(endpoint5);
  Mock mockendpoint6=RouterTestUtils.getMockEndpoint(endpoint6);
  ListMessageSplitter asyncSplitter=new ListMessageSplitter();
  asyncSplitter.setMuleContext(muleContext);
  asyncSplitter.setDisableRoundRobin(true);
  asyncSplitter.setFilter(new PayloadTypeFilter(List.class));
  asyncSplitter.addEndpoint((OutboundEndpoint)mockendpoint1.proxy());
  asyncSplitter.addEndpoint((OutboundEndpoint)mockendpoint2.proxy());
  asyncSplitter.addEndpoint((OutboundEndpoint)mockendpoint3.proxy());
  ListMessageSplitter syncSplitter=new ListMessageSplitter();
  syncSplitter.setMuleContext(muleContext);
  syncSplitter.setDisableRoundRobin(true);
  syncSplitter.setFilter(new PayloadTypeFilter(List.class));
  syncSplitter.addEndpoint((OutboundEndpoint)mockendpoint4.proxy());
  syncSplitter.addEndpoint((OutboundEndpoint)mockendpoint5.proxy());
  syncSplitter.addEndpoint((OutboundEndpoint)mockendpoint6.proxy());
  List payload=new ArrayList();
  payload.add(new Apple());
  payload.add(new Apple());
  payload.add(new Orange());
  payload.add(new String());
  MuleMessage message=new DefaultMuleMessage(payload,muleContext);
  assertTrue(asyncSplitter.isMatch(message));
  mockendpoint1.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  mockendpoint1.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  mockendpoint2.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  mockendpoint3.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  asyncSplitter.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy()));
  session.verify();
  message=new DefaultMuleMessage(payload,muleContext);
  MuleEvent event=new OutboundRoutingTestEvent(message,null);
  mockendpoint4.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  mockendpoint4.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  mockendpoint5.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  mockendpoint6.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  MuleEvent result=syncSplitter.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy()));
  assertNotNull(result);
  MuleMessage resultMessage=result.getMessage();
  assertNotNull(resultMessage);
  assertTrue(resultMessage instanceof MuleMessageCollection);
  assertEquals(4,((MuleMessageCollection)resultMessage).size());
  session.verify();
}
