{
  Mock session=MuleTestUtils.getMockSession();
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1endpoint","test://endpointUri.1",null,new PayloadTypeFilter(Apple.class),null);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Endpoint","test://endpointUri.2",null,new PayloadTypeFilter(Orange.class),null);
  OutboundEndpoint endpoint3=getTestOutboundEndpoint("Test3Endpoint","test://endpointUri.3");
  OutboundEndpoint endpoint4=getTestOutboundEndpoint("Test4endpoint","test://endpointUri.4?synchronous=true",null,new PayloadTypeFilter(Apple.class),null);
  OutboundEndpoint endpoint5=getTestOutboundEndpoint("Test5Endpoint","test://endpointUri.5?synchronous=true",null,new PayloadTypeFilter(Orange.class),null);
  OutboundEndpoint endpoint6=getTestOutboundEndpoint("Test6Endpoint","test://endpointUri.6?synchronous=true");
  ListMessageSplitter asyncSplitter=new ListMessageSplitter();
  asyncSplitter.setDisableRoundRobin(true);
  asyncSplitter.setFilter(new PayloadTypeFilter(List.class));
  asyncSplitter.addEndpoint(endpoint1);
  asyncSplitter.addEndpoint(endpoint2);
  asyncSplitter.addEndpoint(endpoint3);
  ListMessageSplitter syncSplitter=new ListMessageSplitter();
  syncSplitter.setDisableRoundRobin(true);
  syncSplitter.setFilter(new PayloadTypeFilter(List.class));
  syncSplitter.addEndpoint(endpoint4);
  syncSplitter.addEndpoint(endpoint5);
  syncSplitter.addEndpoint(endpoint6);
  List payload=new ArrayList();
  payload.add(new Apple());
  payload.add(new Apple());
  payload.add(new Orange());
  payload.add(new String());
  MuleMessage message=new DefaultMuleMessage(payload);
  assertTrue(asyncSplitter.isMatch(message));
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Orange.class),C.eq(endpoint2)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(String.class),C.eq(endpoint3)));
  asyncSplitter.route(message,(MuleSession)session.proxy());
  session.verify();
  message=new DefaultMuleMessage(payload);
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint4)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint4)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Orange.class),C.eq(endpoint5)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(String.class),C.eq(endpoint6)),message);
  MuleMessage result=syncSplitter.route(message,(MuleSession)session.proxy());
  assertNotNull(result);
  assertTrue(result instanceof MuleMessageCollection);
  assertEquals(4,((MuleMessageCollection)result).size());
  session.verify();
}
