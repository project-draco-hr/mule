{
  DefaultMuleEvent event=null;
  QueueSession queueSession=muleContext.getQueueManager().getQueueSession();
  while (!stopped.get()) {
    try {
      if (paused.get()) {
        paused.whenFalse(null);
        if (stopping.get()) {
          if (!queueProfile.isPersistent() && (queueSession != null && getQueueSize() > 0)) {
            logger.warn(CoreMessages.stopPausedSedaServiceNonPeristentQueueMessageLoss(getQueueSize(),this));
          }
          stopping.set(false);
          break;
        }
      }
      if (stopping.get()) {
        if (queueProfile.isPersistent() || (queueSession == null || getQueueSize() <= 0)) {
          stopping.set(false);
          break;
        }
      }
      event=(DefaultMuleEvent)dequeue();
      if (event != null) {
        if (stats.isEnabled()) {
          stats.decQueuedEvent();
        }
        if (logger.isDebugEnabled()) {
          logger.debug("Service: " + name + " dequeued event on: "+ event.getEndpoint().getEndpointURI());
        }
        workManager.scheduleWork(new ComponentStageWorker(event),WorkManager.INDEFINITE,null,this);
      }
    }
 catch (    Exception e) {
      if (e instanceof InterruptedException) {
        stopping.set(false);
        break;
      }
      if (e instanceof MuleException) {
        handleException(e);
      }
 else {
        handleException(new ServiceException(CoreMessages.eventProcessingFailedFor(name),(event == null ? null : event.getMessage()),this,e));
      }
    }
  }
}
