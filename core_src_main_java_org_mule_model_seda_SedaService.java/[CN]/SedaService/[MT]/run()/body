{
  DefaultMuleEvent event=null;
  QueueSession queueSession=muleContext.getQueueManager().getQueueSession();
  while (!stopped.get()) {
    try {
      if (paused.get()) {
        paused.whenFalse(null);
        if (stopping.get()) {
          if (!queueProfile.isPersistent() && (queueSession != null && getQueueSize() > 0)) {
            logger.warn(CoreMessages.stopPausedSedaServiceNonPeristentQueueMessageLoss(getQueueSize(),this));
          }
          stopping.set(false);
          break;
        }
      }
      if (stopping.get()) {
        if (queueProfile.isPersistent() || (queueSession == null || getQueueSize() <= 0)) {
          stopping.set(false);
          break;
        }
      }
      if (stats.isEnabled()) {
synchronized (queueStatsGuard) {
          event=(DefaultMuleEvent)dequeue();
          if (event != null) {
            stats.decQueuedEvent();
          }
        }
      }
 else {
        event=(DefaultMuleEvent)dequeue();
      }
      if (event != null) {
        if (logger.isDebugEnabled()) {
          logger.debug(MessageFormat.format("Service: {0} dequeued event on: {1}",name,event.getEndpoint().getEndpointURI()));
        }
        Work work=new ComponentStageWorker(event);
        if (threadingProfile.isDoThreading()) {
          workManager.scheduleWork(work,WorkManager.INDEFINITE,null,this);
        }
 else {
          work.run();
        }
      }
    }
 catch (    Exception e) {
      if (e instanceof InterruptedException) {
        stopping.set(false);
        break;
      }
      if (e instanceof MuleException) {
        handleException(e);
      }
 else {
        handleException(new ServiceException(CoreMessages.eventProcessingFailedFor(name),(event == null ? null : event.getMessage()),this,e));
      }
    }
  }
}
