{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getFlowConstruct",getTestService());
  session.matchAndReturn("setFlowConstruct",RouterTestUtils.getArgListCheckerFlowConstruct(),null);
  MuleMessage message=new DefaultMuleMessage(payload,muleContext);
  assertTrue(asyncXmlSplitter.isMatch(message));
  final ItemNodeConstraint itemNodeConstraint=new ItemNodeConstraint();
  mockendpoint1.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  mockendpoint2.expect("process",RouterTestUtils.getArgListCheckerMuleEvent());
  asyncXmlSplitter.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy(),muleContext));
  mockendpoint1.verify();
  mockendpoint2.verify();
  message=new DefaultMuleMessage(payload,muleContext);
  MuleEvent event=new OutboundRoutingTestEvent(message,null,muleContext);
  mockendpoint4.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  mockendpoint5.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  MuleEvent result=syncXmlSplitter.route(new OutboundRoutingTestEvent(message,(MuleSession)session.proxy(),muleContext));
  MuleMessage resultMessage=result.getMessage();
  assertNotNull(resultMessage);
  assertNotNull(result);
  assertTrue(resultMessage instanceof MuleMessageCollection);
  assertEquals(2,((MuleMessageCollection)resultMessage).size());
  mockendpoint4.verify();
  mockendpoint5.verify();
}
