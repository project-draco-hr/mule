{
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<String> message=new AtomicReference<String>();
  EventCallback callback=new EventCallback(){
    @Override public synchronized void eventReceived(    MuleEventContext context,    Object component){
      try {
        FunctionalStreamingTestComponent ftc=(FunctionalStreamingTestComponent)component;
        message.set(ftc.getSummary());
        latch.countDown();
      }
 catch (      Exception e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
;
  Object ftc=getComponent("testComponent");
  assertTrue("FunctionalStreamingTestComponent expected",ftc instanceof FunctionalStreamingTestComponent);
  assertNotNull(ftc);
  ((FunctionalStreamingTestComponent)ftc).setEventCallback(callback,size);
  Runtime runtime=Runtime.getRuntime();
  runtime.gc();
  long freeStart=runtime.freeMemory();
  long maxStart=runtime.maxMemory();
  long timeStart=System.currentTimeMillis();
  BigInputStream stream=new BigInputStream(size,MESSAGES);
  MuleClient client=muleContext.getClient();
  client.dispatch(((InboundEndpoint)((Flow)muleContext.getRegistry().lookupObject("testComponent")).getMessageSource()).getAddress(),new DefaultMuleMessage(stream,muleContext));
  long pause=Math.max(size / ONE_MB,60 * 10) + 10;
  logger.info("Waiting for up to " + pause + " seconds");
  latch.await(pause,TimeUnit.SECONDS);
  assertEquals(stream.summary(),message.get());
}
