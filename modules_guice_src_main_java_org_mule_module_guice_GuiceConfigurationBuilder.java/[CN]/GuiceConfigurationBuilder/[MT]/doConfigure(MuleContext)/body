{
  Injector injector;
  if (basepath != null && basepath.startsWith("/")) {
    basepath=basepath.substring(1);
  }
  if (modules == null) {
    ClasspathScanner scanner=new ClasspathScanner(classLoader,new String[]{basepath});
    Set<Class> classes=scanner.scanFor(Module.class);
    Set<Class> factories=scanner.scanFor(GuiceModuleFactory.class);
    if (classes.size() == 0 && factories.size() == 0) {
      try {
        basepath=getClass().getClassLoader().getResources(basepath).toString();
      }
 catch (      Exception e) {
        basepath=(basepath.equals("") ? "/" : basepath);
      }
      logger.warn(new ConfigurationException(CoreMessages.createStaticMessage("There are no Guice modules or module factories on the classpath under: " + basepath)));
      return;
    }
    modules=new Module[classes.size() + factories.size()];
    int i=0;
    for (    Class moduleClass : classes) {
      Module module=(Module)ClassUtils.instanciateClass(moduleClass,ClassUtils.NO_ARGS);
      modules[i++]=module;
    }
    for (    Class factoryClass : factories) {
      GuiceModuleFactory factory=(GuiceModuleFactory)ClassUtils.instanciateClass(factoryClass,ClassUtils.NO_ARGS);
      modules[i++]=factory.createModule();
    }
  }
  for (int i=0; i < modules.length; i++) {
    Module module=modules[i];
    if (module instanceof AbstractMuleGuiceModule) {
      ((AbstractMuleGuiceModule)module).setMuleContext(muleContext);
    }
  }
  if (stage != null) {
    injector=Guice.createInjector(stage,modules);
  }
 else {
    injector=Guice.createInjector(modules);
  }
  GuiceRegistry registry=new GuiceRegistry(injector,muleContext);
  registry.initialise();
  muleContext.addRegistry(registry);
}
