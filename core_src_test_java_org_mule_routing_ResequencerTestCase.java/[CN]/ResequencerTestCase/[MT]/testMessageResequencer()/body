{
  MuleSession session=getTestSession(getTestService(),muleContext);
  Service testService=getTestService("test",Apple.class);
  assertNotNull(testService);
  TestEventResequencer router=new TestEventResequencer(3);
  MuleMessage message1=new DefaultMuleMessage("test event A",muleContext);
  MuleMessage message2=new DefaultMuleMessage("test event B",muleContext);
  MuleMessage message3=new DefaultMuleMessage("test event C",muleContext);
  message1.setCorrelationId(message1.getUniqueId());
  message2.setCorrelationId(message1.getUniqueId());
  message3.setCorrelationId(message1.getUniqueId());
  ImmutableEndpoint endpoint=getTestOutboundEndpoint(MessageExchangePattern.ONE_WAY);
  MuleEvent event1=new DefaultMuleEvent(message1,endpoint,session);
  MuleEvent event2=new DefaultMuleEvent(message2,endpoint,session);
  MuleEvent event3=new DefaultMuleEvent(message3,endpoint,session);
  assertNull(router.process(event2));
  assertNull(router.process(event3));
  MuleEvent resultEvent=router.process(event1);
  assertNotNull(resultEvent);
  MuleMessage resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  final Object payload=resultMessage.getPayload();
  assertEquals(MuleEvent[].class,payload.getClass());
  MuleEvent[] results=(MuleEvent[])payload;
  assertEquals(3,results.length);
  assertEquals("test event B",results[0].getMessage().getPayload().toString());
  assertEquals("test event C",results[1].getMessage().getPayload().toString());
  assertEquals("test event A",results[2].getMessage().getPayload().toString());
  router=new TestEventResequencer(3);
  router.setEventComparator(new EventPayloadComparator());
  assertNull(router.process(event2));
  assertNull(router.process(event3));
  resultEvent=router.process(event1);
  assertNotNull(results);
  resultMessage=resultEvent.getMessage();
  assertNotNull(resultMessage);
  results=(MuleEvent[])resultMessage.getPayload();
  assertEquals(3,results.length);
  assertEquals("test event A",results[0].getMessage().getPayload().toString());
  assertEquals("test event B",results[1].getMessage().getPayload().toString());
  assertEquals("test event C",results[2].getMessage().getPayload().toString());
}
