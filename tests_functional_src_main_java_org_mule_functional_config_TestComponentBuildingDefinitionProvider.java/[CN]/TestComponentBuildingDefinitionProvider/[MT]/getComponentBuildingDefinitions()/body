{
  List<ComponentBuildingDefinition> componentBuildingDefinitions=new ArrayList<>();
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("queue").withTypeDefinition(fromType(QueueWriterMessageProcessor.class)).withSetterParameterDefinition("name",fromSimpleParameter("name").build()).build());
  ComponentBuildingDefinition.Builder baseComponentDefinition=baseDefinition.copy().withSetterParameterDefinition("eventCallback",fromChildConfiguration(EventCallback.class).build()).withSetterParameterDefinition("returnData",fromChildConfiguration(Object.class).build()).withSetterParameterDefinition("throwException",fromSimpleParameter("throwException").build()).withSetterParameterDefinition("logMessageDetails",fromSimpleParameter("logMessageDetails").build()).withSetterParameterDefinition("doInboundTransform",fromSimpleParameter("doInboundTransform").build()).withSetterParameterDefinition("exceptionToThrow",fromSimpleParameter("exceptionToThrow").build()).withSetterParameterDefinition("exceptionText",fromSimpleParameter("exceptionText").build()).withSetterParameterDefinition("enableMessageHistory",fromSimpleParameter("enableMessageHistory").build()).withSetterParameterDefinition("enableNotifications",fromSimpleParameter("enableNotifications").build()).withSetterParameterDefinition("appendString",fromSimpleParameter("appendString").build()).withSetterParameterDefinition("waitTime",fromSimpleParameter("waitTime").build()).withSetterParameterDefinition("id",fromSimpleParameter("id").build()).withSetterParameterDefinition("muleContext",fromReferenceObject(MuleContext.class).build());
  componentBuildingDefinitions.add(baseComponentDefinition.copy().withIdentifier("component").withTypeDefinition(fromType(MessageProcessor.class)).withObjectFactoryType(FunctionalComponentObjectFactory.class).build());
  componentBuildingDefinitions.add(baseComponentDefinition.copy().withIdentifier("web-service-component").withObjectFactoryType(TestFunctionalComponentObjectFactory.class).withTypeDefinition(fromType(MessageProcessor.class)).build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("return-data").withTypeDefinition(fromType(Object.class)).withObjectFactoryType(ReturnDataObjectFactory.class).withSetterParameterDefinition("file",fromSimpleParameter("file").build()).withSetterParameterDefinition("content",fromTextContent().build()).build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("callback").withTypeDefinition(fromConfigurationAttribute("class")).build());
  componentBuildingDefinitions.add(getTransformerBaseBuilder(NoActionTransformer.class).withNamespace(TEST_NAMESPACE).withIdentifier("no-action-transformer").build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("assert").withTypeDefinition(fromType(AssertionMessageProcessor.class)).withSetterParameterDefinition("expression",fromSimpleParameter("expression").build()).withSetterParameterDefinition("message",fromSimpleParameter("message").build()).withSetterParameterDefinition("count",fromSimpleParameter("count").build()).build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("invocation-counter").withTypeDefinition(fromType(InvocationCountMessageProcessor.class)).withSetterParameterDefinition("name",fromSimpleParameter("name").build()).build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("assert-intercepting").withTypeDefinition(fromType(ResponseAssertionMessageProcessor.class)).withSetterParameterDefinition("responseExpression",fromSimpleParameter("responseExpression").build()).withSetterParameterDefinition("responseCount",fromSimpleParameter("responseCount").build()).withSetterParameterDefinition("responseSameThread",fromSimpleParameter("responseSameThread").build()).build());
  componentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("non-blocking-processor").withTypeDefinition(fromType(TestNonBlockingProcessor.class)).build());
  return componentBuildingDefinitions;
}
