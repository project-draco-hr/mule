{
  PushbackInputStream pbis=(PushbackInputStream)pbMap.get(is);
  if (pbis == null) {
    pbis=new PushbackInputStream(is,PUSHBACK_BUFFER_SIZE);
    pbMap.put(is,pbis);
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int patternIndex;
  byte[] buffer=new byte[READ_BUFFER_SIZE];
  int len;
  try {
    while ((len=pbis.read(buffer)) == 0) {
    }
  }
 catch (  SocketException e) {
    return null;
  }
catch (  SocketTimeoutException e) {
    return null;
  }
  if (len == -1) {
    return null;
  }
 else {
    do {
      baos.write(buffer,0,len);
      patternIndex=baos.toString().indexOf(XML_PATTERN,1);
      if (patternIndex > 0) {
        break;
      }
      if (len < buffer.length) {
        break;
      }
      int av=pbis.available();
      if (av == 0) {
        break;
      }
    }
 while ((len=pbis.read(buffer)) > 0);
    baos.flush();
    baos.close();
    byte[] result=baos.toByteArray();
    if (patternIndex > 0) {
      pbis.unread(result,patternIndex,result.length - patternIndex);
      Arrays.fill(result,patternIndex,result.length,(byte)' ');
    }
    return result;
  }
}
