{
  final ClassLoader ccl=Thread.currentThread().getContextClassLoader();
  LoggerRepository repository=repositoryUnderConstruction.get();
  if (repository != null) {
    return repository;
  }
  repository=cache.getLoggerRepository(ccl);
  if (repository == null) {
    final RootLogger root=new RootLogger(Level.INFO);
    repository=new Hierarchy(root);
    repositoryUnderConstruction.set(repository);
    try {
      ConfigWatchDog configWatchDog=null;
      if (ccl instanceof ArtifactClassLoader) {
        String logFileNamePatter;
        if (ccl instanceof ApplicationClassLoader) {
          logFileNamePatter="mule-app-%s.log";
        }
 else {
          logFileNamePatter="mule-domain-%s.log";
        }
        configWatchDog=configureLoggerAndRetrieveWatchdog((ArtifactClassLoader)ccl,repository,root,configWatchDog,logFileNamePatter);
      }
 else {
        File defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.xml");
        if (!defaultSystemLog.exists() && !defaultSystemLog.canRead()) {
          defaultSystemLog=new File(MuleContainerBootstrapUtils.getMuleHome(),"conf/log4j.properties");
        }
        configureFrom(defaultSystemLog.toURL(),repository);
        if (ccl instanceof MuleContainerSystemClassLoader) {
          configWatchDog=new ConfigWatchDog(ccl,defaultSystemLog.getAbsolutePath(),repository);
          configWatchDog.setName("Mule.system.log4j.config.monitor");
        }
      }
      final LoggerRepository previous=cache.storeLoggerRepository(ccl,repository);
      if (previous != null) {
        repository=previous;
      }
 else {
        if (configWatchDog != null) {
          configWatchDog.start();
        }
      }
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
 finally {
      repositoryUnderConstruction.remove();
    }
  }
  return repository;
}
