{
  if (poolSize == 0) {
    return;
  }
  executorService=Executors.newFixedThreadPool(poolSize);
  List<Future<PetStoreClient>> clients=new ArrayList<>(poolSize);
  for (int i=0; i < poolSize; i++) {
    clients.add(getClientOnLatch());
  }
  testLatch.await();
  try {
    getClient();
    fail("was expecting pool to be exhausted");
  }
 catch (  MessagingException e) {
    assertThat(e.getCauseException(),is(instanceOf(ConnectionException.class)));
  }
  connectionLatch.release();
  for (  Future<PetStoreClient> future : clients) {
    PollingProber prober=new PollingProber(1000,100);
    prober.check(new JUnitProbe(){
      @Override protected boolean test() throws Exception {
        PetStoreClient client=future.get(100,MILLISECONDS);
        assertValidClient(client);
        return true;
      }
      @Override public String describeFailure(){
        return "Could not obtain valid client";
      }
    }
);
  }
  assertValidClient(getClient());
}
