{
  event=super.prepareRouting(sourceEvent,event);
  Object payload=event.getMessage().getPayload();
  final WatermarkSelector selector=new WatermarkSelectorWrapper(this.selector,this.selectorExpression,event);
  if (payload instanceof Collection) {
    Collection<Object> copy=new ArrayList<Object>(((Collection<Object>)payload));
    for (    Object object : copy) {
      selector.acceptValue(object);
    }
  }
  if (payload instanceof Iterator) {
    event.getMessage().setPayload(this.proxy((Iterator<Object>)payload,selector));
  }
 else   if (payload instanceof Iterable) {
    event.getMessage().setPayload(this.proxy((Iterable<Object>)payload,selector));
  }
 else {
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("Poll executing with payload of class %s but selector can only handle Iterator and Iterable. Watermark will not be updated",payload.getClass().getCanonicalName()));
    }
  }
  return event;
}
