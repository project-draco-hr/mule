{
  try {
    Map props=new HashMap(component.getProperties());
    props.putAll(endpoint.getProperties());
    if (props.containsKey(PORT_TYPE)) {
      Object value=props.get(PORT_TYPE);
      QNameConverter converter=new QNameConverter(true);
      QName portTypeQName=(QName)converter.convert(QName.class,value);
      props.put(PORT_TYPE,portTypeQName);
    }
    String namespace=(String)component.getProperties().get(SoapConstants.SOAP_NAMESPACE_PROPERTY);
    if (connector.isEnableJSR181Annotations()) {
      WebAnnotations wa=(WebAnnotations)ClassUtils.instanciateClass(XFireConnector.CLASSNAME_ANNOTATIONS,null,this.getClass());
      WebServiceAnnotation webServiceAnnotation=wa.getWebServiceAnnotation(component.getServiceFactory().getObjectClass());
      namespace=webServiceAnnotation.getTargetNamespace();
    }
    if ((namespace == null) || (namespace.equalsIgnoreCase(""))) {
      namespace=MapUtils.getString(props,"namespace",XFireConnector.DEFAULT_MULE_NAMESPACE_URI);
    }
    if (props.get("createDefaultBindings") != null) {
      props.put("createDefaultBindings",Boolean.valueOf((String)props.get("createDefaultBindings")));
    }
    if (props.size() == 0) {
      props=null;
    }
 else {
      rewriteProperty(props,PORT_TYPE);
      rewriteProperty(props,"style");
      rewriteProperty(props,"use");
      rewriteProperty(props,"createDefaultBindings");
      rewriteProperty(props,"soap12Transports");
      rewriteProperty(props,"soap11Transports");
      rewriteProperty(props,"scope");
      rewriteProperty(props,"schemas");
    }
    serviceInterfaces=(List)component.getProperties().get(SoapConstants.SERVICE_INTERFACES);
    Class exposedInterface;
    if (serviceInterfaces == null) {
      exposedInterface=component.getServiceFactory().getOrCreate().getClass();
    }
 else {
      String className=(String)serviceInterfaces.get(0);
      exposedInterface=ClassUtils.loadClass(className,this.getClass());
      logger.info(className + " class was used to expose your service");
      if (serviceInterfaces.size() > 1) {
        logger.info("Only the first class was used to expose your method");
      }
    }
    String wsdlUrl=(String)component.getProperties().get(SoapConstants.WSDL_URL_PROPERTY);
    if (StringUtils.isBlank(wsdlUrl)) {
      service=connector.getServiceFactory().create(exposedInterface,component.getName(),namespace,props);
    }
 else {
      service=connector.getServiceFactory().create(exposedInterface,new QName(namespace,component.getName()),new URL(wsdlUrl),props);
    }
    List inList=connector.getServerInHandlers();
    if (inList != null) {
      for (int i=0; i < inList.size(); i++) {
        Class clazz=ClassUtils.loadClass(inList.get(i).toString(),this.getClass());
        Handler handler=(Handler)clazz.getConstructor(null).newInstance(null);
        service.addInHandler(handler);
      }
    }
    boolean sync=endpoint.isSynchronous();
    service.setInvoker(new MuleInvoker(this,sync));
  }
 catch (  Exception e) {
    throw new CreateException(e,this);
  }
}
