{
  final MuleClient client=new MuleClient(muleContext);
  final Map<String,Object> props=new HashMap<String,Object>();
  props.put("JMSReplyTo","replyTo.queue");
  props.put(MuleProperties.MULE_REMOTE_SYNC_PROPERTY,"false");
  while (client.request("jms://replyTo.queue",2000) != null) {
  }
  MuleTransactionConfig tc=new MuleTransactionConfig();
  tc.setFactory(new JmsTransactionFactory());
  tc.setAction(TransactionConfig.ACTION_ALWAYS_BEGIN);
  EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(new URIBuilder("jms://test.queue",muleContext));
  endpointBuilder.setTransactionConfig(tc);
  endpointBuilder.setName("TransactedTest.Queue");
  ImmutableEndpoint inboundEndpoint=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint(endpointBuilder);
  client.getMuleContext().getRegistry().registerEndpoint(inboundEndpoint);
  TransactionTemplate tt=new TransactionTemplate(tc,null,muleContext);
  tt.execute(new TransactionCallback(){
    public Object doInTransaction() throws Exception {
      for (int i=0; i < 100; i++) {
        client.send("jms://test.queue","Test Client Dispatch message " + i,props);
      }
      Transaction tx=TransactionCoordination.getInstance().getTransaction();
      assertNotNull(tx);
      tx.setRollbackOnly();
      return null;
    }
  }
);
  MuleMessage result=client.request("jms://replyTo.queue",2000);
  assertNull(result);
}
