{
  try {
    Object returnValue=null;
    if (src instanceof byte[]) {
      src=new String((byte[])src,encoding);
    }
 else     if (src instanceof InputStream) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      IOUtils.copy((InputStream)src,baos);
      src=baos.toString();
    }
    if (src instanceof String) {
      if (getReturnClass().equals(JsonData.class)) {
        getJsonConfig().setEnclosedType(getReturnClass());
        JSON json=JSONSerializer.toJSON(src.toString(),getJsonConfig());
        if (json instanceof JSONArray) {
          getJsonConfig().setEnclosedType(List.class);
          getJsonConfig().setArrayMode(JsonConfig.MODE_LIST);
          List list=(List)JSONArray.toCollection((JSONArray)json,getJsonConfig());
          returnValue=new JsonData(list);
        }
 else {
          returnValue=JSONObject.toBean((JSONObject)json,getJsonConfig());
          returnValue=new JsonData((MorphDynaBean)returnValue);
        }
      }
 else {
        returnValue=JsonUtils.convertJsonToBean((String)src,getJsonConfig(),getReturnClass(),(getReturnClass().equals(DefaultMuleMessageDTO.class) ? dtoMappings : null));
      }
    }
 else     if (src instanceof JSONObject) {
      returnValue=JSONObject.toBean((JSONObject)src,getReturnClass(),new HashMap());
    }
    return returnValue;
  }
 catch (  Exception e) {
    throw new TransformerException(CoreMessages.transformFailed("json",getReturnClass().getName()),this,e);
  }
 finally {
    if (src instanceof InputStream) {
      IOUtils.closeQuietly((InputStream)src);
    }
  }
}
