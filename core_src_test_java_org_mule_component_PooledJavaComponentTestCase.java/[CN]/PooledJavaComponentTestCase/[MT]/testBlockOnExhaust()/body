{
  PoolingProfile pp=createDefaultPoolingProfile();
  pp.setExhaustedAction(PoolingProfile.WHEN_EXHAUSTED_WAIT);
  PooledJavaComponent component=createPooledComponent(pp);
  assertEquals(0,component.lifecycleAdapterPool.getNumActive());
  int oneRemainingInPool=(MAX_ACTIVE - 1);
  for (int i=0; i < oneRemainingInPool; i++) {
    LifecycleAdapter borrowed=component.borrowComponentLifecycleAdaptor();
    assertNotNull(borrowed);
    assertEquals(component.lifecycleAdapterPool.getNumActive(),i + 1);
  }
  assertEquals(oneRemainingInPool,component.lifecycleAdapterPool.getNumActive());
  long startTime=System.currentTimeMillis();
  int borrowerWait=500;
  Borrower borrower=new Borrower(component,borrowerWait);
  new Thread(borrower,"BorrowThread").start();
  try {
    Thread.sleep(200);
  }
 catch (  InterruptedException e) {
  }
  Object borrowed=component.borrowComponentLifecycleAdaptor();
  assertNotNull(borrowed);
  long totalTime=System.currentTimeMillis() - startTime;
  assertTrue(totalTime > borrowerWait);
}
