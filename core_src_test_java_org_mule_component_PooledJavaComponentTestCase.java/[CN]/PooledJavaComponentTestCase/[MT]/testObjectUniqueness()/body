{
  PoolingProfile pp=getDefaultPoolingProfile();
  pp.setExhaustedAction(PoolingProfile.WHEN_EXHAUSTED_FAIL);
  PooledJavaComponent component=new PooledJavaComponent(new PrototypeObjectFactory(UniqueComponent.class),pp);
  component.setService(getTestService());
  component.initialise();
  component.start();
  assertEquals(0,component.lifecycleAdapterPool.getNumActive());
  Object obj;
  obj=((DefaultLifecycleAdapter)component.borrowComponentLifecycleAdaptor()).componentObject;
  assertNotNull(obj);
  assertTrue("Object should be of type UniqueComponent",obj instanceof UniqueComponent);
  String id1=((UniqueComponent)obj).getId();
  assertNotNull(id1);
  obj=((DefaultLifecycleAdapter)component.borrowComponentLifecycleAdaptor()).componentObject;
  assertNotNull(obj);
  assertTrue("Object should be of type UniqueComponent",obj instanceof UniqueComponent);
  String id2=((UniqueComponent)obj).getId();
  assertNotNull(id2);
  obj=((DefaultLifecycleAdapter)component.borrowComponentLifecycleAdaptor()).componentObject;
  assertNotNull(obj);
  assertTrue("Object should be of type UniqueComponent",obj instanceof UniqueComponent);
  String id3=((UniqueComponent)obj).getId();
  assertNotNull(id3);
  assertFalse("Service IDs " + id1 + " and "+ id2+ " should be different",id1.equals(id2));
  assertFalse("Service IDs " + id2 + " and "+ id3+ " should be different",id2.equals(id3));
}
