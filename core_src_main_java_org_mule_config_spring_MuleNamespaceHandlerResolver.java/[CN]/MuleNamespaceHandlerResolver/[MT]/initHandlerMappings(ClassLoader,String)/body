{
  Collection mappings=loadMappings(classLoader,handlerMappingsLocation);
  if (logger.isDebugEnabled()) {
    logger.debug("Loaded mappings [" + mappings + "]");
  }
  this.handlerMappings=new HashMap(mappings.size());
  for (Iterator iterator=mappings.iterator(); iterator.hasNext(); ) {
    PropertyNameValuePair pair=(PropertyNameValuePair)iterator.next();
    String namespaceUri=pair.getName();
    String className=pair.getValue();
    try {
      Class handlerClass=ClassUtils.forName(className,classLoader);
      if (!NamespaceHandler.class.isAssignableFrom(handlerClass)) {
        throw new IllegalArgumentException("Class [" + className + "] does not implement the NamespaceHandler interface");
      }
      NamespaceHandler namespaceHandler=(NamespaceHandler)BeanUtils.instantiateClass(handlerClass);
      namespaceHandler.init();
      addHandlerMapping(namespaceUri,namespaceHandler);
    }
 catch (    ClassNotFoundException ex) {
      if (logger.isDebugEnabled()) {
        logger.debug("Ignoring namespace handler [" + className + "]: handler class not found",ex);
      }
    }
catch (    LinkageError err) {
      if (logger.isWarnEnabled()) {
        logger.warn("Ignoring namespace handler [" + className + "]: problem with handler class file or dependent class",err);
      }
    }
  }
}
