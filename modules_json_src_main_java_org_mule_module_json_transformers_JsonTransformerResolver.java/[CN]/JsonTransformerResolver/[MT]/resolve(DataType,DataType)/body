{
  Transformer t=transformerCache.get(source.toString() + result.toString());
  if (t != null) {
    return t;
  }
  try {
    ObjectMapper mapper=getMapperResolver().resolve(ObjectMapper.class,source,result,muleContext);
    if (mapper == null) {
      return null;
    }
    boolean marshal;
    Class annotatedType;
    if (getMapperResolver().getMatchingClasses().contains(result.getType())) {
      annotatedType=result.getType();
      source=source.cloneDataType();
      source.setMimeType(JSON_MIME_TYPE);
      marshal=false;
    }
 else     if (getMapperResolver().getMatchingClasses().contains(source.getType())) {
      annotatedType=source.getType();
      result=result.cloneDataType();
      result.setMimeType(JSON_MIME_TYPE);
      marshal=true;
    }
 else {
      return null;
    }
    List<Transformer> ts=muleContext.getRegistry().lookupTransformers(source,result);
    if (ts.size() == 1 && !(ts.get(0) instanceof ObjectToString)) {
      t=ts.get(0);
    }
 else     if (marshal) {
      ObjectToJson otj=new ObjectToJson();
      otj.setSourceClass(annotatedType);
      otj.setReturnDataType(result);
      otj.setMapper(mapper);
      muleContext.getRegistry().applyProcessorsAndLifecycle(otj);
      t=otj;
    }
 else {
      JsonToObject jto=new JsonToObject();
      jto.setReturnDataType(result);
      jto.setMapper(mapper);
      muleContext.getRegistry().applyProcessorsAndLifecycle(jto);
      t=jto;
    }
    transformerCache.put(source.toString() + result.toString(),t);
    return t;
  }
 catch (  Exception e) {
    throw new ResolverException(CoreMessages.createStaticMessage("Failed to unmarshal"),e);
  }
}
