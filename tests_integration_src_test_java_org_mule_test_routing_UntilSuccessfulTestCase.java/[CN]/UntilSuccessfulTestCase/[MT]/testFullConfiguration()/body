{
  final AtomicReference<ExceptionPayload> dlqExceptionPayload=new AtomicReference<>();
  deadLetterQueueProcessor.setEventCallback(new EventCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      dlqExceptionPayload.set(context.getMessage().getExceptionPayload());
    }
  }
);
  final String payload=RandomStringUtils.randomAlphanumeric(20);
  final MuleMessage response=client.send("vm://input-2",payload,null);
  assertEquals("ACK",response.getPayloadAsString());
  List<Object> receivedPayloads=ponderUntilMessageCountReceivedByTargetMessageProcessor(3);
  assertEquals(3,receivedPayloads.size());
  for (int i=0; i <= 2; i++) {
    assertEquals(payload,receivedPayloads.get(i));
  }
  receivedPayloads=ponderUntilMessageCountReceivedByDlqProcessor(1);
  assertEquals(1,receivedPayloads.size());
  assertEquals(payload,receivedPayloads.get(0));
  assertThat(dlqExceptionPayload.get(),is(notNullValue()));
  assertThat(dlqExceptionPayload.get().getException(),instanceOf(RetryPolicyExhaustedException.class));
  assertThat(dlqExceptionPayload.get().getException().getMessage(),containsString("until-successful retries exhausted. Last exception message was: Failure expression positive when processing event"));
  assertThat(dlqExceptionPayload.get().getException().getCause(),instanceOf(MuleRuntimeException.class));
  assertThat(dlqExceptionPayload.get().getException().getMessage(),containsString("Failure expression positive when processing event"));
}
