{
  final String payload=RandomStringUtils.randomAlphanumeric(20);
  final MuleMessage response=flowRunner("full-config-with-mp").withPayload(payload).run().getMessage();
  assertThat(getPayloadAsString(response),is("ACK"));
  final List<Object> receivedPayloads=ponderUntilMessageCountReceivedByTargetMessageProcessor(3);
  assertThat(receivedPayloads,hasSize(3));
  for (int i=0; i <= 2; i++) {
    assertThat(receivedPayloads.get(i),is(payload));
  }
  ponderUntilMessageCountReceivedByCustomMP(1);
  ExceptionPayload dlqExceptionPayload=CustomMP.getProcessedMessages().get(0).getExceptionPayload();
  assertThat(dlqExceptionPayload,is(notNullValue()));
  assertThat(dlqExceptionPayload.getException(),instanceOf(RetryPolicyExhaustedException.class));
  assertThat(dlqExceptionPayload.getException().getMessage(),containsString("until-successful retries exhausted. Last exception message was: Failure expression positive when processing event"));
  assertThat(dlqExceptionPayload.getException().getCause(),instanceOf(MuleRuntimeException.class));
  assertThat(dlqExceptionPayload.getException().getMessage(),containsString("Failure expression positive when processing event"));
}
