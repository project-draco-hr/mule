{
  final String payload=RandomStringUtils.randomAlphanumeric(20);
  final MuleMessage response=client.send("vm://input-2MP",payload,null);
  assertEquals("ACK",getPayloadAsString(response));
  final List<Object> receivedPayloads=ponderUntilMessageCountReceivedByTargetMessageProcessor(3);
  assertEquals(3,receivedPayloads.size());
  for (int i=0; i <= 2; i++) {
    assertEquals(payload,receivedPayloads.get(i));
  }
  ponderUntilMessageCountReceivedByCustomMP(1);
  ExceptionPayload dlqExceptionPayload=CustomMP.getProcessedMessages().get(0).getExceptionPayload();
  assertThat(dlqExceptionPayload,is(notNullValue()));
  assertThat(dlqExceptionPayload.getException(),instanceOf(RetryPolicyExhaustedException.class));
  assertThat(dlqExceptionPayload.getException().getMessage(),containsString("until-successful retries exhausted. Last exception message was: Failure expression positive when processing event"));
  assertThat(dlqExceptionPayload.getException().getCause(),instanceOf(MuleRuntimeException.class));
  assertThat(dlqExceptionPayload.getException().getMessage(),containsString("Failure expression positive when processing event"));
}
