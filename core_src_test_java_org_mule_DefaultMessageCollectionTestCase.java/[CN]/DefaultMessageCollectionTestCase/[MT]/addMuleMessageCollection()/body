{
  MuleMessageCollection messageCollection1=mock(MuleMessageCollection.class);
  MuleMessageCollection messageCollection2=mock(MuleMessageCollection.class);
  when(messageCollection1.getPayload()).thenReturn(new Fruit[]{apple,banana});
  when(messageCollection2.getPayload()).thenReturn(new Fruit[]{grapeFruit,orange});
  DefaultMessageCollection messageCollectionUnderTest=new DefaultMessageCollection(muleContext);
  messageCollectionUnderTest.addMessage(messageCollection1);
  messageCollectionUnderTest.addMessage(messageCollection2);
  assertEquals(2,messageCollectionUnderTest.getMessageList().size());
  assertSame(messageCollection1,messageCollectionUnderTest.getMessage(0));
  assertSame(messageCollection2,messageCollectionUnderTest.getMessage(1));
  assertEquals(2,messageCollectionUnderTest.getPayloadList().size());
  assertTrue(messageCollectionUnderTest.getPayload() instanceof List<?>);
  assertSame(apple,((Fruit[])((List)messageCollectionUnderTest.getPayload()).get(0))[0]);
  assertSame(banana,((Fruit[])((List)messageCollectionUnderTest.getPayload()).get(0))[1]);
  assertSame(grapeFruit,((Fruit[])((List)messageCollectionUnderTest.getPayload()).get(1))[0]);
  assertSame(orange,((Fruit[])((List)messageCollectionUnderTest.getPayload()).get(1))[1]);
}
