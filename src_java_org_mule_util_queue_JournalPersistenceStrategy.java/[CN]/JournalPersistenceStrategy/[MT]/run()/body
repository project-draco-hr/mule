{
  try {
    while (!Thread.interrupted()) {
      Thread.sleep(100);
synchronized (markLock) {
        try {
          SortedSet m;
          if (overflowLocation != null) {
            RecordLocation overflowLoc=overflowLocation;
            overflowLocation=null;
            m=pendingMarks.headSet(overflowLoc);
            if (m != null && m.size() > 0) {
              logger.trace("Relocating " + m.size() + " records");
              int nbRecord=0;
              while (m.size() > 0) {
                RecordLocation loc=(RecordLocation)m.first();
                Packet packet=journal.read(loc);
                RecordLocation newLoc=journal.write(packet,false);
                ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(packet.sliceAsBytes()));
                ois.readByte();
                String queue=ois.readUTF();
                byte[] buf=new byte[UUID_LENGTH];
                ois.read(buf);
                UUID id=new UUID(buf);
                if (++nbRecord % 10 == 0) {
                  RecordLocation n=journal.getNextRecordLocation(loc);
                  journal.setMark(n != null ? n : loc,false);
                }
                unusedMarks.add(loc);
                pendingMarks.add(newLoc);
                marks.put(id,newLoc);
                m.remove(loc);
              }
            }
          }
          if (pendingMarks.isEmpty()) {
            m=unusedMarks;
          }
 else {
            RecordLocation pendingMark=(RecordLocation)pendingMarks.first();
            m=unusedMarks.headSet(pendingMark);
          }
          if (!m.isEmpty()) {
            RecordLocation last=(RecordLocation)m.last();
            RecordLocation n=journal.getNextRecordLocation((RecordLocation)m.last());
            if (n == null) {
              n=last;
            }
            if (logger.isDebugEnabled()) {
              logger.debug("Marking to " + n + " / "+ (pendingMarks.isEmpty() ? "null" : pendingMarks.last()));
            }
            if (journal.getMark() == null || n.compareTo(journal.getMark()) > 0) {
              journal.setMark(n,false);
            }
            m.clear();
          }
        }
 catch (        Exception e) {
          logger.warn("Error when relocating records",e);
        }
      }
    }
  }
 catch (  InterruptedException e) {
    logger.debug("Marker thread interrupted");
  }
}
