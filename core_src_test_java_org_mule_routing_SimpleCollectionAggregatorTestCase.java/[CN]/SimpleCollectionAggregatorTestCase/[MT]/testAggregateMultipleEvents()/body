{
  MuleSession session1=getTestSession(getTestFlow(),muleContext);
  session1.setProperty("key1","value1");
  MuleSession session2=getTestSession(getTestFlow(),muleContext);
  session1.setProperty("key1","value1NEW");
  session1.setProperty("key2","value2");
  MuleSession session3=getTestSession(getTestFlow(),muleContext);
  session1.setProperty("key3","value3");
  Flow flow=getTestFlow("test",Apple.class);
  assertNotNull(flow);
  SimpleCollectionAggregator router=new SimpleCollectionAggregator();
  SensingNullMessageProcessor sensingMessageProcessor=getSensingNullMessageProcessor();
  router.setListener(sensingMessageProcessor);
  router.setMuleContext(muleContext);
  router.setFlowConstruct(flow);
  router.initialise();
  MuleMessage message1=new DefaultMuleMessage("test event A",muleContext);
  MuleMessage message2=new DefaultMuleMessage("test event B",muleContext);
  MuleMessage message3=new DefaultMuleMessage("test event C",muleContext);
  message1.setCorrelationId(message1.getUniqueId());
  message2.setCorrelationId(message1.getUniqueId());
  message3.setCorrelationId(message1.getUniqueId());
  message1.setCorrelationGroupSize(3);
  InboundEndpoint endpoint=MuleTestUtils.getTestInboundEndpoint(MessageExchangePattern.ONE_WAY,muleContext);
  MuleEvent event1=new DefaultMuleEvent(message1,endpoint,flow,session1);
  MuleEvent event2=new DefaultMuleEvent(message2,endpoint,flow,session2);
  MuleEvent event3=new DefaultMuleEvent(message3,endpoint,flow,session3);
  assertNull(router.process(event1));
  assertNull(router.process(event2));
  assertSame(VoidMuleEvent.getInstance(),router.process(event3));
  assertNotNull(sensingMessageProcessor.event);
  MuleMessage nextMessage=sensingMessageProcessor.event.getMessage();
  assertNotNull(nextMessage);
  assertTrue(nextMessage instanceof MuleMessageCollection);
  assertTrue(nextMessage.getPayload() instanceof List<?>);
  List<String> payload=(List<String>)nextMessage.getPayload();
  assertEquals(3,payload.size());
  String[] results=new String[3];
  results=payload.toArray(results);
  Arrays.sort(results);
  assertEquals("test event A",results[0]);
  assertEquals("test event B",results[1]);
  assertEquals("test event C",results[2]);
  assertEquals(3,sensingMessageProcessor.event.getSession().getPropertyNamesAsSet().size());
  assertEquals("value1NEW",sensingMessageProcessor.event.getSession().getProperty("key1"));
  assertEquals("value2",sensingMessageProcessor.event.getSession().getProperty("key2"));
  assertEquals("value3",sensingMessageProcessor.event.getSession().getProperty("key3"));
}
