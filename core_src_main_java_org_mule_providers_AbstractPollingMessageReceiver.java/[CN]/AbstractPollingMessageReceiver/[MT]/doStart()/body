{
  try {
synchronized (schedules) {
      ScheduledFuture schedule=connector.getScheduler().scheduleWithFixedDelay(this.createWork(),DEFAULT_STARTUP_DELAY,this.getFrequency(),this.getTimeUnit());
      schedules.add(schedule);
      if (logger.isDebugEnabled()) {
        logger.debug(ObjectUtils.identityToShortString(this) + " scheduled " + ObjectUtils.identityToShortString(schedule)+ " with "+ frequency+ "ms polling frequency");
      }
    }
  }
 catch (  Exception ex) {
    this.stop();
    throw new CreateException(CoreMessages.failedToScheduleWork(),ex,this);
  }
}
