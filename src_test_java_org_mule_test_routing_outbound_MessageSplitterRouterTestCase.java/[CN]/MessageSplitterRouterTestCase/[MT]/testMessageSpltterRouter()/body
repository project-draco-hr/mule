{
  Mock session=getMockSession();
  UMOEndpoint endpoint1=getTestEndpoint("Test1Provider",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint1.setEndpointURI(new MuleEndpointURI("test://endpointUri.1"));
  UMOEndpoint endpoint2=getTestEndpoint("Test2Provider",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint2.setEndpointURI(new MuleEndpointURI("test://endpointUri.2"));
  UMOEndpoint endpoint3=getTestEndpoint("Test3Provider",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint3.setEndpointURI(new MuleEndpointURI("test://endpointUri.3"));
  AbstractMessageSplitter router=new AbstractMessageSplitter(){
    private List parts;
    protected void initialise(    UMOMessage message){
      multimatch=false;
      parts=Arrays.asList(Utility.split(message.getPayload().toString(),","));
    }
    protected UMOMessage getMessagePart(    UMOMessage message,    UMOEndpoint endpoint){
      if (endpoint.getEndpointURI().getAddress().equals("endpointUri.1")) {
        return new MuleMessage(parts.get(0));
      }
 else       if (endpoint.getEndpointURI().getAddress().equals("endpointUri.2")) {
        return new MuleMessage(parts.get(1));
      }
 else       if (endpoint.getEndpointURI().getAddress().equals("endpointUri.3")) {
        return new MuleMessage(parts.get(2));
      }
 else {
        return null;
      }
    }
  }
;
  List endpoints=new ArrayList();
  endpoints.add(endpoint1);
  endpoints.add(endpoint2);
  endpoints.add(endpoint3);
  router.setEndpoints(endpoints);
  UMOMessage message=new MuleMessage("test,mule,message");
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint2)));
  session.expect("dispatchEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint3)));
  router.route(message,(UMOSession)session.proxy(),false);
  session.verify();
  message=new MuleMessage("test,mule,message");
  session.expectAndReturn("sendEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint1)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint2)),message);
  session.expectAndReturn("sendEvent",C.args(C.isA(UMOMessage.class),C.eq(endpoint3)),message);
  UMOMessage result=router.route(message,(UMOSession)session.proxy(),true);
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
}
