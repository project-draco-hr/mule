{
  Object hop1=getComponent("hop1");
  assertTrue("FunctionalTestComponent expected",hop1 instanceof FunctionalTestComponent);
  Object hop2=getComponent("hop2");
  assertTrue("FunctionalTestComponent expected",hop2 instanceof FunctionalTestComponent);
  assertNotNull(hop1);
  assertNotNull(hop2);
  final AtomicBoolean hop1made=new AtomicBoolean(false);
  EventCallback callback1=new EventCallback(){
    public void eventReceived(    final MuleEventContext context,    final Object component) throws Exception {
      assertTrue(hop1made.compareAndSet(false,true));
    }
  }
;
  final AtomicBoolean hop2made=new AtomicBoolean(false);
  EventCallback callback2=new EventCallback(){
    public void eventReceived(    final MuleEventContext context,    final Object component) throws Exception {
      assertTrue(hop2made.compareAndSet(false,true));
    }
  }
;
  ((FunctionalTestComponent)hop1).setEventCallback(callback1);
  ((FunctionalTestComponent)hop2).setEventCallback(callback2);
  MuleClient client=new MuleClient(muleContext);
  DefaultMuleMessage request=new DefaultMuleMessage("payload",muleContext);
  client.send("vm://inbound",request);
  Thread.sleep(1000);
  assertTrue("First callback never fired",hop1made.get());
  assertTrue("Second callback never fired",hop2made.get());
}
