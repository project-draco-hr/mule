{
  super(connector,service,endpoint);
  if (connector instanceof PollingTcpConnector) {
    this.connector=(PollingTcpConnector)connector;
  }
 else {
    throw new CreateException(TcpMessages.pollingReceiverCannotbeUsed(),this);
  }
  timeout=MapUtils.getIntValue(endpoint.getProperties(),"clientSoTimeout",this.connector.getClientSoTimeout());
  if (timeout > Integer.MAX_VALUE || timeout < 0) {
    throw new IllegalArgumentException("Timeout incorrect: " + timeout);
  }
  long pollingFrequency=MapUtils.getLongValue(endpoint.getProperties(),"pollingFrequency",this.connector.getPollingFrequency());
  if (pollingFrequency > 0) {
    this.setFrequency(pollingFrequency);
  }
}
