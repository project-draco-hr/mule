{
  assertEquals(0,SleepyTask.activeTasks.get());
  long failureInterval=100L;
  LastRejectedWaitPolicy policy=new LastRejectedWaitPolicy(failureInterval,TimeUnit.MILLISECONDS);
  executor.setRejectedExecutionHandler(policy);
  List<Runnable> tasks=new ArrayList<Runnable>();
  tasks.add(new SleepyTask("run",1000));
  tasks.add(new SleepyTask("queued",1000));
  Runnable failedTask=new SleepyTask("waitAndFail",1000);
  tasks.add(failedTask);
  LinkedList<Thread> submitters=this.execute(tasks);
  assertFalse(submitters.isEmpty());
  Thread.sleep(failureInterval * 10);
  LinkedList<Map<Thread,Throwable>> exceptions=threadGroup.collectedExceptions();
  assertEquals(1,exceptions.size());
  Map.Entry<Thread,Throwable> threadFailure=exceptions.getFirst().entrySet().iterator().next();
  assertEquals(submitters.getLast(),threadFailure.getKey());
  assertEquals(RejectedExecutionException.class,threadFailure.getValue().getClass());
  executor.shutdown();
  assertTrue(executor.awaitTermination(2500,TimeUnit.MILLISECONDS));
  assertSame(failedTask,policy.lastRejectedRunnable());
  assertEquals(0,SleepyTask.activeTasks.get());
}
