{
  httpServer=new Server();
  contexts=new ContextHandlerCollection();
  httpServer.setHandler(contexts);
  if (webappsConfiguration != null) {
    DeploymentManager deploymentManager=new DeploymentManager();
    WebAppProvider webAppProvider=new WebAppProvider(){
      @Override public ContextHandler createContextHandler(      App app) throws Exception {
        WebAppContext webAppContext=(WebAppContext)super.createContextHandler(app);
        if (webappsConfiguration.getServerClasses() != null) {
          webAppContext.setServerClasses(webappsConfiguration.getServerClasses());
        }
        if (webappsConfiguration.getSystemClasses() != null) {
          webAppContext.setSystemClasses(webappsConfiguration.getSystemClasses());
        }
        return webAppContext;
      }
    }
;
    final Connector jettyConnector=createJettyConnector();
    jettyConnector.setHost(webappsConfiguration.getHost());
    jettyConnector.setPort(webappsConfiguration.getPort());
    deploymentManager.setContexts(contexts);
    deploymentManager.addAppProvider(webAppProvider);
    deploymentManager.addLifeCycleBinding(new AppLifeCycle.Binding(){
      @Override public String[] getBindingTargets(){
        return new String[]{AppLifeCycle.DEPLOYING};
      }
      @Override public void processBinding(      Node node,      App app) throws Exception {
        ContextHandler contextHandler=app.getContextHandler();
        if (contextHandler instanceof WebAppContext) {
          WebAppContext webapp=(WebAppContext)contextHandler;
          File workDir=new File(muleContext.getConfiguration().getWorkingDirectory(),"_exploded_wars" + webapp.getContextPath());
          workDir.mkdirs();
          webapp.setTempDirectory(workDir);
          webapp.setAttribute(MULE_CONTEXT_ATTRIBUTE,muleContext);
          webapp.setConnectorNames(new String[]{jettyConnector.getName()});
          if (logger.isInfoEnabled()) {
            String msg=String.format("Will deploy a web app at %s://%s%s%s","http",jettyConnector.getHost(),jettyConnector.getPort() == 80 ? StringUtils.EMPTY : ":" + jettyConnector.getPort(),webapp.getContextPath());
            logger.info(StringMessageUtils.getBoilerPlate(msg,'*',70));
          }
          return;
        }
      }
    }
);
    String webAppDir=webappsConfiguration.getDirectory();
    if (StringUtils.isBlank(webAppDir)) {
      final String appDir=muleContext.getRegistry().get(MuleProperties.APP_HOME_DIRECTORY_PROPERTY);
      webAppDir=appDir + "/webapps";
    }
    if (configFile == null) {
      final URL muleDefaults=ClassUtils.getResource("org/mule/transport/jetty/webdefault.xml",getClass());
      webAppProvider.setDefaultsDescriptor(muleDefaults.toExternalForm());
    }
    webAppProvider.setMonitoredDirName(webAppDir);
    webAppProvider.setExtractWars(true);
    webAppProvider.setParentLoaderPriority(false);
    String[] confClasses=new String[]{WebInfConfiguration.class.getName(),WebXmlConfiguration.class.getName()};
    webAppProvider.setConfigurationClasses(confClasses);
    webAppProvider.setDeploymentManager(deploymentManager);
    httpServer.addBean(deploymentManager);
    httpServer.addConnector(jettyConnector);
  }
  initialiseFromConfigFile();
  try {
    muleContext.registerListener(new MuleContextNotificationListener<MuleContextNotification>(){
      @Override public void onNotification(      MuleContextNotification notification){
        if (notification.getAction() == MuleContextNotification.CONTEXT_STARTED) {
          setInitialStateStopped(false);
          try {
            start();
            final JettyWebappServerAgent agent=(JettyWebappServerAgent)muleContext.getRegistry().lookupAgent(JettyWebappServerAgent.NAME);
            if (agent != null) {
              agent.onJettyConnectorStarted(JettyHttpConnector.this);
            }
          }
 catch (          MuleException e) {
            throw new MuleRuntimeException(CoreMessages.failedToStart(getName()),e);
          }
        }
      }
    }
);
  }
 catch (  NotificationException e) {
    throw new InitialisationException(e,this);
  }
}
