{
  if (event != null) {
    if (MESSAGE.equals(name)) {
      return new MuleImmutableVariableResolver<MessageContext>(MESSAGE,new MessageContext(event,muleContext),null);
    }
 else     if (PAYLOAD.equals(name)) {
      return new MuleVariableResolver<Object>(PAYLOAD,new MessageContext(event,muleContext).getPayload(),null,new VariableAssignmentCallback<Object>(){
        @Override public void assignValue(        String name,        Object value,        Object newValue){
          event.setMessage(new DefaultMuleMessage(newValue,event.getMessage(),event.getMuleContext()));
        }
      }
);
    }
 else     if (FLOW_VARS.equals(name)) {
      return new MuleImmutableVariableResolver<Map<String,Object>>(FLOW_VARS,new FlowVariableMapContext(event),null);
    }
 else     if (EXCEPTION.equals(name)) {
      if (event.getMessage().getExceptionPayload() != null) {
        return new MuleImmutableVariableResolver<Throwable>(EXCEPTION,event.getMessage().getExceptionPayload().getException(),null);
      }
 else {
        return new MuleImmutableVariableResolver<MuleMessage>(EXCEPTION,null,null);
      }
    }
 else     if (SESSION_VARS.equals(name)) {
      return new MuleImmutableVariableResolver<Map<String,Object>>(SESSION_VARS,new SessionVariableMapContext(event.getSession()),null);
    }
 else     if (MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE.equals(name)) {
      return new MuleImmutableVariableResolver<MuleMessage>(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE,event.getMessage(),null);
    }
  }
  return super.getNextFactoryVariableResolver(name);
}
