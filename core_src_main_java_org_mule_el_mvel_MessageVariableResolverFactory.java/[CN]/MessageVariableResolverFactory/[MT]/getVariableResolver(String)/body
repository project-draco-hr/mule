{
  if (muleMessage != null) {
    if (MESSAGE.equals(name)) {
      return new MuleImmutableVariableResolver<MessageContext>(MESSAGE,new MessageContext(muleMessage),null);
    }
 else     if (PAYLOAD.equals(name)) {
      return new MuleVariableResolver<Object>(PAYLOAD,new MessageContext(muleMessage).getPayload(),null,new VariableAssignmentCallback<Object>(){
        @Override public void assignValue(        String name,        Object value,        Object newValue){
          muleMessage.setPayload(newValue);
        }
      }
);
    }
 else     if (FLOW_VARS.equals(name)) {
      return new MuleImmutableVariableResolver<Map<String,Object>>(FLOW_VARS,new MessagePropertyMapContext(muleMessage,PropertyScope.INVOCATION),null);
    }
 else     if (EXCEPTION.equals(name)) {
      if (muleMessage.getExceptionPayload() != null) {
        return new MuleImmutableVariableResolver<Throwable>(EXCEPTION,muleMessage.getExceptionPayload().getException(),null);
      }
 else {
        return new MuleImmutableVariableResolver<MuleMessage>(EXCEPTION,null,null);
      }
    }
 else     if (SESSION_VARS.equals(name)) {
      return new MuleImmutableVariableResolver<Map<String,Object>>(SESSION_VARS,new MessagePropertyMapContext(muleMessage,PropertyScope.SESSION),null);
    }
 else     if (MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE.equals(name)) {
      return new MuleImmutableVariableResolver<MuleMessage>(MVELExpressionLanguageContext.MULE_MESSAGE_INTERNAL_VARIABLE,muleMessage,null);
    }
  }
  return super.getNextFactoryVariableResolver(name);
}
