{
  super(new URL[0],parent);
  try {
    if (domain == null) {
      throw new IllegalArgumentException("Domain name cannot be null");
    }
    this.domain=domain;
    validateAndGetDomainFolders();
    addURL(domainLibraryFolder.getParentFile().toURI().toURL());
    if (domainLibraryFolder.exists()) {
      Collection<File> jars=FileUtils.listFiles(domainLibraryFolder,new String[]{"jar"},false);
      if (logger.isDebugEnabled()) {
{
          StringBuilder sb=new StringBuilder();
          sb.append("Loading Shared ClassLoader Domain: ").append(domain).append(SystemUtils.LINE_SEPARATOR);
          sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
          for (          File jar : jars) {
            sb.append(jar.toURI().toURL()).append(SystemUtils.LINE_SEPARATOR);
          }
          sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
          logger.debug(sb.toString());
        }
      }
      for (      File jar : jars) {
        addURL(jar.toURI().toURL());
      }
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new RuntimeException(t);
  }
}
