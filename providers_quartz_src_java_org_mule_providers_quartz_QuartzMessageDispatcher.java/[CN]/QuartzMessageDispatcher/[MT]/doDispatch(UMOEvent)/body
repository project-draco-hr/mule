{
  JobDetail jobDetail=new JobDetail();
  jobDetail.setName(event.getEndpoint().getEndpointURI().toString());
  JobDataMap jobDataMap=new JobDataMap();
  jobDataMap.putAll(event.getProperties());
  jobDetail.setJobDataMap(jobDataMap);
  Job job;
  Object payload=event.getTransformedMessage();
  String jobClass=jobDataMap.getString(QuartzConnector.PROPERTY_JOB_CLASS);
  if (payload instanceof Job) {
    job=(Job)payload;
    jobDataMap.put(QuartzConnector.PROPERTY_JOB_OBJECT,job);
    jobDetail.setJobClass(DelegatingJob.class);
  }
 else   if (jobClass != null) {
    jobDetail.setJobClass(ClassHelper.loadClass(jobClass,getClass()));
  }
 else {
    Object tempJob=jobDataMap.get(QuartzConnector.PROPERTY_JOB_OBJECT);
    if (tempJob == null) {
      tempJob=jobDataMap.get(QuartzConnector.PROPERTY_JOB_REF);
      if (tempJob == null) {
        throw new DispatchException(new Message("quartz",2),event.getMessage(),event.getEndpoint());
      }
 else {
        tempJob=MuleManager.getInstance().getContainerContext().getComponent(tempJob);
        if (!(tempJob instanceof Job)) {
          throw new DispatchException(new Message("quartz",3),event.getMessage(),event.getEndpoint());
        }
      }
    }
 else     if (!(tempJob instanceof Job)) {
      throw new DispatchException(new Message("quartz",3),event.getMessage(),event.getEndpoint());
    }
    jobDetail.setJobClass(DelegatingJob.class);
  }
  jobDataMap.put(QuartzConnector.PROPERTY_PAYLOAD,payload);
  Trigger trigger=null;
  String cronExpression=jobDataMap.getString(QuartzConnector.PROPERTY_CRON_EXPRESSION);
  String repeatInterval=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_INTERVAL);
  String repeatCount=jobDataMap.getString(QuartzConnector.PROPERTY_REPEAT_COUNT);
  String startDelay=jobDataMap.getString(QuartzConnector.PROPERTY_START_DELAY);
  String groupName=jobDataMap.getString(QuartzConnector.PROPERTY_GROUP_NAME);
  String jobGroupName=jobDataMap.getString(QuartzConnector.PROPERTY_JOB_GROUP_NAME);
  if (groupName == null)   groupName=QuartzConnector.DEFUALT_GROUP_NAME;
  if (jobGroupName == null)   jobGroupName=groupName;
  jobDetail.setGroup(groupName);
  if (cronExpression != null) {
    CronTrigger ctrigger=new CronTrigger();
    ctrigger.setCronExpression(cronExpression);
    trigger=ctrigger;
  }
 else   if (repeatInterval != null) {
    SimpleTrigger strigger=new SimpleTrigger();
    strigger.setRepeatInterval(Long.parseLong(repeatInterval));
    if (repeatCount != null) {
      strigger.setRepeatCount(Integer.parseInt(repeatCount));
    }
 else {
      strigger.setRepeatCount(-1);
    }
    trigger=strigger;
  }
 else {
    throw new IllegalArgumentException(new Message("quartz",1).getMessage());
  }
  long start=System.currentTimeMillis();
  if (startDelay != null) {
    start+=Long.parseLong(startDelay);
  }
  trigger.setStartTime(new Date(start));
  trigger.setName(event.getEndpoint().getEndpointURI().toString());
  trigger.setGroup(groupName);
  trigger.setJobName(event.getEndpoint().getEndpointURI().toString());
  trigger.setJobGroup(jobGroupName);
  Scheduler scheduler=((QuartzConnector)connector).getScheduler();
  scheduler.scheduleJob(jobDetail,trigger);
}
