{
  List<URL> urls=getApplicationResourceUrls(descriptor);
  final String domain=descriptor.getDomain();
  ArtifactClassLoader parent;
  if (domain == null) {
    parent=domainClassLoaderRepository.getDefaultDomainClassLoader();
  }
 else {
    parent=domainClassLoaderRepository.getDomainClassLoader(domain);
  }
  final Set<ApplicationPluginDescriptor> plugins=descriptor.getPlugins();
  ClassLoaderLookupPolicy lookupPolicy=parent.getClassLoaderLookupPolicy();
  if (!plugins.isEmpty()) {
    final Map<String,ClassLoaderLookupStrategy> lookupStrategies;
    URL[] pluginLibs=descriptor.getSharedPluginLibs();
    if (pluginLibs != null && pluginLibs.length != 0) {
      lookupStrategies=getLookStrategiesFrom(pluginLibs);
      lookupPolicy=lookupPolicy.extend(lookupStrategies);
      parent=new MuleArtifactClassLoader(SHARED_LIB_ARTIFACT_NAME,pluginLibs,parent.getClassLoader(),lookupPolicy);
    }
    parent=createPluginsClassLoader(parent,plugins);
  }
 else {
    lookupPolicy=lookupPolicy.extend(emptyMap());
  }
  return new MuleApplicationClassLoader(descriptor.getName(),parent.getClassLoader(),nativeLibraryFinderFactory.create(descriptor.getName()),urls,lookupPolicy);
}
