{
  registerBeanDefinitionParser("until-successful",new ChildDefinitionParser("messageProcessor",EndpointDlqUntilSuccessful.class));
  registerBeanDefinitionParser("request-reply",new ChildDefinitionParser("messageProcessor",SimpleAsyncEndpointRequestReplyRequester.class));
  registerBeanDefinitionParser("default-exception-strategy",new ExceptionStrategyDefinitionParser(DefaultMessagingExceptionStrategy.class));
  registerBeanDefinitionParser("endpoint",new OrphanEndpointDefinitionParser(EndpointURIEndpointBuilder.class));
  registerBeanDefinitionParser("inbound-endpoint",new ChildEndpointDefinitionParser(InboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("outbound-endpoint",new ChildEndpointDefinitionParser(OutboundEndpointFactoryBean.class));
  registerBeanDefinitionParser("poll",new ChildEndpointDefinitionParser(PollingMessageSourceFactoryBean.class));
  registerBeanDefinitionParser("response",new ResponseDefinitionParser());
  registerBeanDefinitionParser("dispatcher-threading-profile",new ThreadingProfileDefinitionParser("dispatcherThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE));
  registerBeanDefinitionParser("receiver-threading-profile",new ThreadingProfileDefinitionParser("receiverThreadingProfile",MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE));
  registerBeanDefinitionParser("service-overrides",new ServiceOverridesDefinitionParser());
  registerBeanDefinitionParser("custom-connector",new MuleOrphanDefinitionParser(true));
  registerBeanDefinitionParser("recipient-list",new ChildDefinitionParser("messageProcessor",ExpressionRecipientList.class));
  registerBeanDefinitionParser("component",new ComponentDelegatingDefinitionParser(DefaultJavaWithBindingComponent.class));
  registerBeanDefinitionParser("pooled-component",new ComponentDelegatingDefinitionParser(PooledJavaWithBindingsComponent.class));
  registerMuleBeanDefinitionParser("binding",new BindingDefinitionParser("interfaceBinding",DefaultInterfaceBinding.class));
  MessageProcessorDefinitionParser jsParser=new MessageProcessorDefinitionParser(WebServiceMessageProcessorWithInboundEndpointBuilder.class);
  jsParser.registerPreProcessor(new AddAttribute("frontend",CxfConstants.JAX_WS_FRONTEND));
  registerBeanDefinitionParser("jaxws-service",jsParser);
  MessageProcessorDefinitionParser ssParser=new MessageProcessorDefinitionParser(WebServiceMessageProcessorWithInboundEndpointBuilder.class);
  ssParser.registerPreProcessor(new AddAttribute("frontend",CxfConstants.SIMPLE_FRONTEND));
  registerBeanDefinitionParser("simple-service",ssParser);
  registerBeanDefinitionParser("simple-client",new MessageProcessorDefinitionParser(SimpleClientWithDecoupledEndpointFactoryBean.class));
  registerBeanDefinitionParser("jaxws-client",new MessageProcessorDefinitionParser(JaxWsClientWithDecoupledEndpointFactoryBean.class));
  registerBeanDefinitionParser("proxy-client",new MessageProcessorDefinitionParser(ProxyClientWithDecoupledEndpointFactoryBean.class));
  registerBeanDefinitionParser("wrapper-component",new ComponentDefinitionParser(WebServiceWrapperComponent.class));
  registerBeanDefinitionParser("publish-notifications",new DefaultNameMuleOrphanDefinitionParser(EndpointNotificationLoggerAgent.class));
  registerBeanDefinitionParser("outbound-endpoint",new ChildEndpointDefinitionParser(OutboundEndpointFactoryBean.class));
}
