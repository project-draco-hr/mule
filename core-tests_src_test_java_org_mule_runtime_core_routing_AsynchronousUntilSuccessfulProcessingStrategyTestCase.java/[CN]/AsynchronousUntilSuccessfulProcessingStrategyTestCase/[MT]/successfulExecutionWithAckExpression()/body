{
  String ackExpression="some-expression";
  String expressionEvalutaionResult="new payload";
  when(mockUntilSuccessfulConfiguration.getAckExpression()).thenReturn(ackExpression);
  when(mockUntilSuccessfulConfiguration.getMuleContext().getExpressionManager().evaluate(ackExpression,mockEvent,null)).thenReturn(expressionEvalutaionResult);
  executeUntilSuccessful();
  waitUntilRouteIsExecuted();
  verify(mockRoute,times(1)).process(mockEvent);
  verify(mockUntilSuccessfulConfiguration.getMuleContext().getExpressionManager(),times(1)).evaluate(ackExpression,mockEvent,null);
  verify(mockEvent,times(1)).setMessage(argThat(new ArgumentMatcher<MuleMessage>(){
    @Override public boolean matches(    Object argument){
      assertThat(((MuleMessage)argument).getPayload(),equalTo(expressionEvalutaionResult));
      return true;
    }
  }
));
  verify(mockFlow.getExceptionListener(),never()).handleException(any(MessagingException.class),eq(mockEvent));
}
