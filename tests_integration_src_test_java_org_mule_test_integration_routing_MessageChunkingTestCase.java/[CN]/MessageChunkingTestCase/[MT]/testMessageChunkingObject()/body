{
  final AtomicInteger messagePartsCount=new AtomicInteger(0);
  final Latch chunkingReceiverLatch=new Latch();
  final SimpleSerializableObject simpleSerializableObject=new SimpleSerializableObject("Test String",true,99);
  final int parts=(int)Math.ceil((SerializationUtils.serialize(simpleSerializableObject).length / (double)2));
  muleContext.registerListener(new FunctionalTestNotificationListener(){
    public void onNotification(    ServerNotification notification){
      assertEquals("ChunkingObjectReceiver",notification.getResourceIdentifier());
      Object reply=((FunctionalTestNotification)notification).getEventContext().getMessage().getPayload();
      assertTrue(reply instanceof SimpleSerializableObject);
      SimpleSerializableObject replySimpleSerializableObject=(SimpleSerializableObject)reply;
      assertEquals(simpleSerializableObject.b,replySimpleSerializableObject.b);
      assertEquals(simpleSerializableObject.i,replySimpleSerializableObject.i);
      assertEquals(simpleSerializableObject.s,replySimpleSerializableObject.s);
      chunkingReceiverLatch.countDown();
    }
  }
,"ChunkingObjectReceiver");
  muleContext.registerListener(new EndpointMessageNotificationListener(){
    public void onNotification(    ServerNotification notification){
      if (notification.getAction() == EndpointMessageNotification.MESSAGE_RECEIVED) {
        messagePartsCount.getAndIncrement();
      }
      assertEquals("ChunkingObjectReceiver",notification.getResourceIdentifier());
    }
  }
,"ChunkingObjectReceiver");
  MuleClient client=new MuleClient();
  client.dispatch("vm://inbound.object.channel",simpleSerializableObject,null);
  assertTrue(chunkingReceiverLatch.await(20L,TimeUnit.SECONDS));
  assertEquals(parts,messagePartsCount.get());
}
