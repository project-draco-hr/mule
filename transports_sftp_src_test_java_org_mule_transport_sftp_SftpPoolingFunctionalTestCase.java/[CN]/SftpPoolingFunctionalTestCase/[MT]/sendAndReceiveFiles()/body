{
  final CountDownLatch latch=new CountDownLatch(sendFiles.size());
  final AtomicInteger loopCount=new AtomicInteger(0);
  MuleClient client=new MuleClient(muleContext);
  receiveFiles=new ArrayList<String>();
  EventCallback callback=new EventCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      String filename=context.getMessage().getProperty(SftpConnector.PROPERTY_ORIGINAL_FILENAME,PropertyScope.INBOUND);
      SftpInputStream inputStream=null;
      try {
        logger.info("called " + loopCount.incrementAndGet() + " times. Filename = "+ filename);
        inputStream=(SftpInputStream)context.getMessage().getPayload();
        String o=IOUtils.toString(inputStream);
        if (sendFiles.contains(o)) {
          logger.info("The received file was added. Received: '" + o + "'");
          receiveFiles.add(o);
        }
 else {
          fail("The received file was not sent. Received: '" + o + "'");
        }
        latch.countDown();
      }
 catch (      IOException e) {
        logger.error("Error occured while processing callback for file=" + filename,e);
        throw e;
      }
 finally {
        if (inputStream != null) {
          inputStream.close();
        }
      }
    }
  }
;
  getFunctionalTestComponent("receiving").setEventCallback(callback);
  for (  String sendFile : sendFiles) {
    HashMap<String,String> props=new HashMap<String,String>(1);
    props.put(SftpConnector.PROPERTY_FILENAME,sendFile + ".txt");
    client.dispatch("vm://test.upload",sendFile,props);
  }
  latch.await(TIMEOUT,TimeUnit.MILLISECONDS);
  logger.debug("Number of files sent: " + sendFiles.size());
  logger.debug("Number of files received: " + receiveFiles.size());
  assertTrue("expected : " + sendFiles.size() + " but got "+ receiveFiles.size(),sendFiles.size() == receiveFiles.size());
}
