{
  DefaultMuleEvent event=null;
  QueueSession queueSession=muleContext.getQueueManager().getQueueSession();
  running.set(true);
  while (!lifecycleManager.getState().isStopped()) {
    try {
      if (lifecycleManager.isPhaseComplete(Pausable.PHASE_NAME)) {
        waitIfPaused();
        if (lifecycleManager.getState().isStopping()) {
          if (!isQueuePersistent() && (queueSession != null && getQueueSize() > 0)) {
            logger.warn(CoreMessages.stopPausedSedaStageNonPeristentQueueMessageLoss(getQueueSize(),getQueueName()));
          }
          break;
        }
      }
      if (lifecycleManager.getState().isStopping()) {
        if (isQueuePersistent() || queueSession == null || getQueueSize() <= 0) {
          break;
        }
      }
      event=(DefaultMuleEvent)dequeue();
    }
 catch (    InterruptedException ie) {
      break;
    }
catch (    Exception e) {
      muleContext.getExceptionListener().handleException(e);
    }
    if (event != null) {
      final MuleEvent eventToProcess=event;
      TransactionalErrorHandlingProcessingTemplate processingTemplate=TransactionalErrorHandlingProcessingTemplate.createMainProcessingTemplate(muleContext,event.getFlowConstruct().getExceptionListener());
      ProcessingCallback<MuleEvent> processingCallback=new ProcessingCallback<MuleEvent>(){
        @Override public MuleEvent process() throws Exception {
          if (isStatsEnabled()) {
            queueStatistics.decQueuedEvent();
          }
          if (logger.isDebugEnabled()) {
            logger.debug(MessageFormat.format("{0}: Dequeued event from {1}",getStageDescription(),getQueueName()));
          }
          AsyncMessageProcessorWorker work=new AsyncMessageProcessorWorker(eventToProcess);
          try {
            workManagerSource.getWorkManager().scheduleWork(work,WorkManager.INDEFINITE,null,new AsyncWorkListener(next));
          }
 catch (          Exception e) {
            OptimizedRequestContext.unsafeSetEvent(work.getEvent());
            throw new MessagingException(work.getEvent(),e);
          }
          return null;
        }
      }
;
      try {
        processingTemplate.execute(processingCallback);
      }
 catch (      MessagingException e) {
      }
catch (      Exception e) {
        muleContext.getExceptionListener().handleException(e);
      }
    }
  }
  running.set(false);
}
