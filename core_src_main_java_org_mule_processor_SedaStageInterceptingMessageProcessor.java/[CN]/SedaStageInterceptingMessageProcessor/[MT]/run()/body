{
  DefaultMuleEvent event=null;
  QueueSession queueSession=muleContext.getQueueManager().getQueueSession();
  running.set(true);
  while (!lifecycleManager.getState().isStopped()) {
    try {
      if (lifecycleManager.isPhaseComplete(Pausable.PHASE_NAME)) {
        waitIfPaused();
        if (lifecycleManager.getState().isStopping()) {
          if (!isQueuePersistent() && (queueSession != null && getQueueSize() > 0)) {
            logger.warn(CoreMessages.stopPausedSedaStageNonPeristentQueueMessageLoss(getQueueSize(),getQueueName()));
          }
          break;
        }
      }
      if (lifecycleManager.getState().isStopping()) {
        if (isQueuePersistent() || queueSession == null || getQueueSize() <= 0) {
          break;
        }
      }
      event=(DefaultMuleEvent)dequeue();
    }
 catch (    InterruptedException ie) {
      break;
    }
catch (    Exception e) {
      muleContext.getExceptionListener().handleException(e);
    }
    if (event != null) {
      if (isStatsEnabled()) {
        queueStatistics.decQueuedEvent();
      }
      if (logger.isDebugEnabled()) {
        logger.debug(MessageFormat.format("{0}: Dequeued event from {1}",getStageDescription(),getQueueName()));
      }
      SedaStageWorker work=new SedaStageWorker(event);
      if (doThreading) {
        try {
          workManagerSource.getWorkManager().scheduleWork(work,WorkManager.INDEFINITE,null,this);
        }
 catch (        Exception e) {
          event.getFlowConstruct().getExceptionListener().handleException(e,event);
        }
      }
 else {
        try {
          work.doWork();
        }
 catch (        MuleException e) {
          MessagingExceptionHandler exceptionListener=event.getFlowConstruct().getExceptionListener();
          if (e instanceof MessagingException) {
            exceptionListener.handleException(e,event);
          }
 else {
            exceptionListener.handleException(new MessagingException(CoreMessages.eventProcessingFailedFor(getStageDescription()),event,e),event);
          }
        }
      }
    }
  }
  running.set(false);
}
