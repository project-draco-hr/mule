{
  if (!muleContext.isPrimaryPollingInstance()) {
    return;
  }
  List<EventGroup> expired=new ArrayList<EventGroup>(1);
  try {
    for (    Serializable o : eventGroups.allKeys()) {
      EventGroup group=getEventGroup(o);
      if (group.getCreated() + getTimeout() < System.currentTimeMillis()) {
        expired.add(group);
      }
    }
  }
 catch (  ObjectStoreException e) {
    logger.warn("expiry failed dues to ObjectStoreException " + e);
  }
  if (expired.size() > 0) {
    for (    Object anExpired : expired) {
      final EventGroup group=(EventGroup)anExpired;
      ExecutionTemplate<MuleEvent> executionTemplate=ErrorHandlingExecutionTemplate.createErrorHandlingExecutionTemplate(muleContext,flowConstruct.getExceptionListener());
      try {
        executionTemplate.execute(new ExecutionCallback<MuleEvent>(){
          @Override public MuleEvent process() throws Exception {
            handleGroupExpiry(group);
            return null;
          }
        }
);
      }
 catch (      MessagingException e) {
      }
catch (      Exception e) {
        muleContext.getExceptionListener().handleException(e);
      }
    }
  }
}
