{
  List<EventGroup> expired=new ArrayList<EventGroup>(1);
  try {
    for (    Serializable o : eventGroups.allKeys()) {
      EventGroup group=(EventGroup)eventGroups.retrieve(o);
      if ((group.getCreated() + getTimeout() * MILLI_TO_NANO_MULTIPLIER) < System.nanoTime()) {
        expired.add(group);
      }
    }
  }
 catch (  ObjectStoreException e) {
    logger.warn("expiry failed dues to ObjectStoreException " + e);
  }
  if (expired.size() > 0) {
    for (    Object anExpired : expired) {
      final EventGroup group=(EventGroup)anExpired;
      ProcessingTemplate<MuleEvent> processingTemplate=ErrorHandlingProcessingTemplate.createErrorHandlingProcessingTemplate(muleContext,group.getMessageCollectionEvent().getFlowConstruct().getExceptionListener());
      try {
        processingTemplate.execute(new ProcessingCallback<MuleEvent>(){
          @Override public MuleEvent process() throws Exception {
            handleGroupExpiry(group);
            return null;
          }
        }
);
      }
 catch (      MessagingException e) {
      }
catch (      Exception e) {
        muleContext.getExceptionListener().handleException(e);
      }
    }
  }
}
