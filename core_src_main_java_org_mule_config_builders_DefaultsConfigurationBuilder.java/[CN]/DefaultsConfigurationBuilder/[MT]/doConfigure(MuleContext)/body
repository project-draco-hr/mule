{
  MuleRegistry registry=muleContext.getRegistry();
  registry.registerObject(MuleProperties.OBJECT_MULE_SIMPLE_REGISTRY_BOOTSTRAP,new SimpleRegistryBootstrap());
  FilePersistenceStrategy ps=new FilePersistenceStrategy();
  ps.setMuleContext(muleContext);
  QueueManager queueManager=new TransactionalQueueManager();
  queueManager.setPersistenceStrategy(ps);
  registry.registerObject(MuleProperties.OBJECT_QUEUE_MANAGER,queueManager);
  registry.registerObject(MuleProperties.OBJECT_SECURITY_MANAGER,new MuleSecurityManager());
  registry.registerObject(MuleProperties.OBJECT_MULE_ENDPOINT_FACTORY,new DefaultEndpointFactory());
  registry.registerObject(MuleProperties.OBJECT_MULE_STREAM_CLOSER_SERVICE,new DefaultStreamCloserService());
  ThreadingProfile defaultThreadingProfile=new ChainedThreadingProfile();
  defaultThreadingProfile.setThreadWaitTimeout(30);
  defaultThreadingProfile.setMaxThreadsActive(10);
  defaultThreadingProfile.setMaxThreadsIdle(10);
  defaultThreadingProfile.setMaxBufferSize(0);
  defaultThreadingProfile.setThreadTTL(60000);
  defaultThreadingProfile.setPoolExhaustedAction(ThreadingProfile.WHEN_EXHAUSTED_RUN);
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_THREADING_PROFILE,defaultThreadingProfile);
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_MESSAGE_RECEIVER_THREADING_PROFILE,new ChainedThreadingProfile(defaultThreadingProfile));
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_MESSAGE_REQUESTER_THREADING_PROFILE,new ChainedThreadingProfile(defaultThreadingProfile));
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_MESSAGE_DISPATCHER_THREADING_PROFILE,new ChainedThreadingProfile(defaultThreadingProfile));
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_SERVICE_THREADING_PROFILE,new ChainedThreadingProfile(defaultThreadingProfile));
  registry.registerObject(MuleProperties.OBJECT_DEFAULT_RETRY_POLICY_TEMPLATE,new NoRetryPolicyTemplate());
  Model systemModel=new SedaModel();
  systemModel.setName(MuleProperties.OBJECT_SYSTEM_MODEL);
  registry.registerModel(systemModel);
}
