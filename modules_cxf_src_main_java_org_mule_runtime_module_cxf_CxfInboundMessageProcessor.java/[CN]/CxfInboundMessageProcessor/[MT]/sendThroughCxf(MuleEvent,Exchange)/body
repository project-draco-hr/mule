{
  final MessageImpl m=new MessageImpl();
  m.setExchange(exchange);
  final MuleMessage muleReqMsg=event.getMessage();
  String method=muleReqMsg.getInboundProperty(HTTP_METHOD_PROPERTY);
  MediaType ct=muleReqMsg.getDataType().getMediaType();
  if (!ct.matches(ANY)) {
    m.put(Message.CONTENT_TYPE,ct.toRfcString());
  }
  String path=requestPropertyManager.getRequestPath(event.getMessage());
  if (path == null) {
    path="";
  }
  if (method != null) {
    m.put(Message.HTTP_REQUEST_METHOD,method);
    m.put(Message.PATH_INFO,path);
    String basePath=requestPropertyManager.getBasePath(muleReqMsg);
    m.put(Message.BASE_PATH,basePath);
    method=method.toUpperCase();
  }
  if (!"GET".equals(method)) {
    Object payload=event.getMessage().getPayload();
    setPayload(event,m,payload);
  }
  String soapAction=getSoapAction(event.getMessage());
  m.put(SoapConstants.SOAP_ACTION_PROPERTY_CAPS,soapAction);
  org.apache.cxf.transport.Destination d;
  if (server != null) {
    d=server.getDestination();
  }
 else {
    String serviceUri=getUri(event);
    DestinationFactoryManager dfm=bus.getExtension(DestinationFactoryManager.class);
    DestinationFactory df=dfm.getDestinationFactoryForUri(serviceUri);
    EndpointInfo ei=new EndpointInfo();
    ei.setAddress(serviceUri);
    d=df.getDestination(ei);
  }
  if (shouldSoapActionHeader()) {
    Map<String,List<String>> protocolHeaders=new HashMap<>();
    if (soapAction != null && !soapAction.isEmpty()) {
      List<String> soapActions=new ArrayList<>();
      soapActions.add(soapAction);
      protocolHeaders.put(SoapBindingConstants.SOAP_ACTION,soapActions);
    }
    if (SoapJMSConstants.SOAP_JMS_NAMESPACE.equals(((MuleUniversalDestination)d).getEndpointInfo().getTransportId())) {
      String contentType=muleReqMsg.getInboundProperty(SoapJMSConstants.CONTENTTYPE_FIELD);
      if (contentType == null) {
        contentType="text/xml";
      }
      protocolHeaders.put(SoapJMSConstants.CONTENTTYPE_FIELD,Collections.singletonList(contentType));
      String requestUri=muleReqMsg.getInboundProperty(SoapJMSConstants.REQUESTURI_FIELD);
      if (requestUri == null) {
        if (muleReqMsg.getAttributes() instanceof HttpRequestAttributes) {
          final HttpRequestAttributes httpRequestAttributes=(HttpRequestAttributes)muleReqMsg.getAttributes();
          requestUri=httpRequestAttributes.getScheme() + "://" + httpRequestAttributes.getHeaders().get("host")+ httpRequestAttributes.getRequestUri();
        }
 else {
          requestUri=muleReqMsg.getInboundProperty("http.scheme") + "://" + muleReqMsg.getInboundProperty("host")+ muleReqMsg.getInboundProperty("http.request.uri");
        }
      }
      protocolHeaders.put(SoapJMSConstants.REQUESTURI_FIELD,Collections.singletonList(requestUri));
    }
    m.put(Message.PROTOCOL_HEADERS,protocolHeaders);
  }
  m.put(LocalConduit.DIRECT_DISPATCH,Boolean.TRUE);
  m.setDestination(d);
  exchange.put(StaxInEndingInterceptor.STAX_IN_NOCLOSE,Boolean.TRUE);
  exchange.setInMessage(m);
  exchange.put(CxfConstants.MULE_EVENT,event);
  try {
    d.getMessageObserver().onMessage(m);
  }
 catch (  SuspendedInvocationException e) {
    MuleEvent responseEvent=(MuleEvent)exchange.get(CxfConstants.MULE_EVENT);
    if (responseEvent == null || !responseEvent.equals(NonBlockingVoidMuleEvent.getInstance())) {
      throw e;
    }
  }
  return (MuleEvent)exchange.get(CxfConstants.MULE_EVENT);
}
