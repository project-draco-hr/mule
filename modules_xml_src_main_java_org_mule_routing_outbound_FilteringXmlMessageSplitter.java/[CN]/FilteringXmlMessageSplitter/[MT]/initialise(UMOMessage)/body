{
  if (logger.isDebugEnabled()) {
    if (splitExpression.length() == 0) {
      logger.warn("splitExpression is not specified, no processing will take place");
    }
 else {
      logger.debug("splitExpression is " + splitExpression);
    }
  }
  Object src=message.getPayload();
  try {
    if (src instanceof byte[]) {
      src=new String((byte[])src);
    }
    Document dom4jDoc;
    if (src instanceof String) {
      String xml=(String)src;
      SAXReader reader=new SAXReader();
      setDoSchemaValidation(reader,isValidateSchema());
      InputStream xsdAsStream=IOUtils.getResourceAsStream(getExternalSchemaLocation(),getClass());
      if (xsdAsStream == null) {
        throw new IllegalArgumentException("Couldn't find schema at " + getExternalSchemaLocation());
      }
      reader.setProperty(JAXP_PROPERTIES_SCHEMA_LANGUAGE,JAXP_PROPERTIES_SCHEMA_LANGUAGE_VALUE);
      reader.setProperty(JAXP_PROPERTIES_SCHEMA_SOURCE,xsdAsStream);
      dom4jDoc=reader.read(new StringReader(xml));
    }
 else     if (src instanceof org.dom4j.Document) {
      dom4jDoc=(org.dom4j.Document)src;
    }
 else {
      logger.error("Non-xml message payload: " + src.getClass().toString());
      return;
    }
    if (dom4jDoc != null) {
      if (splitExpression.length() > 0) {
        XPath xpath=dom4jDoc.createXPath(splitExpression);
        if (namespaces != null) {
          xpath.setNamespaceURIs(namespaces);
        }
        List foundNodes=xpath.selectNodes(dom4jDoc);
        if (logger.isDebugEnabled()) {
          logger.debug("Split into " + foundNodes.size());
        }
        List parts=new ArrayList();
        for (Iterator iterator=foundNodes.iterator(); iterator.hasNext(); ) {
          Node node=(Node)iterator.next();
          if (node instanceof Element) {
            node=(Node)node.clone();
            parts.add(DocumentHelper.createDocument((Element)node));
          }
 else {
            logger.warn("Dcoument node: " + node.asXML() + " is not an element and thus is not a valid part");
          }
        }
        FilteringXmlMessageSplitter.nodes.set(parts);
      }
    }
 else {
      logger.warn("Unsupported message type, ignoring");
    }
  }
 catch (  Exception ex) {
    throw new IllegalArgumentException("Failed to initialise the payload: " + ExceptionUtils.getStackTrace(ex));
  }
  Map theProperties=new HashMap();
  for (Iterator iterator=message.getPropertyNames().iterator(); iterator.hasNext(); ) {
    String propertyKey=(String)iterator.next();
    theProperties.put(propertyKey,message.getProperty(propertyKey));
  }
  properties.set(theProperties);
}
