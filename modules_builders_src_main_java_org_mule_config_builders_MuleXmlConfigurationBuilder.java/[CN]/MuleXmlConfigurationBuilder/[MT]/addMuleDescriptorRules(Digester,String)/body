{
  path+="/mule-descriptor";
  addObjectCreateOrGetFromContainer(path,DEFAULT_DESCRIPTOR,"className","ref","container",false);
  addSetPropertiesRule(path,digester);
  addMessageRouterRules(digester,path,"inbound");
  addMessageRouterRules(digester,path,"outbound");
  addMessageRouterRules(digester,path,"nested");
  addMessageRouterRules(digester,path,"response");
  addThreadingProfileRules(digester,path,"component");
  addPoolingProfileRules(digester,path);
  addQueueProfileRules(digester,path);
  digester.addRule(path + "/interceptor",new Rule(){
    public void begin(    String string,    String string1,    Attributes attributes) throws Exception {
      String value=attributes.getValue("name");
      if (value == null) {
        value=attributes.getValue("className");
      }
      UMOManager man=(UMOManager)digester.getRoot();
      UMOInterceptorStack interceptorStack=man.lookupInterceptorStack(value);
      MuleDescriptor temp=(MuleDescriptor)digester.peek();
      if (interceptorStack != null) {
        temp.addInterceptor(interceptorStack);
      }
 else {
        Class clazz=digester.getClassLoader().loadClass(value);
        Object instance=clazz.newInstance();
        temp.addInterceptor((UMOInterceptor)instance);
        digester.push(instance);
      }
    }
    public void end(    String s,    String s1) throws Exception {
      if (digester.peek() instanceof UMOInterceptor) {
        digester.pop();
      }
    }
  }
);
  addMulePropertiesRule(path + "/interceptor",digester);
  addExceptionStrategyRules(digester,path);
  addMulePropertiesRule(path,digester,"setProperties");
  digester.addSetNext(path + "/properties","setProperties");
  digester.addRule(path,new Rule(){
    public void end(    String s,    String s1) throws Exception {
      UMODescriptor descriptor=(UMODescriptor)digester.peek();
      Object obj=digester.peek(1);
      final UMOModel model=(UMOModel)obj;
      descriptor.setModelName(model.getName());
      model.registerComponent(descriptor);
    }
  }
);
}
