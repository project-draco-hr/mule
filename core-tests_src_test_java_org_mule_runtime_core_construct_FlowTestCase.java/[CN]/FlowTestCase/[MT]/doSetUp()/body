{
  super.doSetUp();
  sensingMessageProcessor=getSensingNullMessageProcessor();
  flow=new Flow(FLOW_NAME,muleContext);
  flow.setMessageSource(directInboundMessageSource);
  dynamicProcessorContainer=mock(DynamicMessageProcessorContainer.class);
  when(dynamicProcessorContainer.process(any(MuleEvent.class))).then(new Answer<MuleEvent>(){
    @Override public MuleEvent answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      return (MuleEvent)args[0];
    }
  }
);
  List<MessageProcessor> processors=new ArrayList<MessageProcessor>();
  processors.add(new ResponseMessageProcessorAdapter(new StringAppendTransformer("f")));
  processors.add(new ResponseMessageProcessorAdapter(new StringAppendTransformer("e")));
  processors.add(new ResponseMessageProcessorAdapter(new StringAppendTransformer("d")));
  processors.add(new StringAppendTransformer("a"));
  processors.add(new StringAppendTransformer("b"));
  processors.add(new StringAppendTransformer("c"));
  processors.add(dynamicProcessorContainer);
  processors.add(new MessageProcessor(){
    @Override public MuleEvent process(    MuleEvent event) throws MuleException {
      event.getMessage().setOutboundProperty("thread",Thread.currentThread());
      return event;
    }
  }
);
  processors.add(sensingMessageProcessor);
  flow.setMessageProcessors(processors);
}
