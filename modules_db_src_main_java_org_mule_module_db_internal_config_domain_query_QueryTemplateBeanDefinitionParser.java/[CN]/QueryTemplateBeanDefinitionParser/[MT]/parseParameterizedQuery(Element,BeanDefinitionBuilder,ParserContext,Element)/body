{
  boolean hasFileAttribute=sqlElem.hasAttribute(FILE_ATTRIBUTE);
  boolean hasTextContent=!element.getTextContent().trim().isEmpty();
  if (hasFileAttribute && hasTextContent) {
    throw new IllegalArgumentException(String.format("Element %s cannot contain attribute file and text content simultaneously",element.getTagName()));
  }
  BeanDefinitionBuilder queryTemplateFactory=BeanDefinitionBuilder.genericBeanDefinition(ParameterizedQueryTemplateFactoryBean.class);
  if (hasFileAttribute) {
    String fileName=sqlElem.getAttribute(FILE_ATTRIBUTE);
    BeanDefinitionBuilder queryFileBuilder=BeanDefinitionBuilder.genericBeanDefinition(QueryFileFactoryBean.class);
    queryFileBuilder.addConstructorArgValue(fileName);
    queryFileBuilder.addConstructorArgValue(new DefaultFileReader());
    queryTemplateFactory.addConstructorArgValue(queryFileBuilder.getBeanDefinition());
  }
 else {
    Node node=sqlElem.getFirstChild();
    String sqlText;
    if (node.getNextSibling() != null && node.getNextSibling().getNodeType() == Node.CDATA_SECTION_NODE) {
      sqlText=node.getNextSibling().getNodeValue();
    }
 else {
      sqlText=node.getNodeValue();
    }
    queryTemplateFactory.addConstructorArgValue(sqlText);
  }
  List<Object> params=new ManagedList<Object>();
  List<Element> childElementsByTagName=DomUtils.getChildElementsByTagName(element,IN_PARAM_ELEMENT);
  for (  Element param : childElementsByTagName) {
    BeanDefinition paramBean=parseParameter(nestedCtx,param);
    params.add(paramBean);
  }
  queryTemplateFactory.addConstructorArgValue(params);
  queryTemplateFactory.addConstructorArgValue(new SimpleQueryTemplateParser());
  builder.addConstructorArgValue(queryTemplateFactory.getBeanDefinition());
  element.removeChild(sqlElem);
}
