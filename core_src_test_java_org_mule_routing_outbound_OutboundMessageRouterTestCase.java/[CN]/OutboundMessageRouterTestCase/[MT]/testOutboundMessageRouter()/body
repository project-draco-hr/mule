{
  Mock session=MuleTestUtils.getMockSession();
  session.matchAndReturn("getService",getTestService());
  DefaultOutboundRouterCollection messageRouter=createObject(DefaultOutboundRouterCollection.class);
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  assertNotNull(messageRouter.getCatchAllStrategy());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("Test1Provider","test://Test1Provider?synchronous=false");
  assertNotNull(endpoint1);
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("Test2Provider");
  assertNotNull(endpoint2);
  FilteringOutboundRouter router1=new FilteringOutboundRouter();
  PayloadTypeFilter filter=new PayloadTypeFilter(String.class);
  router1.setFilter(filter);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint1);
  router1.setEndpoints(endpoints);
  FilteringOutboundRouter router2=new FilteringOutboundRouter();
  PayloadTypeFilter filter2=new PayloadTypeFilter();
  filter2.setExpectedType(Exception.class);
  router2.setFilter(filter2);
  endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint2);
  router2.setEndpoints(endpoints);
  messageRouter.addRouter(router1);
  assertEquals(1,messageRouter.getRouters().size());
  assertNotNull(messageRouter.removeRouter(router1));
  assertEquals(0,messageRouter.getRouters().size());
  List<Router> list=new ArrayList<Router>();
  list.add(router1);
  list.add(router2);
  messageRouter.setRouters(list);
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  session.expect("dispatchEvent",C.eq(message,endpoint1));
  messageRouter.route(message,(MuleSession)session.proxy());
  session.verify();
  message=new DefaultMuleMessage(new IllegalArgumentException(),muleContext);
  session.expectAndReturn("getService",getTestService());
  session.expect("dispatchEvent",C.eq(message,endpoint2));
  messageRouter.route(message,(MuleSession)session.proxy());
  session.verify();
  FilteringOutboundRouter router3=new FilteringOutboundRouter();
  router3.setFilter(new PayloadTypeFilter(Object.class));
  endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint2);
  router3.setEndpoints(endpoints);
  messageRouter.addRouter(router3);
  message=new DefaultMuleMessage("testing multiple routing",muleContext);
  session.expectAndReturn("getService",getTestService());
  session.expectAndReturn("getService",getTestService());
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(C.isA(MuleMessage.class),C.eq(endpoint2)));
  messageRouter.setMatchAll(true);
  messageRouter.route(message,(MuleSession)session.proxy());
  session.verify();
}
