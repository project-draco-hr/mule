{
  final int[] count1=new int[]{0};
  final int[] count2=new int[]{0};
  final int[] catchAllCount=new int[]{0};
  DefaultOutboundRouterCollection messageRouter=new DefaultOutboundRouterCollection();
  FilteringOutboundRouter filterRouter1=new FilteringOutboundRouter(){
    public MuleMessage route(    MuleMessage message,    MuleSession session,    boolean synchronous) throws RoutingException {
      count1[0]++;
      return message;
    }
  }
;
  FilteringOutboundRouter filterRouter2=new FilteringOutboundRouter(){
    public MuleMessage route(    MuleMessage message,    MuleSession session,    boolean synchronous) throws RoutingException {
      count2[0]++;
      return message;
    }
  }
;
  filterRouter1.setFilter(new PayloadTypeFilter(Exception.class));
  filterRouter2.setFilter(new PayloadTypeFilter(StringBuffer.class));
  messageRouter.addRouter(filterRouter1);
  messageRouter.addRouter(filterRouter2);
  LoggingCatchAllStrategy strategy=new LoggingCatchAllStrategy(){
    public MuleMessage catchMessage(    MuleMessage message,    MuleSession session,    boolean synchronous) throws RoutingException {
      catchAllCount[0]++;
      return null;
    }
  }
;
  messageRouter.setCatchAllStrategy(strategy);
  MuleSession session=getTestSession(getTestService());
  messageRouter.route(new DefaultMuleMessage("hello"),session,true);
  assertEquals(1,catchAllCount[0]);
  assertEquals(0,count1[0]);
  assertEquals(0,count2[0]);
  messageRouter.route(new DefaultMuleMessage(new StringBuffer()),session,true);
  assertEquals(1,catchAllCount[0]);
  assertEquals(0,count1[0]);
  assertEquals(1,count2[0]);
  messageRouter.route(new DefaultMuleMessage(new Exception()),session,true);
  assertEquals(1,catchAllCount[0]);
  assertEquals(1,count1[0]);
  assertEquals(1,count2[0]);
}
