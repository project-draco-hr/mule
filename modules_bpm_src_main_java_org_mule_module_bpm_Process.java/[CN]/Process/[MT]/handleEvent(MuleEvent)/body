{
  Object process;
  Map processVariables=new HashMap();
  if (event != null && !VoidMuleEvent.getInstance().equals(event)) {
    populateProcessVariables(event,processVariables,PropertyScope.INVOCATION);
    populateProcessVariables(event,processVariables,PropertyScope.INBOUND);
    Object payload=event.getMessage().getPayload();
    if (payload != null && !(payload instanceof NullPayload)) {
      processVariables.put(PROCESS_VARIABLE_INCOMING,payload);
      String originatingEndpoint=event.getMessage().getInboundProperty(MuleProperties.MULE_ORIGINATING_ENDPOINT_PROPERTY);
      if (StringUtils.isNotEmpty(originatingEndpoint)) {
        processVariables.put(PROCESS_VARIABLE_INCOMING_SOURCE,originatingEndpoint);
      }
    }
  }
  String processIdField=getProcessIdField();
  if (StringUtils.isEmpty(processIdField)) {
    processIdField=PROPERTY_PROCESS_ID;
  }
  Object processId;
  processId=event.getMessage().getSessionProperty(processIdField);
  if (processId == null) {
    processId=event.getMessage().getInvocationProperty(processIdField);
  }
  if (processId == null) {
    processId=event.getMessage().getInboundProperty(processIdField);
  }
  processVariables.remove(processIdField);
  String action=event.getMessage().getInvocationProperty(PROPERTY_ACTION,ACTION_ADVANCE);
  processVariables.remove(PROPERTY_ACTION);
  Object transition=event.getMessage().getInvocationProperty(PROPERTY_TRANSITION);
  processVariables.remove(PROPERTY_TRANSITION);
  logger.debug("Message received: payload = " + event.getMessage().getPayload().getClass().getName() + " processType = "+ name+ " processId = "+ processId+ " action = "+ action);
  if (processId == null || action.equals(ACTION_START)) {
    process=getBpms().startProcess(name,transition,processVariables);
    if ((process != null) && logger.isInfoEnabled()) {
      logger.info("New process started, ID = " + getBpms().getId(process));
    }
  }
 else   if (action.equals(ACTION_UPDATE)) {
    if (processId != null) {
      process=getBpms().updateProcess(processId,processVariables);
      if ((process != null) && logger.isInfoEnabled()) {
        logger.info("Process variables updated, ID = " + getBpms().getId(process));
      }
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot update process.");
    }
  }
 else   if (action.equals(ACTION_ABORT)) {
    if (processId != null) {
      getBpms().abortProcess(processId);
      process=NullPayload.getInstance();
      logger.info("Process aborted, ID = " + processId);
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot abort process.");
    }
  }
 else {
    if (processId != null) {
      process=getBpms().advanceProcess(processId,transition,processVariables);
      if ((process != null) && logger.isInfoEnabled()) {
        logger.info("Process advanced, ID = " + getBpms().getId(process) + ", new state = "+ getBpms().getState(process));
      }
    }
 else {
      throw new IllegalArgumentException("Process ID is missing, cannot advance process.");
    }
  }
  return process;
}
