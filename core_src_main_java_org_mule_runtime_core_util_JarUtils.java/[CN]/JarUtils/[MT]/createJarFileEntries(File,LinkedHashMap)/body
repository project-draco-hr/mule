{
  JarOutputStream jarStream=null;
  FileOutputStream fileStream=null;
  if (jarFile != null) {
    logger.debug("Creating jar file " + jarFile.getAbsolutePath());
    try {
      fileStream=new FileOutputStream(jarFile);
      jarStream=new JarOutputStream(fileStream);
      if (entries != null && !entries.isEmpty()) {
        Iterator iter=entries.keySet().iterator();
        while (iter.hasNext()) {
          String jarFilePath=(String)iter.next();
          Object content=entries.get(jarFilePath);
          JarEntry entry=new JarEntry(jarFilePath);
          jarStream.putNextEntry(entry);
          logger.debug("Adding jar entry " + jarFilePath + " to "+ jarFile.getAbsolutePath());
          if (content instanceof String) {
            writeJarEntry(jarStream,((String)content).getBytes());
          }
 else           if (content instanceof byte[]) {
            writeJarEntry(jarStream,(byte[])content);
          }
 else           if (content instanceof File) {
            writeJarEntry(jarStream,(File)content);
          }
        }
      }
      jarStream.flush();
      fileStream.getFD().sync();
    }
  finally {
      if (jarStream != null) {
        try {
          jarStream.close();
        }
 catch (        Exception jarNotClosed) {
          logger.debug(jarNotClosed);
        }
      }
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        Exception fileNotClosed) {
          logger.debug(fileNotClosed);
        }
      }
    }
  }
}
