{
  if (overrides != null) {
    props.putAll(overrides);
  }
  String scheme=name;
  String metaScheme=null;
  int i=name.indexOf(":");
  if (i > -1) {
    scheme=name.substring(i + 1);
    metaScheme=name.substring(0,i);
  }
  if (isFilteredMetaScheme(metaScheme)) {
    metaScheme=null;
  }
 else   if (name.startsWith("jetty:http")) {
    scheme="jetty";
  }
  String serviceFinderClass=(String)props.remove(MuleProperties.SERVICE_FINDER);
  ServiceDescriptor sd;
  if (type.equals(ServiceType.TRANSPORT)) {
    try {
      if (metaScheme != null) {
        sd=new MetaTransportServiceDescriptor(metaScheme,scheme,props,classLoader);
      }
 else {
        sd=new DefaultTransportServiceDescriptor(scheme,props,classLoader);
      }
    }
 catch (    ServiceException e) {
      throw e;
    }
catch (    Exception e) {
      throw new ServiceException(CoreMessages.failedToCreate("Transport: " + name));
    }
    Properties exceptionMappingProps=SpiUtils.findServiceDescriptor(ServiceType.EXCEPTION,name + "-exception-mappings");
    ((TransportServiceDescriptor)sd).setExceptionMappings(exceptionMappingProps);
  }
 else {
    throw new ServiceException(CoreMessages.unrecognisedServiceType(type));
  }
  if (StringUtils.isNotBlank(serviceFinderClass)) {
    ServiceFinder finder;
    try {
      finder=(ServiceFinder)ClassUtils.instanciateClass(serviceFinderClass);
    }
 catch (    Exception e) {
      throw new ServiceException(CoreMessages.cannotInstanciateFinder(serviceFinderClass),e);
    }
    String realService=finder.findService(name,sd,props);
    if (realService != null) {
      return muleContext.getRegistry().lookupServiceDescriptor(ServiceType.TRANSPORT,realService,overrides);
    }
 else {
      throw new ServiceException(CoreMessages.serviceFinderCantFindService(name));
    }
  }
  return sd;
}
