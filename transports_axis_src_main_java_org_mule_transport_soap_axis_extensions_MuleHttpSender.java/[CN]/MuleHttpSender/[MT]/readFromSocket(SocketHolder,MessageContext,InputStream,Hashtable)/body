{
  Message outMsg=null;
  byte b;
  Integer rc=(Integer)msgContext.getProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
  int returnCode=0;
  if (rc != null) {
    returnCode=rc.intValue();
  }
 else {
  }
  String contentType=(String)headers.get(HEADER_CONTENT_TYPE_LC);
  contentType=(null == contentType) ? null : contentType.trim();
  String location=(String)headers.get(HEADER_LOCATION_LC);
  location=(null == location) ? null : location.trim();
  if ((returnCode > 199) && (returnCode < 300)) {
    if (returnCode == 202) {
      return inp;
    }
  }
 else   if (msgContext.getSOAPConstants() == SOAPConstants.SOAP12_CONSTANTS) {
  }
 else   if ((contentType != null) && !contentType.startsWith("text/html") && ((returnCode > 499) && (returnCode < 600))) {
  }
 else   if ((location != null) && ((returnCode == 302) || (returnCode == 307))) {
    inp.close();
    socketHolder.getSocket().close();
    msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
    msgContext.setProperty(MessageContext.TRANS_URL,location);
    invoke(msgContext);
    return inp;
  }
 else   if (returnCode == 100) {
    msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_CODE);
    msgContext.removeProperty(HTTPConstants.MC_HTTP_STATUS_MESSAGE);
    readHeadersFromSocket(socketHolder,msgContext,inp,headers);
    return readFromSocket(socketHolder,msgContext,inp,headers);
  }
 else {
    ByteArrayOutputStream buf=new ByteArrayOutputStream(4097);
    while (-1 != (b=(byte)inp.read())) {
      buf.write(b);
    }
    String statusMessage=msgContext.getStrProp(HTTPConstants.MC_HTTP_STATUS_MESSAGE);
    AxisFault fault=new AxisFault("HTTP","(" + returnCode + ")"+ statusMessage,null,null);
    fault.setFaultDetailString(Messages.getMessage("return01",String.valueOf(returnCode),buf.toString()));
    fault.addFaultDetail(Constants.QNAME_FAULTDETAIL_HTTPERRORCODE,Integer.toString(returnCode));
    throw fault;
  }
  String contentLocation=(String)headers.get(HEADER_CONTENT_LOCATION_LC);
  contentLocation=(null == contentLocation) ? null : contentLocation.trim();
  String contentLength=(String)headers.get(HEADER_CONTENT_LENGTH_LC);
  contentLength=(null == contentLength) ? null : contentLength.trim();
  String transferEncoding=(String)headers.get(HEADER_TRANSFER_ENCODING_LC);
  if (null != transferEncoding) {
    transferEncoding=transferEncoding.trim().toLowerCase();
    if (transferEncoding.equals(HTTPConstants.HEADER_TRANSFER_ENCODING_CHUNKED)) {
      inp=new ChunkedInputStream(inp);
    }
  }
  outMsg=new Message(new SocketInputStream(inp,socketHolder.getSocket()),false,contentType,contentLocation);
  MimeHeaders mimeHeaders=outMsg.getMimeHeaders();
  for (Enumeration e=headers.keys(); e.hasMoreElements(); ) {
    String key=(String)e.nextElement();
    mimeHeaders.addHeader(key,((String)headers.get(key)).trim());
  }
  outMsg.setMessageType(Message.RESPONSE);
  msgContext.setResponseMessage(outMsg);
  if (log.isDebugEnabled()) {
    if (null == contentLength) {
      log.debug(SystemUtils.LINE_SEPARATOR + Messages.getMessage("no00","Content-Length"));
    }
    log.debug(SystemUtils.LINE_SEPARATOR + Messages.getMessage("xmlRecd00"));
    log.debug("-----------------------------------------------");
    log.debug(outMsg.getSOAPEnvelope().toString());
  }
  if (msgContext.getMaintainSession()) {
    handleCookie(HTTPConstants.HEADER_COOKIE,HTTPConstants.HEADER_SET_COOKIE,headers,msgContext);
    handleCookie(HTTPConstants.HEADER_COOKIE2,HTTPConstants.HEADER_SET_COOKIE2,headers,msgContext);
  }
  return inp;
}
