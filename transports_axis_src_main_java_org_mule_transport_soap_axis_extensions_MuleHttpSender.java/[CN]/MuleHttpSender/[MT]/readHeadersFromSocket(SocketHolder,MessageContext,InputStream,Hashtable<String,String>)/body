{
  byte b=0;
  int len=0;
  int colonIndex=-1;
  String name, value;
  int returnCode=0;
  if (null == inp) {
    inp=new BufferedInputStream(sockHolder.getSocket().getInputStream());
  }
  if (headers == null) {
    headers=new Hashtable<String,String>();
  }
  boolean readTooMuch=false;
  for (ByteArrayOutputStream buf=new ByteArrayOutputStream(4097); ; ) {
    if (!readTooMuch) {
      b=(byte)inp.read();
    }
    if (b == -1) {
      break;
    }
    readTooMuch=false;
    if ((b != '\r') && (b != '\n')) {
      if ((b == ':') && (colonIndex == -1)) {
        colonIndex=len;
      }
      len++;
      buf.write(b);
    }
 else     if (b == '\r') {
      continue;
    }
 else {
      if (len == 0) {
        break;
      }
      b=(byte)inp.read();
      readTooMuch=true;
      if ((b == ' ') || (b == '\t')) {
        continue;
      }
      buf.close();
      byte[] hdata=buf.toByteArray();
      buf.reset();
      if (colonIndex != -1) {
        name=new String(hdata,0,colonIndex,HTTPConstants.HEADER_DEFAULT_CHAR_ENCODING);
        value=new String(hdata,colonIndex + 1,len - 1 - colonIndex,HTTPConstants.HEADER_DEFAULT_CHAR_ENCODING);
        colonIndex=-1;
      }
 else {
        name=new String(hdata,0,len,HTTPConstants.HEADER_DEFAULT_CHAR_ENCODING);
        value="";
      }
      if (log.isDebugEnabled()) {
        log.debug(name + value);
      }
      if (msgContext.getProperty(HTTPConstants.MC_HTTP_STATUS_CODE) == null) {
        int start=name.indexOf(' ') + 1;
        String tmp=name.substring(start).trim();
        int end=tmp.indexOf(' ');
        if (end != -1) {
          tmp=tmp.substring(0,end);
        }
        returnCode=Integer.parseInt(tmp);
        msgContext.setProperty(HTTPConstants.MC_HTTP_STATUS_CODE,new Integer(returnCode));
        msgContext.setProperty(HTTPConstants.MC_HTTP_STATUS_MESSAGE,name.substring(start + end + 1));
      }
 else {
        headers.put(name.toLowerCase(),value);
      }
      len=0;
    }
  }
  return inp;
}
