{
  final CountDown countDown=new CountDown(4);
  UMODescriptor descriptor=getDescriptor("testComponent",FunctionalTestComponent.class.getName());
  EventCallback callback=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object Component) throws Exception {
      callbackCalled=true;
      currentTx=context.getCurrentTransaction();
      assertNotNull(currentTx);
      assertTrue(currentTx.isBegun());
      eventCount++;
      if (eventCount == 2) {
        currentTx.setRollbackOnly();
        eventCount=0;
      }
      countDown.release();
    }
  }
;
  initialiseComponent(descriptor,UMOTransactionConfig.ACTION_ALWAYS_BEGIN,UMOTransactionConfig.ACTION_ALWAYS_COMMIT,callback);
  addResultListener(getOutDest().getAddress(),null);
  List constraints=new ArrayList();
  BatchConstraint c=new BatchConstraint();
  c.setBatchSize(2);
  constraints.add(c);
  descriptor.getInboundEndpoint().getTransactionConfig().setConstraint(c);
  UMOManager manager=MuleManager.getInstance();
  UMOConnector umoCnn=manager.lookupConnector(CONNECTOR_NAME);
  umoCnn.setExceptionStrategy(new RollbackExceptionHandler(countDown));
  manager.start();
  send(DEFAULT_MESSAGE + "1",false,Session.AUTO_ACKNOWLEDGE);
  assertTrue(!countDown.attempt(1000));
  send(DEFAULT_MESSAGE + "2",false,Session.AUTO_ACKNOWLEDGE);
  assertTrue("Only " + countDown.currentCount() + " of "+ countDown.initialCount()+ " checkpoints hit",countDown.attempt(LOCK_WAIT));
  assertNull(currentMsg);
  assertTrue(callbackCalled);
  assertTrue(currentTx.isRolledBack());
}
