{
  UMOExceptionStrategy es=new DefaultExceptionStrategy(){
    public Throwable handleException(    Object message,    Throwable t){
      if (t instanceof MessageRedeliveredException) {
        try {
          TextMessage msg=(TextMessage)message;
          assertNotNull(msg);
          assertTrue(msg.getJMSRedelivered());
          assertTrue(msg instanceof TextMessage);
          assertEquals(DEFAULT_MESSAGE,msg.getText());
        }
 catch (        Exception e) {
          fail(e.getMessage());
        }
 finally {
          try {
            ((MessageRedeliveredException)t).getSession().commit();
          }
 catch (          JMSException e) {
            fail("Failed to commit rolled back message");
          }
synchronized (lock) {
            lock.notify();
          }
        }
        return null;
      }
 else {
        t.printStackTrace();
synchronized (lock) {
          lock.notify();
        }
        return null;
      }
    }
  }
;
  UMODescriptor descriptor=getTestDescriptor("testComponent",FunctionalTestComponent.class.getName());
  EventCallback callback=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object Component) throws Exception {
      callbackCalled=true;
      currentTx=context.getCurrentTransaction();
      assertNotNull(currentTx);
      assertTrue(currentTx.isBegun());
      currentTx.setRollbackOnly();
    }
  }
;
  initialiseComponent(descriptor,UMOTransactionConfig.ACTION_ALWAYS_BEGIN,UMOTransactionConfig.ACTION_ALWAYS_COMMIT,callback);
  UMOManager manager=MuleManager.getInstance();
  UMOConnector umoCnn=manager.lookupConnector(CONNECTOR_NAME);
  umoCnn.setExceptionStrategy(es);
  manager.start();
  send(DEFAULT_MESSAGE,false,Session.AUTO_ACKNOWLEDGE);
  afterInitialise();
synchronized (lock) {
    lock.wait(5000);
  }
  Message msg=receive();
  assertNull(msg);
  assertTrue(callbackCalled);
  assertTrue(currentTx.isRolledBack());
}
