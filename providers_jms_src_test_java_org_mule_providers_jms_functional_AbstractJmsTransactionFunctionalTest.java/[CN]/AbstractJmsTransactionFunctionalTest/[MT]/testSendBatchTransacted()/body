{
  final CountDown countDown=new CountDown(4);
  UMODescriptor descriptor=getDescriptor("testComponent",FunctionalTestComponent.class.getName());
  EventCallback callback=new EventCallback(){
    public void eventReceived(    UMOEventContext context,    Object Component) throws Exception {
      callbackCalled=true;
      currentTx=context.getCurrentTransaction();
      assertNotNull(currentTx);
      assertTrue(currentTx.isBegun());
      eventCount++;
      countDown.release();
    }
  }
;
  initialiseComponent(descriptor,UMOTransactionConfig.ACTION_ALWAYS_BEGIN,UMOTransactionConfig.ACTION_ALWAYS_COMMIT,callback);
  addResultListener(getOutDest().getAddress(),countDown);
  BatchConstraint c=new BatchConstraint();
  c.setBatchSize(2);
  descriptor.getInboundEndpoint().getTransactionConfig().setConstraint(c);
  MuleManager.getInstance().start();
  send(DEFAULT_MESSAGE + "1",false,Session.AUTO_ACKNOWLEDGE);
  assertTrue(!countDown.attempt(1000));
  send(DEFAULT_MESSAGE + "2",false,Session.AUTO_ACKNOWLEDGE);
  assertTrue("Only " + countDown.currentCount() + " of "+ countDown.initialCount()+ " checkpoints hit",countDown.attempt(LOCK_WAIT));
  assertNotNull(currentMsg);
  assertTrue(currentMsg instanceof TextMessage);
  assertEquals(DEFAULT_MESSAGE + "2 Received",((TextMessage)currentMsg).getText());
  assertTrue(callbackCalled);
  assertEquals(2,eventCount);
  assertTrue(currentTx.isBegun());
  Thread.sleep(300);
  assertTrue(currentTx.isCommitted());
}
