{
  Mock session=MuleTestUtils.getMockSession();
  UMOComponent testComponent=getTestComponent(getTestDescriptor("test",Apple.class.getName()));
  UMOInboundRouterCollection messageRouter=new InboundRouterCollection();
  SelectiveConsumer router=new SelectiveConsumer();
  messageRouter.addRouter(router);
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  PayloadTypeFilter filter=new PayloadTypeFilter(byte[].class);
  router.setFilter(filter);
  assertEquals(filter,router.getFilter());
  UMOMessage message=new MuleMessage("test event");
  UMOEndpoint endpoint=getTestEndpoint("Test1Provider",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint.setTransformer(new StringToByteArray());
  UMOEvent event=new MuleEvent(message,endpoint,(UMOSession)session.proxy(),false);
  assertTrue(router.isMatch(event));
  session.expect("dispatchEvent",C.eq(event));
  session.expectAndReturn("getComponent",testComponent);
  messageRouter.route(event);
  session.verify();
  event=new MuleEvent(message,endpoint,(UMOSession)session.proxy(),true);
  session.expectAndReturn("sendEvent",C.eq(event),message);
  session.expectAndReturn("getComponent",testComponent);
  UMOMessage result=messageRouter.route(event);
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
  session.expectAndReturn("getComponent",testComponent);
  session.expectAndReturn("toString","");
  message=new MuleMessage("Hello String");
  event=new MuleEvent(message,endpoint,(UMOSession)session.proxy(),false);
  router.setTransformFirst(false);
  assertTrue(!router.isMatch(event));
  messageRouter.route(event);
  session.verify();
}
