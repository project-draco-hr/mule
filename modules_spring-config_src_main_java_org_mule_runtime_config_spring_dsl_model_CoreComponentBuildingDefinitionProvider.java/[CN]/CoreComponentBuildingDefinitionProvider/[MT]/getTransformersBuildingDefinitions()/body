{
  List<ComponentBuildingDefinition> transformerComponentBuildingDefinitions=new ArrayList<>();
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(Base64Encoder.class).withIdentifier("base64-encoder-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(Base64Decoder.class).withIdentifier("base64-decoder-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(XmlEntityEncoder.class).withIdentifier("xml-entity-encoder-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(XmlEntityDecoder.class).withIdentifier("xml-entity-decoder-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(GZipCompressTransformer.class).withIdentifier("gzip-compress-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(GZipUncompressTransformer.class).withIdentifier("gzip-uncompress-transformer").build());
  KeyAttributeDefinitionPair strategyParameterDefinition=newBuilder().withKey("strategy").withAttributeDefinition(fromSimpleReferenceParameter("strategy-ref").build()).build();
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getEncryptionTransformerConfigurationFactory(EncryptionTransformer.class),EncryptionTransformer.class,strategyParameterDefinition).withIdentifier("encrypt-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getEncryptionTransformerConfigurationFactory(DecryptionTransformer.class),DecryptionTransformer.class,strategyParameterDefinition).withIdentifier("decrypt-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ByteArrayToHexString.class).withIdentifier("byte-array-to-hex-string-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(HexStringToByteArray.class).withIdentifier("hex-string-to-byte-array-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ByteArrayToObject.class).withIdentifier("byte-array-to-object-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ObjectToByteArray.class).withIdentifier("object-to-byte-array-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ObjectToString.class).withIdentifier("object-to-string-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ByteArrayToSerializable.class).withIdentifier("byte-array-to-serializable-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(SerializableToByteArray.class).withIdentifier("serializable-to-byte-array-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ObjectToString.class).withIdentifier("byte-array-to-string-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(ObjectToByteArray.class).withIdentifier("string-to-byte-array-transformer").build());
  transformerComponentBuildingDefinitions.add(getMuleMessageTransformerBaseBuilder().withIdentifier("parse-template").withTypeDefinition(fromType(ParseTemplateTransformer.class)).withSetterParameterDefinition("location",fromSimpleParameter("location").build()).build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(AutoTransformer.class).withIdentifier("auto-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(MapToBean.class).withIdentifier("map-to-bean-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(BeanToMap.class).withIdentifier("bean-to-map-transformer").build());
  transformerComponentBuildingDefinitions.add(baseDefinition.copy().withIdentifier("combine-collections-transformer").withTypeDefinition(fromType(CombineCollectionsTransformer.class)).asPrototype().build());
  transformerComponentBuildingDefinitions.add(getMuleMessageTransformerBaseBuilder().withIdentifier("append-string-transformer").withTypeDefinition(fromType(StringAppendTransformer.class)).withSetterParameterDefinition("message",fromSimpleParameter("message").build()).build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getCustomTransformerConfigurationFactory(),Transformer.class,newBuilder().withKey("class").withAttributeDefinition(fromSimpleParameter("class").build()).build()).withTypeDefinition(fromConfigurationAttribute("class")).withIdentifier("custom-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getBeanBuilderTransformerConfigurationfactory(),BeanBuilderTransformer.class,newBuilder().withKey("beanClass").withAttributeDefinition(fromSimpleParameter("beanClass",stringToClassConverter()).build()).build(),newBuilder().withKey("beanFactory").withAttributeDefinition(fromSimpleReferenceParameter("beanFactory-ref").build()).build(),newBuilder().withKey("arguments").withAttributeDefinition(fromChildCollectionConfiguration(ExpressionArgument.class).build()).build()).withIdentifier("bean-builder-transformer").build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getAddFlowVariableTransformerInstanceFactory(AddPropertyTransformer.class),AddPropertyTransformer.class,newBuilder().withKey("identifier").withAttributeDefinition(fromSimpleParameter("propertyName").build()).build(),newBuilder().withKey("value").withAttributeDefinition(fromSimpleParameter("value").build()).build()).withIdentifier("set-property").withTypeDefinition(fromType(AddPropertyTransformer.class)).build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getAddFlowVariableTransformerInstanceFactory(AddFlowVariableTransformer.class),AddFlowVariableTransformer.class,newBuilder().withKey("identifier").withAttributeDefinition(fromSimpleParameter("variableName").build()).build(),newBuilder().withKey("value").withAttributeDefinition(fromSimpleParameter("value").build()).build()).withIdentifier("set-variable").withTypeDefinition(fromType(AddFlowVariableTransformer.class)).build());
  transformerComponentBuildingDefinitions.add(getMuleMessageTransformerBaseBuilder().withIdentifier("remove-property").withTypeDefinition(fromType(RemovePropertyTransformer.class)).withSetterParameterDefinition("identifier",fromSimpleParameter("propertyName").build()).build());
  transformerComponentBuildingDefinitions.add(getMuleMessageTransformerBaseBuilder().withIdentifier("remove-variable").withTypeDefinition(fromType(RemoveFlowVariableTransformer.class)).withSetterParameterDefinition("identifier",fromSimpleParameter("variableName").build()).build());
  transformerComponentBuildingDefinitions.add(getMuleMessageTransformerBaseBuilder().withIdentifier("copy-properties").withTypeDefinition(fromType(CopyPropertiesTransformer.class)).withSetterParameterDefinition("propertyName",fromSimpleParameter("propertyName").build()).build());
  transformerComponentBuildingDefinitions.add(getTransformerBaseBuilder(getExpressionTransformerConfigurationfactory(),ExpressionTransformer.class,newBuilder().withKey("returnSourceIfNull").withAttributeDefinition(fromSimpleParameter("returnSourceIfNull").build()).build(),newBuilder().withKey("expression").withAttributeDefinition(fromSimpleParameter("expression").build()).build(),newBuilder().withKey("arguments").withAttributeDefinition(fromChildCollectionConfiguration(ExpressionArgument.class).build()).build()).withIdentifier("expression-transformer").withTypeDefinition(fromType(ExpressionTransformer.class)).build());
  transformerComponentBuildingDefinitions.add(baseDefinition.copy().withObjectFactoryType(ConfigurableObjectFactory.class).withIdentifier("return-argument").withTypeDefinition(fromType(ExpressionArgument.class)).withSetterParameterDefinition("factory",fromFixedValue(getExpressionArgumentConfigurationFactory()).build()).withSetterParameterDefinition("parameters",fromMultipleDefinitions(newBuilder().withKey("optional").withAttributeDefinition(fromSimpleParameter("optional").build()).build(),newBuilder().withKey("expression").withAttributeDefinition(fromSimpleParameter("expression").build()).build(),newBuilder().withKey("muleContext").withAttributeDefinition(fromReferenceObject(MuleContext.class).build()).build()).build()).build());
  transformerComponentBuildingDefinitions.add(baseDefinition.copy().withObjectFactoryType(ConfigurableObjectFactory.class).withIdentifier("bean-property").withTypeDefinition(fromType(ExpressionArgument.class)).withSetterParameterDefinition("factory",fromFixedValue(getExpressionArgumentConfigurationFactory()).build()).withSetterParameterDefinition("parameters",fromMultipleDefinitions(newBuilder().withKey("optional").withAttributeDefinition(fromSimpleParameter("optional").build()).build(),newBuilder().withKey("expression").withAttributeDefinition(fromSimpleParameter("expression").build()).build(),newBuilder().withKey("muleContext").withAttributeDefinition(fromReferenceObject(MuleContext.class).build()).build(),newBuilder().withKey("propertyName").withAttributeDefinition(fromSimpleParameter("property-name").build()).build()).build()).build());
  return transformerComponentBuildingDefinitions;
}
