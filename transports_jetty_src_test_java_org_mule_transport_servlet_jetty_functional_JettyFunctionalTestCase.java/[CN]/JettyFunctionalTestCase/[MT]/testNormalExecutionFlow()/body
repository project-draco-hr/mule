{
  FunctionalTestComponent testComponent=getFunctionalTestComponent("normalExecutionFlow");
  assertNotNull(testComponent);
  EventCallback callback=new EventCallback(){
    @Override public void eventReceived(    MuleEventContext context,    Object component) throws Exception {
      MuleMessage msg=context.getMessage();
      assertEquals(HttpConstants.METHOD_POST,msg.getInboundProperty(HttpConnector.HTTP_METHOD_PROPERTY));
      assertEquals("/normal",msg.getInboundProperty(HttpConnector.HTTP_REQUEST_PROPERTY));
      assertEquals("/normal",msg.getInboundProperty(HttpConnector.HTTP_REQUEST_PATH_PROPERTY));
      assertEquals("/normal",msg.getInboundProperty(HttpConnector.HTTP_CONTEXT_PATH_PROPERTY));
    }
  }
;
  testComponent.setEventCallback(callback);
  MuleClient client=muleContext.getClient();
  MuleMessage response=client.send("http://localhost:" + dynamicPort.getNumber() + "/normal",TEST_MESSAGE,null);
  assertEquals("200",response.getInboundProperty("http.status"));
  assertEquals(TEST_MESSAGE + " received",IOUtils.toString((InputStream)response.getPayload()));
}
