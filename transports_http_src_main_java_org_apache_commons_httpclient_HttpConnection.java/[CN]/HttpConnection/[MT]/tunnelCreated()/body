{
  LOG.trace("enter HttpConnection.tunnelCreated()");
  if (!isSecure() || !isProxied()) {
    throw new IllegalStateException("Connection must be secure " + "and proxied to use this feature");
  }
  if (usingSecureSocket) {
    throw new IllegalStateException("Already using a secure socket");
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Secure tunnel to " + this.hostName + ":"+ this.portNumber);
  }
  SecureProtocolSocketFactory socketFactory=(SecureProtocolSocketFactory)protocolInUse.getSocketFactory();
  socket=socketFactory.createSocket(socket,hostName,portNumber,true);
  int sndBufSize=this.params.getSendBufferSize();
  int outbuffersize;
  if (sndBufSize >= 0) {
    socket.setSendBufferSize(sndBufSize);
    outbuffersize=sndBufSize;
  }
 else {
    outbuffersize=2048;
  }
  int rcvBufSize=this.params.getReceiveBufferSize();
  int inbuffersize;
  if (rcvBufSize >= 0) {
    socket.setReceiveBufferSize(rcvBufSize);
    inbuffersize=rcvBufSize;
  }
 else {
    inbuffersize=2048;
  }
  inputStream=new BufferedInputStream(socket.getInputStream(),inbuffersize);
  outputStream=new BufferedOutputStream(socket.getOutputStream(),outbuffersize);
  usingSecureSocket=true;
  tunnelEstablished=true;
}
