{
  String tempUrl;
  if (urlFromMessage) {
    tempUrl=(String)eventContext.getProperty(REST_SERVICE_URL);
    if (tempUrl == null) {
      throw new IllegalArgumentException(new Message(Messages.X_PROPERTY_IS_NOT_SET_ON_EVENT,REST_SERVICE_URL).toString());
    }
  }
 else {
    tempUrl=serviceUrl;
  }
  StringBuffer urlBuffer=new StringBuffer(tempUrl);
  Map params=new HashMap(eventContext.getProperties());
  if (payloadParameterName != null) {
    params.put(payloadParameterName,eventContext.getTransformedMessageAsString());
  }
 else   if (eventContext.getTransformedMessage() instanceof Map) {
    params.putAll((Map)eventContext.getTransformedMessage());
  }
  setRESTParams(urlBuffer,params,reqiredParams,false);
  setRESTParams(urlBuffer,params,optionalParams,true);
  tempUrl=urlBuffer.toString();
  logger.info("Invoking REST service: " + tempUrl);
  UMOEndpointURI endpointURI=new MuleEndpointURI(SgmlCodec.encodeString(tempUrl));
  eventContext.getMessage().setProperty("http.method",httpMethod);
  UMOMessage result=eventContext.sendEvent(eventContext.getMessage(),endpointURI);
  if (isErrorPayload(result)) {
    handleException(new RestServiceException(new Message(Messages.FAILED_TO_INVOKE_REST_SERVICE_X,tempUrl),result),result);
  }
  return result;
}
