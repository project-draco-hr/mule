{
  if (!initialised) {
    initialising=true;
    config=getRegistry().getConfiguration();
    validateEncoding();
    validateOSEncoding();
    directories=new Directories(new File(config.getWorkingDirectory()));
    if (getRegistry().lookupModel(ModelHelper.SYSTEM_MODEL) == null) {
      UMOModel system=ModelFactory.createModel(getRegistry().getConfiguration().getSystemModelType());
      system.setName(ModelHelper.SYSTEM_MODEL);
      getRegistry().registerModel(system);
    }
    if (workManager == null) {
      ThreadingProfile tp=config.getDefaultThreadingProfile();
      logger.debug("Creating default work manager using default threading profile: " + tp);
      workManager=new MuleWorkManager(tp,"UMOManager");
      workManager.start();
    }
    notificationManager=new ServerNotificationManager();
    notificationManager.registerEventType(ManagerNotification.class,ManagerNotificationListener.class);
    notificationManager.registerEventType(ModelNotification.class,ModelNotificationListener.class);
    notificationManager.registerEventType(ComponentNotification.class,ComponentNotificationListener.class);
    notificationManager.registerEventType(SecurityNotification.class,SecurityNotificationListener.class);
    notificationManager.registerEventType(ManagementNotification.class,ManagementNotificationListener.class);
    notificationManager.registerEventType(AdminNotification.class,AdminNotificationListener.class);
    notificationManager.registerEventType(CustomNotification.class,CustomNotificationListener.class);
    notificationManager.registerEventType(ConnectionNotification.class,ConnectionNotificationListener.class);
    notificationManager.start(workManager);
    fireSystemEvent(new ManagerNotification(id,clusterId,domain,ManagerNotification.MANAGER_INITIALISNG));
    id=config.getId();
    clusterId=config.getClusterId();
    domain=config.getDomainId();
    if (id == null) {
      logger.warn("No unique id has been set on this manager");
    }
    try {
      if (securityManager != null) {
        securityManager.initialise(this);
      }
      if (queueManager == null) {
        try {
          TransactionalQueueManager queueMgr=new TransactionalQueueManager();
          QueuePersistenceStrategy ps=new CachingPersistenceStrategy(new MemoryPersistenceStrategy());
          queueMgr.setPersistenceStrategy(ps);
          queueManager=queueMgr;
        }
 catch (        Exception e) {
          throw new InitialisationException(new Message(Messages.INITIALISATION_FAILURE_X,"QueueManager"),e);
        }
      }
      directories.createDirectories();
      if (id == null) {
        throw new InitialisationException(new Message(Messages.X_IS_NULL,"Instance ID"),this);
      }
      if (clusterId == null) {
        clusterId=new Message(Messages.NOT_CLUSTERED).toString();
      }
      if (domain == null) {
        domain=InetAddress.getLocalHost().getHostName();
      }
      systemName=domain + "." + clusterId+ "."+ id;
    }
 catch (    UMOException e) {
      initialising=false;
      throw e;
    }
catch (    Exception e) {
      initialising=false;
      throw new LifecycleException(e,this);
    }
 finally {
      fireSystemEvent(new ManagerNotification(id,clusterId,domain,ManagerNotification.MANAGER_INITIALISED));
    }
  }
  getRegistry().initialise(this);
  initialised=true;
}
