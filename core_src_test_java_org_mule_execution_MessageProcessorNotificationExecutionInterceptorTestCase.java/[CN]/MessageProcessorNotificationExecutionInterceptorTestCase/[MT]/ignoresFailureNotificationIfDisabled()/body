{
  final List<ServerNotification> serverNotifications=new ArrayList<ServerNotification>();
  Mockito.when(mockNextInterceptor.execute(mockMessageProcessor,mockMuleEvent)).thenThrow(mockMessagingException);
  Mockito.when(mockMuleEvent.getMuleContext().getNotificationManager()).thenReturn(mockNotificationManager);
  Mockito.when(mockNotificationManager.isNotificationEnabled(MessageProcessorNotification.class)).thenReturn(true);
  Mockito.doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      serverNotifications.add((ServerNotification)invocationOnMock.getArguments()[0]);
      return null;
    }
  }
).when(mockNotificationManager).fireNotification(Mockito.any(ServerNotification.class));
  try {
    messageProcessorNotificationExecutionInterceptor.execute(mockMessageProcessor,mockMuleEvent);
    fail("Exception should be thrown");
  }
 catch (  MessagingException e) {
  }
  assertThat(serverNotifications.size(),Is.is(0));
}
