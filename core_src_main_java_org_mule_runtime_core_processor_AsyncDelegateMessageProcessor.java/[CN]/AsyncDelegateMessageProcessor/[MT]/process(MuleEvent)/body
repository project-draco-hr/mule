{
  if (event.isTransacted()) {
    throw new MessagingException(CoreMessages.asyncDoesNotSupportTransactions(),event,this);
  }
  final MuleMessage message=event.getMessage();
  if (consumablePayloadWarned.compareAndSet(false,true) && isConsumable(message.getPayload().getClass())) {
    logger.warn(String.format("Using 'async' router with consumable payload (%s) may lead to unexpected results." + " Please ensure that only one of the branches actually consumes the payload, or transform it by using an <object-to-byte-array-transformer>.",message.getPayload().getClass().getName()));
  }
  if (target != null) {
    MuleEvent newEvent=new DefaultMuleEvent((MuleMessage)((ThreadSafeAccess)message).newThreadCopy(),event,false,false,MessageExchangePattern.ONE_WAY);
    OptimizedRequestContext.unsafeSetEvent(newEvent);
    target.process(newEvent);
  }
  if (muleContext.getConfiguration().isFlowEndingWithOneWayEndpointReturnsNull()) {
    return event;
  }
 else {
    return VoidMuleEvent.getInstance();
  }
}
