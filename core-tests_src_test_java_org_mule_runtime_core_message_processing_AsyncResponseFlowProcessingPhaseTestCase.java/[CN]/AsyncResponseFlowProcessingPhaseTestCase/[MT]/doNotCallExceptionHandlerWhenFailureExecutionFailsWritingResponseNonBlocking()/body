{
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ResponseCompletionCallback callback=(ResponseCompletionCallback)invocationOnMock.getArguments()[1];
      callback.responseSentWithFailure(mockException,((MessagingException)invocationOnMock.getArguments()[0]).getEvent());
      return null;
    }
  }
).when(mockTemplate).sendFailureResponseToClient(any(MessagingException.class),any(ResponseCompletionCallback.class));
  when(mockMuleEvent.isAllowNonBlocking()).thenReturn(true);
  when(mockTemplate.routeEvent(any(MuleEvent.class))).thenThrow(mockMessagingException);
  phase.runPhase(mockTemplate,mockContext,mockNotifier);
  verify(mockContext.getFlowConstruct().getExceptionListener()).handleException(any(MessagingException.class),any(MuleEvent.class));
  verifyOnlyFailureWasCalled(mockException);
}
