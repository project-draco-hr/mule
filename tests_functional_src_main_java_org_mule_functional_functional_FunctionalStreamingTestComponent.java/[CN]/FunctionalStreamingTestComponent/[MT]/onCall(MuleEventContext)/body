{
  InputStream in=(InputStream)context.getMessage().getPayload();
  try {
    logger.debug("arrived at " + toString());
    byte[] startData=new byte[STREAM_SAMPLE_SIZE];
    long startDataSize=0;
    byte[] endData=new byte[STREAM_SAMPLE_SIZE];
    long endDataSize=0;
    long endRingPointer=0;
    long streamLength=0;
    byte[] buffer=new byte[STREAM_BUFFER_SIZE];
    long bytesRead=0;
    while (bytesRead >= 0) {
      bytesRead=read(in,buffer);
      if (bytesRead > 0) {
        if (logger.isDebugEnabled()) {
          logger.debug("read " + bytesRead + " bytes");
        }
        streamLength+=bytesRead;
        long startOfEndBytes=0;
        for (long i=0; startDataSize < STREAM_SAMPLE_SIZE && i < bytesRead; ++i) {
          startData[(int)startDataSize++]=buffer[(int)i];
          ++startOfEndBytes;
        }
        startOfEndBytes=Math.max(startOfEndBytes,bytesRead - STREAM_SAMPLE_SIZE);
        for (long i=startOfEndBytes; i < bytesRead; ++i) {
          ++endDataSize;
          endData[(int)(endRingPointer++ % STREAM_SAMPLE_SIZE)]=buffer[(int)i];
        }
        if (streamLength >= targetSize) {
          doCallback(startData,startDataSize,endData,endDataSize,endRingPointer,streamLength,context);
        }
      }
    }
    in.close();
  }
 catch (  Exception e) {
    in.close();
    e.printStackTrace();
    if (logger.isDebugEnabled()) {
      logger.debug("Error on test component",e);
    }
    throw e;
  }
  return null;
}
