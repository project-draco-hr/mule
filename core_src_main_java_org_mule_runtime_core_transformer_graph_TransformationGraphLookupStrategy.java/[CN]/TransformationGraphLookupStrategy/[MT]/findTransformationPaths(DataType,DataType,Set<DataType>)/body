{
  List<List<TransformationEdge>> validTransformationEdges=new LinkedList<>();
  if (visited.contains(source)) {
    return validTransformationEdges;
  }
 else {
    visited.add(source);
    Set<TransformationEdge> transformationEdges=graph.outgoingEdgesOf(source);
    for (    TransformationEdge transformationEdge : transformationEdges) {
      DataType edgeTarget=graph.getEdgeTarget(transformationEdge);
      if (edgeTarget.equals(target)) {
        LinkedList<TransformationEdge> transformationEdges1=new LinkedList<>();
        transformationEdges1.add(transformationEdge);
        validTransformationEdges.add(transformationEdges1);
      }
 else {
        List<List<TransformationEdge>> newTransformations=findTransformationPaths(edgeTarget,target,visited);
        for (        List<TransformationEdge> transformationEdgeList : newTransformations) {
          transformationEdgeList.add(0,transformationEdge);
          validTransformationEdges.add(transformationEdgeList);
        }
      }
    }
    visited.remove(source);
  }
  return validTransformationEdges;
}
