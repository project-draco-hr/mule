{
  String endpoint=(String)context.getProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,null);
  if (endpoint == null) {
    throw new TransformerException("Endpoint property is not set, this transformer should not be used before a dispatcher has been invoked");
  }
  String method=(String)context.getProperty(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
  try {
    URI uri=new URI(endpoint);
    HttpMethod httpMethod=null;
    if (HttpConstants.METHOD_GET.equals(method)) {
      httpMethod=new GetMethod(uri.toString());
      String paramName=(String)context.getProperty(HttpConnector.HTTP_GET_BODY_PARAM_PROPERTY,HttpConnector.DEFAULT_HTTP_GET_BODY_PARAM_PROPERTY);
      String query=uri.getQuery();
      if (query == null) {
        query=paramName + "=" + paramName;
      }
 else {
        query+="&" + paramName + "="+ paramName;
      }
      httpMethod.setQueryString(query);
    }
 else {
      PostMethod postMethod=new PostMethod(uri.toString());
      if (src instanceof String) {
        postMethod.setRequestBody(src.toString());
        postMethod.setRequestContentLength(src.toString().length());
      }
 else {
        byte[] buffer=Utility.objectToByteArray(src);
        postMethod.setRequestBody(new ByteArrayInputStream(buffer));
        postMethod.setRequestContentLength(buffer.length);
      }
      httpMethod=postMethod;
    }
    Map.Entry header;
    String headerName;
    Map p=context.getProperties();
    for (Iterator iterator=p.entrySet().iterator(); iterator.hasNext(); ) {
      header=(Map.Entry)iterator.next();
      headerName=header.getKey().toString();
      if (!responseHeaders.contains(headerName) && header.getValue() instanceof String) {
        if (headerName.startsWith(MuleProperties.PROPERTY_PREFIX)) {
          headerName="X-" + headerName;
        }
        httpMethod.addRequestHeader(headerName,(String)header.getValue());
      }
    }
    return httpMethod;
  }
 catch (  Exception e) {
    throw new TransformerException("Failed to create Http request: " + e.getMessage(),e);
  }
}
