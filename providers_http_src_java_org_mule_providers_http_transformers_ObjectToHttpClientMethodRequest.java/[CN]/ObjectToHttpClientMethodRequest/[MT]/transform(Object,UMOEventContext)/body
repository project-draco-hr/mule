{
  String endpoint=(String)context.getProperty(MuleProperties.MULE_ENDPOINT_PROPERTY,null);
  if (endpoint == null) {
    throw new TransformerException(new Message(Messages.EVENT_PROPERTY_X_NOT_SET_CANT_PROCESS_REQUEST,MuleProperties.MULE_ENDPOINT_PROPERTY),this);
  }
  String method=(String)context.getProperty(HttpConnector.HTTP_METHOD_PROPERTY,"POST");
  try {
    URI uri=new URI(endpoint);
    HttpMethod httpMethod=null;
    if (HttpConstants.METHOD_GET.equals(method)) {
      httpMethod=new GetMethod(uri.toString());
      setHeaders(httpMethod,context);
      String paramName=(String)context.getProperty(HttpConnector.HTTP_GET_BODY_PARAM_PROPERTY,HttpConnector.DEFAULT_HTTP_GET_BODY_PARAM_PROPERTY);
      String query=uri.getQuery();
      if (query == null) {
        query=paramName + "=" + src.toString();
      }
 else {
        query+="&" + paramName + "="+ src.toString();
      }
      httpMethod.setQueryString(query);
    }
 else {
      PostMethod postMethod=new PostMethod(uri.toString());
      setHeaders(postMethod,context);
      String paramName=(String)context.getProperty(HttpConnector.HTTP_POST_BODY_PARAM_PROPERTY);
      postMethod.setRequestContentLength(PostMethod.CONTENT_LENGTH_AUTO);
      if (paramName == null) {
        addParameters(uri.getQuery(),postMethod);
        if (!(context.getMessage().getPayload() instanceof NullPayload)) {
          if (src instanceof String) {
            postMethod.setRequestBody(new ByteArrayInputStream(src.toString().getBytes()));
          }
 else           if (src instanceof InputStream) {
            postMethod.setRequestBody((InputStream)src);
            postMethod.setRequestContentLength(Integer.parseInt((String)context.getProperty(HttpConstants.HEADER_CONTENT_LENGTH)));
          }
 else {
            byte[] buffer=Utility.objectToByteArray(src);
            postMethod.setRequestBody(new ByteArrayInputStream(buffer));
          }
        }
      }
 else {
        postMethod.addParameter(paramName,src.toString());
      }
      httpMethod=postMethod;
    }
    return httpMethod;
  }
 catch (  Exception e) {
    throw new TransformerException(this,e);
  }
}
