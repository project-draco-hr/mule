{
  ImmutableSet.Builder<ParameterDescriptor> parameters=ImmutableSet.builder();
  for (  Field field : parameterFields) {
    Optional optional=field.getAnnotation(Optional.class);
    Alias alias=field.getAnnotation(Alias.class);
    String parameterName=getAliasName(field,alias);
    ParameterDescriptor parameterDescriptor;
    DataType dataType=IntrospectionUtils.getFieldDataType(field);
    if (optional == null) {
      parameterDescriptor=with.requiredParameter(parameterName);
    }
 else {
      parameterDescriptor=with.optionalParameter(parameterName).defaultingTo(getDefaultValue(optional));
    }
    parameterDescriptor.ofType(dataType);
    parameterDescriptor.withExpressionSupport(IntrospectionUtils.getExpressionSupport(field));
    parameterDescriptor.withModelProperty(DeclaringMemberModelProperty.KEY,new DeclaringMemberModelProperty(field));
    parameters.add(parameterDescriptor);
  }
  return parameters.build();
}
