{
  String data=src.toString();
  if (src instanceof byte[]) {
    try {
      data=new String((byte[])src,encoding);
    }
 catch (    UnsupportedEncodingException e) {
      throw new TransformerException(this,e);
    }
    if (data.startsWith("<") || data.startsWith("&lt;")) {
      return data;
    }
  }
  String httpMethod=context.getMessage().getStringProperty("http.method","GET");
  String request=context.getMessage().getStringProperty("http.request",null);
  int i=request.indexOf('?');
  String query=request.substring(i + 1);
  Properties p=PropertiesUtils.getPropertiesFromQueryString(query);
  String method=(String)p.remove(SoapConstants.SOAP_METHOD_PROPERTY);
  if (method == null) {
    throw new TransformerException(new Message(Messages.PROPERTIES_X_NOT_SET,SoapConstants.SOAP_METHOD_PROPERTY),this);
  }
  if (httpMethod.equals("POST")) {
    try {
      p.setProperty(method,context.getMessageAsString());
    }
 catch (    UMOException e) {
      throw new TransformerException(this,e);
    }
  }
  StringBuffer result=new StringBuffer(8192);
  String header=StringMessageUtils.getFormattedMessage(SOAP_HEADER,new Object[]{encoding});
  if (p.size() > 0) {
    result.append(header);
    result.append('<').append(method).append(" xmlns=\"");
    result.append(DEFAULT_NAMESPACE).append("\">");
    for (Iterator iterator=p.entrySet().iterator(); iterator.hasNext(); ) {
      Map.Entry entry=(Map.Entry)iterator.next();
      result.append('<').append(entry.getKey()).append('>');
      result.append(entry.getValue());
      result.append("</").append(entry.getKey()).append('>');
    }
    result.append("</").append(method).append('>');
    result.append(SOAP_FOOTER);
  }
 else {
    throw new TransformerException(new Message(Messages.PROPERTIES_X_NOT_SET,SoapConstants.SOAP_METHOD_PROPERTY),this);
  }
  return result.toString();
}
