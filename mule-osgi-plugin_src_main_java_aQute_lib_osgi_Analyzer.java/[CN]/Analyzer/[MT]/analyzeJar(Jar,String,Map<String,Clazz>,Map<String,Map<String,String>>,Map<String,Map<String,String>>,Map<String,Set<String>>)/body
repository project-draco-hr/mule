{
  next:   for (  String path : jar.getResources().keySet()) {
    if (path.startsWith(prefix)) {
      String relativePath=path.substring(prefix.length());
      String pack=getPackage(relativePath);
      if (pack != null && !contained.containsKey(pack)) {
        if (!(pack.equals(".") || isMetaData(relativePath))) {
          Map<String,String> map=new LinkedHashMap<String,String>();
          contained.put(pack,map);
          Resource pinfo=jar.getResource(prefix + pack.replace('.','/') + "/packageinfo");
          if (pinfo != null) {
            InputStream in=pinfo.openInputStream();
            String version=parsePackageInfo(in);
            in.close();
            if (version != null)             map.put("version",version);
          }
        }
      }
      if (path.endsWith(".class")) {
        Resource resource=jar.getResource(path);
        Clazz clazz;
        try {
          InputStream in=resource.openInputStream();
          clazz=new Clazz(relativePath,in);
          in.close();
        }
 catch (        Throwable e) {
          error("Invalid class file: " + relativePath,e);
          e.printStackTrace();
          continue next;
        }
        String calculatedPath=clazz.getClassName() + ".class";
        if (!calculatedPath.equals(relativePath))         error("Class in different directory than declared. Path from class name is " + calculatedPath + " but the path in the jar is "+ relativePath+ " from "+ jar);
        classSpace.put(relativePath,clazz);
        referred.putAll(clazz.getReferred());
        Set<String> t=uses.get(pack);
        if (t == null)         uses.put(pack,t=new LinkedHashSet<String>());
        t.addAll(clazz.getReferred().keySet());
        t.remove(pack);
      }
    }
  }
}
