{
  if ("true".equalsIgnoreCase(getProperty(NOUSES)))   return;
  for (Iterator<String> i=exports.keySet().iterator(); i.hasNext(); ) {
    String packageName=i.next();
    setProperty(CURRENT_PACKAGE,packageName);
    try {
      Map<String,String> clause=exports.get(packageName);
      String override=clause.get(USES_DIRECTIVE);
      if (override == null)       override=USES_USES;
      Set<String> usedPackages=uses.get(packageName);
      if (usedPackages != null) {
        Set<String> sharedPackages=new HashSet<String>();
        sharedPackages.addAll(imports.keySet());
        sharedPackages.addAll(exports.keySet());
        usedPackages.retainAll(sharedPackages);
        usedPackages.remove(packageName);
        StringBuffer sb=new StringBuffer();
        String del="";
        for (Iterator<String> u=usedPackages.iterator(); u.hasNext(); ) {
          String usedPackage=u.next();
          if (!usedPackage.startsWith("java.")) {
            sb.append(del);
            sb.append(usedPackage);
            del=",";
          }
        }
        if (override.indexOf('$') >= 0) {
          setProperty(CURRENT_USES,sb.toString());
          override=getReplacer().process(override);
          unsetProperty(CURRENT_USES);
        }
 else         override=override.replaceAll(USES_USES,sb.toString()).trim();
        if (override.endsWith(","))         override=override.substring(0,override.length() - 1);
        if (override.startsWith(","))         override=override.substring(1);
        if (override.length() > 0) {
          clause.put("uses:",override);
        }
      }
    }
  finally {
      unsetProperty(CURRENT_PACKAGE);
    }
  }
}
