{
  Object requestBody;
  Object request=event.getMessage().getPayload();
  String tempUrl=serviceUrl;
  MuleMessage result;
  if (muleContext.getExpressionManager().isExpression(serviceUrl)) {
    muleContext.getExpressionManager().validateExpression(serviceUrl);
    tempUrl=muleContext.getExpressionManager().parse(serviceUrl,event,true);
  }
  StringBuilder urlBuffer=new StringBuilder(tempUrl);
  if (GET.equalsIgnoreCase(this.httpMethod) || DELETE.equalsIgnoreCase(this.httpMethod)) {
    requestBody=NullPayload.getInstance();
    setRESTParams(urlBuffer,event.getMessage(),request,requiredParams,false,null);
    setRESTParams(urlBuffer,event.getMessage(),request,optionalParams,true,null);
  }
 else {
    if (event.getMessage().getOutboundProperty(HttpConstants.HEADER_CONTENT_TYPE) == null) {
      event.getMessage().setOutboundProperty(HttpConstants.HEADER_CONTENT_TYPE,CONTENT_TYPE_VALUE);
    }
    StringBuilder requestBodyBuffer=new StringBuilder();
    setRESTParams(urlBuffer,event.getMessage(),request,requiredParams,false,requestBodyBuffer);
    setRESTParams(urlBuffer,event.getMessage(),request,optionalParams,true,requestBodyBuffer);
    requestBody=requestBodyBuffer.toString();
  }
  tempUrl=urlBuffer.toString();
  logger.info("Invoking REST service: " + tempUrl);
  event.getMessage().setOutboundProperty(HttpConnector.HTTP_METHOD_PROPERTY,httpMethod);
  EndpointBuilder endpointBuilder=new EndpointURIEndpointBuilder(tempUrl,muleContext);
  endpointBuilder.setExchangePattern(MessageExchangePattern.REQUEST_RESPONSE);
  OutboundEndpoint outboundEndpoint=endpointBuilder.buildOutboundEndpoint();
  MuleEventContext eventContext=new DefaultMuleEventContext(event);
  result=eventContext.sendEvent(new DefaultMuleMessage(requestBody,event.getMessage(),muleContext),outboundEndpoint);
  if (isErrorPayload(result)) {
    handleException(new RestServiceException(CoreMessages.failedToInvokeRestService(tempUrl),event,this),result);
  }
  return result;
}
