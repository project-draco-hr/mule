{
  Object requestBody;
  Object request=event.transformMessage();
  String tempUrl=serviceUrl;
  MuleMessage result;
  if (muleContext.getExpressionManager().isValidExpression(serviceUrl)) {
    tempUrl=muleContext.getExpressionManager().parse(serviceUrl,event.getMessage(),true);
  }
  StringBuffer urlBuffer=new StringBuffer(tempUrl);
  if (GET.equalsIgnoreCase(this.httpMethod)) {
    requestBody=NullPayload.getInstance();
    setRESTParams(urlBuffer,event.getMessage(),request,requiredParams,false,null);
    setRESTParams(urlBuffer,event.getMessage(),request,optionalParams,true,null);
  }
 else {
    StringBuffer requestBodyBuffer=new StringBuffer();
    event.getMessage().setProperty(CONTENT_TYPE,CONTENT_TYPE_VALUE);
    setRESTParams(urlBuffer,event.getMessage(),request,requiredParams,false,requestBodyBuffer);
    setRESTParams(urlBuffer,event.getMessage(),request,optionalParams,true,requestBodyBuffer);
    requestBody=requestBodyBuffer.toString();
  }
  tempUrl=urlBuffer.toString();
  logger.info("Invoking REST service: " + tempUrl);
  event.getMessage().setProperty(HTTP_METHOD,httpMethod);
  result=RequestContext.getEventContext().sendEvent(new DefaultMuleMessage(requestBody,event.getMessage(),muleContext),tempUrl);
  if (isErrorPayload(result)) {
    handleException(new RestServiceException(CoreMessages.failedToInvokeRestService(tempUrl),result),result);
  }
  return result;
}
