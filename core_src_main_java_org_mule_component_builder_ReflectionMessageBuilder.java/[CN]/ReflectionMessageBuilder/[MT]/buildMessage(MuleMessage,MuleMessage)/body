{
  Object master=request.getPayload();
  Object property=response.getPayload();
  List methods=null;
  try {
    methods=ClassUtils.getSatisfiableMethods(master.getClass(),new Class[]{property.getClass()},true,false,ignoreMethods);
  }
 catch (  Exception e) {
    throw new MessageBuilderException(request,e);
  }
  if (methods.isEmpty()) {
    throw new MessageBuilderException(request,new NoSatisfiableMethodsException(master,new Class[]{property.getClass()}));
  }
 else   if (methods.size() > 1) {
    throw new MessageBuilderException(request,new TooManySatisfiableMethodsException(master,new String[]{property.getClass().getName()}));
  }
 else {
    Method m=(Method)methods.get(0);
    try {
      m.invoke(master,(property.getClass().isArray() ? (Object[])property : new Object[]{property}));
    }
 catch (    Exception e) {
      throw new MessageBuilderException(CoreMessages.failedToInvoke(m.getName() + " on " + master.getClass().getName()),request,e);
    }
  }
  return master;
}
