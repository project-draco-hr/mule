{
  super(CLASSPATH_EMPTY,parentCl);
  this.appName=appName;
  try {
    final String muleHome=System.getProperty(MuleProperties.MULE_HOME_DIRECTORY_PROPERTY);
    String configPath=String.format("%s/apps/%s",muleHome,appName);
    File parentFile=new File(configPath);
    File classesDir=new File(parentFile,PATH_CLASSES);
    addURL(classesDir.toURI().toURL());
    File libDir=new File(parentFile,PATH_LIBRARY);
    if (logger.isInfoEnabled()) {
      logger.info(String.format("[%s] Library directory: %s",appName,libDir));
    }
    if (libDir.exists() && libDir.canRead()) {
      @SuppressWarnings("unchecked") Collection<File> jars=FileUtils.listFiles(libDir,new String[]{"jar"},false);
      if (!jars.isEmpty() && logger.isInfoEnabled()) {
        StringBuilder sb=new StringBuilder();
        sb.append(String.format("[%s] Loading the following jars:%n",appName));
        sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
        for (        File jar : jars) {
          sb.append(jar.toURI().toURL()).append(SystemUtils.LINE_SEPARATOR);
        }
        sb.append("=============================").append(SystemUtils.LINE_SEPARATOR);
        logger.info(sb.toString());
      }
      for (      File jar : jars) {
        addURL(jar.toURI().toURL());
      }
    }
  }
 catch (  IOException e) {
    if (logger.isDebugEnabled()) {
      logger.debug(String.format("[%s]",appName),e);
    }
  }
}
