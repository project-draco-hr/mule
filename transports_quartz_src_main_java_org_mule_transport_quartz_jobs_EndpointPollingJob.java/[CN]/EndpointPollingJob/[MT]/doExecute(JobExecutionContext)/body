{
  final JobDataMap jobDataMap=jobExecutionContext.getJobDetail().getJobDataMap();
  String receiverKey=(String)jobDataMap.get(QuartzMessageReceiver.QUARTZ_RECEIVER_PROPERTY);
  if (receiverKey == null) {
    throw new JobExecutionException(QuartzMessages.receiverNotInJobDataMap().getMessage());
  }
  String connectorName=(String)jobDataMap.get(QuartzMessageReceiver.QUARTZ_CONNECTOR_PROPERTY);
  if (connectorName == null) {
    throw new JobExecutionException(QuartzMessages.connectorNotInJobDataMap().getMessage());
  }
  final QuartzConnector connector=(QuartzConnector)muleContext.getRegistry().lookupConnector(connectorName);
  if (connector == null) {
    throw new JobExecutionException(QuartzMessages.noConnectorFound(connectorName).getMessage());
  }
  final AbstractMessageReceiver receiver=(AbstractMessageReceiver)connector.lookupReceiver(receiverKey);
  if (receiver == null) {
    throw new JobExecutionException(QuartzMessages.noReceiverInConnector(receiverKey,connectorName).getMessage());
  }
  final EndpointPollingJobConfig jobConfig=(EndpointPollingJobConfig)jobDataMap.get(QuartzConnector.PROPERTY_JOB_CONFIG);
  if (jobConfig == null) {
    throw new JobExecutionException(QuartzMessages.missingJobDetail(QuartzConnector.PROPERTY_JOB_CONFIG).getMessage());
  }
  try {
    logger.debug("Attempting to receive event on: " + jobConfig.getEndpointRef());
    ProcessingTemplate<MuleEvent> processingTemplate;
    final AtomicBoolean pollGlobalEndpoint=new AtomicBoolean(false);
    InboundEndpoint endpoint=muleContext.getRegistry().lookupObject(jobConfig.getEndpointRef() + ".quartz-job");
    if (endpoint == null) {
      final EndpointBuilder epBuilder=muleContext.getRegistry().lookupEndpointBuilder(jobConfig.getEndpointRef());
      pollGlobalEndpoint.set(epBuilder != null);
      if (pollGlobalEndpoint.get()) {
        endpoint=epBuilder.buildInboundEndpoint();
        muleContext.getRegistry().registerObject(jobConfig.getEndpointRef() + ".quartz-job",endpoint);
        processingTemplate=TransactionalErrorHandlingProcessingTemplate.createMainProcessingTemplate(muleContext,endpoint.getTransactionConfig(),receiver.getFlowConstruct().getExceptionListener());
      }
 else {
        processingTemplate=TransactionalErrorHandlingProcessingTemplate.createMainProcessingTemplate(muleContext,new MuleTransactionConfig(),receiver.getFlowConstruct().getExceptionListener());
      }
    }
 else {
      processingTemplate=TransactionalErrorHandlingProcessingTemplate.createMainProcessingTemplate(muleContext,endpoint.getTransactionConfig(),receiver.getFlowConstruct().getExceptionListener());
    }
    final InboundEndpoint finalEndpoint=endpoint;
    ProcessingCallback<MuleEvent> cb=new ProcessingCallback<MuleEvent>(){
      public MuleEvent process() throws Exception {
        Transaction tx=TransactionCoordination.getInstance().getTransaction();
        if (tx != null) {
          tx.begin();
        }
        MuleMessage result=null;
        if (pollGlobalEndpoint.get()) {
          result=finalEndpoint.getConnector().request(finalEndpoint,jobConfig.getTimeout());
        }
 else {
          MuleClient client=new MuleClient(connector.getMuleContext());
          result=client.request(jobConfig.getEndpointRef(),jobConfig.getTimeout());
        }
        if (result != null) {
          if (logger.isDebugEnabled()) {
            logger.debug("Received event on: " + jobConfig.getEndpointRef());
          }
          if (pollGlobalEndpoint.get()) {
            result.applyTransformers(null,finalEndpoint.getTransformers());
          }
          result=(MuleMessage)((ThreadSafeAccess)result).newThreadCopy();
          result.addProperties(jobDataMap,PropertyScope.INVOCATION);
          receiver.routeMessage(result);
        }
        return null;
      }
    }
;
    processingTemplate.execute(cb);
  }
 catch (  RuntimeException rex) {
    throw rex;
  }
catch (  Exception e) {
    throw new JobExecutionException(e);
  }
}
