{
  Mock session=getMockSession();
  UMOEndpoint endpoint1=getTestEndpoint("Test1endpoint",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint1.setEndpointURI(new MuleEndpointURI("test://endpointUri.1"));
  endpoint1.setFilter(new PayloadTypeFilter(Apple.class));
  UMOEndpoint endpoint2=getTestEndpoint("Test2Endpoint",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint2.setEndpointURI(new MuleEndpointURI("test://endpointUri.2"));
  endpoint2.setFilter(new PayloadTypeFilter(Orange.class));
  UMOEndpoint endpoint3=getTestEndpoint("Test3Endpoint",UMOEndpoint.ENDPOINT_TYPE_SENDER);
  endpoint3.setEndpointURI(new MuleEndpointURI("test://endpointUri.3"));
  FilteringListMessageSplitter router=new FilteringListMessageSplitter();
  router.setFilter(new PayloadTypeFilter(List.class));
  router.addEndpoint(endpoint1);
  router.addEndpoint(endpoint2);
  router.addEndpoint(endpoint3);
  List payload=new ArrayList();
  payload.add(new Apple());
  payload.add(new Apple());
  payload.add(new Orange());
  payload.add(new String());
  UMOMessage message=new MuleMessage(payload,null);
  assertTrue(router.isMatch(message));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(Orange.class),C.eq(endpoint2)));
  session.expect("dispatchEvent",C.args(new PayloadConstraint(String.class),C.eq(endpoint3)));
  router.route(message,(UMOSession)session.proxy(),false);
  session.verify();
  message=new MuleMessage(payload,null);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Apple.class),C.eq(endpoint1)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(Orange.class),C.eq(endpoint2)),message);
  session.expectAndReturn("sendEvent",C.args(new PayloadConstraint(String.class),C.eq(endpoint3)),message);
  UMOMessage result=router.route(message,(UMOSession)session.proxy(),true);
  assertNotNull(result);
  assertEquals(message,result);
  session.verify();
}
