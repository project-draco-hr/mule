{
  if (element.getLocalName().equals("and-filter")) {
    return AndFilter.class;
  }
 else   if (element.getLocalName().equals("or-filter")) {
    return OrFilter.class;
  }
 else   if (element.getLocalName().equals("not-filter")) {
    return NotFilter.class;
  }
 else   if (element.getLocalName().equals("regex-filter")) {
    return RegExFilter.class;
  }
 else   if (element.getLocalName().equals("exception-type-filter")) {
    return ExceptionTypeFilter.class;
  }
 else   if (element.getLocalName().equals("message-property-filter")) {
    return MessagePropertyFilter.class;
  }
 else   if (element.getLocalName().equals("payload-type-filter")) {
    return PayloadTypeFilter.class;
  }
 else   if (element.getLocalName().equals("exception-type-filter")) {
    return ExceptionTypeFilter.class;
  }
 else   if (element.getLocalName().equals("wildcard-filter")) {
    return WildcardFilter.class;
  }
 else   if (element.getLocalName().equals("equals-filter")) {
    return EqualsFilter.class;
  }
 else   if (element.getLocalName().equals("custom-filter")) {
    try {
      String clazz=element.getAttribute("class");
      element.removeAttribute("class");
      if (clazz == null) {
        throw new IllegalArgumentException("attribute 'class' may not be empty");
      }
      return ClassUtils.loadClass(clazz,getClass());
    }
 catch (    ClassNotFoundException e) {
      throw new BeanCreationException("Failed to create custom Filter",e);
    }
  }
  return null;
}
