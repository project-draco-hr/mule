{
  ObjectToXml t1=createObject(ObjectToXml.class);
  t1.setAcceptMuleMessage(true);
  MuleMessage msg=new DefaultMuleMessage("test",muleContext);
  msg.setEncoding("UTF-8");
  msg.setCorrelationId("1234");
  msg.setProperty("number",Integer.valueOf(1),PropertyScope.INVOCATION);
  msg.setProperty("object",new Apple(),PropertyScope.OUTBOUND);
  msg.setProperty("string","hello",PropertyScope.OUTBOUND);
  String xml=(String)t1.transform(msg);
  assertNotNull(xml);
  XmlToObject t2=createObject(XmlToObject.class);
  Object result=t2.transform(xml);
  assertNotNull(result);
  assertTrue(result instanceof MuleMessage);
  msg=(MuleMessage)result;
  assertEquals("test",msg.getPayloadAsString());
  assertEquals(new Apple(),msg.getProperty("object",PropertyScope.OUTBOUND));
  assertEquals(new Apple(),msg.getProperty("oBjeCt",PropertyScope.OUTBOUND));
  assertNull(msg.getProperty("oBjeCt",PropertyScope.INBOUND));
  assertNull(msg.getProperty("oBjeCt",PropertyScope.INVOCATION));
  assertNull(msg.getProperty("oBjeCt",PropertyScope.SESSION));
  assertEquals("hello",msg.getOutboundProperty("string"));
  assertEquals("hello",msg.getOutboundProperty("String"));
  assertNull(msg.getProperty("string",PropertyScope.INBOUND));
  assertNull(msg.getProperty("string",PropertyScope.INVOCATION));
  assertNull(msg.getProperty("string",PropertyScope.SESSION));
  assertEquals(new Integer(1),msg.getProperty("number",PropertyScope.INVOCATION));
  assertEquals(new Integer(1),msg.getProperty("NUMBER",PropertyScope.INVOCATION));
  assertNull(msg.getProperty("number",PropertyScope.INBOUND));
  assertNull(msg.getProperty("number",PropertyScope.OUTBOUND));
  assertNull(msg.getProperty("number",PropertyScope.SESSION));
  assertEquals("1234",msg.getCorrelationId());
  assertEquals("UTF-8",msg.getEncoding());
  Set<String> keys=msg.getPropertyNames();
  assertEquals(5,keys.size());
  keys.remove(MuleProperties.MULE_CORRELATION_ID_PROPERTY);
  keys.remove(MuleProperties.MULE_ENCODING_PROPERTY);
  for (  String key : keys) {
    assertTrue(key.equals("number") || key.equals("string") || key.equals("object"));
    assertFalse(key.equals("NUMBER") || key.equals("STRING") || key.equals("OBJECT"));
  }
}
