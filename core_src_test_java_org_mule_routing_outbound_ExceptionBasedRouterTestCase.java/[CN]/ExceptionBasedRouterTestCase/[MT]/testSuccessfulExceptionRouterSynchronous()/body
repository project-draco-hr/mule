{
  DefaultOutboundRouterCollection messageRouter=new DefaultOutboundRouterCollection();
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  OutboundEndpoint endpoint1=muleContext.getEndpointFactory().getOutboundEndpoint("test://Dummy1?exchangePattern=request-response");
  OutboundEndpoint endpoint2=muleContext.getEndpointFactory().getOutboundEndpoint("test://Dummy2?exchangePattern=request-response");
  OutboundEndpoint endpoint3=muleContext.getEndpointFactory().getOutboundEndpoint("test://Dummy3?exchangePattern=request-response");
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  Mock mockendpoint3=RouterTestUtils.getMockEndpoint(endpoint3);
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.setMuleContext(muleContext);
  RegExFilter filter=new RegExFilter("(.*) event");
  router.setFilter(filter);
  List<MessageProcessor> endpoints=new ArrayList<MessageProcessor>();
  endpoints.add((OutboundEndpoint)mockendpoint1.proxy());
  endpoints.add((OutboundEndpoint)mockendpoint2.proxy());
  endpoints.add((OutboundEndpoint)mockendpoint3.proxy());
  router.setRoutes(endpoints);
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  MuleEvent event=new OutboundRoutingTestEvent(message,null,muleContext);
  mockendpoint1.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),event);
  MuleSession session=mock(MuleSession.class);
  MuleEvent result=router.route(new OutboundRoutingTestEvent(message,session,muleContext));
  assertNotNull(result);
  assertEquals(message,result.getMessage());
  mockendpoint1.verify();
}
