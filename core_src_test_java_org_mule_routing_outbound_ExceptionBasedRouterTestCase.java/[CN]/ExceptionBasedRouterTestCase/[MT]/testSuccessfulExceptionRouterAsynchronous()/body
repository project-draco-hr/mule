{
  Mock mockSession=MuleTestUtils.getMockSession();
  mockSession.matchAndReturn("getFlowConstruct",getTestService());
  DefaultOutboundRouterCollection messageRouter=new DefaultOutboundRouterCollection();
  messageRouter.setCatchAllStrategy(new LoggingCatchAllStrategy());
  OutboundEndpoint endpoint1=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint("test://Dummy1");
  OutboundEndpoint endpoint2=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint("test://Dummy2");
  OutboundEndpoint endpoint3=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint("test://Dummy3");
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.setMuleContext(muleContext);
  RegExFilter filter=new RegExFilter("(.*) event");
  router.setFilter(filter);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add(endpoint1);
  endpoints.add(endpoint2);
  endpoints.add(endpoint3);
  router.setEndpoints(endpoints);
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  mockSession.expect("sendEvent",C.args(new IsPayloadEqual(message),C.eq(endpoint1)));
  MuleMessage result=router.route(message,(MuleSession)mockSession.proxy());
  assertNull("Async call should've returned null.",result);
  mockSession.verify();
}
