{
  Mock mockSession=MuleTestUtils.getMockSession();
  mockSession.matchAndReturn("getFlowConstruct",getTestService());
  OutboundEndpoint endpoint1=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint("test://AlwaysFail");
  OutboundEndpoint endpoint2=muleContext.getRegistry().lookupEndpointFactory().getOutboundEndpoint("test://AlwaysFail");
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.setMuleContext(muleContext);
  RegExFilter filter=new RegExFilter("(.*) event");
  router.setFilter(filter);
  List<OutboundEndpoint> endpoints=new ArrayList<OutboundEndpoint>();
  endpoints.add((OutboundEndpoint)mockendpoint1.proxy());
  endpoints.add((OutboundEndpoint)mockendpoint2.proxy());
  router.setEndpoints(endpoints);
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  MuleException rex=new RoutingException(message,endpoint1);
  mockendpoint1.expectAndThrow("process",RouterTestUtils.getArgListCheckerMuleEvent(),rex);
  mockendpoint2.expectAndThrow("process",RouterTestUtils.getArgListCheckerMuleEvent(),rex);
  MuleSession session=(MuleSession)mockSession.proxy();
  MuleMessage result=null;
  try {
    result=router.route(new OutboundRoutingTestEvent(message,session));
    fail("Should have thrown exception as both endpoints would have failed");
  }
 catch (  CouldNotRouteOutboundMessageException e) {
  }
  assertNull("Async call should've returned null.",result);
  mockSession.verify();
  message=new DefaultMuleMessage("test event",muleContext);
}
