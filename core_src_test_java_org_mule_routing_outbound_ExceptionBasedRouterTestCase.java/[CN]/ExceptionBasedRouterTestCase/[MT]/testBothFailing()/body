{
  OutboundEndpoint endpoint1=muleContext.getEndpointFactory().getOutboundEndpoint("test://AlwaysFail");
  OutboundEndpoint mockendpoint1=RouterTestUtils.createMockEndpoint(endpoint1);
  OutboundEndpoint endpoint2=muleContext.getEndpointFactory().getOutboundEndpoint("test://AlwaysFail");
  OutboundEndpoint mockendpoint2=RouterTestUtils.createMockEndpoint(endpoint2);
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.setMuleContext(muleContext);
  RegExFilter filter=new RegExFilter("(.*) event");
  router.setFilter(filter);
  List<MessageProcessor> endpoints=new ArrayList<MessageProcessor>();
  endpoints.add(mockendpoint1);
  endpoints.add(mockendpoint2);
  router.setRoutes(endpoints);
  assertEquals(filter,router.getFilter());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  assertTrue(router.isMatch(message));
  MuleSession session=mock(MuleSession.class);
  MuleEvent eventToThrow=new DefaultMuleEvent(message,MessageExchangePattern.ONE_WAY,null,session);
  MuleException rex=new RoutingException(eventToThrow,endpoint1);
  when(mockendpoint1.process(any(MuleEvent.class))).thenAnswer(new MuleEventCheckAnswer(rex));
  when(mockendpoint2.process(any(MuleEvent.class))).thenAnswer(new MuleEventCheckAnswer(rex));
  MuleEvent result=null;
  try {
    result=router.route(new OutboundRoutingTestEvent(message,session,muleContext));
    fail("Should have thrown exception as both targets would have failed");
  }
 catch (  CouldNotRouteOutboundMessageException e) {
  }
  assertNull("Async call should've returned null.",result);
  message=new DefaultMuleMessage("test event",muleContext);
}
