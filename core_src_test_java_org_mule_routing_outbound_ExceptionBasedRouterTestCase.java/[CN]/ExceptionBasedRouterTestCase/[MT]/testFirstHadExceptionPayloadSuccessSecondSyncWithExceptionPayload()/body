{
  Mock mockSession=MuleTestUtils.getMockSession();
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("TestFailEndpoint","test://Failure");
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("TestSuccessEndpoint","test://Success");
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.addEndpoint(endpoint1);
  router.addEndpoint(endpoint2);
  MuleMessage message=new DefaultMuleMessage("test event");
  MuleMessage expectedResultMessage=new DefaultMuleMessage("Return event");
  assertTrue(router.isMatch(message));
  MuleMessage exPayloadMessage=new DefaultMuleMessage("there was a failure");
  exPayloadMessage.setExceptionPayload(new DefaultExceptionPayload(new RuntimeException()));
  final MuleSession session=(MuleSession)mockSession.proxy();
  mockSession.expectAndReturn("sendEvent",C.args(C.eq(message),C.eq(endpoint1)),exPayloadMessage);
  mockSession.expectAndReturn("sendEvent",C.args(C.eq(message),C.eq(endpoint2)),expectedResultMessage);
  MuleMessage actualResultMessage=router.route(message,session,true);
  mockSession.verify();
  assertEquals("Got an invalid return message.",expectedResultMessage,actualResultMessage);
}
