{
  Mock mockSession=MuleTestUtils.getMockSession();
  mockSession.matchAndReturn("getFlowConstruct",getTestService());
  OutboundEndpoint endpoint1=getTestOutboundEndpoint("TestFailEndpoint","test://Failure?exchange-pattern=request-response");
  OutboundEndpoint endpoint2=getTestOutboundEndpoint("TestSuccessEndpoint","test://Success?exchange-pattern=request-response");
  Mock mockendpoint1=RouterTestUtils.getMockEndpoint(endpoint1);
  Mock mockendpoint2=RouterTestUtils.getMockEndpoint(endpoint2);
  ExceptionBasedRouter router=new ExceptionBasedRouter();
  router.setMuleContext(muleContext);
  router.addRoute((OutboundEndpoint)mockendpoint1.proxy());
  router.addRoute((OutboundEndpoint)mockendpoint2.proxy());
  MuleMessage message=new DefaultMuleMessage("test event",muleContext);
  MuleMessage expectedResultMessage=new DefaultMuleMessage("Return event",muleContext);
  MuleEvent expectedResultEvent=new OutboundRoutingTestEvent(expectedResultMessage,null);
  assertTrue(router.isMatch(message));
  MuleMessage exPayloadMessage=new DefaultMuleMessage("there was a failure",muleContext);
  exPayloadMessage.setExceptionPayload(new DefaultExceptionPayload(new RuntimeException()));
  MuleEvent exPayloadMessageEvent=new OutboundRoutingTestEvent(exPayloadMessage,null);
  final MuleSession session=(MuleSession)mockSession.proxy();
  mockendpoint1.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),exPayloadMessageEvent);
  mockendpoint2.expectAndReturn("process",RouterTestUtils.getArgListCheckerMuleEvent(),expectedResultEvent);
  MuleEvent actualResult=router.route(new OutboundRoutingTestEvent(message,session));
  mockendpoint1.verify();
  mockendpoint2.verify();
  assertEquals("Got an invalid return message.",expectedResultMessage,actualResult.getMessage());
}
