{
  List<ComponentModel> bodyProcessors=operationExtension.getMessageProcessorsComponentModels();
  String configRefName=operationRefModel.getParameters().get(MODULE_OPERATION_CONFIG_REF);
  ComponentModel.Builder processorChainBuilder=new ComponentModel.Builder();
  processorChainBuilder.setIdentifier(new ComponentIdentifier.Builder().withNamespace("mule").withName("module-operation-chain").build());
  processorChainBuilder.addParameter("returnsVoid",Boolean.toString(operationExtension.returnsVoid()),false);
  Map<String,String> propertiesMap=extractProperties(operationRefModel,moduleExtension);
  Map<String,String> parametersMap=extractParameters(operationRefModel,operationExtension.getParameters());
  ComponentModel propertiesComponentModel=getParameterChild(propertiesMap,"module-operation-properties","module-operation-property-entry");
  ComponentModel parametersComponentModel=getParameterChild(parametersMap,"module-operation-parameters","module-operation-parameter-entry");
  processorChainBuilder.addChildComponentModel(propertiesComponentModel);
  processorChainBuilder.addChildComponentModel(parametersComponentModel);
  for (  ComponentModel bodyProcessor : bodyProcessors) {
    processorChainBuilder.addChildComponentModel(copyComponentModel(bodyProcessor,configRefName));
  }
  for (  Map.Entry<String,Object> customAttributeEntry : operationRefModel.getCustomAttributes().entrySet()) {
    processorChainBuilder.addCustomAttribute(customAttributeEntry.getKey(),customAttributeEntry.getValue());
  }
  ComponentModel processorChainModel=processorChainBuilder.build();
  for (  ComponentModel processoChainModelChild : processorChainModel.getInnerComponents()) {
    processoChainModelChild.setParent(processorChainModel);
  }
  return processorChainModel;
}
