{
  SerialisationPersistence sp=new SerialisationPersistence();
  BoundedChannel bc=new BoundedBuffer();
  sp.initialise(bc,"myName");
  Mock mockEvent=getMockEvent();
  Mock mockEndpoint=getMockEndpoint();
  Mock mockEndpointUri=getMockEndpointURI();
  Mock mockMessage=new Mock(UMOMessage.class,"umoMessage");
  Mock mockComponent=new Mock(UMOComponent.class,"umoComponent");
  Mock mockDescriptor=getMockDescriptor();
  UMOEvent event=(UMOEvent)mockEvent.proxy();
  UMOEndpoint endpoint=(UMOEndpoint)mockEndpoint.proxy();
  mockEvent.expectAndReturn("getEndpoint",endpoint);
  mockEvent.expectAndReturn("getEndpoint",endpoint);
  mockEvent.expectAndReturn("getId","myId");
  mockEvent.expectAndReturn("getId","myId");
  mockEvent.expectAndReturn("getId","myId");
  mockEvent.expectAndReturn("isSynchronous",true);
  mockEvent.expectAndReturn("isStopFurtherProcessing",true);
  mockEvent.expectAndReturn("getMessage",new MuleMessage("myMessage",null));
  mockEvent.expectAndReturn("getComponent",mockComponent.proxy());
  mockEvent.expectAndReturn("getTimeout",new Integer(1000));
  mockComponent.expectAndReturn("getDescriptor",mockDescriptor.proxy());
  mockDescriptor.expectAndReturn("getName","myComponent");
  mockEndpoint.expectAndReturn("getEndpointURI",mockEndpointUri.proxy());
  mockEndpoint.expectAndReturn("getEndpointURI",mockEndpointUri.proxy());
  mockEndpoint.expectAndReturn("getName","myEndpointName");
  mockEndpointUri.expectAndReturn("getAddress","myAddress");
  sp.store("myName",event);
  sp.remove("myName",event);
}
